[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    mainClassName \u003d \"seedu.happypills.HappyPills\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 2,
      "-": 39
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nyan Wun Paing | [Github](https://github.com/NyanWunPaing) | [Portfolio](docs/team/Nyan.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Janice| [Github](https://github.com/Janicetyy/tp) | [Portfolio](docs/team/janice.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yap Kesin | [Github](https://github.com/itskesin) | [Portfolio](docs/team/Kesin.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Siti Nadiah | [Github](https://github.com/sitinadiah25) | [Portfolio](docs/team/sitinadiah.md)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 1,
      "sitinadiah25": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "By: `CS2113T-T12-2` Since: `2020`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. [Introduction](#introduction)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. [Setting up](#setting-up)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. [Design](#design)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    3.1. Architecture"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "4. [Implementation](#implementation)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    4.1. User Prompting feature"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "          "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      - 4.1.1. Description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      - 4.1.2. Implementation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      - 4.1.3. Design Considerations"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    4.2. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "5. [Documentation](#documentation)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "6. [Testing](#testing)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "7. [DevOps](#devops)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Appendix A: Product Scope](#)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Appendix B: User Stories](#)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Appendix C: Non Functional Requirements](#)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Appendix E: Glossary](#)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Appendix F: Instructions for Manual Testing](#)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 3. Design "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Our product is targeted at users who:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   - has a need to record significant number of patients\u0027 information"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   - want to keep patients\u0027 information organised"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   - prefere desktop apps over other types"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   - can type fast"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   - prefer typing over mouse input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   - prefer CLI apps over GUI apps"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Value proposition: Note taking application built for doctors to manage notes faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "|v1.0|Doctor|add Patient\u0027s details|view their information in their subsequent visits.|"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "|v1.0|Doctor|have a quick overview of a list of all patients|check for their detailed information.|"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "|v1.0|Doctor|retrieve my patient\u0027s detailed information|check for his/her allergies and provide a more accurate diagnosis|"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "|v1.0|Doctor|edit a particular patient\u0027s information|the most up-to-date details in our patient records|"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. A user with above average typing speed should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. Should be able to hold up to 1000??? patients\u0027 information without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "4. Should be able to display large amount of inforamtion quickly. "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "*Mainstream OS*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for Manual Testing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 77,
      "-": 30
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "# HappyPills"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills is a note-taking application that allows doctors to take down notes using Command Line Interface (CLI). "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The application replaces all physical papers and is highly optimised for fast typing users."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "If you can type fast, HappyPills can help to manage patients’ records faster than traditional Graphical User Interface (GUI) applications. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "All notes are neatly organised in HappyPills so that no information of the patients will be missing. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Say goodbye to messy desks, illegible handwriting, time-consuming handwritten notes with HappyPills!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [Features](#features)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [Usage](#usage)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Installation**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Ensure that you have `Java 11` or later installed in your computer "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. Click [here](link to be added later?) to download the HappyPills JAR File"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**For Window users**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Open Command Prompt in the directory where the JAR file is located."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. Run the command `java -jar happypills.jar`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Command | Description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`help [command]` | Display a help message with all commands or specific commands with usage examples"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`list` | Display all the Patients in alphabetical order"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ccode\u003eadd /ic\\[NRIC] /n\\[NAME] \u003cbr\u003e/p\\[PHONE_NUMBER] /d\\[DOB] \u003cbr\u003e/b\\[BLOOD_TYPE];\u003c/code\u003e | Add a new patient with the specified details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`get [nric]` | Retrieve details of the patient with the specified NRIC"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ccode\u003eedit NRIC \\[Options]\\[editedInput];\u003c/code\u003e \u003cbr\u003e \u003ccode\u003eOptions: \u003c/Code\u003e \u003cbr\u003e \u003ccode\u003e -p edit phone number\u003c/code\u003e\u003cbr\u003e \u003ccode\u003e -a edit allergies\u003c/code\u003e \u003cbr\u003e \u003ccode\u003e -r edit remarks\u003c/code\u003e| Edit information of the patient with the specified NRIC"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`delete [nric]` | Deletes a patient with the specified NRIC"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`exit` | Saves the data to a text file and exits the program"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### help"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Display a help message with all commands or specific commands with usage examples"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "*For general help*  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "help"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e     \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e      HappyPills Commands:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e        add /ic[NRIC] /n[NAME] /p[PHONE_NUMBER] /d[DOB] /b[BLOOD_TYPE]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e        add /a[ALLERGIES]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e        add /r[REMARKS]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e        list "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e        get [NRIC]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e        edit [OPTIONS][EDITED_INPUT]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e           -p edit phone number"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e           -a edit allergies"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e           -r edit remarks"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e        delete NRIC"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e        help"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e        exit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e        For more detailed command instructions, enter help [COMMAND]."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e      \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "*For specific help*  "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "help [Command]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`help get`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e     \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e     To retrieve a patient\u0027s information, run the following command:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e     Note: patient details are within the parenthesis [ ]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e       get [NRIC]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e     Example:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e       get S9999999Z"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e     The command above will display information regarding the patient with NRIC S9999999Z."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e     \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### List"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Display all the Patients in alphabetical order"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e         \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e         Alice | S8888888A "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e         Bob | S9999999Z   "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e         \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d    "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Add"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Add a new patient with the specified parameters. User can also add allergies or remarks to existing users."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "*To add a new user*   "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add /ic[NRIC] /n[NAME] /p[PHONE_NUMBER] /d[DOB] /b[BLOOD_TYPE]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `add /icS9999999Z /nBob /p999 /d12-11-98 /bA+`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "*To add allergies or remarks to existing user*   "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add /ic[NRIC] /a[ALLERGIES]   "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add /ic[NRIC] /r[REMARKS]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `add /icS9999999Z /aSchool`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `add /icS9999999Z /rHad contact with COVID-19 Case200`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Get"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Retrieve details of the patient with the specified NRIC"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`get [nric]`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `get S9999999Z`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e         Here are the patient\u0027s details:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e             Name : Bob"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e             NRIC : S9999999Z"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e             Phone Number : 999"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e             DOB : 12-11-98"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e             Blood Type : A+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e             Allergies : School"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e             Remarks : Had contact with COVID-19 Case200"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e         \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Edit"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit information of the patient with the specified NRIC"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itskesin"
        },
        "content": "edit [nric] [options][editedInput]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Options:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    -p edit phone number"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    -a edit allergies"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    -r edit remarks"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\t"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Example:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Delete"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Display all the Patients in alphabetical order"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itskesin"
        },
        "content": "delete [nric]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Example: "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`delete S1234567A`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Exit"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Saves the data to a text file and exits the program"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itskesin"
        },
        "content": "exit"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itskesin"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Well, write the User Guide in active voice anyway."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "{Give a \u0027cheat sheet\u0027 of commands here}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* Add to-do `todo n/TODO_NAME d/DEADLINE`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* [Developer Guide](UserGuide.md)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "itskesin": 163,
      "-": 16
    }
  },
  {
    "path": "docs/team/Nyan.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "# Nyan - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 6
    }
  },
  {
    "path": "docs/team/janice.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# Janice - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 6
    }
  },
  {
    "path": "docs/team/sitinadiah.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#Siti Nadiah "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "##Contact: e0318697@u.nus.edu "
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 2
    }
  },
  {
    "path": "src/main/java/seedu/happypills/HappyPills.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class HappyPills {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private PatientList patients;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private PatientMap tests;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static final String DATA_FILEPATH \u003d \"data/data.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Sets up the required objects, loads up the data from the storage file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public HappyPills() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        ui \u003d new TextUi();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        //patients \u003d new PatientList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"loading patient data from file.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            patients \u003d Storage.loadFromFile(DATA_FILEPATH);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"No patient data file was found.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            patients \u003d new PatientList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            tests \u003d new PatientMap();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Sets up the logging configuration for the main program."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void logSetup() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        ch.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param args I dont know."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        new HappyPills().run();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        logSetup();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"going to start processing\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String fullCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                String message \u003d c.execute(tests);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                if (!message.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                    System.out.println(message);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } catch (HappyPillsException hpe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                System.out.println(hpe.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(hpe.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"end of processing\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 44,
      "Janicetyy": 32,
      "sitinadiah25": 2,
      "itskesin": 15
    }
  },
  {
    "path": "src/main/java/seedu/happypills/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.data.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected int phoneNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String dateOfBirth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String bloodType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String allergies;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String remarks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for AddCommand Class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new AddCommand Object with the information provided."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param name        Contains the name of the patient."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric        Contains the nric of the patient."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param phoneNumber Contains the phone number of the patient."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param dateOfBirth Contains the date of birth of the patient."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param bloodType   Contains the blood type of the patient."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param allergies   Contains any allergies the patient has."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param remarks     Contains any remarks for the patient."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public AddCommand(String name, String nric, int phoneNumber, String dateOfBirth,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                      String bloodType, String allergies, String remarks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        logger.log(logLevel, \"patient is add\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Adds a new task to the list with the information provided by calling."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * {} (or) {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * (or) {} as require"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients) throws HappyPillsException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        patients.add(new Patient(name, nric, phoneNumber, dateOfBirth, bloodType, allergies, remarks));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        message \u003d TextUi.getPatient(patients.get(nric));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        logger.log(logLevel, \"end of addCommand\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 45,
      "Janicetyy": 12,
      "sitinadiah25": 2,
      "itskesin": 5
    }
  },
  {
    "path": "src/main/java/seedu/happypills/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.exception.HappyPillsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Used for execution of commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Contains both the information related to user commands and methods to execute them."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Implementation is done on child classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Contain boolean to check for exit condition."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Constructor for Command Class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Set isExit to false as default"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Executes the command based on the information provided by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If issues are found during execution of command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients) throws HappyPillsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns exit condition."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return isExit Contains information that allow the program to exit."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 40,
      "Janicetyy": 1,
      "itskesin": 4
    }
  },
  {
    "path": "src/main/java/seedu/happypills/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import org.w3c.dom.Text;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public DeleteCommand(String nric) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Retrieve the patient from the NRIC of the Delete command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private Patient findPatient(PatientList patients) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        for (Patient patient : patients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (patient.getNric().equalsIgnoreCase(nric)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                logger.log(logLevel, \"patient to be deleted is found\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return patient;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Retrieve the patient\u0027s confirmation."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return y to confirm deletion, n to stop deletion."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getPatientConfirmation() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String confirm \u003d in.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return confirm;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Remove the patient from the patient list in the program."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient to be deleted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients The patient list within the program."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return Message to inform the user that the patient has been deleted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private String deletePatient(Patient patient, PatientMap patients) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patients.remove(nric);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d TextUi.deletePatient(patient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return TextUi.prependDivider(message);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Run the delete command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The message to confirm deletion of patient or to confirm that the patient has not be deleted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException Throws an exception if patient does not exist."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients) throws HappyPillsException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            Patient patient \u003d patients.get(nric);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            TextUi.printDeleteConfirmation(patient);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String message \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String confirm \u003d getPatientConfirmation();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            boolean isConfirmed \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            while (!isConfirmed) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                if (confirm.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                    message \u003d deletePatient(patient, patients);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    isConfirmed \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    logger.log(logLevel, \"patient is deleted\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                } else if (confirm.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    message \u003d TextUi.printNotDeleted();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    isConfirmed \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    logger.log(logLevel, \"patient is not deleted\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                    TextUi.printDeleteConfirmationAgain(patient);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    confirm \u003d getPatientConfirmation();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            assert isConfirmed : \"Delete is not confirmed.\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.appendDivider(message);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(\"    Patient does not exist. Please try again.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 86,
      "itskesin": 14
    }
  },
  {
    "path": "src/main/java/seedu/happypills/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.data.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String newContent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for EditCommand Class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * It creates a new EditCommand Object with the information provided."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param nric Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param newContent Contains the string that the attribute is to be updated to."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public EditCommand(String nric, String newContent) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.newContent \u003d newContent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Retrieve the patient from the NRIC of the Edit command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            logger.log(logLevel, \"patient to be edited is found\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the phone number of the patient."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose phone number is to be edited."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new phone number."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editPhone(Patient patient, String content) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setPhoneNumber(Integer.parseInt(content));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d TextUi.printEditSuccess(patient);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the allergies of the patient."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose allergies is to be edited."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s updated allergies."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editAllergies(Patient patient, String content) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setAllergies(content);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d TextUi.printEditSuccess(patient);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the remarks of the patient."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose remarks is to be edited."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new remarks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editRemarks(Patient patient, String content) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setRemarks(content);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d TextUi.printEditSuccess(patient);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Adds a new task to the list with the information provided by calling."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * {} (or) {}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * (or) {} as require"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException Throws an exception if the edit field is not valid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients) throws HappyPillsException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (newContent.length() \u003c 2) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(\"    Content is invalid. Please try again\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assert newContent.length() \u003e\u003d 2 : \"Length of content has to be more than 2 characters.\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String field \u003d newContent.substring(0,2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String content \u003d newContent.substring(2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Patient editPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (editPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(\"    Patient not found. Please try again.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assert editPatient !\u003d null : \"Patient is not in PatientList\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (field.equals(\"/p\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            output \u003d editPhone(editPatient, content);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (field.equals(\"/r\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            output \u003d editRemarks(editPatient, content);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (field.equals(\"/a\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            output \u003d editAllergies(editPatient, content);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(\"    Please try again. To learn more about the Edit command, \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"\\n    enter \\\"help edit\\\"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assert output.length() \u003e 0 : \"output message is invalid\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 108,
      "itskesin": 8
    }
  },
  {
    "path": "src/main/java/seedu/happypills/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Adds a new task to the list with the information provided by calling."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * {} (or) {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * (or) {} as require"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        TextUi.printExit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 21,
      "itskesin": 4
    }
  },
  {
    "path": "src/main/java/seedu/happypills/commands/GetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.data.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class GetCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for RetrieveCommand Class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new RetrieveCommand Object with the information provided."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientNric        Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public GetCommand(String patientNric) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return TextUi.getPatientSuccessMessage(patients.get(patientNric));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return TextUi.patientNotExist(patientNric);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 22,
      "sitinadiah25": 3,
      "itskesin": 8
    }
  },
  {
    "path": "src/main/java/seedu/happypills/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Displays full help instructions for every command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public HelpCommand(String command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Return help command instructions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return message The command instructions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (command.equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.getHelp();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (command.equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.printAddHelp();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (command.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.printListHelp();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (command.equalsIgnoreCase(\"get\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.printGetHelp();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (command.equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.printEditHelp();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (command.equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.printDeleteHelp();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (command.equalsIgnoreCase(\"help\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.printHelpHelp();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (command.equalsIgnoreCase(\"exit\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.printExitHelp();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.printIncorrectCommand(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 31,
      "itskesin": 15
    }
  },
  {
    "path": "src/main/java/seedu/happypills/commands/IncorrectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Represents an incorrect command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public IncorrectCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 19,
      "itskesin": 2
    }
  },
  {
    "path": "src/main/java/seedu/happypills/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Lists all patients to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            message \u003d TextUi.getEmptyList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.log(logLevel, \"no patient information is in list\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assert !patients.isEmpty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            message \u003d TextUi.getList(patients);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.log(logLevel, \"retrieve patient\u0027s information\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 32
    }
  },
  {
    "path": "src/main/java/seedu/happypills/data/Patient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * It also functions as base class from which specialised tasks are inherited from."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Stores the description of the patient."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected int phoneNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String dateOfBirth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String bloodType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String allergies \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String remarks \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for Task Class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new task with the description provided by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It also sets isDone to false as it is a newly created task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param name          Name of the patient."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric          NRIC of the patient."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param phoneNumber   Phone number of the patient."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param dateOfBirth   Date of birth of the patient."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param bloodType     Blood type of the patient."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param allergies     Allergies the patient may have."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param remarks       Remarks for the patient."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public Patient(String name, String nric, int phoneNumber, String dateOfBirth,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                   String bloodType, String allergies, String remarks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the status of the task in form of an icon."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * \"\\u2713\" is returned to denote that the task is complete."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * \"\\u2718\" is returned to denote that the task is incomplete."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return statusIcon Represents the current status of the task as described above."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the nric of the patient."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return nric Represents the nric of the patient."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.nric;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the phone number of the patient."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return phoneNumber Represents the phone number of the patient."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public int getPhoneNumber() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.phoneNumber;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the date of birth of the patient."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return phoneNumber Represents the date of birth of the patient."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getDateOfBirth() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.dateOfBirth;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the blood type of the patient."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return phoneNumber Represents the blood type of the patient."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getBloodType() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.bloodType;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the allergies of the patient."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return allergies Represents the allergies of the patient."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getAllergies() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.allergies;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the remarks of the patient."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return remarks Represents the remarks of the patient."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.remarks;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String text \u003d \"        Name : \" + this.name + \"\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        NRIC : \" + this.nric + \"\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Phone Number : \" + this.phoneNumber + \"\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        DOB : \" + this.dateOfBirth + \"\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Blood Type : \" + this.bloodType + \"\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Allergies :\" + this.allergies + \"\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Remarks :\" + this.remarks + \"\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setPhoneNumber(int phoneNumber) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setAllergies(String allergies) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Create a string with all the patient\u0027s data for storage to a text file."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Each variable is separated with | as a divider."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted string with patient\u0027s data."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String text \u003d this.name + \"|\" + this.nric + \"|\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + this.phoneNumber + \"|\" + this.dateOfBirth + \"|\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + this.bloodType + \"|\" + this.allergies + \"|\" + this.remarks;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 107,
      "Janicetyy": 26,
      "sitinadiah25": 12
    }
  },
  {
    "path": "src/main/java/seedu/happypills/data/PatientList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class PatientList extends ArrayList\u003cPatient\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Stores all the tasks provided."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private ArrayList\u003cPatient\u003e patients;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Constructor for TaskList Class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * It creates a new TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public PatientList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.patients \u003d new ArrayList\u003cPatient\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Instructs {} to list the tasks with the search keyword"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * if the correct format is used."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param patients Current list of tasks.."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param keyword  The word used for search."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true of the keyword is found, false otherwise."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public boolean findKeyword(String keyword, PatientList patients) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (Patient patient : patients) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (patient.getName().contains(keyword)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 34,
      "Janicetyy": 1
    }
  },
  {
    "path": "src/main/java/seedu/happypills/data/PatientMap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.exception.HappyPillsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class PatientMap {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private final Map\u003cString, Patient\u003e argMultimap \u003d new HashMap\u003cString, Patient\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Associates the specified argument value with key in this map."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patient  Patient\u0027s details"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void add(Patient patient) throws HappyPillsException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!argMultimap.containsKey(patient.nric)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            argMultimap.put(patient.nric, patient);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(\"    Patient is already in the list. Please use help command.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public Patient get(String nric) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.get(nric);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public boolean containsKey(String patientNric) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.containsKey(patientNric);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.isEmpty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public Iterable\u003c? extends Map.Entry\u003e entrySet() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.entrySet();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void remove(String nric) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        argMultimap.remove(nric);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 48
    }
  },
  {
    "path": "src/main/java/seedu/happypills/exception/HappyPillsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class HappyPillsException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Updates Exception message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param message Contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public HappyPillsException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 14
    }
  },
  {
    "path": "src/main/java/seedu/happypills/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.commands.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.commands.EditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.commands.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.commands.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.commands.GetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.exception.HappyPillsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param fullCommand Full user input string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return the command Based on the user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException Errors base on invalid input or insufficient input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static Command parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] userCommand \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (userCommand.length \u003d\u003d 1 || userCommand[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(\"    Patient\u0027s detail is empty.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return parseAddCommand(userCommand[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"help\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (userCommand.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return new HelpCommand(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (userCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return new HelpCommand(userCommand[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(\"    \" + userCommand[1] + \" command does not exist. Please try again.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"get\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (userCommand.length \u003d\u003d 1 || userCommand[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                throw new HappyPillsException(\"    NRIC of the patient not provided\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new GetCommand(userCommand[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String[] edit \u003d fullCommand.split(\" \", 3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (edit.length \u003c 3) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(\"    Please input your patient\u0027s details correctly.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new EditCommand(edit[1], edit[2]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"exit\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new DeleteCommand(userCommand[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(\"    Invalid Command.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static Command parseAddCommand(String content) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] details \u003d content.substring(1).split(\" /\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] parseInput \u003d {\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"};"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (String detail : details) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (detail.startsWith(\"ic\") \u0026\u0026 parseInput[0].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[0] +\u003d detail.substring(2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(\"n\") \u0026\u0026 parseInput[1].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[1] +\u003d detail.substring(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(\"p\") \u0026\u0026 parseInput[2].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[2] +\u003d detail.substring(1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(\"d\") \u0026\u0026 parseInput[3].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[3] +\u003d detail.substring(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(\"b\") \u0026\u0026 parseInput[4].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[4] +\u003d detail.substring(1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(\"a\") \u0026\u0026 parseInput[5].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[5] +\u003d detail.substring(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(\"r\") \u0026\u0026 parseInput[6].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[6] +\u003d detail.substring(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                System.out.println(\":P\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        while (parseInput[0].equalsIgnoreCase(\"\") || parseInput[1].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                || parseInput[2].equalsIgnoreCase(\"\") || parseInput[3].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                || !isInteger(parseInput[2].trim())) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(\"Please input your missing detail as listed below\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (parseInput[0].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                System.out.println(\"/ic[NRIC]\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (parseInput[1].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                System.out.println(\"/n[NAME]\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (parseInput[2].equalsIgnoreCase(\"\") || !isInteger(parseInput[2].trim())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                System.out.println(\"/p[PHONE] only number\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (parseInput[3].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                System.out.println(\"/d[DOB]\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String input \u003d promptUser().trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (input.equalsIgnoreCase(\"clear\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                return new IncorrectCommand(\"stop\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String[] updates \u003d input.substring(1).split(\" /\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            for (String update : updates) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                if (update.trim().startsWith(\"ic\") \u0026\u0026 parseInput[0].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    parseInput[0] \u003d update.trim().substring(2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                } else if (update.trim().startsWith(\"n\") \u0026\u0026 parseInput[1].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    parseInput[1] \u003d update.trim().substring(1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                } else if (update.trim().startsWith(\"p\") \u0026\u0026 (parseInput[2].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                        || !isInteger(parseInput[2].trim()))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    parseInput[2] \u003d update.trim().substring(1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                } else if (update.trim().startsWith(\"d\") \u0026\u0026 parseInput[3].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    parseInput[3] \u003d update.trim().substring(1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new AddCommand(parseInput[0].trim(), parseInput[1].trim(), Integer.parseInt(parseInput[2].trim()),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[3], parseInput[4], parseInput[5], parseInput[6]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static String promptUser() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String reInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return reInput;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Check if the String can be converted to Integer."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static boolean isInteger(String input) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 112,
      "Janicetyy": 3,
      "sitinadiah25": 32,
      "itskesin": 1
    }
  },
  {
    "path": "src/main/java/seedu/happypills/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.data.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " * A class that manages read and write operations to file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Save individual patient data as strings to file. Creates file if it does not exist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to save to, requires directory/file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param dataString  single patient data as string to be saved to file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws IOException if unable to save to file, possibly due to interruptions."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void addStringToFile(String filePath, String dataString) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File d \u003d new File(filePath.substring(0, filePath.lastIndexOf(\u0027/\u0027)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!d.exists()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            d.mkdir();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.write(dataString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Read and send file data to parse line by line as string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of historical patients patient list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to read from."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return patientList of all patients found in the file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws FileNotFoundException if the file specified by directory/filename does not exist."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static PatientList loadFromFile(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        PatientList storedPatients \u003d new PatientList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String stringInput \u003d s.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            parseFileContent(stringInput, storedPatients);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return storedPatients;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * convert a single line data into values of a patients and add it back to the provided patientList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param savedString a single string with all the data required for a patient."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param storedPatients a list which the patient details retrieved should be added into."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static void parseFileContent(String savedString, PatientList storedPatients) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String[] dataString \u003d savedString.split(\"[|]\", 7);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient tempPatient \u003d new Patient(dataString[0], dataString[1],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Integer.parseInt(dataString[2]), dataString[3], dataString[4],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                dataString[5], dataString[6]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        storedPatients.add(tempPatient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 73
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.data.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Shows a list of patients\u0027 name and their NRIC to the user, formatted as an indexed list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients A patient list with all existing patients"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a message to be displayed to user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static String getList(PatientMap patients) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        for (Map.Entry patient : patients.entrySet()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String nric \u003d (String)patient.getKey();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            Patient p \u003d (Patient)patient.getValue();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String name \u003d p.getName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            message +\u003d \"    \" + name + \" | \" + nric + \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        message +\u003d DIVIDER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Generates and prints the list of commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a message to be displayed to user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static String getHelp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String helpMessage \u003d \"    HappyPills Commands:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"      add /ic[NRIC] /n[NAME] /p[PHONE_NUMBER] /d[DOB] /b[BLOOD_TYPE]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"      list\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"      get [NRIC]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"      edit [NRIC] /p[PHONE_NUMBER] or /a[ALLERGIES] or /r[REMARKS]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"      delete [NRIC]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"      help\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      exit\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      For more detailed command instructions, enter help [COMMAND].\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        helpMessage +\u003d DIVIDER;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return helpMessage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Displays empty list message when there are no patients in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a message to be displayed to user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static String getEmptyList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String emptyListMessage \u003d \"    There are no patients in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return emptyListMessage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void printPatient(Patient patient) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(\"    Got it! I\u0027ve added this patient:\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(patient + DIVIDER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format a get patient success message for user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here are the patient\u0027s details:\\n\" + patient + DIVIDER;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Generates and prints the welcome message upon the start of the application."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String logo \u003d \"\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \" __   __  _______  _______  _______  __   __  _______  ___   ___      ___      _______\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|  | |  ||   _   ||       ||       ||  | |  ||       ||   | |   |    |   |    |       |\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|  |_|  ||  |_|  ||    _  ||    _  ||  |_|  ||    _  ||   | |   |    |   |    |  _____|\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|       ||       ||   |_| ||   |_| ||       ||   |_| ||   | |   |    |   |    | |_____\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"|       ||       ||    ___||    ___||_     _||    ___||   | |   |___ |   |___ |_____  |\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"|   _   ||   _   ||   |    |   |      |   |  |   |    |   | |       ||       | _____| |\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|__| |__||__| |__||___|    |___|      |___|  |___|    |___| |_______||_______||_______|\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(\"Hello from\" + logo);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(\"What can I do for you today, doctor?\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format an add patient success message for user verification."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, patient details and a divider."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient patient object added to patientList"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a string message to be displayed to the user for successful addCommand executed"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static String getPatient(Patient patient) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        message \u003d \"    Got it! I\u0027ve added this patient:\\n\" + patient + DIVIDER;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Displays confirmation message for deleting patients."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient to be deleted."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static void printDeleteConfirmation(Patient patient) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(\"    Are you sure you want to delete this patient:\\n      \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + patient.getName()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \" || \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + patient.getNric()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"\\n                                                   (Y/N)?\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + DIVIDER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Displays confirmation message for deleting patients."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient to be deleted."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static void printDeleteConfirmationAgain(Patient patient) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(\"    Please try again.\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    Are you sure you want to delete this patient:\\n      \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + patient.getName()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \" || \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + patient.getNric()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"\\n                                                   (Y/N)?\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + DIVIDER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Displays message that patient is not deleted."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return display message."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String printNotDeleted() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return DIVIDER + \"\\n    Patient is not deleted.\\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String printIncorrectCommand(String command) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return \"    The command \\\"\" + command + \"\\\" does not exist. Please try again.\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Display updated patient\u0027s records."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose records were updated."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The patient\u0027s updated records."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String printEditSuccess(Patient patient) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"    Patient details have been updated as follows:\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + patient + DIVIDER;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Displays detailed Add command instruction."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The Add command instruction."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String printAddHelp() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"    To add a new patient into the program, use the following command:\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    Note: patient details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      add /ic[NRIC] /n[NAME] /p[PHONE_NUMBER] /d[DOB] /b[BLOOD_TYPE]\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    The command above adds a new patient.\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    To add allergies and remarks to the patient\u0027s details, use the following commands\\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      add /ic[NRIC] /a[ALLERGIES]\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      add /ic[NRIC] /r[REMARKS]\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    Example:\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      add /icS9999999Z /nJanice /p999 /d12-11-98 /bA+\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      add /icS9999999Z /aSchool\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      add /icS9999999Z /rHad contact with COVID-19 Case200\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Displays detailed List command instruction."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The List command instruction."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String printListHelp() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"    To retrieve a list of all the patients within the program,\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    run the following command:\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      list\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Displays detailed Get command instruction."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The Get command instruction."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String printGetHelp() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"    To retrieve a patient\u0027s information, run the following command:\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    Note: patient details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      get [NRIC]\\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    Example:\\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      get S9999999Z\\n\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    The command above will display information regarding the patient with NRIC S9999999Z.\\n\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Displays detailed Edit command instruction."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The Edit command instruction."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String printEditHelp() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"    To edit a patient\u0027s information, run the following command:\\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    Note: patient details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      edit [NRIC] /p[PHONE_NUMBER] to edit patient\u0027s phone number,\\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"      edit [NRIC] /a[ALLERGIES] to edit patient\u0027s allergies,\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"      edit [NRIC] /r[REMARKS] to edit patient\u0027s remarks\\\"\\n\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    Do note that editing the patient\u0027s records will overwrite any previous information.\\n\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    Adding of allergies or remarks can be done with the add command.\\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Displays detailed Delete command instruction."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The Delete command instruction."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String printDeleteHelp() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"    To delete a patient\u0027s records, run the following command:\\n\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    Note: patient details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      delete [NRIC]\\n\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    The user will be prompted to confirm if they would like to delete the patient\u0027s records.\\n\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    Do note that deletion cannot be undone.\\n\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Displays detailed Help command instruction."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The Help command instruction."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String printHelpHelp() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"    To understand more of the program\u0027s features, run the following command:\\n\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      help\\n\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    The above command will list down all the commands of the program.\\n\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    For more detailed usage of each command, enter help [COMMAND].\\n\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Displays detailed Exit command instruction."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The Exit command instruction."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String printExitHelp() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"    To exit the program, run the following command:\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      exit\\n\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    The above command will save the current patient records and terminate the program.\\n\""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Displays Exit message."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static void printExit() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(\"Thank you for using HappyPills! ^.^\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(\"See you again!\\n\" + DIVIDER);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Append the divider to the given message."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param s The message that requires the divider to be appended."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The message with the appended divider."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String appendDivider(String s) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return s + DIVIDER;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Prepend the divider to the given message."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param s The message that requires the divider to be prepended."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The message with the prepended divider."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String prependDivider(String s) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return DIVIDER + \"\\n\" + s;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Display message that a patient already exists in the program."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param nric NRIC of existing patient."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return display message."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String patientExists(String nric) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return \"    Patient \" + nric + \" already exists in the program.\";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String patientNotExist(String nric) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return \"The patient you are looking for cannot be found\";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Display message that patient is successfully deleted."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient Patient to be deleted."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return display message."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String deletePatient(Patient patient) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return \"    Patient \" + patient.getName() + \" || \" + patient.getNric()"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \" has been deleted successfully.\\n\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 25,
      "sitinadiah25": 214,
      "itskesin": 75
    }
  },
  {
    "path": "src/test/java/seedu/happypills/HappyPillsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "class HappyPillsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/happypills/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientMap patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        AddCommand testAddCommand \u003d new AddCommand("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"kesin\", \"S0618\", 912, \"22aug\", \"B-\",\"\", \"\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        );"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            testAddCommand.execute(patients);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(1,patients.size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 16,
      "sitinadiah25": 1,
      "itskesin": 9
    }
  },
  {
    "path": "src/test/java/seedu/happypills/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.data.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "class EditCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientMap patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        AddCommand testAddCommand \u003d new AddCommand("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"kesin\", \"S0618\", 912, \"22aug\", \"B-\",\"meat\", \"Strong\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        );"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            testAddCommand.execute(patients);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            // catch exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        EditCommand testEditCommand \u003d new EditCommand(\"S0618\", \"/rWeak\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            testEditCommand.execute(patients);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            // catch exception"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assertEquals(1, patients.size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(\"S0618\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            Patient patient \u003d patients.get(\"S0618\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            assertEquals(\"Weak\", patient.getRemarks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 27,
      "itskesin": 10
    }
  },
  {
    "path": "src/test/java/seedu/happypills/commands/GetCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class GetCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S123A\", 123,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \"01 Jan\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S456B\", 456,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \"01 Feb\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void getList_notInList_notFound() throws HappyPillsException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputNotInList \u003d \"The patient you are looking for cannot be found\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new GetCommand(\"S789C\").execute(newPatientMap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputNotInList, message);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void getList_InList_found() throws HappyPillsException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputInList \u003d \"    Here are the patient\u0027s details:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Name : P1\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        NRIC : S123A\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Phone Number : 123\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        DOB : 01 Jan\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Blood Type : O+\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Allergies :None\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Remarks :NIL\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new GetCommand(\"S123A\").execute(newPatientMap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputInList, message);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 45,
      "itskesin": 12
    }
  },
  {
    "path": "src/test/java/seedu/happypills/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S123A\", 123,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01 Jan\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S456B\", 456,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01 Feb\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_addCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"add\").execute(newPatientMap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(TextUi.printAddHelp(), message);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_listCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"list\").execute(newPatientMap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(TextUi.printListHelp(), message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_getCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"get\").execute(newPatientMap);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(TextUi.printGetHelp(), message);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_editCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"edit\").execute(newPatientMap);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(TextUi.printEditHelp(), message);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_deleteCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"delete\").execute(newPatientMap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(TextUi.printDeleteHelp(), message);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_helpCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"help\").execute(newPatientMap);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(TextUi.printHelpHelp(), message);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_exitCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"exit\").execute(newPatientMap);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(TextUi.printExitHelp(), message);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 78
    }
  },
  {
    "path": "src/test/java/seedu/happypills/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap filledPatientMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap emptyPatientMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static String expectedOutputFromEmptyList \u003d \"    There are no patients in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static String expectedOutputFromFilledList \u003d \"    Nyan | S1234Z\\n\" + \"    Nadiah | S9988N\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    Jan | S9888F\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        filledPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        emptyPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientOne \u003d new Patient(\"Nyan\", \"S1234Z\", 999,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"22 Aug\", \"O+\", \"Peanuts\", \"NIL\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"Nadiah\", \"S9988N\", 888,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"25 Sept\", \"A-\", \"School\", \"NIL\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientThree \u003d new Patient(\"Jan\", \"S9888F\", 912,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"10 March\", \"B\", \"School\", \"NIL\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            filledPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            filledPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            filledPatientMap.add(patientThree);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void printList_emptyList_emptyListMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new ListCommand().execute(emptyPatientMap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputFromEmptyList, message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void printList_filledList_filledListMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new ListCommand().execute(filledPatientMap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputFromFilledList, message);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 56
    }
  },
  {
    "path": "src/test/java/seedu/happypills/data/PatientTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class PatientTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Patient patientOne \u003d new Patient(\"Nyan\", \"S1234Z\", 999,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"22 Aug\", \"O+\", \"Peanuts\", \"NIL\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Patient patientTwo \u003d new Patient(\"Nadiah\", \"S9988N\", 888,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"25 Sept\", \"A-\", \"School\", \"NIL\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Patient patientThree \u003d new Patient(\"Jan\", \"S9888F\", 912,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"10 March\", \"B\", \"NIL\", \"NIL\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"Nyan\", patientOne.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getNric() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"S9988N\", patientTwo.getNric());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getPhoneNumber() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(912, patientThree.getPhoneNumber());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getDateOfBirth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"25 Sept\", patientTwo.getDateOfBirth());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getBloodType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"O+\", patientOne.getBloodType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getAllergies() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"NIL\", patientThree.getAllergies());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getRemarks() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"NIL\", patientThree.getRemarks());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String correctOutput \u003d \"        Name : Nyan\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        NRIC : S1234Z\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Phone Number : 999\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        DOB : 22 Aug\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Blood Type : O+\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Allergies : Peanuts\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Remarks : NIL\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(correctOutput, patientOne);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 65
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "help"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "help add"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add /ic s12345f /n kesin /p 999 /d 18june /b O+"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "edit s12345f /p918"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "edit /rVegetarian"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "get s12345f"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "delete s12345f n"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "delete s12345f y"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add /ic s98765f /n nyan /p 911 /d 22Aug /b O+"
      }
    ],
    "authorContributionMap": {
      "itskesin": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "itskesin": 7,
      "-": 19
    }
  }
]
