[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    mainClassName \u003d \"seedu.happypills.HappyPills\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 2,
      "-": 39
    }
  },
  {
    "path": "data/appointment.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "1|S123A|01/02/2020|23:59:00|reason1|F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "2|S123A|01/03/2020|13:00:00|Very sick hehe|F"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "3|S123A|01/01/2020|14:00:00|reason3|F"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3
    }
  },
  {
    "path": "data/patient.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "kesin|S0618|912|22/08/1998|B-|meat|Weak"
      }
    ],
    "authorContributionMap": {
      "itskesin": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nyan Wun Paing | [Github](https://github.com/NyanWunPaing) | [Portfolio](docs/team/Nyan.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Janice| [Github](https://github.com/Janicetyy/tp) | [Portfolio](docs/team/janice.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yap Kesin | [Github](https://github.com/itskesin) | [Portfolio](docs/team/Kesin.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Siti Nadiah | [Github](https://github.com/sitinadiah25) | [Portfolio](docs/team/sitinadiah.md)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 1,
      "sitinadiah25": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "By: `CS2113T-T12-2` Since: `March 2020`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![Supported Java versions](https://img.shields.io/badge/Java-11-blue.svg) "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![Supported OS](https://img.shields.io/badge/Supported%20OS-Windows|MacOS|Linux-yellow.svg) "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [1.1. Purpose](#11-purpose)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [1.2. Scope](#12-scope)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [2. Setting up](#2-setting-up)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [3. Design](#3-design)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.1. Architecture](#31-architecture)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.2. TextUi Component](#32-textui-component)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.3. Logic Component](#33-logic-component)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.4. Model Component](#34-model-component)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.5. Storage Component](#35-storage-component)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [4. Implementation](#4-implementation)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [4.1. Patient Details Feature](#41-patient-details-feature)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.1.1. Add Patient Details](#411-add-patient-details)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.1.2. Edit Patient Details](#412-edit-patient-details)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.1.3. Delete Patient Details](#413-delete-patient-details)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.1.4. List Patients](#414-list-patients)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.1.5. Retrieve Patient Details](#415-retrieve-patient-details)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [4.2. Patient Medical Records Feature](#42-patient-medical-records-feature)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [4.3. Appointment Scheduling Feature](#43-appointment-scheduling-feature)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.3.1. Add Appointment](#431-add-appointment)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.3.2. Edit Appointment](#432-edit-appointment)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.3.3. Delete Appointment](#433-delete-appointment)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.3.4. Mark Appointment as Done](#434-mark-appointment-as-done)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.3.5. List Appointments](#435-list-appointments)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.3.6. Find Appointments of Patient](#436-find-appointments-of-patient)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [4.4 Storage](#44-storage)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [4.5 Logging](#45-logging)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [5. Documentation](#5-documentation)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [6. Testing](#6-testing)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [7. Useful Links](#7-useful-links)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [Appendices](#appendices)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix A: Product Scope](#qppendix-a-product-scope)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix C: Non-functional Requirements](#appendix-c-non-functional-requirements)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix D: Glossary](#appendix-d-glossary)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix E: Instructions for Manual Testing](#appendix-e-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 1.1. Purpose"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This document contains the architecture and software design specifications for the application HappyPills."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 1.2. Scope"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This guide is mainly for developers, designers and software engineers that are working on and using HappyPills."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. Ensure that you have `Java 11` or later installed in your computer "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. Click [here](link to be added later?) to download the latest HappyPills JAR File"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 3. Design "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This section provides a high-level overview of HappyPills."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.1. Architecture"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Architecture diagram](images/ArchitectureDiagram.PNG \"Overview of the Application\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The **Architecture diagram** above explains the high-level design of HappyPills."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Main has one class called `HappyPills`.  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "It is responsible for:  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- At shut down: Shuts down the components."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `UI`: The UI of the App."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `Logic`: The command executor."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `Model`: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `Storage`: Reads data from and writes data to the text file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The architecture of HappyPills is broken down into seven main classes:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Ui`: This class handles the User Interface of the application."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Parser`: This class handles the parsing and handling of user commands."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Command`: This class handles all the commands the application has."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Storage`: This class reads and writes data to and from text files for future use."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Patient`: This class manages the data of data type Patient in memory. "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Appointment`: This class manages the data of data type Appointment in memory."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `MedicalRecords`: This class manages the data of data type MedicalRecord in memory."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.2. TextUi Component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The `TextUi` component: "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* Executes user commands using the command component."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* Listens for changes and outputs messages accordingly from the Command component."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.3. Logic Component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Logic Diagram](images/LogicDiagram.jpg)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The diagram above shows the logic flow of HappyPills."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. `HappyPills` uses the `Parser` to parse the commands given by the user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. This results in a `Command` object being returned which is then executed by `HappyPills`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. The command executed will cause a change in the program (e.g. Patient added into program). "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. The result of the command is then passed back to the `TextUi` to display the message. "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.4. Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Model Diagram](images/ModelDiagram.jpg)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.5. Storage Component"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The `Storage` class is called by the `HappyPills` class to handle the loading and saving of patient general details, "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "patient medical details and appointment schedule. "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The `loadPatientsFromFile()`, `loadRecordsfromFile()` and `loadAppointmentsFromFile()` methods are used to read saved data from"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "local files into the current session of HappyPills. "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The `writePatientsToFile()`, `writeRecordsToFile()` and `writeAppointmentsToFile()` methods write the current state of HappyPills"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "into local files by calling them in the `ExitCommand` class."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This section describes some of the details on how the features of the program has been implemented. This section has been broken "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "down into five main features: `Patient Details`, `Patient Medical Records`, `Appointment Scheduling`, `Storage` and `Logging`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 4.1. Patient Details Feature"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The commands introduced in this feature include : `add`, `edit`, `list`, `delete`, `get`. "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The commands are implemented with HashMap and use NRIC as key and the Patient class as value."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The patient list feature is facilitated by PatientMap class which implements the following operations: "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - PatientMap #add(Patient patient) — This command adds the patient object into the patient list using the patient’s nric as key."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - PatientMap #remove(String nric) — This command removes the patient object from the existing patient list. "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - PatientMap #hasKey(String nric) — This command checks whether the patient object resides in the existing patient list. "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "** Design Considerations ** "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "*Aspect: Data Structure of the Patient List* "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 1 (current choice): Hash Map"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: Allow faster lookup of patients’ information using the unique identifier (nric)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: Implementation is harder and may result in bugs if not implemented accurately."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 2: Array List"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: This would be easier to implement and retrieve the information."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: When a patient is deleted, all the patients in the patient list need to be checked. "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                This would cause the deletion to be very slow when there is a large number of patients in the list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.1.1 Add Patient Details"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user is able to add patients into the program to keep track of the patient\u0027s details. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The command: "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    add patient /ic S7777777Z /n Alice /p 98765432 /d 01/01/2000 /b B+ /a Peanuts"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will add a patient with `NRIC` as S7777777Z with the following attributes: "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* name: `Alice`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* phone number: `98765432`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* date of birth: `01/01/2000`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* blood type: `B+`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* allergies: `Peanuts`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The activity diagram below summarises the process of executing an `add` command."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Add Patient Sequence Diagram](images/AddPatientSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `add patient /ic S7777777Z /n Alice /p 98765432 /d 01/01/2000 /b B+ /a Peanuts`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `PatientParser#parse()`. "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `PatientParser#parse()` will call its own method `PatientParser#parseAddCommand()`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. `PatientParser#parseAddCommand()` will first validate the attributes and then create an object `AddPatientCommand` "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "if the attributes are valid. "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. `HappyPills` then calls `AddPatientCommand.execute()` to execute the command. "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "6. In `AddPatientCommand.execute()`, a patient is added and the display message is returned."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.1.2 Edit Patient Details"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user is able to edit the details of a patient in the list of patients currently in the program. The command: "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    edit patient S7777777Z /a School"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will edit the patient\u0027s allergies to `School`. "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Edit Patient Sequence Diagram](images/EditPatientSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `edit patient S7777777Z /a School` "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `PatientParser#parse()`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `PatientParser#parse()` will then create an object `EditPatientCommand`. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. `HappyPills` then calls `EditPatientCommand.execute()` method to execute the command. "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. In `EditPatientCommand.execute()`, the given attribute of the patient is edited and the display message is returned. "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.1.3. Delete Patient Details "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user can delete a patient from the list of patients currently in the program. The command: "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    delete patient S7777777Z "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will delete the patient with NRIC `S7777777Z`, if found. "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Delete Patient Sequence Diagram](images/DeletePatientSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `delete patient S7777777Z`. "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `PatientParser#parse()`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `PatientParser#parse()` will then create an object `DeletePatientCommand`. "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. `HappyPills` then calls `DeletePatientCommand.execute()` to execute the command. "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. In `DeletePatientCommand.execute()`, the respective patient is deleted and the display message is returned. "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.1.4. List Patients"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user is able to get a list of all the patients currently in the program."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The command: "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    list patient"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will list all the appointments in the `PatientMap`. "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `list patient`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `PatientParser#parse()`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `APatientParser#parse()` will create an object `ListPatientCommand`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. `HappyPills` then calls `ListPatientCommand.execute()` to execute the method. "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. In `ListPatientCommand.execute()`, it calls `TextUi.getPatientList()` which is then returned as the display message. "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.1.5. Retrieve Patient Details "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user can retrieve a patient\u0027s details. The command: "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    get patient S7777777Z"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will retrieve the details of the patient with NRIC `S7777777Z`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Get Patient Sequence Diagram](images/GetPatientSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `get patient S7777777Z` ."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `PatientParser#parse()`. "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `PatientParser#parse()` will create an object `GetPatientCommand`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. `HappyPills` then calls `GetPatientCommand.execute()` to execute the method. "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "6. `GetPatientCommand.execute()` calls `TextUi.getPatientSuccessMessage()` if a patient of NRIC `S7777777Z` can be found "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "or `TextUi.patientNotExists()` if no patient with the given NRIC exists in the program. "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "7. The respective `TextUi` methods will then display the message to the user accordingly."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 4.2 Patient Medical Records Features "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 4.3. Appointment Scheduling Feature "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.3.1. Add Appointment"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user is able to add appointments into the program to manage the appointment schedule. "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The command: "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    add appt /ic S7777777Z /d 01/04/2020 /t 12:00:00 /r Checkup "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will add an appointment with `NRIC` as S7777777Z with the following attributes: "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* appointment date: `01/04/2020`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* appointment time: `12:00:00`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* reason for appointment: `Checkup`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "An `appointmentId` will also be given when an appointment is successfully added. "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Add Appointment Sequence Diagram](images/AddAppointmentSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `add appt /ic S7777777Z /d 01/04/2020 /t 12:00:00 /r Checkup` ."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `AppointmentParser#parse()`. "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `AppointmentParser#parse()` will create an object `AddAppointmentCommand`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. `HappyPills` then calls `AddAppointmentCommand.execute()` to execute the method. "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "6. In `AddAppointmentCommand.execute()`, an appointment is added and the display message is returned."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.3.2. Edit Appointment "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.3.3. Delete Appointment "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user can delete an appointment from the list of appointments currently in the program. The command: "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    delete appt 1 "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will delete the appointment with appointment ID `1`, if found. "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `delete appt 1`. "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `AppointmentParser#parse()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `AppointmentParser#parse()` will then create an object `DeleteAppointmentCommand`. "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. `HappyPills` then calls `DeleteAppointmentCommand.execute()` to execute the command. "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. In `DeleteAppointmentCommand.execute()`, the respective patient is deleted and the display message is returned. "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.3.4. Mark Appointment as Done "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.3.5. List Appointments "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user is able to get a list of all the appointments currently in the program."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The command: "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    list appt"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will list all the appointments in the `AppointmentMap`. "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![List Appointment Sequence Diagram](images/ListAppointmentSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `list appt`."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `AppointmentParser#parse()`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `AppointmentParser#parse()` will create an object `ListAppointmentCommand`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. `HappyPills` then calls `ListAppointmentCommand.execute()` to execute the method. "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. In `ListAppointmentCommand.execute()`, it calls `TextUi.getAppointmentList()` which is then returned as the display message. "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.3.6. Find Appointments of Patient"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user is able to find all the appointments a specific patient has."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The command: "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    find appt S7777777Z"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will list all the appointments that the patient with NRIC S7777777Z has. "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Find Appointment Sequence Diagram](images/FindAppointmentSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 4.4. Storage"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This is an internal feature of the program, implemented to allow users to recover information even after HappyPills is "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "closed in the terminal. This is achieved by storing all relevant information in a text file using a structured format."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " The current methods implemented in this class and a brief description of each method:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " - `writeAllToFile` — writes the entire list of item to the specified text file."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `addSingleItemToFile` — adds a new item as a single string to the end of specified text file."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `loadPatientFromFile` — access the patient file and retrieve all information in the file as strings."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `parsePatientFileContent` — process line-by-line to create a patient object and add to the shared patient map."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `loadAppointmentFromFile` — access the patient file and retrieve all information in the file as strings."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `parseAppointmentFileContent` — process line-by-line to create an appointment object and add to the "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                                   shared appointment map."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " The following diagram shows how each command interacts with the other classes."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " *writeAllToFile*"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  This storage method : `writeAllToFile`, gets a single formatted string from TextUi, containing details of all the "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  objects in a map. Each class object would have a class method to construct a toSave() string, and "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  each object is stored as a single line within the text file. Hence, the toSave() string is constructed with  "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u0027|\u0027 as a divider, and a newline to indicate the end of the object. The formatted string is a concatenation of all "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  the toSave() strings of the objects in the list. `writeAllToFile` then writes the entire string into the text file, "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  overwriting any existing strings in the file."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  This is implemented for edit and delete commands as they cannot be appended."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  ![writing](images/StorageWriteAll.png)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " *addSingleItemToFile*"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " Each class object would have a class method to construct a toSave() string, and each object is stored as a single line"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " within the text file. Hence, the toSave() string is constructed with  \u0027|\u0027 as a divider, and a newline to indicate "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " the end of the object.  This storage method : addSingleItemToFile, uses the toSave() string of the object "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " it needs to save, by appending it to the back of the text file. "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " This provides improved performance as compared to using writeAllToFile()."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " ![saving](/docs/images/StorageSave.png)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " *loading and parsing file content to HappyPills*"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Loading and parsing methods are separated by class types. Each text file in HappyPills represent a single class."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "For example, `loadingPatientsFromFile` retrieves the entire string from the patient file and uses "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "`parsePatientFileContent` to convert each line into a patient object and adds it back to the patient map. "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "`loadAppointmentFromFile` and `parseAppointmentFileContent` does the same with the appointment file."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " ![loading](/docs/images/StorageLoad.png)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Aspect: Saving method"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Alternative 1 was chosen as fewer checks means that the program is less prone to exception, especially"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "so if the checks are confusing to implement. This would put lesser risk on the user experience for now."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 1 (current choice): Single object stored into the same file"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: Fewer checks required to identify class of the string, parsing is easier."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: Delete and update operation may take a long time if the string is very long"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 2: Store each patient as an individual text file, along with all its relevant class objects. "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                       A list with all the patient’s NRIC will also be stored for referencing."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: Delete and edit operation on a patient will only affect his/her file, and the referencing list."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: More checks are requires to identify class of the string"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "*Aspect: Updating deletion/edit* "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Alternative 1 was chosen for now as the program is relatively new, and is more likely to be subjected to unexpected exceptions."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 1 (current choice): Upon every delete/edit operation, update the relevant text file"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: All deletions are updated in the relevant text files immediately and will not be affected by any unexpected termination of the program."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: In the event that there is a large amount of deletion, it could be time-consuming for the user and memory-intensive on the machine."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 2: Saving the delete/edit operation to a list, then process it before the exit of the program"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: Delay deletion time cost so that the use of the program is faster and smoother during time of use."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: If the program was to terminate unexpectedly, the deletion may not be reflected in the respective files."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 4.5 Logging "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 5. Documentation "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 6. Testing "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 7. Useful links"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [About Us](AboutUs.md)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## Appendices "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix A: Product Scope "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Our product is targeted at users who:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - has a need to record significant number of patients\u0027 information"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - want to keep patients\u0027 information organised"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - prefer desktop apps over other types"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - can type fast"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - prefer typing over mouse input"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - prefer CLI apps over GUI apps"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Value proposition: Note taking application built for doctors to manage notes faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix B: User Stories "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v1.0|Doctor|add Patient\u0027s details|view their information in their subsequent visits|"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v1.0|Doctor|have a quick overview of a list of all patients|check for their detailed information|"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "itskesin"
        },
        "content": "|v1.0|Doctor|add Patient\u0027s details|view their information in their subsequent patientRecords.|"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "|v1.0|Doctor|have a quick overview of a list of all patients|check for their detailed information.|"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "|v1.0|Doctor|retrieve my patient\u0027s detailed information|check for his/her allergies and provide a more accurate diagnosis|"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "|v1.0|Doctor|edit a particular patient\u0027s information|the most up-to-date details in our patient records|"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|ensure that Patient\u0027s details are accurate before I add into the patient list|so that I can rectify mistakes earlier|"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|schedule appointments with my patients|ensure that I will prescribe enough medicine until the next appointment|"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|note down the prescription that I gave my patients|know what side effects are to be expected (based on the patient\u0027s current condition)|"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|record down the symptoms of my patients|check for any persistent health condition|"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|add Patient\u0027s medical records|view the previous reasons for doctor\u0027s visits|"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.1|Doctor|?|?|"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.1|Doctor|?|?|"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.1|Doctor|?|?|"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.1|Doctor|?|?|"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix C: Non-functional Requirements"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. A user with above average typing speed should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. Should be able to hold up to 1000 patients\u0027 information without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. Should be able to display large amount of inforamtion quickly. "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix D: Glossary "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "*Mainstream OS*"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix E: Instructions for Manual Testing"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Given below are instructions to test the application manually."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ":information_source: | These instructions only provide a starting point for tests to work on; testers are expected to do more exploratory testing"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "---------------------|----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## Useful links:"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [About Us](AboutUs.md)"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "------"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### 4.3. User Prompting "
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.2.1 Description"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "When the user adds a patient’s details, the input could be missing a few compulsory fields. Instead of prompting the user to re-enter the entire input, HappyPills will only ask the user for the missing details."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The user may choose to abort the command because of a lack of knowledge of the compulsory field or provide the requested details. The add command will only be executed when all the compulsory fields are provided. "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.2.2 Implementation "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Representing a prompt"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The prompting mechanism uses prefix to represent individual "
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.2.3 Design Consideration"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Representing a prompt"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The prompting mechanism uses tag such as `/ic[NRIC]` to represent individual field in patient\u0027s information. A list of tags is use to pass to the `Parser` which contains:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        - Parser #addCommandParser(String input) — This method break down user input base on tags such as (/ic, /p)"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Passing the prompts"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Given below is an example scenario where the user command has missing compulsory fields"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 1: The `HappyPills` pass the user\u0027s command to `Parser`, which finds one or more missing compulsory fields."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 2: The `Parser` call `Parser#parseAddCommand`, which prompt the corresponding missing field back to the user. And wait for user response"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 3: The new user input was than check again by `Parser#parseAddCommand` and repeat the process until all the compulsory fields is added correctly."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 4: `Parser#parseAddCommand` will ask for conformation before passing the correct input into `AddCommand`."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 5: `HappyPills` will execute the command."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Prompt handling method"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 (current choice): The `HappyPill` functions is unaware of prompting. The `Parser` keeps track of the incomplete command and sends back as `addCommand` objects."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: Decrease coupling between `HappyPill` and `Parser` components"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: `HappyPill` has no way to know if it is currently handling prompting, so it cannot abort prompts, `Parser` return IncorrectCommand to act as abort."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            "
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 2: The `Parser` componetnt keeps track of the incomplete command and throws an exception containing promts to the `HappyPills`."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: Greater flexibility for `HappyPill` to handle prompt, e.g. aborting"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: A new class is required to keep track of the command entered, rather than simply acting as a bridge between the `Command` and `Parser` sub-component. Increase number of pontential points of failure and decrease maintainability."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 was chosen as it decrease coupling between components. And reduces major failure during v1."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        P.S subject to change in v2."
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 78,
      "Janicetyy": 40,
      "sitinadiah25": 437,
      "itskesin": 27,
      "-": 18
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "# HappyPills"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "HappyPills is a note-taking application that allows doctors to take down notes using Command Line Interface (CLI)."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The application replaces all physical papers and is highly optimised for fast typing users.    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "If you can type fast, HappyPills can help to manage patients’ records **faster** than traditional Graphical User Interface (GUI) applications.  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "All notes are **neatly organised** in HappyPills so that all your important information are **safely stored**.  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Say **HELLO** to neater desks and time-saving electronic notes with HappyPills! :relaxed:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## Useful links:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 4,
      "sitinadiah25": 5,
      "-": 4
    }
  },
  {
    "path": "docs/UserGuide-Appointment.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [3.4. Appointment Scheduling Commands](#34-appointment-scheduling-commands)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.1. Add Appointment: `add appt`](#341-add-appointment-add-appt)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.2. Edit Appointment: `edit appt`](#342-edit-appointment-edit-appt)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.3. Delete Appointment: `delete appt`](#343-delete-appointment-delete-appt)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.4. Mark Appointment as Done: `done appt`](#344-mark-appointment-as-done-done-appt)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.5. List All Appointments: `list appt`](#345-list-all-appointments-list-appt)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.6. Find Patient\u0027s Appointments: `find appt`](#346-find-patients-appointments-find-appt)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003cdiv align\u003d\"left\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide.html\"\u003e \u0026#8592; Back to Main \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.4. Appointment Scheduling Commands "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HappyPills helps to store appointment schedules. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.1. Add Appointment: `add appt`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Add a new appointment for the patient with the specified NRIC. An appointmentID will be allocated to the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "patient automatically."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     add appt /ic NRIC /d DATE /t TIME /r REASON"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add appt /ic S1234567F /d 01/02/2020 /t 12:00:00 /r sick"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![addSuccess](images/AddAppt.png)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003eConfirm appointment details are correct by typing \"y\" or \"Y\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![addConfirmSuccess](images/confirmAddAppt.png)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.2. Edit Appointment: `edit appt`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Edit information of the appointment with the specified appointmentID(apptID)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " The appointment should belong to the patient with the specified NRIC. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     edit appt NRIC apptID [Options][editedInput]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     Options:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         /d edit date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         /t edit time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         /r edit reason"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    edit appt S1234567F 5 /d 12/02/2020"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![editSuccess](images/EditAppt.png)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.3. Delete Appointment: `delete appt`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Delete an appointment of a patient as specified by the NRIC and appointmentID(apptID). "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    delete appt NRIC apptID"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete appt S1234567F 6"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![editSuccess](images/DeleteAppt.png)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.4. Mark Appointment as Done: `done appt` "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Mark the appointment with the specified appointmentID(apptID) as done if arrived."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " The appointment should belong to the patient with the specified NRIC. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     done appt NRIC apptID"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    done appt S1234567F 5 "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![doneSuccess](images/DoneAppt.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.5. List All Appointments: `list appt` "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "List all the existing appointments. This can be used to check for appointmentID"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "as used by other commands."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     list appt"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![ListSuccess](images/ListAppt.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.6. Find Patient\u0027s Appointments: `find appt`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Check all appointments that the patient with the specified NRIC has. This can be used"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "to check for the appointmentID used for the other commands."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     find appt NRIC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    find appt S1234567F"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![findSuccess](images/FindAppt.png)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 124,
      "sitinadiah25": 5,
      "itskesin": 7
    }
  },
  {
    "path": "docs/UserGuide-Patient.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [3.2. General Patient Information Commands](#32-general-patient-information)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.1. Add Patient: `add patient`](#321-add-patient-add-patient)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.2. Edit Patient: `edit patient`](#322-edit-patient-edit-patient)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.3. Delete Patient: `delete patient`](#323-delete-patient-delete-patient)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.4. List All Patients: `list patient`](#324-list-all-patients-list-patient)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.5. Retrieve a Patient\u0027s Information: `get patient`](#325-retrieve-a-patients-information-get-patient)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003cdiv align\u003d\"left\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide.html\"\u003e \u0026#8592; Back to Main \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003cdiv align\u003d\"right\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide-Records.html\"\u003e \u0026#8594; Go to Medical Records \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.2. General Patient Information"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HappyPills can help users to manage their patients\u0027 information easily. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.1. Add Patient: `add patient`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "This feature allows you to add more patients into the existing patients\u0027 list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HappyPills will prompt you if there are any missing fields and ask for confirmation before adding the patient\u0027s information into the patients\u0027s list.  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "You can also add a new patient with the specified parameters in any order."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "###### Usage Example:   "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add patient /ic NRIC /n NAME /p PHONE_NUMBER /dob DOB /b BLOOD_TYPE /a[ALLERGIES] /rm[REMARKS]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add patient /ic S9999999Z /n Bob /dob 12-11-98 /b A+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e![MissingInput](images/MissingAddPatientInput.PNG \"Missing Add Ouput\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e Enter `/p 999` to add missing field."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eHappyPills will prompt you for missing details that are important.\u003c/td\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e   ![CheckConfirmAdd](images/addConfirm.PNG \"Add Confirmation Ouput\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e Enter `y` to confirm."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e Entering \u003ccode\u003en\u003c/code\u003e will not save the patients\u0027 information when HappyPills prompt you for confirmation.\u003c/td\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e  ![SuccessfulAdd](images/SuccessfullyAddedPatientInformation.PNG \"Successfully Added Ouput\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.2. Edit Patient: `edit patient`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Edit information of the patient with the specified NRIC. "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    edit patient NRIC /n[NAME] /p[PHONE_NUMBER] /dob[DOB] /b[BLOOD_TYPE] /a[ALLERGIES] /rm[REMARKS]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    edit patient S0618 /p9111"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![editPatientOutput](images/EditCommandOutput.PNG \"Edit Patient Ouput\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e NRIC \u003ccode\u003ecannot\u003c/code\u003e be edited because it is what uniquely identifies the patient.\u003c/td\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.3. Delete Patient: `delete patient`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Delete a patient as specified by the NRIC. "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete patient NRIC"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete patient S1234567F"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![confirmDelete](images/ConfirmationDeletion.PNG \"Delete Confirmation Ouput\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e Enter `y` to confirm."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e HappyPills will \u003ccode\u003eprompt for confirmation\u003c/code\u003e before deleting patient in the patient list. \u003c/td\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e    "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e  ![SuccessfulDelete](images/DeleteSuccessful.PNG \"Successfully Deleted Ouput\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e Upon \u003ccode\u003esuccessful deletion \u003c/code\u003e, patient\u0027s information will not be able to be retrieved again. \u003c/td\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.4. List All Patients: `list patient`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Displays all the patients in the patient list. "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    list patient"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![ListPatient](images/ListPatientOutput.PNG \"List Ouput\")  "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.5. Retrieve a Patient\u0027s Information: `get patient`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Retrieve details of the patient with the specified NRIC."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    get patient NRIC"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    get patient S9876543Z"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![getpatient](images/GetPatientOutput.PNG \"Get Ouput\")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 120,
      "itskesin": 47
    }
  },
  {
    "path": "docs/UserGuide-Records.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [3.3. Patient Medical Records Commands](#33-patient-medical-information-commands)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + [3.3.1. Add Patient Records : `add pr`](#331-add-patient-records-add-pr)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + [3.3.2. List Patient Records : `list pr`](#332-list-patient-records-list-pr)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + [3.3.3. Find Patient Records : `find pr`](#333-find-patient-records-find-pr)    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + [3.3.4. Edit Patient Records : `edit pr`](#334-edit-patient-records-edit-pr)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + [3.3.5. Delete Patient Records : `delete pr`](#335-delete-patient-records-delete-pr)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003cdiv align\u003d\"left\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide.html\"\u003e \u0026#8592; Back to Main \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003cdiv align\u003d\"right\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide-Appointment.html\"\u003e \u0026#8594; Go to Appointments \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.3. Patient Medical Records "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.3.1. Add Patient Records: `add pr`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Add patient\u0027s medical records to the database, to support the diagnosis and to justify the treatment."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS /d Date /t Time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    add pr /ic S0618 /sym ddd /diag dsfs /d 22/02/1992 /t 22:22:22"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ![addPR](images/PR/AddPR.PNG \"addPR\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e Enter `y` to confirm."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ![cfmAddPR](images/PR/addprcfm.PNG \"cfmAddPR\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 3.3.2. List Patient Records: `list pr`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Displays all the patients record for a particular patient. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    list pr NRIC"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    list pr S0618"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ![listPR](images/PR/listpr.PNG \"list PR output\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eIf the patient have no past record command. The message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ![listPR not found](images/PR/listprfail.PNG \"list PR not found\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.3. Find Patient Records: `find pr`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Check all patient reports that the patient with the specified NRIC has. This can be used"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "to check for the index used for the other commands."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    find pr NRIC INDEX"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    find pr s0618 1"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e![findPR](images/PR/findpr.PNG \"find PR output\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eIf the record is not found with the given input. The message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e![PR not found](images/PR/prEmpty.PNG \"PR not found\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.4. Edit Patient Records: `edit pr`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Edit patient\u0027s medical records when there is any error in previous inputs."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    edit pr NRIC INDEX /sym [SYMPTOMS] /diag [DIAGNOSIS] /d [DATE] /t [TIME]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    edit pr s0618 1 /sym fever"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ![](images/PR/editprsuccess.PNG \"help output\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eIf the record is not found with the given input. The message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e![](images/PR/prEmpty.PNG \"help output\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.5. Delete Patient Records: `delete pr`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Delete patient\u0027s medical records based on the given NRIC and the index of records  . "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    delete pr NRIC INDEX"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ![Delete PR](images/PR/deleteprsuccess.PNG \"Delete PR output\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eIf the record is not found with the given input. The message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e![PR not found](images/PR/prEmpty.PNG \"Delete PR not found\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 80,
      "Janicetyy": 67,
      "sitinadiah25": 17,
      "itskesin": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [2. Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.1. General Commands](#31-general-commands)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.1.1. View help: `help`](#311-view-help-help)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.1.2. Exit program: `exit`](#312-exit-program-exit)        "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [3.2. General Patient Information Commands](UserGuide-Patient.md) "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [3.3. Patient Medical Records Commands](UserGuide-Records.md)    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [3.4. Appointment Scheduling Commands](UserGuide-Appointment.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [4. Command Summary](#4-command-summary)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [5. Useful Links](#5-useful-links)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 1. Introduction "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills is a note-taking application that allows doctors to take down notes using Command Line Interface (CLI)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The application replaces all physical papers and is highly optimised for fast typing users.    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "If you can type fast, HappyPills can help to manage patients’ records **faster** than traditional Graphical User Interface (GUI) applications.  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "All notes are **neatly organised** in HappyPills so that all your important information are **safely stored**.  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Say **HELLO** to neater desks and time-saving electronic notes with HappyPills! :relaxed:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Installation**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Ensure that you have `Java 11` installed in your computer "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. Click [here](https://github.com/AY1920S2-CS2113T-T12-2/tp/releases) to download the HappyPills JAR File"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. Copy the file to the folder you want to use as your home folder for HappyPills."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**For all users**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Open Command Prompt in the directory where the JAR file is located."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. Run the command `java -jar happypills.jar`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Start of Application](images/StartOfApplication.PNG \"Start of App\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. When you start the application for the first time, you can type `help` to check all the available commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "4. Refer to [here](#3-features) for detailed instructions on how to use each command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "HappyPills have three main features: Patient Details, Patient Records and Appointment Scheduling. "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Patient Details notes down the general details of the patient such as their NRIC, name, phone number, date of birth, blood type and allergies. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Patient Records are previous visits to the doctors and the outcomes of it including their symptoms, the diagnosis and when the visit occurred. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Appointment Scheduling helps the users schedule future appointments with their patients. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "These features come together to help users manage their patients\u0027 information and give their patients better service by being able to retrieve their patients\u0027 information quickly and easily while also being able to note down details of the visit as accurately as possible. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This section will elaborate more on how to use these features in HappyPills. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Command Format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Words in `UPPER_CASE` are the parameters to be supplied by you **e.g.** in `add patient \\ic NRIC`, `NRIC` is the input required from you."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- In case a tag is used multiple times in a command then its first instance will be taken and the remaining instances will be treated as invalid input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- Items in square brackets are optional **e.g.** `/ic NRIC /a [ALLERGIES]` can be used as `/ic S1234567F` or as `/ic S1234567F /a Dust`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Parameters can be in any order **e.g.** if the command requires `/n NAME /ic NRIC` or `/ic NRIC /n NAME `"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- All commands are case insensitive **e.g.** `help` or `HELP` or `HeLp` will display all the commands and their usage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Legend For Tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/n` → Patient\u0027s Name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/ic` → Patient\u0027s NRIC"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/p` → Patient\u0027s Phone Number"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/dob` → Patient\u0027s Date of birth"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/b` → Patient\u0027s Blood type"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/a` → Patient\u0027s Allergies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/rm` → Patient\u0027s Remarks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/t` → Time of the Patient\u0027s appointment"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/d` → Date of the Patient\u0027s appointment"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/r` → Reason for the Patient\u0027s appointment"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `/sym` → Patient\u0027s Symptoms"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `/diag` → Patient\u0027s Diagnosis"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.1. General Commands "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.1.1. View Help: `help`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Displays the list of commands and their syntax."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Usage example:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![help](images/HelpOutput.PNG \"help output\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003eThe help command is split into four different sections \u003ccode\u003e(highlighted by the boxes)\u003c/code\u003e.\u003c/td\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.1.2. Exit program: `exit`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Exits the program and ends the current session. "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![help](images/Exit.PNG \"exit output\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### [3.2. General Patient Information Commands](UserGuide-Patient.md) "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### [3.3. Patient Medical Records Commands](UserGuide-Records.md)    "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### [3.4. Appointment Scheduling Commands](UserGuide-Appointment.md)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### General Patient Information"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Add a patient\u0027s information | `add patient /ic NRIC /n NAME /p PHONE_NUMBER /dob DOB /b BLOOD_TYPE /a [ALLERGIES] /rm [REMARKS]`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Edit a patient\u0027s information |  `edit patient NRIC /n[NAME] or /p[PHONE_NUMBER] or /dob[DOB] or /b[BLOOD_TYPE] or /a[ALLERGIES] or /rm[REMARKS]`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "list all patients | `list patient`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Retrieve a patient\u0027s information | `get patient NRIC`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### Patient Medical Records"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Add a Patient Record |`add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS /d DATE /t TIME`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " List all Patient Records |`list pr NRIC`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Find a Patient Record|`find pr NRIC INDEX`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Edit a Patient Record |`edit pr NRIC INDEX`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Delete a Patient Record | `delete pr NRIC INDEX`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### Appointments"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Add an appointment | `add appt /ic NRIC /d DATE /t TIME /r REASON`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Edit an appointment | `edit appt NRIC /d DATE /t TIME /r REASON`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Delete an appointment | `delete appt APPT_ID`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Mark an appointment as done | `done appt APPT_ID`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "List all appointments | `list appt`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Find an appointment| `find appt NRIC`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 5. Useful links:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [About Us](AboutUs.md)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 32,
      "sitinadiah25": 62,
      "itskesin": 73,
      "-": 2
    }
  },
  {
    "path": "docs/UserGuide2.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [2. Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [3.1. General Commands](#31-general-commands)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.1.1. View help: `help`](#311-view-help-help)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.1.2. Exit program: `exit`](#312-exit-program-exit)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [3.2. General Patient Information](#32-general-patient-information)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.2.1. Add Patient: `add patient`](#321-add-patient-add-patient)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.2.2. Edit Patient: `edit patient`](#322-edit-patient-edit-patient)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.2.3. Delete Patient: `delete patient`](#323-delete-patient-delete-patient)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.2.4. List All Patients: `list patient`](#324-list-all-patients-list-patient)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.2.5. Retrieve a Patient\u0027s Information: `get patient`](#325-retrieve-a-patients-information-get-patient)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [3.3. Patient Medical Records](#33-patient-medical-information-commands)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.3.1. Add Patient Records : `add pr`](#331-add-patient-records-add-pr)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.3.2. Edit Patient Records : `edit pr`](#332-edit-patient-records-edit-pr)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.3.3. Delete Patient Records : `delete pr`](#333-delete-patient-records-delete-pr)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.3.4. List Patient Records : `list pr`](#334-list-patient-records-list-pr)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.3.5. Find Patient Records : `find pr`](#335-find-patient-records-find-pr)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [3.4. Appointments](#34-appointment-scheduling-commands)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.4.1. Add Appointment: `add appt`](#341-add-appointment-add-appt)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.4.2. Edit Appointment: `edit appt`](#342-edit-appointment-edit-appt)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.4.3. Delete Appointment: `delete appt`](#343-delete-appointment-delete-appt)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.4.4. Mark Appointment as Done: `done appt`](#344-mark-appointment-as-done-done-appt)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.4.5. List All Appointments: `list appt`](#345-list-all-appointments-list-appt)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.4.6. Find Patient\u0027s Appointments: `find appt`](#346-find-patients-appointments-find-appt)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * [3.5. Saving Data](#)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [4. Command Summary](#4-command-summary)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [5. Useful Links](#5-useful-links)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 1. Introduction "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills is a note-taking application that allows doctors to take down notes using Command Line Interface (CLI)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The application replaces all physical papers and is highly optimised for fast typing users.    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "If you can type fast, HappyPills can help to manage patients’ records **faster** than traditional Graphical User Interface (GUI) applications.  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "All notes are **neatly organised** in HappyPills so that all your important information are **safely stored**.  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Say **HELLO** to neater desks and time-saving electronic notes with HappyPills! :relaxed:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Installation**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Ensure that you have `Java 11` installed in your computer "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. Click [here](https://github.com/AY1920S2-CS2113T-T12-2/tp/releases) to download the HappyPills JAR File"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. Copy the file to the folder you want to use as your home folder for HappyPills."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**For all users**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Open Command Prompt in the directory where the JAR file is located."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. Run the command `java -jar happypills.jar`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Start of Application](images/StartOfApplication.PNG \"Start of App\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. When you start the application for the first time, you can type `help` to check all the available commands."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "4. Refer to [here](#3-features) for detailed instructions on how to use each command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Command Format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Words in `UPPER_CASE` are the parameters to be supplied by you **e.g.** in `add patient \\ic NRIC`, `NRIC` is the input required from you."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- In case a tag is used multiple times in a command then its first instance will be taken and the remaining instances will be treated as invalid input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Items in square brackets are optional **e.g.** `/ic NRIC /a [ALLERGIES]` can be used as `/ic S1234567F` or as `/ic S1234567F /a Dust`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Parameters can be in any order **e.g.** if the command requires `/n NAME /ic NRIC` or `/ic NRIC /n NAME `"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- All commands are case insensitive **e.g.** `help` or `HELP` or `HeLp` will display all the commands and their usage."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Legend For Tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/n` → Patient\u0027s Name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/ic` → Patient\u0027s NRIC"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/p` → Patient\u0027s Phone Number"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/dob` → Patient\u0027s Date of birth"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/b` → Patient\u0027s Blood type"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/a` → Patient\u0027s Allergies"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/rm` → Patient\u0027s Remarks"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/t` → Time of the Patient\u0027s appointment"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/d` → Date of the Patient\u0027s appointment"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/r` → Reason for the Patient\u0027s appointment"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/sym` → Patient\u0027s Symptoms"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/diag` → Patient\u0027s Diagnosis"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 3.1. General Commands "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.1.1. View Help: `help`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Displays the list of commands and their syntax."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Usage example:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![help](images/HelpOutput.PNG \"help output\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003eThe help command is split into four different sections \u003ccode\u003e(highlighted by the boxes)\u003c/code\u003e.\u003c/td\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.1.2. Exit program: `exit`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Exits the program and ends the current session. "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![Exit](images/Exit.PNG \"Exit Ouput\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 3.2. General Patient Information"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills can help users to manage their patients\u0027 information easily. "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.2.1. Add Patient: `add patient`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itskesin"
        },
        "content": "This feature allows you to add more patients into the existing patients\u0027 list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills will prompt you if there are any missing fields and ask for confirmation before adding the patient\u0027s information into the patients\u0027s list.  "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itskesin"
        },
        "content": "You can also add a new patient with the specified parameters in any order."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Usage Example:   "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    add patient /ic NRIC /n NAME /p PHONE_NUMBER /dob DOB /b BLOOD_TYPE /a[ALLERGIES] /rm[REMARKS]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    add patient /ic S9999999Z /n Bob /dob 12-11-98 /b A+"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e![MissingInput](images/MissingAddPatientInput.PNG \"Missing Add Ouput\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e Enter `/p 999` to add missing field."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itskesin"
        },
        "content": ":information_source: | HappyPills will prompt you for missing details that are important."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itskesin"
        },
        "content": "---------------------|-------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e   ![CheckConfirmAdd](images/addConfirm.PNG \"Add Confirmation Ouput\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e Enter `y` to confirm."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itskesin"
        },
        "content": ":information_source: | Entering `n` will not save the patients\u0027 information when HappyPills prompt you for confirmation."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itskesin"
        },
        "content": "---------------------|--------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e    "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e  ![SuccessfulAdd](images/SuccessfullyAddedPatientInformation.PNG \"Successfully Added Ouput\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.2.2. Edit Patient: `edit patient`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit information of the patient with the specified NRIC. "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    edit patient NRIC /n[NAME] /p[PHONE_NUMBER] /dob[DOB] /b[BLOOD_TYPE] /a[ALLERGIES] /rm[REMARKS]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    edit patient S0618 /p9111"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![editPatientOutput](images/EditCommandOutput.PNG \"Edit Patient Ouput\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itskesin"
        },
        "content": ":information_source: | NRIC cannot be edited because it is what uniquely identifies the patient."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "itskesin"
        },
        "content": "---------------------|--------------------------------------------------------------------------"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.2.3. Delete Patient: `delete patient`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Delete a patient as specified by the NRIC. "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    delete patient NRIC"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    delete patient S1234567F"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![confirmDelete](images/ConfirmationDeletion.PNG \"Delete Confirmation Ouput\")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e Enter `y` to confirm."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "itskesin"
        },
        "content": ":information_source: | HappyPills will prompt for confirmation before deleting patient in the patient list.  "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "itskesin"
        },
        "content": "---------------------|-------------------------------------------------------------------"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e    "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e  ![SuccessfulDelete](images/DeleteSuccessful.PNG \"Successfully Deleted Ouput\")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "itskesin"
        },
        "content": ":heavy_exclamation_mark: | Upon successful deletion, patient\u0027s information will not be able to be retrieved again. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "itskesin"
        },
        "content": "-------------------------|-------------------------------------------------------------------"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.2.4. List All Patients: `list patient`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Displays all the patients in the patient list. "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    list patient"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![ListPatient](images/ListPatientOutput.PNG \"List Ouput\")  "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.2.5. Retrieve a Patient\u0027s Information: `get patient`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Retrieve details of the patient with the specified NRIC."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    get patient NRIC"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    get patient S9876543Z"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![getpatient](images/GetPatientOutput.PNG \"Get Ouput\")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 3.3. Patient Medical Records "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.3.1. Add Patient Records: `add pr`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Add patient\u0027s medical records to the database, to support the diagnosis and to justify the treatment."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![]()"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.3.2. Edit Patient Records: `edit pr`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit patient\u0027s medical records when there is any error in previous inputs."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    edit pr NRIC INDEX /sym [SYMPTOMS] /diag [DIAGNOSIS] /d [DATE] /t [TIME]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![]()"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.3.3. Delete Patient Records: `delete pr`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Delete patient\u0027s medical records based on the given NRIC and the index of records  . "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    delete pr NRIC INDEX"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![]()"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.3.4. List Patient Records: `list pr`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    list pr NRIC"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![]()"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.3.5. Find Patient Records: `find pr`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    find pr NRIC INDEX"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e![]()"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 3.4. Appointment Scheduling Commands "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills helps to store appointment schedules. "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.4.1. Add Appointment: `add appt`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Add a new appointment for the patient with the specified NRIC. An appointmentID will be allocated to the"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "itskesin"
        },
        "content": "patient automatically."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "itskesin"
        },
        "content": " ##### Usage example: "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     add appt /ic[NRIC] /d[date] /t[time] /r[reason]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "itskesin"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    add appt /icS1234567F /d01/02/2020 /t 12:00:00 /rsick"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e![addSuccess](/docs/images/AddAppt.png)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003eConfirm appointment details are correct by typing \"y\" or \"Y\""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e![addConfirmSuccess](/docs/images/confirmAddAppt.png)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.4.2. Edit Appointment: `edit appt`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit information of the appointment with the specified appointmentID(apptID)."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "itskesin"
        },
        "content": " The appointment should belong to the patient with the specified NRIC. "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "itskesin"
        },
        "content": " ##### Usage example: "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     edit appt [NRIC] [apptID] [Options][editedInput]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     Options:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         /d edit date"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         /t edit time"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         /r edit reason"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "itskesin"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    edit appt S1234567F 5 /d 12/02/2020"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e![editSuccess](/docs/images/EditAppt.png)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.4.3. Delete Appointment: `delete appt`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Delete an appointment of a patient as specified by the NRIC and appointmentID(apptID). "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    delete appt [NRIC] [apptID]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    delete appt S1234567F 6"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![editSuccess](/docs/images/DeleteAppt.png)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.4.4. Mark Appointment as Done: `done appt` "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Mark the appointment with the specified appointmentID(apptID) as done if arrived."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "itskesin"
        },
        "content": " The appointment should belong to the patient with the specified NRIC. "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "itskesin"
        },
        "content": " ##### Usage example: "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     done appt [NRIC] [apptID]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "itskesin"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    done appt S1234567F 5 "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e![doneSuccess](/docs/images/DoneAppt.png)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.4.5. List All Appointments: `list appt` "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "itskesin"
        },
        "content": "List all the existing appointments. This can be used to check for appointmentID"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "itskesin"
        },
        "content": "as used by other commands."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "itskesin"
        },
        "content": " ##### Usage example: "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     list appt"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "itskesin"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e![ListSuccess](/docs/images/ListAppt.png)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.4.6. Find Patient\u0027s Appointments: `find appt`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Check all appointments that the patient with the specified NRIC has. This can be used"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "itskesin"
        },
        "content": "to check for the appointmentID used for the other commands."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "itskesin"
        },
        "content": " ##### Usage example: "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     find appt [NRIC]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "itskesin"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    find appt S1234567F"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e![findSuccess](/docs/images/FindAppt.png)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### General Patient Information"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "itskesin"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Add a patient\u0027s information | `add patient /ic [NRIC] /n [NAME] /p [PHONE_NUMBER] /dob [DOB] /b [BLOOD_TYPE] /a [ALLERGIES] /rm [REMARKS]`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit a patient\u0027s information |  `edit patient NRIC /n[NAME] /p[PHONE_NUMBER] /dob[DOB] /b[BLOOD_TYPE] /a[ALLERGIES] /rm[REMARKS]`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "itskesin"
        },
        "content": "list all patients | `list patient`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Retrieve a patient\u0027s information | `get patient NRIC`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### Patient Medical Records"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "itskesin"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "itskesin"
        },
        "content": " Add a Patient Record |`add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS /d DATE /t TIME`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "itskesin"
        },
        "content": " List all Patient Records |`list pr NRIC`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "itskesin"
        },
        "content": " Find a Patient Record|`find pr NRIC INDEX`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "itskesin"
        },
        "content": " Edit a Patient Record |`edit pr NRIC INDEX`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "itskesin"
        },
        "content": " Delete a Patient Record | `delete pr NRIC INDEX`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### Appointments"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "itskesin"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Add an appointment | `add appt /ic NRIC /d DATE /t TIME /r REASON`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit an appointment | `edit appt NRIC /d DATE /t TIME /r REASON`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Delete an appointment | `delete appt APPT_ID`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Mark an appointment as done | `done appt APPT_ID`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "itskesin"
        },
        "content": "List all appointments | `list appt`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Find an appointment| `find appt NRIC`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 5. Useful links:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "itskesin": 462
    }
  },
  {
    "path": "docs/team/Nyan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "# Nyan - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 6
    }
  },
  {
    "path": "docs/team/janice.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# Janice - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 6
    }
  },
  {
    "path": "docs/team/sitinadiah.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#Siti Nadiah "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "##Contact: e0318697@u.nus.edu "
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 2
    }
  },
  {
    "path": "src/main/java/seedu/happypills/HappyPills.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class HappyPills {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static Scanner scanner;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private PatientMap patients;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private AppointmentMap appointments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private PatientRecordMap patientRecords;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Sets up the required objects, loads up the data from the storage file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public HappyPills() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        appointments \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecords \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            patients \u003d Storage.loadPatientsFromFile(Storage.PATIENT_FILEPATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"    Patient loaded from file.\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"   No patients in file.\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            appointments \u003d Storage.loadAppointmentFromFile(Storage.APPOINTMENT_FILEPATH, patients);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"    Appointment loaded from file.\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"   No appointment in file.\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Sets up the logging configuration for the main program."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void logSetup() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        ch.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param args I dont know."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        new HappyPills().run();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        logSetup();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        TextUi.printWelcomeMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"going to start processing\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String fullCommand \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String message \u003d getCommandType(fullCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (!message.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                System.out.println(message);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            logger.info(\"end of processing\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getCommandType(String fullCommand) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            message \u003d command.execute(patients, appointments, patientRecords);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (HappyPillsException hpe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(hpe.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(hpe.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            System.out.println(Messages.MESSAGE_INCOMPLETE_COMMAND);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 38,
      "Janicetyy": 39,
      "sitinadiah25": 13,
      "itskesin": 20
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientRecordMap patientRecordMap) throws HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 12
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Adds a new task to the list with the information provided by calling."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * {} (or) {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * (or) {} as require"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Storage.writeAllToFile(Storage.PATIENT_FILEPATH, StorageTextUi.getFormattedPatientString(patients));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"Adding patient list to file failed.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        TextUi.printExit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 12,
      "sitinadiah25": 18,
      "itskesin": 6
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Displays full help instructions for every command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public HelpCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Return help command instructions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return message The command instructions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecordMap) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] userCommand \u003d command.split(\" \", 3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(\"help\") \u0026\u0026 userCommand.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.generalHelpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[1].equalsIgnoreCase(\"exit\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.exitHelpMessage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[2].equalsIgnoreCase(\"patient\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d getPatientHelp(userCommand[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[2].equalsIgnoreCase(\"pr\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d getPatientRecordHelp(userCommand[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[2].equalsIgnoreCase(\"appt\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d getAppointmentHelp(userCommand[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d TextUi.printIncorrectCommand(userCommand[1] + \" \" + userCommand[2]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getPatientHelp(String patient) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (patient.equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.AddPatientHelpMessage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (patient.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.listPatientHelpMessage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (patient.equalsIgnoreCase(\"get\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.getPatientHelpMessage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (patient.equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.editPatientHelpMessage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (patient.equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.deletePatientHelpMessage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.printIncorrectCommand(command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getPatientRecordHelp(String pr) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (pr.equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.AddPatientRecordHelpMessage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (pr.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.listPatientRecordHelpMessage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (pr.equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.findPatientRecordHelpMessage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (pr.equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.editPatientRecordHelpMessage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (pr.equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.deletePatientRecordHelpMessage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.printIncorrectCommand(command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getAppointmentHelp(String appt) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (appt.equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.printAddAppointmentHelp;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.printListAppointmentHelp;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.printFindAppointmentHelp;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.printDoneAppointmentHelp;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.printEditAppointmentHelp;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.printDeleteAppointmentHelp;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.printIncorrectCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 24,
      "sitinadiah25": 54,
      "itskesin": 20
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/AddAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class AddAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String reason;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for AddPatientCommand Class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * It creates a new AddPatientCommand Object with the information provided."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param nric   patient\u0027s nric."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param date   date of appointment."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param time   time of appointment."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param reason reason for appointment."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public AddAppointmentCommand(String nric, String date, String time, String reason) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Add appointment into the Appointment list and the patient\u0027s appointment list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients     the list of patients."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param appointments the list of appointments."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the message to be displayed to the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException throws exception if there is already an appointment at the same datetime."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (!patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d PatientTextUi.patientNotFoundMessage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            Appointment appointment \u003d new Appointment(nric, reason, date, time);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            appointments.addAppointment(appointment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            Patient patient \u003d (Patient) patients.get(nric);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            patient.addAppointment(appointment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.addSingleItemToFile(Storage.APPOINTMENT_FILEPATH, appointment.toSave());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.warning(StorageTextUi.failToAddAppointmentMsg);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.addAppointmentSuccessMessage(appointment);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 8,
      "Janicetyy": 17,
      "sitinadiah25": 43,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/AppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public abstract class AppointmentCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute(AppointmentMap appointments) throws HappyPillsException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 10,
      "itskesin": 2
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/DeleteAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class DeleteAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String appointmentId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public DeleteAppointmentCommand(String nric, String appointmentId) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.appointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the patient from the NRIC of the delete command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the appointment from the patient provided."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the appointment map to get appointment from."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Appointment findAppointment(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (appointments.containsKey(appointmentId)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return appointments.get(appointmentId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Delete an appointment of the patient from the shared map."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments The shared appointment map."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointmentId The id of the appointment to be deleted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean deleteAppt(AppointmentMap appointments, String appointmentId) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (appointments.containsKey(appointmentId)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            appointments.remove(appointmentId);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Delete an appointment of the patient in the patient object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient The patient whose appointment is to be deleted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param apptID The id of the appointment to be deleted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean deleteAppt(Patient patient, String apptID) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                patient.getAppointments().remove(appointment);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient delPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (delPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d PatientTextUi.patientNotFoundMessage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.appendDivider(message);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment delAppt \u003d findAppointment(appointments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (delAppt \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.appointmentNotFoundMessage;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.appendDivider(message);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Boolean isSuccess \u003d deleteAppt(appointments,appointmentId) \u0026\u0026 deleteAppt(delPatient,appointmentId);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (isSuccess) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d \"    Appointment has been removed.\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.APPOINTMENT_FILEPATH,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedApptString(appointments));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.failToWriteAppointmentMsg);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.appointmentNotFoundMessage;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 91,
      "sitinadiah25": 16,
      "itskesin": 4
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/DoneAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class DoneAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String apptID;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for DoneAppointmentCommand Class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new DoneAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param apptID Contains the id of the appointment to be marked as done"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public DoneAppointmentCommand(String nric, String apptID) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.apptID \u003d apptID;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the patient from the NRIC of the Done command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the appointment from the patient provided."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the appointment map to get appointment from."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Appointment findAppointment(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (appointments.containsKey(apptID)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return appointments.get(apptID);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Mark appointment in the list within the patient object as done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editDone(Patient patient) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                appointment.setDone(true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Mark appointment in the shared appointment map as done."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment which is to be marked done."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if successful, false otherwise."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editDone(Appointment appointment) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        appointment.setDone(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the appointment details with the information provided by calling."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients on which the commands are executed on."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the list of appointments on which the commands are executed on."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws HappyPillsException Throws an exception if the edit field is not valid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient editPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (editPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(\"    Patient not found. Please try again.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment editAppt \u003d findAppointment(appointments); //from the shared appointment map"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (editAppt \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(\"    Appointment not found. Please try again.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Boolean output \u003d editDone(editPatient) \u0026\u0026 editDone(editAppt);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!output) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(\" An unknown error has occurred, please try again later.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.APPOINTMENT_FILEPATH,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedApptString(appointments));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.failToWriteAppointmentMsg);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return AppointmentTextUi.doneAppointmentSuccessMessage(editAppt);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 117,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/EditAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class EditAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String newContent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected  String apptID;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for EditAppointmentCommand Class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new EditAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newContent Contains the string that the attribute is to be updated to."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param apptID Contains the id of the appointment that is to be edited"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public EditAppointmentCommand(String nric, String apptID, String newContent) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.newContent \u003d newContent;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.apptID \u003d apptID;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the patient from the NRIC of the Edit command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the appointment from the patient provided."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the appointment map to get appointment from."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Appointment findAppointment(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (appointments.containsKey(apptID)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return appointments.get(apptID);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * check string if fits date format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param date date in String type"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if correct date format, false otherwise"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    static boolean checkDate(String date) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String pattern \u003d \"(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/((2[0-9])[0-9]{2})\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return date.matches(pattern);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the date of the appointment in the list within the patient object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newDate The new date to be edited into."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editDate(Patient patient, String newDate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!checkDate(newDate)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                appointment.setDate(newDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the date of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment which date is to be edited."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newDate The new date to be edited into."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if successful, false otherwise."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editDate(Appointment appointment, String newDate) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!checkDate(newDate)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            TextUi.print(HelpTextUi.printEditAppointmentHelp);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            appointment.setDate(newDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * check string if fits time format."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param time time in String type."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if correct date format, false otherwise."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    static boolean checkTime(String time) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String pattern \u003d \"([01][0-9]|2[0-3]):([0-5][0-9])\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return time.matches(pattern);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the time of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newTime The new time to be edited into."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editTime(Patient patient, String newTime) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!checkTime(newTime)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        newTime +\u003d \":00\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                appointment.setTime(newTime);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the time of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment which time is to be edited."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newTime The new date to be edited into."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if successful, false otherwise."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editTime(Appointment appointment, String newTime) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (checkTime(newTime)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newTime +\u003d \":00\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            appointment.setTime(newTime);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the reason of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newReason The new reason to be edited into."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editReason(Patient patient, String newReason) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                appointment.setReason(newReason);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the remark of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment which reason is to be edited."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newReason The appointment\u0027s updated reason."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if successful, false otherwise"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editReason(Appointment appointment, String newReason) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        appointment.setReason(newReason);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the appointment details with the information provided by calling."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients on which the commands are executed on."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the list of appointments on which the commands are executed on."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws HappyPillsException Throws an exception if the edit field is not valid."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (newContent.length() \u003c 3) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return HelpTextUi.printEditAppointmentHelp;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String content \u003d newContent.substring(2).trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (content.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return HelpTextUi.printEditAppointmentHelp;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String field \u003d newContent.substring(0,2).trim();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient editPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (editPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.patientNotFoundMessage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment editAppt \u003d findAppointment(appointments); //from the shared appointment map"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (editAppt \u003d\u003d null) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(AppointmentTextUi.appointmentNotFoundMessage);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Boolean output \u003d false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String errorMsg \u003d \"    Something went wrong, the edit could not be made.\\n\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (field.equals(\"/d\")) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            output \u003d editDate(editPatient, content) \u0026\u0026 editDate(editAppt,content);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            errorMsg \u003d output ? errorMsg : \"    Invalid date or date format(DD/MM/YYYY).\\n\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else if (field.equals(\"/t\")) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            output \u003d editTime(editPatient, content) \u0026\u0026 editTime(editAppt,content);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            errorMsg \u003d output ? errorMsg : \"    Invalid time or time format(HH:MM).\\n\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else if (field.equals(\"/r\")) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            output \u003d editReason(editPatient, content) \u0026\u0026 editReason(editAppt,content);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(\"    Please try again. To learn more about the Edit appointment command, \""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"\\n    enter \\\"help appt edit\\\"\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (output) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.APPOINTMENT_FILEPATH,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedApptString(appointments));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.failToWriteAppointmentMsg);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        errorMsg \u003d TextUi.appendDivider(errorMsg);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return output ? AppointmentTextUi.editAppointmentSuccessMessage(editAppt) : errorMsg;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 236,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/FindAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class FindAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for FindAppointmentCommand Class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new FindAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientNric        Contains the NRIC of the patient that is to be retrieved."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public FindAppointmentCommand(String patientNric) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return AppointmentTextUi.getAppointmentSuccessMessage(patients.get(patientNric));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return PatientTextUi.patientNotFoundMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 27,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/IncorrectAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class IncorrectAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public IncorrectAppointmentCommand(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.message \u003d message + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "sitinadiah25": 13,
      "itskesin": 4
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/ListAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class ListAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (appointments.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.getEmptyAppointmentListMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            assert !appointments.isEmpty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.getAppointmentList(appointments);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 3,
      "sitinadiah25": 13,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/AddPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class AddPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected int phoneNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String dateOfBirth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String bloodType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String allergies;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String remarks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for AddPatientCommand Class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * It creates a new AddPatientCommand Object with the information provided."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param name        Contains the name of the patient."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric        Contains the nric of the patient."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param phoneNumber Contains the phone number of the patient."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param dateOfBirth Contains the date of birth of the patient."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param bloodType   Contains the blood type of the patient."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param allergies   Contains any allergies the patient has."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param remarks     Contains any remarks for the patient."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public AddPatientCommand(String name, String nric, int phoneNumber, String dateOfBirth,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                             String bloodType, String allergies, String remarks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        logger.log(logLevel, \"patient is added\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Adds a new task to the list with the information provided by calling."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * {} (or) {}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * (or) {} as require"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assert !patients.containsKey(nric) : \"New nric can be added\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient tempPatient \u003d new Patient(name, nric, phoneNumber, dateOfBirth, bloodType, allergies, remarks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (tempPatient.getNric() \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return \"    Patient not added.\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        patients.add(tempPatient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assert patients.containsKey(nric) : \"nric added successfully\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Storage.addSingleItemToFile(Storage.PATIENT_FILEPATH, tempPatient.toSave());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(StorageTextUi.failToAddPatientMsg);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message \u003d PatientTextUi.addPatientSuccessMessage(patients.get(nric));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        logger.log(logLevel, \"end of addCommand\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 47,
      "Janicetyy": 22,
      "sitinadiah25": 9,
      "itskesin": 5
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/DeletePatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class DeletePatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public DeletePatientCommand(String nric) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Retrieve the patient\u0027s confirmation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return y to confirm deletion, n to stop deletion."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getPatientConfirmation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Scanner in \u003d HappyPills.scanner;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String confirm \u003d in.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return confirm;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Remove the patient from the patient list in the program."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient to be deleted."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients The patient list within the program."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return Message to inform the user that the patient has been deleted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private String deletePatient(Patient patient, PatientMap patients) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patients.remove(nric);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.deletePatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return TextUi.prependDivider(message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Run the delete command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The message to confirm deletion of patient or to confirm that the patient has not be deleted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException Throws an exception if patient does not exist."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            Patient patient \u003d patients.get(nric);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientTextUi.printDeleteConfirmation(patient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String message \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String confirm \u003d getPatientConfirmation();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            boolean isConfirmed \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            while (!isConfirmed) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                if (confirm.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                    message \u003d deletePatient(patient, patients);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        Storage.writeAllToFile(Storage.PATIENT_FILEPATH,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                                StorageTextUi.getFormattedPatientString(patients));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        logger.info(StorageTextUi.failToWritePatientMsg);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    isConfirmed \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    logger.log(logLevel, \"patient is deleted\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                } else if (confirm.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    message \u003d PatientTextUi.patientNotDeletedMessage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    isConfirmed \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    logger.log(logLevel, PatientTextUi.patientNotDeletedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    PatientTextUi.printDeleteConfirmationAgain(patient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    confirm \u003d getPatientConfirmation();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            assert isConfirmed : \"Delete is not confirmed.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.appendDivider(message);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.patientNotFoundMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 9,
      "Janicetyy": 16,
      "sitinadiah25": 60,
      "itskesin": 13
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/EditPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class EditPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String newContent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String REMARKS_TAG \u003d \"/rm\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DATE_OF_BIRTH_TAG \u003d \"/dob\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String NAME_TAG \u003d \"/n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String PHONE_NUMBER_TAG \u003d \"/p\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String BLOOD_TYPE_TAG \u003d \"/b\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String ALLERGIES_TAG \u003d \"/a\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for EditCommand Class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * It creates a new EditCommand Object with the information provided."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param nric       Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param newContent Contains the string that the attribute is to be updated to."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public EditPatientCommand(String nric, String newContent) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric.toUpperCase().trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.newContent \u003d newContent.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Retrieve the patient from the NRIC of the Edit command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            logger.log(logLevel, \"patient to be edited is found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the phone number of the patient."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose phone number is to be edited."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new phone number."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editPhone(Patient patient, String content) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setPhoneNumber(Integer.parseInt(content));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the allergies of the patient."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose allergies is to be edited."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s updated allergies."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editAllergies(Patient patient, String content) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setAllergies(content);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the remarks of the patient."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose remarks is to be edited."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new remarks."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editRemarks(Patient patient, String content) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setRemarks(content);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the Date of Birth of the patient."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose DOB is to be edited."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new DOB."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editDob(Patient patient, String content) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setDateOfBirth(content);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the name of the patient."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose name is to be edited."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new name."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editName(Patient patient, String content) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setName(content);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the blood type of the patient."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose blood type is to be edited."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new blood type."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editBloodType(Patient patient, String content) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setBloodType(content);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Adds a new task to the list with the information provided by calling."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * {} (or) {}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * (or) {} as require"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException Throws an exception if the edit field is not valid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (newContent.length() \u003c 2) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INCOMPLETE_COMMAND);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        // assert newContent.length() \u003e\u003d 2 : \"Length of content has to be more than 2 characters.\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String field \u003d \"\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (newContent.contains(REMARKS_TAG)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            field \u003d newContent.substring(0, 3);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            content \u003d newContent.substring(3);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (newContent.contains(DATE_OF_BIRTH_TAG)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            field \u003d newContent.substring(0, 4);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            content \u003d newContent.substring(4);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            field \u003d newContent.substring(0, 2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            content \u003d newContent.substring(2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Patient editPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (editPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.patientNotFoundMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(\"    Please do not leave the field as empty string\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        // assert editPatient !\u003d null : \"Patient is not in PatientList\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (field.equals(PHONE_NUMBER_TAG)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (checkPhoneNum(content.trim())) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                output \u003d editPhone(editPatient, content);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(\"    Please ensure that all the phone number is 8 digit\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(REMARKS_TAG)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            output \u003d editRemarks(editPatient, content.trim());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(ALLERGIES_TAG)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            output \u003d editAllergies(editPatient, content.trim());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(DATE_OF_BIRTH_TAG)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (checkDate(content.trim())) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                output \u003d editDob(editPatient, content.trim());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(\"    Please ensure that the DATE is in DD/MM/YYYY \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(BLOOD_TYPE_TAG)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (checkType(content.trim())) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                output \u003d editBloodType(editPatient, content.trim());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(\"    Please ensure that the DATE is in [A|B|AB|O][+-] \");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            output \u003d editBloodType(editPatient, content.trim());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(NAME_TAG)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            output \u003d editName(editPatient, content.trim());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(\"    Please try again. To learn more about the Edit command, \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    + \"\\n    enter \\\"help edit patient\\\"\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Storage.writeAllToFile(Storage.PATIENT_FILEPATH,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    StorageTextUi.getFormattedPatientString(patients));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(StorageTextUi.failToWritePatientMsg);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assert output.length() \u003e 0 : \"output message is invalid\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Check if the String can be converted to Integer."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param input value to check if is integer"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return true if is an integer, false otherwise"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static boolean isInteger(String input) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            int x \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * To check format for nric."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric details of nric"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return boolean true if the time format is correct otherwise false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    static boolean checkType(String nric) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String pattern \u003d \"([A|B|AB|O][+-])\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return nric.matches(pattern);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * To check format for phone."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param phoneNum details of time"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return boolean true if the time format is correct otherwise false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    static boolean checkPhoneNum(String phoneNum) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String pattern \u003d \"([0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return phoneNum.matches(pattern);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    static boolean checkDate(String date) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String pattern \u003d \"(0?[1-9]|[12][0-9]|3[01])\\\\/(0?[1-9]|1[0-2])\\\\/([0-9]{4})\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (date.matches(pattern)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            flag \u003d true;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 87,
      "Janicetyy": 18,
      "sitinadiah25": 121,
      "itskesin": 25
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/GetPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class GetPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for GetPatientCommand Class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new GetPatientCommand Object with the information provided."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientNric        Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public GetPatientCommand(String patientNric) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) throws HappyPillsException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return PatientTextUi.getPatientSuccessMessage(patients.get(patientNric));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.patientNotFoundMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 6,
      "Janicetyy": 20,
      "sitinadiah25": 2,
      "itskesin": 5
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/IncorrectPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Represents an incorrect command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class IncorrectPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public IncorrectPatientCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "sitinadiah25": 18,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/ListPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Lists all patients to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class ListPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (patients.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d PatientTextUi.emptyPatientListMessage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.log(logLevel, \"no patient information is in list\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assert !patients.isEmpty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d PatientTextUi.getPatientList(patients);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.log(logLevel, \"retrieve patient\u0027s information\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 3,
      "sitinadiah25": 3,
      "itskesin": 24
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/PatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Used for execution of commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Contains both the information related to user commands and methods to execute them."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Implementation is done on child classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public abstract class PatientCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Contain boolean to check for exit condition."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for Command Class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Set isExit to false as default"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected PatientCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Executes the command based on the information provided by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException If issues are found during execution of command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String execute(PatientMap patients) throws HappyPillsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Returns exit condition."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return isExit Contains information that allow the program to exit."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "sitinadiah25": 41,
      "itskesin": 2
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/AddPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class AddPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String symptom;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String diagnosis;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Constructor for PatientRecordCommand Class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * It creates a new PatientCommand Object with the information provided."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric patient\u0027s nric."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param symptom patient\u0027s symptom."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param diagnosis patient\u0027s diagnosis."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param date date of record."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param time time of record."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public AddPatientRecordCommand(String nric, String symptom, String diagnosis, String date, String time) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.symptom \u003d symptom;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients,AppointmentMap appointments, PatientRecordMap patientRecords"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            message \u003d Messages.MESSAGE_PATIENT_NOT_FOUND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientRecord patientRecord \u003d new PatientRecord(nric,symptom,diagnosis,date,time);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientRecords.addPersonalRecord(patientRecord, nric);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            message \u003d Messages.MESSAGE_PATIENT_RECORD_ADDED;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 4,
      "itskesin": 47
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/DeletePatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class DeletePatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Constructor for FindAppointmentCommand Class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * It creates a new FindAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientNric Contains the NRIC of the patient that is to be retrieved."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index index for the record of the searched patient"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public DeletePatientRecordCommand(String patientNric, int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecordMap"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean isIndexOutOfBound \u003d patientRecordMap.get(patientNric).size() \u003c\u003d index \u0026\u0026 index \u003e\u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (patientRecordMap.get(patientNric) \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_EMPTY_PATIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (isIndexOutOfBound) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return PatientRecordTextUi.deletePatientRecordSuccessMessage(patientRecordMap, patientNric, index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String message \u003d Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 3,
      "itskesin": 40
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/EditPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.parser.Validation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class EditPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String newContent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String SYMPTOM_TAG \u003d \"/sym\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIAGNOSIS_TAG \u003d \"/diag\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DATE_TAG \u003d \"/d\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String TIME_TAG \u003d \"/t\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Constructor for EditPatientRecordCommand Class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * It creates a new EditPatientRecordCommand Object with the information provided."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric       Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index index for the record of the searched patient"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param newContent Contains the string that the attribute is to be updated to."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public EditPatientRecordCommand(String nric, int index, String newContent) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.nric \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.newContent \u003d newContent;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Edit the appointment details with the information provided by calling."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patients     Contains the list of patients on which the commands are executed on."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param appointments Contains the list of appointments on which the commands are executed on."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException Throws an exception if the edit field is not valid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (newContent.length() \u003c 3) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return HelpTextUi.editPatientRecordHelpMessage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String content \u003d newContent.substring(2).trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (content.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return HelpTextUi.editPatientRecordHelpMessage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String field \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (newContent.contains(SYMPTOM_TAG)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            field \u003d newContent.substring(0, 4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            content \u003d newContent.substring(4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (newContent.contains(DIAGNOSIS_TAG)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            field \u003d newContent.substring(0, 5);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            content \u003d newContent.substring(5);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            field \u003d newContent.substring(0, 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            content \u003d newContent.substring(2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientRecord editPatientRecord \u003d findPatientRecord(nric, index, patientRecords);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (editPatientRecord \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patientRecords.get(nric) \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(PatientRecordTextUi.emptyPatientRecordMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (patientRecords.get(nric).size() \u003c\u003d index) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(PatientRecordTextUi.getEmptyPatientRecordList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean output \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String errorMsg \u003d Messages.MESSAGE_EDIT_ERROR + TextUi.NEWLINE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (field.equals(SYMPTOM_TAG)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            output \u003d editSymptoms(editPatientRecord, content);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(DIAGNOSIS_TAG)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            output \u003d editDiagnosis(editPatientRecord, content);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(DATE_TAG)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            output \u003d editDate(editPatientRecord, content);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            errorMsg \u003d output ? errorMsg : Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(TIME_TAG)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            output \u003d editTime(editPatientRecord, content);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            errorMsg \u003d output ? errorMsg : Messages.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_TAG);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (output) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.APPOINTMENT_FILEPATH,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedApptString(appointments));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                logger.info(\"Adding patient list to file failed.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        errorMsg \u003d TextUi.appendDivider(errorMsg);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return output ? PatientRecordTextUi.editPatientRecordSuccessMessage(editPatientRecord) : errorMsg;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Boolean editDiagnosis(PatientRecord editPatientRecord, String content) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        editPatientRecord.setDiagnosis(content);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Boolean editSymptoms(PatientRecord editPatientRecord, String content) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        editPatientRecord.setSymptom(content);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Edit the date of the appointment in the list within the patient object."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecord Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param newDate       The new date to be edited into."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Boolean editDate(PatientRecord patientRecord, String newDate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!Validation.isValidDate(newDate)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecord.setDate(newDate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Edit the time of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecord Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param newTime       The new time to be edited into."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Boolean editTime(PatientRecord patientRecord, String newTime) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!Validation.isValidTime(newTime)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecord.setTime(newTime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private PatientRecord findPatientRecord(String nric, int index, PatientRecordMap patientRecords) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        ArrayList\u003cPatientRecord\u003e patientRecordlist \u003d patientRecords.get(nric);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patientRecordlist !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientRecord patientRecord \u003d patientRecordlist.get(index);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return patientRecord;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 8,
      "itskesin": 151
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/FindPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class FindPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Constructor for FindAppointmentCommand Class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * It creates a new FindAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientNric Contains the NRIC of the patient that is to be retrieved."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index index for the record of the searched patient"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public FindPatientRecordCommand(String patientNric, int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecordMap"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean isIndexOutOfBound \u003d patientRecordMap.get(patientNric).size() \u003c\u003d index \u0026\u0026 index \u003e\u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (patientRecordMap.get(patientNric) \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_EMPTY_PATIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (isIndexOutOfBound) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return PatientRecordTextUi.getPatientRecordSuccessMessage(patientRecordMap, patientNric, index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String message \u003d Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 3,
      "itskesin": 40
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/IncorrectPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class IncorrectPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public IncorrectPatientRecordCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecordMap) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 19
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/ListPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class ListPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public ListPatientRecordCommand(String patientNric) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (patientRecords.get(patientNric) \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_EMPTY_PATIENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return PatientRecordTextUi.getPatientRecordListSuccessMessage(patientRecords.get(patientNric));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String message \u003d  Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 3,
      "itskesin": 29
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/PatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public abstract class PatientRecordCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientRecordMap patientRecordMap) throws HappyPillsException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 11
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/AppointmentParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.AppointmentCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.DoneAppointmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.EditAppointmentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.FindAppointmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.IncorrectAppointmentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.ListAppointmentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class AppointmentParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Parses the command given by the user to appointment commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param fullCommand the full command entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the command that the user has entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException throws an exception for invalid commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static AppointmentCommand parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String[] userCommand \u003d fullCommand.trim().split(\" \", 3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return parseAddCommand(userCommand[2]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String[] detailedCommand \u003d userCommand[2].trim().split(\" \", 3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (detailedCommand.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return new EditAppointmentCommand(detailedCommand[0].trim(), detailedCommand[1].trim(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        detailedCommand[2]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                throw new HappyPillsException(TextUi.incompleteCommandString(\" help edit appt\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String [] detailedCommand \u003d userCommand[2].trim().split(\" \",2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (detailedCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return new DoneAppointmentCommand(detailedCommand[0].trim(),detailedCommand[1].trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                throw new HappyPillsException(TextUi.incompleteCommandString(\" help done appt\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new ListAppointmentCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String [] detailedCommand \u003d userCommand[2].trim().split(\" \",2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (detailedCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return new DeleteAppointmentCommand(detailedCommand[0].trim(), detailedCommand[1].trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                throw new HappyPillsException(TextUi.incompleteCommandString(\"help delete appt\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return new FindAppointmentCommand(userCommand[2]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(TextUi.printIncorrectCommand(userCommand[0]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static AppointmentCommand parseAddCommand(String content) throws HappyPillsException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] details;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (content.startsWith(\"/\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            details \u003d content.substring(1).split(\" /\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            content \u003d \"@\" + content;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            details \u003d content.split(\" /\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] parseInput \u003d {\"\", \"\", \"\", \"\"};"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        for (String detail : details) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (detail.startsWith(\"ic\") \u0026\u0026 parseInput[0].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[0] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.startsWith(\"d\") \u0026\u0026 parseInput[1].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[1] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.startsWith(\"t\") \u0026\u0026 parseInput[2].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[2] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.startsWith(\"r\") \u0026\u0026 parseInput[3].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[3] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }  else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                System.out.println(\"    \" + detail + \" is not a valid input.\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                        + \"    \" + detail + \" will not be added\\n\" + TextUi.DIVIDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        while (parseInput[0].equalsIgnoreCase(\"\") || parseInput[1].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                || parseInput[2].equalsIgnoreCase(\"\") || parseInput[3].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(\"    Please input your missing detail listed below\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (parseInput[0].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                System.out.println(\"    /ic[NRIC]\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (parseInput[1].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                System.out.println(\"    /d[DATE] DD-MM-YYYY format\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (parseInput[2].equalsIgnoreCase(\"\") || !isInteger(parseInput[2].trim())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                System.out.println(\"    /t[TIME] HH:mm:ss format\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (parseInput[3].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                System.out.println(\"    /r[REASONS]\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String input \u003d promptUser().trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (input.equalsIgnoreCase(\"clear\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return new IncorrectAppointmentCommand(\"    Appointment is not added\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String[] updates;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (input.startsWith(\"/\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                updates \u003d input.substring(1).split(\" /\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                input \u003d \"@\" + input;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                updates \u003d input.split(\" /\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            for (String update : updates) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                if (update.trim().startsWith(\"ic\") \u0026\u0026 parseInput[0].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    parseInput[0] \u003d update.trim().substring(1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                } else if (update.trim().startsWith(\"d\") \u0026\u0026 parseInput[1].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    parseInput[1] \u003d update.trim().substring(2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                } else if (update.trim().startsWith(\"t\") \u0026\u0026 (parseInput[2].equalsIgnoreCase(\"\"))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    parseInput[2] \u003d update.trim().substring(1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                } else if (update.trim().startsWith(\"r\") \u0026\u0026 parseInput[3].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    parseInput[3] \u003d update.trim().substring(1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        boolean userConfirmation \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(promptConfirmation(parseInput));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        while (!userConfirmation) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String confirmation \u003d promptUser();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (confirmation.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                userConfirmation \u003d true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (confirmation.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return new IncorrectAppointmentCommand(\"    Appointment is not added.\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                System.out.println(\"    Please input [y] for yes or [n] for no\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return new AddAppointmentCommand(parseInput[0].toUpperCase().substring(1).trim(), parseInput[1].trim(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[2].trim(), parseInput[3].trim());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static String promptUser() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Scanner in \u003d HappyPills.scanner;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String reInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return reInput;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Check if the String can be converted to Integer."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param input value to check if is integer"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return true if is an integer, false otherwise"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static boolean isInteger(String input) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Prompt user for conformation with this message."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param parseInput details to be displayed to user for confirmation"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return string to be displayed to user for confirmation"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String promptConfirmation(String[] parseInput) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String text \u003d \"        Are you sure all the listed details are correct?\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        NRIC : \" + parseInput[0].toUpperCase().trim().substring(1) + \"\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Date : \" + parseInput[1].trim() + \"\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Time : \" + parseInput[2].trim() + \"\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Reason : \" + parseInput[3].trim() + \"\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"                                                   (Y/N)?\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 25,
      "sitinadiah25": 141,
      "itskesin": 10
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.IncorrectAppointmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final DateTimeFormatter DTF \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final DateTimeFormatter DF \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String PATIENT_TAG \u003d \"patient\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String HELP_TAG \u003d \"help\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String APPOINTMENT_TAG \u003d \"appt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String PATIENT_RECORD_TAG \u003d \"pr\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Parses the command given by the user to the other command parses."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param fullCommand the full command given by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the command entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException throws an exception for invalid commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static Command parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] userCommand \u003d fullCommand.trim().split(\" \", 3); // leading spaces removed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (userCommand.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return parseGeneralCommands(fullCommand, userCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(HELP_TAG)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return new HelpCommand(fullCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[1].equalsIgnoreCase(PATIENT_TAG)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return PatientParser.parse(fullCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[1].equalsIgnoreCase(APPOINTMENT_TAG)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return AppointmentParser.parse(fullCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[1].equalsIgnoreCase(PATIENT_RECORD_TAG)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return PatientRecordParser.parse(fullCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static Command parseGeneralCommands(String fullCommand, String[] userCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(\"help\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new HelpCommand(fullCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"exit\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            // exit command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            // incorrect command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 9,
      "Janicetyy": 5,
      "sitinadiah25": 13,
      "itskesin": 28
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/PatientParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.AddPatientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.DeletePatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.EditPatientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.PatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.IncorrectPatientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.ListPatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.GetPatientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class PatientParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param fullCommand Full user input string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the command Based on the user input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException Errors base on invalid input or insufficient input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static PatientCommand parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] userCommand \u003d fullCommand.trim().split(\" \", 3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (userCommand[0].trim().equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new ListPatientCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].trim().equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (userCommand.length \u003d\u003d 1 || userCommand[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(\"    Patient\u0027s detail is empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return parseAddCommand(userCommand[2]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].trim().equalsIgnoreCase(\"get\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (userCommand.length \u003d\u003d 1 || userCommand[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(\"    NRIC of the patient not provided\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new GetPatientCommand(userCommand[2].trim().toUpperCase());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String[] edit \u003d fullCommand.split(\" \", 4);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (edit.length \u003c 3) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(\"    Please input your patient\u0027s details correctly.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return new EditPatientCommand(edit[2], edit[3]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new DeletePatientCommand(userCommand[2]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(\"    Invalid Command.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static PatientCommand parseAddCommand(String content) throws HappyPillsException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] details;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (content.startsWith(\"/\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            details \u003d content.substring(1).split(\" /\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            content \u003d \"@\" + content;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            details \u003d content.split(\" /\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] parseInput \u003d {\"\", \"\", \"\", \"\", \"\", \"NIL\", \"NIL\"};"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        for (String detail : details) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (detail.startsWith(\"n\") \u0026\u0026 parseInput[0].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[0] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.startsWith(\"ic\") \u0026\u0026 parseInput[1].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[1] \u003d detail.substring(2).trim().toUpperCase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.startsWith(\"p\") \u0026\u0026 parseInput[2].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[2] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(\"dob\") \u0026\u0026 parseInput[3].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[3] \u003d detail.substring(3).trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.startsWith(\"b\") \u0026\u0026 parseInput[4].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[4] \u003d detail.substring(1).trim().toUpperCase();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.startsWith(\"a\") \u0026\u0026 parseInput[5].equalsIgnoreCase(\"NIL\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[5] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(\"rm\") \u0026\u0026 parseInput[6].equalsIgnoreCase(\"NIL\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[6] \u003d detail.substring(2).trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                System.out.println(\"    \" + detail + \" is not a valid input.\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                        + \"    \" + detail + \" will not be added\\n\" + TextUi.DIVIDER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        while (parseInput[0].equalsIgnoreCase(\"\") || parseInput[1].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                || parseInput[2].equalsIgnoreCase(\"\") || !checkNric(parseInput[1])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                || !checkDate(parseInput[3].trim()) || parseInput[3].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                || !checkPhoneNum(parseInput[2].trim()) || !isInteger(parseInput[2].trim())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                || parseInput[4].equalsIgnoreCase(\"\") || !checkType(parseInput[4].trim())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(\"    Please input your missing detail listed below\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (parseInput[0].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                System.out.println(\"    /n[NAME]\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (parseInput[1].equalsIgnoreCase(\"\") || !checkNric(parseInput[1])) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                System.out.println(\"    /ic[NRIC] must follow standard nric format : S/T [7-digits] [A-Z]\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (parseInput[2].equalsIgnoreCase(\"\") || !checkPhoneNum(parseInput[2].trim())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    || !isInteger(parseInput[2].trim())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                System.out.println(\"    /p[PHONE] only number and must be 8 digit\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (parseInput[3].equalsIgnoreCase(\"\") || !checkDate(parseInput[3].trim())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                System.out.println(\"    /dob[DOB] must follow date format: DD/MM/YYYY\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (parseInput[4].equalsIgnoreCase(\"\") || !checkType(parseInput[4].trim())) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                System.out.println(\"    /b[BLOOD TYPE]\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String input \u003d promptUser().trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (input.equalsIgnoreCase(\"clear\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return new IncorrectPatientCommand(TextUi.DIVIDER + \"\\n    Command has been aborted.\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                        + TextUi.DIVIDER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String[] updates;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (input.startsWith(\"/\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                updates \u003d input.substring(1).split(\" /\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                input \u003d \"@\" + input;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                updates \u003d input.split(\" /\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            for (String update : updates) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                if (update.trim().startsWith(\"n\") \u0026\u0026 parseInput[0].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    parseInput[0] \u003d update.substring(1).trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                } else if (update.trim().startsWith(\"ic\") \u0026\u0026 (parseInput[1].equalsIgnoreCase(\"\"))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                        || !checkNric(parseInput[1].trim())) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    parseInput[1] \u003d update.trim().substring(2).toUpperCase().trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                } else if (update.trim().startsWith(\"p\") \u0026\u0026 ((parseInput[2].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                        || !isInteger(parseInput[2].trim()) || !checkPhoneNum(parseInput[2].trim())))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    parseInput[2] \u003d update.substring(1).trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                } else if (update.trim().startsWith(\"dob\") \u0026\u0026 (parseInput[3].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                        || !checkDate(parseInput[3].trim()))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    parseInput[3] \u003d update.trim().substring(3).trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                } else if (update.trim().startsWith(\"b\") \u0026\u0026 (parseInput[4].equalsIgnoreCase(\"\"))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                        || !checkType(parseInput[4].trim())) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    parseInput[4] \u003d update.trim().substring(1).trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        boolean userConformation \u003d false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(promptConformation(parseInput));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        while (!userConformation) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String conformation \u003d promptUser();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (conformation.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                userConformation \u003d true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (conformation.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return new IncorrectPatientCommand(\"    The current information is not added.\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                        + \"    Please add all the details again! Thank you.\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                        + TextUi.DIVIDER);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                System.out.println(\"    Please input [y] for yes or [n] for no\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return new AddPatientCommand(parseInput[0].trim(), parseInput[1].toUpperCase().trim(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                Integer.parseInt(parseInput[2].trim()), parseInput[3].trim(), parseInput[4].trim(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[5].trim(), parseInput[6].trim());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static String promptUser() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Scanner in \u003d HappyPills.scanner;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String reInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return reInput;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Check if the String can be converted to Integer."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param input value to check if is integer"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return true if is an integer, false otherwise"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static boolean isInteger(String input) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            int x \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * To check format for phone."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param phoneNum details of time"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return boolean true if the time format is correct otherwise false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    static boolean checkPhoneNum(String phoneNum) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String pattern \u003d \"([0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return phoneNum.matches(pattern);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * To check format for nric."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric details of nric"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return boolean true if the time format is correct otherwise false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    static boolean checkNric(String nric) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String pattern \u003d \"([S-T][0-9][0-9][0-9][0-9][0-9][0-9][0-9][A-Z])\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return nric.matches(pattern);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * To check format for nric."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric details of nric"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return boolean true if the time format is correct otherwise false"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    static boolean checkType(String nric) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String pattern \u003d \"([A|B|AB|O][+-])\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return nric.matches(pattern);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * To check format for date."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param date details of date"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return boolean true if the date format is correct otherwise false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    static boolean checkDate(String date) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String pattern \u003d \"(0?[1-9]|[12][0-9]|3[01])\\\\/(0?[1-9]|1[0-2])\\\\/([0-9]{4})\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (date.matches(pattern)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            flag \u003d true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Prompt user for conformation with this message."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param parseInput details to be displayed to user for confirmation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return string to be displayed to user for confirmation"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String promptConformation(String[] parseInput) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String text \u003d \"        Are you sure all the listed details are correct?\\n\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Name : \" + parseInput[0].trim() + \"\\n\""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        NRIC : \" + parseInput[1].toUpperCase().trim() + \"\\n\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Phone Number : \" + parseInput[2].trim() + \"\\n\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        DOB : \" + parseInput[3].trim() + \"\\n\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Blood Type : \" + parseInput[4].trim() + \"\\n\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Allergies : \" + parseInput[5].trim() + \"\\n\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Remarks : \" + parseInput[6].trim() + \"\\n\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"                                                   (Y/N)?\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 90,
      "sitinadiah25": 148,
      "itskesin": 9
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/PatientRecordParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.AddPatientRecordCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.DeletePatientRecordCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.EditPatientRecordCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.FindPatientRecordCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.IncorrectPatientRecordCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.ListPatientRecordCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.PatientRecordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class PatientRecordParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String NRIC_TAG \u003d \"ic\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String SYMPTOM_TAG \u003d \"sym\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIAGNOSIS_TAG \u003d \"diag\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DATE_TAG \u003d \"d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String TIME_TAG \u003d \"t\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Parses the command given by the user to visit commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param fullCommand the full command entered by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return the command that the user has entered."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException throws an exception for invalid commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static PatientRecordCommand parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String[] userCommand \u003d fullCommand.split(\" \", 3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean isCommandLengthOne \u003d userCommand.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        userCommand \u003d trimArray(userCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return parsePatientRecordList(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return parsePatientRecordAdd(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return parsePatientRecordFind(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return parsePatientRecordEdit(fullCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return parsePatientRecordDelete(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordCommand parsePatientRecordDelete(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        checkEmptyNric(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String[] input \u003d userCommand[2].split(\" \", 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        input \u003d trimArray(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        checkIndexValidity(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        checkNricValidity(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return new DeletePatientRecordCommand(input[0].toUpperCase(), Integer.parseInt(input[1]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static void checkNricValidity(String[] input) throws HappyPillsException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!Validation.isValidNric(input[0].toUpperCase())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static void checkIndexValidity(String[] input) throws HappyPillsException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!Validation.isInteger(input[1])) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static void checkEmptyNric(String[] userCommand, boolean isCommandLengthOne) throws HappyPillsException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (isCommandLengthOne || userCommand[1].isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_NRIC_NOT_PROVIDED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordCommand parsePatientRecordFind(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        checkEmptyNric(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String[] input \u003d userCommand[2].split(\" \", 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        input \u003d trimArray(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        checkIndexValidity(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        checkNricValidity(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return new FindPatientRecordCommand(input[0].toUpperCase(), Integer.parseInt(input[1]));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordCommand parsePatientRecordAdd(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (isCommandLengthOne || userCommand[1].isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_DETAILS_NOT_PROVIDED);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return parseAddCommand(userCommand[2]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordCommand parsePatientRecordList(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        checkEmptyNric(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!Validation.isValidNric(userCommand[2].toUpperCase())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return new ListPatientRecordCommand(userCommand[2].toUpperCase());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static String[] trimArray(String[] array) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String[] trimmedArray \u003d new String[array.length];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        for (int size \u003d 0; size \u003c array.length; size++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            trimmedArray[size] \u003d array[size].trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return trimmedArray;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordCommand parsePatientRecordEdit(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String[] edit \u003d fullCommand.split(\" \", 5);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (edit.length \u003c 4) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_MISSING_FIELD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!Validation.isInteger(edit[3].trim())) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!Validation.isValidNric(edit[2].toUpperCase().trim())) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return new EditPatientRecordCommand("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                edit[2].trim().toUpperCase(), Integer.parseInt(edit[3].trim()), edit[4].trim());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static boolean isInputEmpty(String input) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return input.equalsIgnoreCase(\"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static boolean isValidDateInput(String input, String detail) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return isInputEmpty(input)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \u0026\u0026 Validation.isValidDate(detail.substring(1).trim());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static boolean isValidTimeInput(String input, String detail) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return isInputEmpty(input)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \u0026\u0026 Validation.isValidTime(detail.substring(1).trim());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static boolean hasMissingFields(String[] parseInput) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        for (int index \u003d 0; index \u003c 5; index++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            if (parseInput[index].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean isIncorrectFormat \u003d !Validation.isValidNric(parseInput[0])"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                || !Validation.isValidDate(parseInput[3]) || !Validation.isValidTime(parseInput[4]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return isIncorrectFormat;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordCommand parseAddCommand(String content) throws HappyPillsException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String[] details;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        details \u003d checkInput(content);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String[] parseInput \u003d {\"\", \"\", \"\", \"\", \"\", \"\"};"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        for (String detail : details) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            if (detail.startsWith(NRIC_TAG) \u0026\u0026 isInputEmpty(parseInput[0])) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                parseInput[0] \u003d detail.substring(2).trim().toUpperCase();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (detail.startsWith(SYMPTOM_TAG) \u0026\u0026 isInputEmpty(parseInput[1])) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                parseInput[1] \u003d detail.substring(3).trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (detail.startsWith(DIAGNOSIS_TAG) \u0026\u0026 isInputEmpty(parseInput[2])) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                parseInput[2] \u003d detail.substring(4).trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (detail.startsWith(DATE_TAG) \u0026\u0026 isValidDateInput(parseInput[3],detail)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                parseInput[3] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (detail.startsWith(TIME_TAG) \u0026\u0026 isValidTimeInput(parseInput[4],detail)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                parseInput[4] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                PatientRecordTextUi.patientRecordNotAddedMessage(detail);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        while (hasMissingFields(parseInput)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            printMissingFields(parseInput);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String input \u003d readUserInput().trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            if (input.equalsIgnoreCase(\"clear\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_COMMAND_ABORTED);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String[] updates \u003d checkInput(input);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            updates \u003d trimArray(updates);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            updateInput(parseInput, updates);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean hasConfirmation \u003d false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(PatientRecordTextUi.promptConformation(parseInput));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        while (!hasConfirmation) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String confirmation \u003d readUserInput();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            boolean isConfirmed \u003d confirmation.equalsIgnoreCase(\"y\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            boolean isNotConfirmed \u003d confirmation.equalsIgnoreCase(\"n\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            if (isConfirmed) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                hasConfirmation \u003d true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (isNotConfirmed) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                return new IncorrectPatientRecordCommand(Messages.MESSAGE_PATIENT_RECORD_NOT_ADDED);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                System.out.println(Messages.MESSAGE_USER_CONFIRMATION);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return new AddPatientRecordCommand(parseInput[0].toUpperCase(), parseInput[1],"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                parseInput[2], parseInput[3], parseInput[4]);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static void updateInput(String[] parseInput, String[] updates) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        for (String update : updates) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            if (update.startsWith(NRIC_TAG) \u0026\u0026 (parseInput[0].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                    || !Validation.isValidNric(parseInput[0]))) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                parseInput[0] \u003d update.substring(2).toUpperCase().trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (update.startsWith(SYMPTOM_TAG) \u0026\u0026 (parseInput[1].equalsIgnoreCase(\"\"))) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                parseInput[1] \u003d update.substring(3);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (update.startsWith(DIAGNOSIS_TAG) \u0026\u0026 parseInput[2].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                parseInput[2] \u003d update.substring(4);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (update.startsWith(DATE_TAG) \u0026\u0026 (parseInput[3].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                    || !Validation.isValidDate(parseInput[3]))) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                parseInput[3] \u003d update.substring(1);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (update.startsWith(TIME_TAG) \u0026\u0026 (parseInput[4].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                    || !Validation.isValidTime(parseInput[4]))) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                parseInput[4] \u003d update.substring(1);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static void printMissingFields(String[] parseInput) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(Messages.MESSAGE_INFORM_MISSING);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (parseInput[0].equalsIgnoreCase(\"\") || !Validation.isValidNric(parseInput[0])) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            System.out.println(Messages.MESSAGE_NRIC_FORMAT);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (parseInput[1].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            System.out.println(Messages.MESSAGE_SYMPTOM_FORMAT);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (parseInput[2].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            System.out.println(Messages.MESSAGE_DIAGNOSIS_FORMAT);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (parseInput[3].equalsIgnoreCase(\"\") || !Validation.isValidDate(parseInput[3])) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            System.out.println(Messages.MESSAGE_DATE_FORMAT);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (parseInput[4].equalsIgnoreCase(\"\") || !Validation.isValidTime(parseInput[4])) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            System.out.println(Messages.MESSAGE_TIME_FORMAT);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static String[] checkInput(String content) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String[] details;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (content.startsWith(\"/\")) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            details \u003d content.substring(1).split(\" /\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            content \u003d \"@\" + content;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            details \u003d content.split(\" /\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static String readUserInput() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Scanner in \u003d HappyPills.scanner;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String reInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return reInput;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "itskesin": 263
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/Validation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class Validation {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * To check format for phone."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param s string to be validated"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return boolean true if the time format is correct otherwise false"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidPhoneNum(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String pattern \u003d \"^[0-9]{9}$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return s.matches(pattern);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * check string if fits date format. Only allows for year 2000 and beyond."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param date string to be validated"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if correct date format, false otherwise"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String pattern \u003d \"(0?[1-9]|[12][0-9]|3[01])\\\\/(0?[1-9]|1[0-2])\\\\/([0-9]{4})\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean isDate \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (date.matches(pattern)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            isDate \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return isDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * check string if fits time format. (HH:MM)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param time string to be validated"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if correct date format, false otherwise."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidTime(String time) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String pattern \u003d \"([01][0-9]|2[0-3]):([0-5][0-9])\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return time.matches(pattern);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Check string if is valid blood type."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param s String to be validated"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if is valid, false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidBloodType(String s) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String pattern \u003d \"([A|B|AB|O][+-])\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return s.matches(pattern);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Check string if is numeric."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param s String to be validated"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if is numeric, false otherwise."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isNumeric(String s) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String pattern \u003d \"^[0-9]*$\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return  s.matches(pattern);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Check string if is valid NRIC."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param s String to be validated"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if is valid, false otherwise."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidNric(String s) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String pattern \u003d \"(?i)^[STFG]\\\\d{7}[A-Z]$\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return  s.matches(pattern);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Check if the String can be converted to Integer."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param input value to check if is integer"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return true if is an integer, false otherwise"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isInteger(String input) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            int x \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            if (x \u003c 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 52,
      "itskesin": 33
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/Appointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import static java.lang.String.valueOf;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Represents an appointment."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * It also functions as base class for appointments from which specialised tasks are inherited from."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Stores the details of the appointment."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected static int count \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String reason;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String appointmentId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected Boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for Appointment class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * It creates a new appointment with the details provided by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param nric NRIC of patient."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param reason reason for appointment."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param date date of appointment."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param time time of appointment."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public Appointment(String nric, String reason, String date, String time) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.appointmentId \u003d valueOf(count);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        count +\u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for Appointment class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new appointment with the details provided by load function in storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param id id of the appointment"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric NRIC of patient."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param reason reason for appointment."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param date date of appointment."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param time time of appointment."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param done status of whether the appointment is over"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public Appointment(String id, String nric, String date, String time,String reason, Boolean done) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.appointmentId \u003d id;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        count +\u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setNric(String nric) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getReason() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return reason;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setReason(String reason) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setTime(String time) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setAppointmentId(String appointmentId) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.appointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getAppointmentId() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return appointmentId;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String status \u003d this.isDone ? \"Yes\" : \"No\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String text \u003d \"        NRIC     : \" + this.nric + \"\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Date     : \" + this.date + \"\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Time     : \" + this.time + \"\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Reason   : \" + this.reason + \"\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        ID       : \" + this.appointmentId + \"\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Attended : \" + status + \"\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String doneString(boolean done) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return done ? \"T\" : \"F\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Create a string with all the appointment\u0027s data for storage to a text file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Each variable is separated with | as a divider."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return a formatted string with appointment\u0027s data."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String text \u003d this.appointmentId + \"|\" + this.nric + \"|\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + this.date + \"|\" + this.time + \"|\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + this.reason + \"|\" + doneString(this.isDone) + System.lineSeparator();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 38,
      "sitinadiah25": 99
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/AppointmentMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import static java.lang.String.valueOf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class AppointmentMap {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private final Map\u003cString, Appointment\u003e argMultimap \u003d new HashMap\u003cString, Appointment\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Adds an appointment into the AppointmentMap."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param appointment the appointment to be added into the map."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException throws exception if there is already an appointment with the given datetime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void addAppointment(Appointment appointment) throws HappyPillsException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        int current \u003d argMultimap.size() + 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        //appointment.setAppointmentId(valueOf(current));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!argMultimap.containsKey(appointment.appointmentId)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            argMultimap.put(appointment.appointmentId,appointment);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public Iterable\u003c? extends Map.Entry\u003e entrySet() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return argMultimap.entrySet();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return argMultimap.isEmpty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public Appointment get(String appointmentID) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return argMultimap.get(appointmentID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public boolean containsKey(String appointmentId) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return argMultimap.containsKey(appointmentId);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void remove(String appointmentId) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        argMultimap.remove(appointmentId);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 7,
      "sitinadiah25": 42
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Represents a patient."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * It also functions as base class for patients from which specialised tasks are inherited from."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Stores the description of the patient."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected int phoneNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String dateOfBirth;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String bloodType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String allergies \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String remarks \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected ArrayList\u003cAppointment\u003e appointments \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for Patient Class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * It creates a new patient with the description provided by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param name          Name of the patient."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric          NRIC of the patient."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param phoneNumber   Phone number of the patient."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param dateOfBirth   Date of birth of the patient."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param bloodType     Blood type of the patient."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param allergies     Allergies the patient may have."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param remarks       Remarks for the patient."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public Patient(String name, String nric, int phoneNumber, String dateOfBirth,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                   String bloodType, String allergies, String remarks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (dateValidation(dateOfBirth)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            this.appointments \u003d new ArrayList\u003cAppointment\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(\"    Date of birth is invalid. Please try again in this format:\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                                + \"\\n    DD/MM/YYYY\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the status of the task in form of an icon."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * \"\\u2713\" is returned to denote that the task is complete."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * \"\\u2718\" is returned to denote that the task is incomplete."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return statusIcon Represents the current status of the task as described above."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the nric of the patient."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return nric Represents the nric of the patient."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.nric;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the phone number of the patient."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return phoneNumber Represents the phone number of the patient."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public int getPhoneNumber() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.phoneNumber;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the date of birth of the patient."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return phoneNumber Represents the date of birth of the patient."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getDateOfBirth() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.dateOfBirth;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the blood type of the patient."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return phoneNumber Represents the blood type of the patient."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getBloodType() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.bloodType;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the allergies of the patient."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return allergies Represents the allergies of the patient."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getAllergies() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.allergies;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the remarks of the patient."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return remarks Represents the remarks of the patient."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.remarks;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns the ArrayList of appointments of the patient."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return appointments Represents the ArrayList of appointments of the patient."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public ArrayList\u003cAppointment\u003e getAppointments() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return appointments;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void addAppointment(Appointment appt) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.appointments.add(appt);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String text \u003d \"        Name : \" + this.name + \"\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        NRIC : \" + this.nric + \"\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Phone Number : \" + this.phoneNumber + \"\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        DOB : \" + this.dateOfBirth + \"\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Blood Type : \" + this.bloodType + \"\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Allergies : \" + this.allergies + \"\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Remarks : \" + this.remarks + \"\\n\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setPhoneNumber(int phoneNumber) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setAllergies(String allergies) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setBloodType(String bloodType) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Create a string with all the patient\u0027s data for storage to a text file."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Each variable is separated with | as a divider."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted string with patient\u0027s data."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String text \u003d this.name + \"|\" + this.nric + \"|\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + this.phoneNumber + \"|\" + this.dateOfBirth + \"|\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + this.bloodType + \"|\" + this.allergies + \"|\" + this.remarks + System.lineSeparator();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static boolean dateValidation(String date) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        boolean status \u003d false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (checkDate(date)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                dateFormat.parse(date);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                status \u003d true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                status \u003d false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    static boolean checkDate(String date) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String pattern \u003d \"(0?[1-9]|[12][0-9]|3[01])\\\\/(0?[1-9]|1[0-2])\\\\/([0-9]{4})\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (date.matches(pattern)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            flag \u003d true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 105,
      "Janicetyy": 32,
      "sitinadiah25": 68
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/PatientMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class PatientMap {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private final Map\u003cString, Patient\u003e argMultimap \u003d new HashMap\u003cString, Patient\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Associates the specified argument value with key in this map."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patient  Patient\u0027s details"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws HappyPillsException exception if NRIC already exist"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void add(Patient patient) throws HappyPillsException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!argMultimap.containsKey(patient.nric)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            argMultimap.put(patient.nric, patient);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(\"    Patient is already in the list. Please use help command.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public Patient get(String nric) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.get(nric);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public boolean containsKey(String patientNric) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.containsKey(patientNric);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.isEmpty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public Iterable\u003c? extends Map.Entry\u003e entrySet() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.entrySet();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void remove(String nric) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        argMultimap.remove(nric);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 1,
      "itskesin": 46
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/PatientRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import static java.lang.String.valueOf;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Represents an vist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * It also functions as base class for visit from which specialised tasks are inherited from."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class PatientRecord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Stores the details of the appointment."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String symptom;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String diagnosis;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Constructor for Visit class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * It creates a new appointment with the details provided by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric NRIC of patient."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param symptom patient\u0027s symptom."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param diagnosis patient\u0027s diagnosis."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param date date of appointment."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param time time of appointment."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public PatientRecord(String nric, String symptom, String diagnosis, String date, String time) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.symptom \u003d symptom;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setNric(String nric) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String getSymptom() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return symptom;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void setSymptom(String symptom) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.symptom \u003d symptom;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String getDiagnosis() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return diagnosis;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void setDiagnosis(String diagnosis) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setTime(String time) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return  \"        NRIC : \" + nric.trim().toUpperCase() + \"\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Symptom : \" + symptom.trim() + \"\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Diagnosis : \" + diagnosis.trim() + \"\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Date : \" + date.trim() + \"\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        time : \" + time.trim() + \"\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 58,
      "itskesin": 27
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/PatientRecordMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class PatientRecordMap {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private final Map\u003cString, ArrayList\u003cPatientRecord\u003e\u003e argMultimap \u003d new HashMap\u003cString, ArrayList\u003cPatientRecord\u003e\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Adds an Visit into the VisitMap."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecord the appointment to be added into the map."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric nric for the patient"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException throws exception if there is already an appointment with the given datetime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void addPersonalRecord(PatientRecord patientRecord, String nric) throws HappyPillsException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        ArrayList\u003cPatientRecord\u003e patientRecords \u003d argMultimap.get(nric);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        // if list does not exist create it"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patientRecords \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientRecords \u003d new ArrayList\u003cPatientRecord\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientRecords.add(patientRecord);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            argMultimap.put(patientRecord.getNric(), patientRecords);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            // add if item is not already in list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            if (!patientRecords.contains(patientRecord.nric)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                patientRecords.add(patientRecord);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                argMultimap.put(patientRecord.getNric(), patientRecords);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(\"    The Patient Record is already in the database.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                        + \"    Please try again.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public Iterable\u003c? extends Map.Entry\u003e entrySet() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.entrySet();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.isEmpty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public ArrayList\u003cPatientRecord\u003e get(String nric) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.get(nric);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public boolean containsKey(String appointmentId) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.containsKey(appointmentId);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void remove(String nric) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        argMultimap.remove(nric);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void removeVisit(String nric, int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        ArrayList\u003cPatientRecord\u003e patientRecords \u003d argMultimap.get(nric);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecords.remove(index - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void removePersonalRecord(ArrayList\u003cPatientRecord\u003e patientRecord, String patientNric) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        argMultimap.put(patientNric, patientRecord);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 51,
      "itskesin": 20
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/exception/HappyPillsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class HappyPillsException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Updates Exception message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param message Contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public HappyPillsException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 14
    }
  },
  {
    "path": "src/main/java/seedu/happypills/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " * A class that manages read and write operations to file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String PATIENT_FILEPATH \u003d \"data/patient.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String APPOINTMENT_FILEPATH \u003d \"data/appointment.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String SYMPTOM_FILEPATH \u003d \"data/symptoms.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Overwrite file with a formatted string of the entire list provided. Creates file if it does not exist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Used for edit and delete commands"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to save to, requires directory/file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param dataString  a formatted string of a list of items to be saved to file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws IOException if unable to save to file, possibly due to interruptions."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void writeAllToFile(String filePath, String dataString) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File d \u003d new File(filePath.substring(0, filePath.lastIndexOf(\u0027/\u0027)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!d.exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            d.mkdir();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.write(dataString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Add new single line formatted strings to file. Creates file if it does not exist."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to save to, requires directory/file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param dataString  single item as string to be saved to file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws IOException if unable to save to file, possibly due to interruptions."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void addSingleItemToFile(String filePath, String dataString) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File d \u003d new File(filePath.substring(0, filePath.lastIndexOf(\u0027/\u0027)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!d.exists()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            d.mkdir();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath,true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.write(dataString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Read and send file data to parse line by line as string."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of historical patients patient list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to read from."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return patientList of all patients found in the file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws FileNotFoundException if the file specified by directory/filename does not exist."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static PatientMap loadPatientsFromFile(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientMap storedPatients \u003d new PatientMap();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String stringInput \u003d s.nextLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            parsePatientFileContent(stringInput, storedPatients);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return storedPatients;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * convert a single line data into values of a patients and add it back to the provided patientList."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param savedString a single string with all the data required for a patient."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param storedPatients a list which the patient details retrieved should be added into."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static void parsePatientFileContent(String savedString, PatientMap storedPatients) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String[] dataString \u003d savedString.split(\"[|]\", 7);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient tempPatient \u003d new Patient(dataString[0], dataString[1],"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Integer.parseInt(dataString[2]), dataString[3], dataString[4],"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                dataString[5], dataString[6]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            storedPatients.add(tempPatient);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Read and send file data to parse line by line as string."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of historical patients patient list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to read from."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Shared map of all patients"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return patientList of all patients found in the file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws FileNotFoundException if the file specified by directory/filename does not exist."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static AppointmentMap loadAppointmentFromFile(String filePath, PatientMap patients)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        AppointmentMap storedAppt \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String stringInput \u003d s.nextLine();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            parseAppointmentFileContent(stringInput, storedAppt, patients);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return storedAppt;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * convert a single line data into values of an appointment and add it back to the provided apptList."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param savedString a single string with all the data required for a appointment."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param storedAppt a list which the appointment details retrieved should be added into."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static void parseAppointmentFileContent(String savedString,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                                                    AppointmentMap storedAppt, PatientMap patients) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String[] dataString \u003d savedString.split(\"[|]\", 7);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Boolean isDone \u003d dataString[5].equals(\"T\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment tempAppt \u003d new Appointment(dataString[0], dataString[1],"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                dataString[2], dataString[3], dataString[4], isDone);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient patient \u003d (Patient) patients.get(dataString[1]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (patient !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                patient.addAppointment(tempAppt);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                storedAppt.addAppointment(tempAppt);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 150,
      "itskesin": 5
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/AppointmentTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class AppointmentTextUi extends TextUi {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getEmptyAppointmentListMessage \u003d \"    There are no appointments in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String appointmentNotFoundMessage \u003d \"\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The appointment cannot be found. Please try again.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + DIVIDER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Shows list of appointments in the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments The list of appointments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return message to be displayed to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getAppointmentList(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Here is your list of appointments:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    ID | date       | time     | NRIC\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry appointment : appointments.entrySet()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Appointment a \u003d (Appointment)appointment.getValue();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String nric \u003d a.getNric();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String id \u003d a.getAppointmentId();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String date \u003d a.getDate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String time \u003d a.getTime();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message +\u003d \"    \" + id + \"  | \" + date + \" | \" + time + \" | \" + nric + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message +\u003d DIVIDER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Generate a success message upon adding the appointment."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment the appointment which the program added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return Appointment details if any, and a notification message otherwise."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String addAppointmentSuccessMessage(Appointment appointment) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Appointment has been added with Appointment ID \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + appointment.getAppointmentId() + \".\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Generate a success message upon finding the correct appointment."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient the patient which the program have to find the appointment for."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return Appointment details if any, and a notification message otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getAppointmentSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here are the patient\u0027s appointments:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"     | ID | NRIC   | Reason | Date      | Time     |\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ArrayList\u003cAppointment\u003e tempList \u003d patient.getAppointments();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : tempList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String id \u003d appointment.getAppointmentId();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String nric \u003d appointment.getNric();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String reason \u003d appointment.getReason();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String date \u003d appointment.getDate();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String time \u003d appointment.getTime();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            content +\u003d \"     | \" + id + \" | \" + nric + \" | \" + reason + \" | \" + date + \" | \" + time + \" | \\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            returnMessage \u003d \"    There are no appointments in the list.\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            returnMessage +\u003d content + DIVIDER;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Display updated patient\u0027s appointment."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment that was updated."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return The patient\u0027s updated appointment."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String editAppointmentSuccessMessage(Appointment appointment) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Patient appointment have been updated as follows:\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + appointment + DIVIDER;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Display updated patient\u0027s appointment."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment that was updated."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return The patient\u0027s updated appointment."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String doneAppointmentSuccessMessage(Appointment appointment) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    The following appointment has been marked done:\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + appointment + DIVIDER;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 99
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/HelpTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class HelpTextUi extends TextUi {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String generalHelpMessage \u003d \"\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    HappyPills Commands\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    General Commands:\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      help | Displays all of HappyPill\u0027s Commands\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      exit | Exits the program\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Patient Details Commands:\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add patient | Adds a patient into the program\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list patient | Lists all the patients in the program\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      get patient | Retrieves the details of a given patient\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit patient | Edits a patient\u0027s detail\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete patient | Deletes a patient from the program\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Patient Medial Records Commands:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add pr | Adds a prior patient records into the program\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit pr | Edits a prior patient record\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete pr | Deletes a prior patient record\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list pr | List down all records for a particular patient\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      find pr | Retrieves a particular record\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Appointment Scheduling Commands:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add appt | Adds an appointment into the program\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list appt | Lists all the appointments into the program\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit appt | Edits an appointment in the program\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete appt | Deletes an appointment from the program\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      done appt | Marks an appointment as done\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      find appt | Finds all the appointments under a patient\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    For more specific command instructions, enter `help [COMMAND]`\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      Example: help add appt\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String exitHelpMessage \u003d \"\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To exit the program, run the following command:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      exit\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The above command will save the current patient records and terminate the program.\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    //Patient help Strings"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String AddPatientHelpMessage \u003d \"\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To add a new patient into the program, use the following command:\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Note: patient details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add patient /ic[NRIC] /n[NAME] /p[PHONE_NUMBER] /dob[DOB] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"/b[BLOOD_TYPE] /a[Allergies] /rm[Remarks]\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The command above adds a new patient.\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String listPatientHelpMessage \u003d \"\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To retrieve a list of all the patients within the program,\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    run the following command:\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list patient\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientHelpMessage \u003d \"\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To retrieve a patient\u0027s information, run the following command:\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Note: patient details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      get patient [NRIC]\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Example:\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      get patient S9999999Z\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The command above will display information regarding the patient with NRIC S9999999Z.\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String editPatientHelpMessage \u003d \"\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To edit a patient\u0027s information, run the following command:\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Note: patient details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit patient [NRIC] /p[PHONE_NUMBER] to edit patient\u0027s phone number,\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit patient [NRIC] /a[ALLERGIES] to edit patient\u0027s allergies,\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit patient [NRIC] /r[REMARKS] to edit patient\u0027s remarks\\\"\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that editing the patient\u0027s records will overwrite any previous information.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Adding of allergies or remarks can be done with the add command.\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String deletePatientHelpMessage \u003d \"\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To delete a patient, run the following command:\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Note: patient details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete patient [NRIC]\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The user will be prompted to confirm if they would like to delete the patient\u0027s records.\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that deletion cannot be undone.\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    //Patient Record Help Strings"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String AddPatientRecordHelpMessage \u003d \"\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To add a new patient record into the program, use the following command:\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Note: patient record details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add pr /ic[NRIC] /sym[SYMPTOMS] /diag[DIAGNOSIS] /d[DATE] /t[TIME]\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The command above adds a new patient medical record.\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String listPatientRecordHelpMessage \u003d \"\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To retrieve a list of all the patient records of a particular patient,\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    run the following command:\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list pr [NRIC]\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String editPatientRecordHelpMessage \u003d \"\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To edit a patient\u0027s records, run the following command:\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Note: patient details are within the parenthesis [ ]. \\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The INDEX can be found by running the list pr command.\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit pr [NRIC] [INDEX] /sym [SYMPTOMS] /diag [DIAGNOSIS] /d [DATE] /t [TIME]\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    You can also edit a single attribute: \\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit pr [NRIC] [INDEX] /sym [SYMPTOMS] to edit patient\u0027s symptoms,\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that editing the patient\u0027s records will overwrite any previous information.\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String deletePatientRecordHelpMessage \u003d \"\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To delete a patient\u0027s records on a particular visit, run the following command:\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Note: patient details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The INDEX can be found by running the list pr command.\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete pr [NRIC] [INDEX]\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The user will be prompted to confirm if they would like to delete the patient\u0027s records.\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that deletion cannot be undone.\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String findPatientRecordHelpMessage \u003d \"\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To get a better look at a patient\u0027s particular record, run the following command:\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Note: appointment details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The INDEX can be found by running the list pr command.\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      find pr [NRIC] [INDEX]\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    //Appointment"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String printAddAppointmentHelp \u003d \"\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To add a new appointment into the program, use the following command:\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Note: appointment details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    A unique ID will be given to every appointment added.\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add appt /ic[NRIC] /d[DATE] /t[TIME] /r[REASON]\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The command above adds a new appointment.\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Please ensure that the date is formatted as DD-MM-YYYY and time as HH:mm:ss\\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String printListAppointmentHelp \u003d \"\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To retrieve a list of all the appointments within the program,\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    run the following command:\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list appt\\n\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String printEditAppointmentHelp \u003d \"\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To edit a patient\u0027s appointment, run the following command:\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit appt [NRIC] [APPTID] /d [DD/MM/YYYY] to edit appointment\u0027s date,\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit appt [NRIC] [APPTID] /t [HH:MM] to edit appointment\u0027s time,\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit appt [NRIC] [APPTID] /r [REASON] to edit appointment\u0027s reason\\\"\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that editing the patient\u0027s records will overwrite any previous information.\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The apptID can be found using \\\"find appt [NRIC]\\\"\\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String printDeleteAppointmentHelp \u003d \"\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To delete an appointment, run the following command:\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Note: appointment details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete appt [NRIC] [APPT_ID]\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete appt [NRIC] [APPT_ID]\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The user will be prompted to confirm if they would like to delete the patient\u0027s records.\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that deletion cannot be undone.\\n\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String printFindAppointmentHelp \u003d \"\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To find all of a patient\u0027s appointments, run the following command:\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Note: appointment details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      find appt [NRIC]\\n\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String printDoneAppointmentHelp \u003d \"\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To make an appointment as done, run the following command:\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Note: appointment details are within the parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      done appt [NRIC] [APPT_ID]\\n\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 152,
      "itskesin": 1
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static seedu.happypills.ui.TextUi.DIVIDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"    Command is invalid. \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"Enter help to know how to use HappyPills.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_COMMAND \u003d \"    Command is incomplete. Please use the help command.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + DIVIDER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d \"    Patient does not exist. Please try again.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + DIVIDER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_ADDED \u003d \"    Patient Record has been added.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + DIVIDER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_MISSING_FIELD \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"    Please input all necessary fields for the edit command.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"    Invalid index.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_NRIC \u003d \"    Invalid NRIC format.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_NRIC_NOT_PROVIDED \u003d \"    NRIC of the patient not provided\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_DETAILS_NOT_PROVIDED \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"    Patient\u0027s record details are provided.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INFORM_MISSING \u003d \"    Please input your missing detail listed below\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_NRIC_FORMAT \u003d \"    /ic NRIC (Format: [S/T][7-digits][A-Z])\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_SYMPTOM_FORMAT \u003d \"    /sym SYMPTOMS\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_DIAGNOSIS_FORMAT \u003d \"    /diag DIAGNOSIS\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_DATE_FORMAT \u003d \"    /d DATE  (Format: DD/MM/YYYY)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_TIME_FORMAT \u003d \"    /t TIME (Format: HH:mm)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_COMMAND_ABORTED \u003d \"    Command has been aborted.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_NOT_ADDED \u003d \"    The current information is not added.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    Please add all the details again! Thank you.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + DIVIDER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_USER_CONFIRMATION \u003d \"    Please input [y] for yes or [n] for no\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_NOT_FOUND \u003d \"    Patient record not found. Please try again.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_EDIT_ERROR \u003d \"    Something went wrong, the edit could not be made.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"    Invalid date or date format(DD/MM/YYYY).\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"    Invalid time or time format(HH:MM).\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"    Please try again. To learn more about the Edit appointment command, \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                    + \"\\n    enter \\\"help appt edit\\\"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_EMPTY_PATIENT \u003d \"    There are no patients in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INDEX_OUT_OF_BOUND \u003d \"    No record found with given Index\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itskesin": 46
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/PatientRecordTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class PatientRecordTextUi extends TextUi {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static String emptyPatientRecordMessage \u003d \"    There are no patient record.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static String getEmptyPatientRecordList \u003d \"    There are no patient record in the list.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format a list patient record success message for user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientRecords patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientRecordListSuccessMessage(ArrayList\u003cPatientRecord\u003e patientRecords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Here is your list of patient\u0027s records:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    ID | date       | time     \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (int index \u003d 0; index \u003c patientRecords.size(); index++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            int id \u003d index + 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String date \u003d patientRecords.get(index).getDate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String time \u003d patientRecords.get(index).getTime();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message +\u003d \"    \" + id + \"  | \" + date + \" | \" + time + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message +\u003d DIVIDER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format a get patient record success message for user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientRecordMap patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientNric      nric of the patient"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index            index for the record of the searched patient"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientRecordSuccessMessage("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientRecordMap patientRecordMap, String patientNric, int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ArrayList\u003cPatientRecord\u003e patientRecord \u003d patientRecordMap.get(patientNric);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here are the patient\u0027s record details:\\n\" + patientRecord.get(index) + DIVIDER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format a edit patient success message for user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientRecord patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String editPatientRecordSuccessMessage(PatientRecord patientRecord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here is the edited patient\u0027s record details:\\n\" + patientRecord + DIVIDER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format a delete patient success message for user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientRecordMap patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientNric      nric of the patient"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index            index for the record of the searched patient"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String deletePatientRecordSuccessMessage("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientRecordMap patientRecordMap, String patientNric, int index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ArrayList\u003cPatientRecord\u003e patientRecord \u003d patientRecordMap.get(patientNric);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    \" + patientNric + \"\u0027s patient record will be deleted.\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + patientRecord.get(index) + DIVIDER;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        patientRecord.remove(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        patientRecordMap.removePersonalRecord(patientRecord, patientNric);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void patientRecordNotAddedMessage(String detail) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(\"    \" + detail + \" is not a valid input.\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \" + detail + \" will not be added\\n\" + TextUi.DIVIDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Prompt user for conformation with this message."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param parseInput details to be displayed to user for confirmation"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return string to be displayed to user for confirmation"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static String promptConformation(String[] parseInput) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String text \u003d \"        Are you sure all the listed details are correct?\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        NRIC : \" + parseInput[0].trim().toUpperCase() + \"\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Symptom : \" + parseInput[1].trim() + \"\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Diagnosis : \" + parseInput[2].trim() + \"\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Date : \" + parseInput[3].trim() + \"\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        time : \" + parseInput[4].trim() + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"                                                   (Y/N)?\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 73,
      "itskesin": 30
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/PatientTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class PatientTextUi extends TextUi {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static String patientNotFoundMessage \u003d \"    The patient cannot be found. Please try again.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String emptyPatientListMessage \u003d \"    There are no patients in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Shows a list of patients\u0027 name and their NRIC to the user, formatted as an indexed list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients A patient list with all existing patients."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a message to be displayed to user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientList(PatientMap patients) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry patient : patients.entrySet()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String nric \u003d (String)patient.getKey();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient p \u003d (Patient)patient.getValue();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String name \u003d p.getName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message +\u003d \"    \" + name + \" | \" + nric + \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message +\u003d DIVIDER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format an add patient success message for user verification."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, patient details and a divider."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient patient object added to patientList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a string message to be displayed to the user for successful addCommand executed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String addPatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message \u003d \"    Got it! I\u0027ve added this patient:\\n\" + patient + DIVIDER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format a get patient success message for user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here are the patient\u0027s details:\\n\" + patient + DIVIDER;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Display updated patient\u0027s records."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient The patient whose records were updated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return The patient\u0027s updated records."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String editPatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Patient details have been updated as follows:\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + patient + DIVIDER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Display message that patient is successfully deleted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Patient to be deleted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return display message."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String deletePatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return \"    Patient \" + patient.getName() + \" | \" + patient.getNric()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \" has been deleted successfully.\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Displays confirmation message for deleting patients."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient The patient to be deleted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void printDeleteConfirmation(Patient patient) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        print(\"    Are you sure you want to delete this patient:\\n      \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + patient.getName() + \" | \" + patient.getNric() + \"\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"                                                   (Y/N)?\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + DIVIDER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Displays confirmation message for deleting patients."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient The patient to be deleted."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void printDeleteConfirmationAgain(Patient patient) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        print(\"    Please try again. \\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        printDeleteConfirmation(patient);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static String patientNotDeletedMessage \u003d DIVIDER + \"\\n    Patient is not deleted.\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 98
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/StorageTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class StorageTextUi extends TextUi {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String failToAddPatientMsg \u003d \"Fail to add patient to file.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String failToAddAppointmentMsg \u003d \"Fail to add appointment to file.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String failToWritePatientMsg \u003d \"Failed to write patients to file.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String failToWriteAppointmentMsg \u003d \"Failed to write patient\u0027s appointments to file.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * returns a list of patients\u0027 name and their details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients A patient list with all existing patients."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a message to be displayed to user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getFormattedPatientString(PatientMap patients) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String formattedPatientString \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry patient : patients.entrySet()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient p \u003d (Patient)patient.getValue();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            formattedPatientString +\u003d p.toSave();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return formattedPatientString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retuens a list of patients\u0027 NRIC and appointment details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments An appointment list with all existing patients."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a message to be displayed to user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getFormattedApptString(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String formattedAppointmentString \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry appointment : appointments.entrySet()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Appointment a \u003d (Appointment) appointment.getValue();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            formattedAppointmentString +\u003d a.toSave();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return formattedAppointmentString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 44
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/TextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String NEWLINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Generates and prints the welcome message upon the start of the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void printWelcomeMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String logo \u003d \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \" __   __  _______  _______  _______  __   __  _______  ___   ___      ___      _______\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|  | |  ||   _   ||       ||       ||  | |  ||       ||   | |   |    |   |    |       |\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|  |_|  ||  |_|  ||    _  ||    _  ||  |_|  ||    _  ||   | |   |    |   |    |  _____|\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|       ||       ||   |_| ||   |_| ||       ||   |_| ||   | |   |    |   |    | |_____\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"|       ||       ||    ___||    ___||_     _||    ___||   | |   |___ |   |___ |_____  |\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"|   _   ||   _   ||   |    |   |      |   |  |   |    |   | |       ||       | _____| |\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|__| |__||__| |__||___|    |___|      |___|  |___|    |___| |_______||_______||_______|\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(\"Hello from\" + logo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(\"What can I do for you today, doctor?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Displays Exit message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void printExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        System.out.println(\"Thank you for using HappyPills! ^.^\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        System.out.println(\"See you again!\\n\" + DIVIDER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    //General methods"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * print any string as needed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param string print any string to screen"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void print(String string) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        System.out.println(string);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Append the divider to the given message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param s The message that requires the divider to be appended."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The message with the appended divider."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String appendDivider(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return s + DIVIDER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Prepend the divider to the given message."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param s The message that requires the divider to be prepended."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The message with the prepended divider."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String prependDivider(String s) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return DIVIDER + \"\\n\" + s;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String printIncorrectCommand(String command) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return \"    The command \\\"\" + command + \"\\\" does not exist. Please try again.\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Construct a string for incomplete commands, probably missing something."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param helpString provide the help command that user can use to find the right format"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a string for incomplete commands."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public  static String incompleteCommandString(String helpString) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String msg \u003d \"    Command is incomplete. Please use the \" + helpString + \" command.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 23,
      "sitinadiah25": 33,
      "itskesin": 24
    }
  },
  {
    "path": "src/test/java/seedu/happypills/HappyPillsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "class HappyPillsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/happypills/appointmentcommands/DoneAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.DoneAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "class DoneAppointmentCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        newAppointmentMap \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        //Add test patient"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S123A\", 123,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S456B\", 456,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        //add test appointment"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentOne \u003d new Appointment(\"1\",\"S123A\", \"01/02/2020\", \"12:00:00\",\"reason1\",false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentTwo \u003d new Appointment(\"2\",\"S123A\", \"01/03/2020\", \"13:00:00\",\"reason2\", false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            patientOne.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            patientOne.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void editAppointment_Done() throws HappyPillsException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputMissingInput \u003d \"    The following appointment has been marked done:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        NRIC     : S123A\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Date     : 01/02/2020\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Time     : 12:00:00\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Reason   : reason1\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        ID       : 1\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Attended : Yes\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String message \u003d new DoneAppointmentCommand(\"S123A\", \"1\").execute("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputMissingInput, message);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 63,
      "itskesin": 5
    }
  },
  {
    "path": "src/test/java/seedu/happypills/appointmentcommands/EditAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.EditAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "class EditAppointmentCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        newAppointmentMap \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        //Add test patient"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S123A\", 123,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S456B\", 456,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        //add test appointment"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentThree \u003d new Appointment(\"3\",\"S123A\",  \"01/04/2020\", \"14:00:00\",\"reason3\",false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentOne \u003d new Appointment(\"1\",\"S123A\", \"01/02/2020\", \"12:00:00\",\"reason1\",false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentTwo \u003d new Appointment(\"2\",\"S123A\", \"01/03/2020\", \"13:00:00\",\"reason2\", false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            patientOne.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            patientOne.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentThree);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            patientOne.addAppointment(appointmentThree);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void editAppointment_missingInput() throws HappyPillsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputMissingInput \u003d \"    To edit a patient\u0027s appointment, run the following command:\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"      edit appt [NRIC] [APPTID] /d [DD/MM/YYYY] to edit appointment\u0027s date,\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"      edit appt [NRIC] [APPTID] /t [HH:MM] to edit appointment\u0027s time,\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"      edit appt [NRIC] [APPTID] /r [REASON] to edit appointment\u0027s reason\\\"\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    Do note that editing the patient\u0027s records will overwrite any previous information.\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    The apptID can be found using \\\"find appt [NRIC]\\\"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S123A\", \"2\", \"/r \").execute("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputMissingInput, message);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void editAppointment_editReason() throws HappyPillsException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputeditReason \u003d \"    Patient appointment have been updated as follows:\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        NRIC     : S123A\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Date     : 01/03/2020\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Time     : 13:00:00\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Reason   : Very sick hehe\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        ID       : 2\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Attended : No\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S123A\", \"2\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/r Very sick hehe\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputeditReason, message);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void editAppointment_editDate_invalidDate() throws HappyPillsException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputEditDateInvalid \u003d \"    Invalid date or date format(DD/MM/YYYY).\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S123A\", \"3\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/d 01/01/202s\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputEditDateInvalid, message);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void editAppointment_editDate_validDate() throws HappyPillsException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputEditDateValid \u003d \"    Patient appointment have been updated as follows:\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        NRIC     : S123A\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Date     : 01/01/2020\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Time     : 14:00:00\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Reason   : reason3\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        ID       : 3\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Attended : No\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S123A\", \"3\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/d 01/01/2020\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputEditDateValid, message);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void editAppointment_editTime_invalidTime() throws HappyPillsException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputEditTimeInvalid \u003d \"    Invalid time or time format(HH:MM).\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S123A\", \"1\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/t 24:00\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputEditTimeInvalid, message);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void editAppointment_editTime_validTime() throws HappyPillsException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputEditTimeValid \u003d \"    Patient appointment have been updated as follows:\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        NRIC     : S123A\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Date     : 01/02/2020\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Time     : 23:59:00\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Reason   : reason1\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        ID       : 1\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Attended : No\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S123A\", \"1\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/t 23:59\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputEditTimeValid, message);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 122,
      "itskesin": 10
    }
  },
  {
    "path": "src/test/java/seedu/happypills/appointmentcommands/FindAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.FindAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class FindAppointmentCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        newAppointmentMap \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        //Add test patient"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S123A\", 123,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S456B\", 456,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Appointment appointmentOne \u003d new Appointment("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"1\",\"S123A\", \"01/02/2020\", \"12:00:00\",\"reason1\",false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Appointment appointmentTwo \u003d new Appointment("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"2\",\"S123A\", \"01/03/2020\", \"13:00:00\",\"reason2\", false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        patientOne.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        patientOne.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void getAppointment_patientNotFound() throws HappyPillsException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String expectedOutputNotfound \u003d \"    The patient cannot be found. Please try again.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new FindAppointmentCommand(\"S789C\").execute("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputNotfound, message);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void getAppointment_EmptyList_notFound() throws HappyPillsException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputEmptyList \u003d \"    There are no appointments in the list.\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new FindAppointmentCommand(\"S456B\").execute("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputEmptyList, message);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void getAppointment_List_found() throws HappyPillsException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputInList \u003d \"    Here are the patient\u0027s appointments:\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"     | ID | NRIC   | Reason | Date      | Time     |\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"     | 1 | S123A | reason1 | 01/02/2020 | 12:00:00 | \\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"     | 2 | S123A | reason2 | 01/03/2020 | 13:00:00 | \\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new FindAppointmentCommand(\"S123A\").execute("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputInList, message);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 6,
      "Janicetyy": 65,
      "itskesin": 14
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/AddPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.AddPatientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "class AddPatientCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientMap patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientRecordMap newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        AddPatientCommand testAddCommand \u003d new AddPatientCommand("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"kesin\", \"S0618\", 912, \"22/09/1998\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"B-\",\"\", \"\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        );"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            testAddCommand.execute(patients, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(1,patients.size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertTrue(patients.containsKey(\"S0618\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 15,
      "sitinadiah25": 6,
      "itskesin": 12
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/EditPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.AddPatientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.EditPatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "class EditPatientCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientMap patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientRecordMap newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        AddPatientCommand testAddCommand \u003d new AddPatientCommand("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"kesin\", \"S0618\", 912, \"22/08/1998\", \"B-\",\"meat\", \"Strong\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            testAddCommand.execute(patients, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            // catch exception"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        EditPatientCommand testEditCommand \u003d new EditPatientCommand(\"S0618\", \"/rmWeak\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            testEditCommand.execute(patients, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            // catch exception"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assertEquals(1, patients.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(\"S0618\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            Patient patient \u003d patients.get(\"S0618\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            assertEquals(\"Weak\", patient.getRemarks());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "sitinadiah25": 22,
      "itskesin": 16
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/GetPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.GetPatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class GetPatientCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S123A\", 123,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S456B\", 456,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void getList_notInList_notFound() throws HappyPillsException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String expectedOutputNotInList \u003d \"    The patient cannot be found. Please try again.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            new GetPatientCommand(\"S789C\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (HappyPillsException hpe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            assertEquals(expectedOutputNotInList, hpe.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void getList_InList_found() throws HappyPillsException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputInList \u003d \"    Here are the patient\u0027s details:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Name : P1\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        NRIC : S123A\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Phone Number : 123\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        DOB : 01/01/2000\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Blood Type : O+\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Allergies : None\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Remarks : NIL\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new GetPatientCommand(\"S123A\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutputInList, message);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 10,
      "Janicetyy": 36,
      "sitinadiah25": 5,
      "itskesin": 14
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        newAppointmentMap \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S123A\", 123,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S456B\", 456,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_addCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.AddPatientHelpMessage + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help add patient\").execute("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_listCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.listPatientHelpMessage + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help list patient\").execute("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_getCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.getPatientHelpMessage + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help get patient\").execute("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_editCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.editPatientHelpMessage + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help edit patient\").execute("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_deleteCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.deletePatientHelpMessage + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help delete patient\").execute("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_helpCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.generalHelpMessage + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"help\").execute("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_exitCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.exitHelpMessage + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help exit\").execute("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 4,
      "Janicetyy": 16,
      "sitinadiah25": 10,
      "itskesin": 67
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/ListPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.ListPatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "class ListPatientCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap filledPatientMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap emptyPatientMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static String expectedOutputFromEmptyList \u003d \"    There are no patients in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static String expectedOutputFromFilledList \u003d \"    Nyan | S1234Z\\n\" + \"    Nadiah | S9988N\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    Jan | S9888F\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        filledPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        emptyPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientOne \u003d new Patient(\"Nyan\", \"S1234Z\", 999,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"22/08/1996\", \"O+\", \"Peanuts\", \"NIL\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"Nadiah\", \"S9988N\", 888,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"25/09/1998\", \"A-\", \"School\", \"NIL\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientThree \u003d new Patient(\"Jan\", \"S9888F\", 912,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"10/03/1998\", \"B\", \"NIL\", \"NIL\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            filledPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            filledPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            filledPatientMap.add(patientThree);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void printList_emptyList_emptyListMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new ListPatientCommand().execute(emptyPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputFromEmptyList, message);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void printList_filledList_filledListMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new ListPatientCommand().execute(filledPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputFromFilledList, message);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "sitinadiah25": 5,
      "itskesin": 52
    }
  },
  {
    "path": "src/test/java/seedu/happypills/model/data/PatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class PatientTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Patient patientOne \u003d new Patient(\"Nyan\", \"S1234Z\", 999,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            \"22/08/1996\", \"O+\", \"Peanuts\", \"NIL\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Patient patientTwo \u003d new Patient(\"Nadiah\", \"S9988N\", 888,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            \"25/09/1998\", \"A-\", \"School\", \"NIL\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Patient patientThree \u003d new Patient(\"Jan\", \"S9888F\", 912,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            \"10/03/1998\", \"B\", \"NIL\", \"NIL\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"Nyan\", patientOne.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getNric() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"S9988N\", patientTwo.getNric());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getPhoneNumber() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(912, patientThree.getPhoneNumber());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getDateOfBirth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assertEquals(\"25/09/1998\", patientTwo.getDateOfBirth());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getBloodType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"O+\", patientOne.getBloodType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getAllergies() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"NIL\", patientThree.getAllergies());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getRemarks() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"NIL\", patientThree.getRemarks());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String correctOutput \u003d \"        Name : Nyan\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        NRIC : S1234Z\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Phone Number : 999\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        DOB : 22 Aug\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Blood Type : O+\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Allergies : Peanuts\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Remarks : NIL\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(correctOutput, patientOne);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "sitinadiah25": 4,
      "itskesin": 60
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add patient /ic S9876543F /n Eve /p 91265432 /dob 22/05/1999 /b O- /a School /rm Best Friend with Mallory"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": "y"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add patient /ic S9876543G /p 99999999 /dob 22/09/1989 /b O- /n Alice"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "n"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add patient /ic S9876543G /p 99999999 /dob 22/09/1989 /b O-"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/n Alice"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "y"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add pr /ic S9876543F /sym cough /diag fever /d 22/02/1992 /t 22:22"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "y"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add pr /ic S9876543F /sym cough /diag cough syrup /d 22/03/2020 /t 22:22"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "y"
      }
    ],
    "authorContributionMap": {
      "itskesin": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "itskesin": 7,
      "-": 19
    }
  }
]
