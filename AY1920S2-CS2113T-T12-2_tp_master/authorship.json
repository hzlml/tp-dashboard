[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    mainClassName \u003d \"seedu.happypills.HappyPills\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 2,
      "-": 39
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nyan Wun Paing | [Github](https://github.com/NyanWunPaing) | [Portfolio](docs/team/Nyan.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Janice| [Github](https://github.com/Janicetyy/tp) | [Portfolio](docs/team/janice.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yap Kesin | [Github](https://github.com/itskesin) | [Portfolio](docs/team/Kesin.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Siti Nadiah | [Github](https://github.com/sitinadiah25) | [Portfolio](docs/team/sitinadiah.md)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 1,
      "sitinadiah25": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "By: `CS2113T-T12-2` Since: `March 2020`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![Supported Java versions](https://img.shields.io/badge/Java-11-blue.svg) "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![Supported OS](https://img.shields.io/badge/Supported%20OS-Windows|MacOS|Linux-yellow.svg) "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [1.1. Purpose](#11-purpose)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [1.2. Scope](#12-scope)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [1.3.](#13-)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [2. Setting up](#2-setting-up)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [3. Design](#3-design)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.1. Architecture](#31-architecture)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [3.2. TextUi Component](#32-textui-comonent)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.3. Logic Component](#33-logic-component)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.4. Model Component](#34-model-component)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.5. Storage Component](#35-storage-component)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [4. Implementation](#4-implementation)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [4.1. Data Structure](#41-data-structure)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [4.2. Add Feature](#42-add-feature)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [4.3. List Feature](#43-list-features)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [4.4. Find/Get Feature](#44-findget-feature)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [4.5. Edit Features](#45-edit-features)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [4.6. Delete Features](#46-delete-features)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [4.7. Done Appointment Feature](#47-done-appointment-feature)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [4.8 Storage](#48-storage)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [4.9 User Prompting](#49-user-prompting)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- [5. Testing](#5-testing)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- [6. Useful Links](#6-useful-links)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [Appendices](#appendices)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix A: Product Scope](#qppendix-a-product-scope)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix C: Non-functional Requirements](#appendix-c-non-functional-requirements)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix D: Glossary](#appendix-d-glossary)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix E: Instructions for Manual Testing](#appendix-e-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 1.1. Purpose"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This document contains the architecture and software design specifications for the application HappyPills."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 1.2. Scope"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This guide is mainly for developers, designers and software engineers that are working on and using HappyPills."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 1.3."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`PatientParser` - A mark-up in PascalCase indicates the class used."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`PatientParser#parse()` - The camelCase text after the \u0027#\u0027 indicates the method called in the class"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Refer to the guide [here](SettingUp.md)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 3. Design "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This section provides a high-level overview of HappyPills."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 3.1. Architecture"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Architecture diagram](images/DG/architecture/ArchitectureDiagram.png \"Overview of the Application\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The **Architecture diagram** above explains the high-level design of HappyPills. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Main has one class called `HappyPills`.  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "It is responsible for:  "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The rest of the application consists of four other components."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `UI`: The user interface of the application."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `Logic`: The command executor."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `Model`: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `Storage`: Reads data from and writes data to the text file stored on the user\u0027s computer."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**How the architecture components interact with each other**  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The Sequence Diagram below shows how the components interact with each other for "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "the scenario where the user issues the command `delete patient NRIC`.  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Architecture Sequence Diagram](images/DG/architecture/ArchitectureSequence.png \"Architecture Sequence Diagram\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "----- shift down ---"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The architecture of HappyPills is broken down into seven main classes:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* `Ui`: This class handles the User Interface of the application."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Parser`: This class handles the parsing and handling of user commands."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Command`: This class handles all the commands the application has."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Storage`: This class reads and writes data to and from text files for future use."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Patient`: This class manages the data of data type Patient in memory. "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Appointment`: This class manages the data of data type Appointment in memory."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `MedicalRecords`: This class manages the data of data type MedicalRecord in memory."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 3.2. Ui Component"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![Ui Diagram](images/DG/architecture/UiClassDiagram.png)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The `Ui` component: "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* Executes user commands using the command component."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* Listens for changes and outputs messages accordingly from the Command component."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* Store or generate formatted messages used by the other components, for display to the user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* Consist of 6 classes:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - PatientTextUi"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - AppointmentTextUi"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - PatientRecordTextUi "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - StorageTextUi"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - HelpTextUi"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - Messages"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The first three TextUi sub classes are categorized based on object type. Results and error messages for "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "commands executed on the relevant object are located here."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "StorageTextUi contains only strings used for logging of storage activities and format strings saved to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "the text files, so as to recover objects on next startup."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HelpTextUi contains only the messages used in the help command, so as to provide guidance to the user on"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "the usage of the commands."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.3. Logic Component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![Logic Diagram](images/DG/architecture/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The diagram above shows the logic flow of HappyPills."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. `HappyPills` uses the `Parser` to parse the commands given by the user."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. This results in a `Command` object being returned which is then executed by `HappyPills`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. The command executed will cause a change in the program (e.g. Patient added into program). "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. The result of the command is then passed back to the `TextUi` to display the message. "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.4. Model Component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![Model Diagram](images/DG/architecture/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The Model component consists of `Patient`, `PatientMap`, `PatientRecord`, `PatientRecordMap`, `Appointment` and"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "`AppointmentMap`, which stores the user\u0027s data according to their input. "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "+ `Patient`: Stores information about a patient"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "+ `PatientMap`: Stores all patient information"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "+ `PatientRecord`: Stores all medical-related information about a patient"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "+ `PatientRecordMap`: Stores all patient records"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "+ `Appointment`: Stores information about an appointment"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "+ `AppointmentMap`: Stores all scheduled appointments"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.5. Storage Component"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The `Storage` class is called by the `HappyPills` class to handle the loading and saving of patient general details, "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "patient medical details and appointment schedule. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The `loadPatientsFromFile()`, `loadPatientRecordFromFile()` and `loadAppointmentsFromFile()` methods are used "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "to read saved data from local files into the current session of HappyPills. "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "These data are parsed into corresponding"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "objects, and added to a map which will be returned to the main program, using `parsePatientFileContent()`,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "`parsePatientRecordFileContent` and `parseAppointmentFileContent` respectively."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The `writeAllToFile()` method will write the current list of object into the corresponding text file by stating"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "the predefined filepath. This method is called on every delete, done and edit command for the corresponding objects, "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "as well as by the `ExitCommand` class to confirm the storage of the current state of HappyPills."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The `addSingleItemToFile` appends an object as a new line the corresponding text file. This method is called only"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "for add commands executed on the various objects. "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This section describes some of the details on how the features of the program has been implemented. This section has been broken "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "down into nine main features: `Data Structure`, `Add Details Feature`, `List Feature`, `Find/Get Feature`, `Edit Detail Feature`, `Delete Feature`, `Done Appointment Feature`, `Storage`, `Prompting Feature`."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### 4.1. Data Structure"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The `Patient Details`, `Patient Medical Records`, `Appointment Scheduling` is facilitated by HashMap which implements the following operations: "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `PatientMap#add(Patient patient)` — Adds the patient object into the patient list using the patient’s Nric as key.  "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `PatientMap#remove(String nric)` — Removes the patient object from the existing patient list.  "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `PatientMap#get(String nric)` — Get the patient object resides in the existing patient list. "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `PatientRecordMap#add(Patient patient)` — Adds the patient\u0027s record object into the patient\u0027s record list using the patient’s Nric as key.  "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `PatientRecordMap#remove(String nric)` — Removes the patient\u0027s record object from the existing patient\u0027s record list.  "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `PatientRecordMap#get(String nric)` — Get the patient\u0027s record object resides in the existing patient\u0027s record list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `AppointmentMap#add(Patient patient)` — Adds the appointment object into the appointment list using the patient’s Nric as key.  "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `AppointmentMap#remove(String nric)` — Removes the appointment object from the existing appointment list.  "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `AppointmentMap#get(String nric)` — Get the appointment object resides in the existing appointment list.  "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations** "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "*Aspect: Data Structure of the Patient List* "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- **Alternative 1 (current choice): Hash Map**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  * Pros: Allow faster lookup of patients’ information using the unique identifier (nric)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  * Cons: Implementation is harder and may result in bugs if not implemented accurately."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Alternative 2: Array List"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  * Pros: This would be easier to implement and retrieve the information."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  * Cons: When a patient is deleted, all the patients in the patient list need to be checked. "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          This would cause the deletion to be very slow when there is a large number of patients in the list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### 4.2. Add Features"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The user is able to add patient details, patient\u0027s record and appointment details into the program to keep track of the patient. "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Add patient details, patient\u0027s record and appointment details use similar implementation with minor difference in the usage of tags when parsing the command.  "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Below is an example of adding patient\u0027s appointment."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The `AddAppointmentCommand` extends the `AppointmentCommand` which implements the `Command` class and initialises the "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "`nric`, `date`, `time`, and `reason` in its constructor. "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The following steps below is an example of how the `AddAppointmentCommand` class behaves: "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "![Add Appointment Sequence Diagram](images/DG/AddAppointmentSequenceDiagram.png)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "1. The user enters `add appt /ic S1234567A /d 04/04/2020 /t 10:30 /r Checkup` into the application. The `HappyPills` "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "class then calls `Parser#parse()` to parse the user input. Upon checking that it is an Appointment-related command, "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "`Parser` then calls the `AppointmentParser#parse()` method. "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "2. `AppointmentParser#parse()` will then call the `parseAddCommand` in the same class to parse all the arguments of the user input. "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "3. A new instance of `AddAppointmentCommand` with the given arguments initialised will be created. `HappyPills` will "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "subsequently call the `AddAppointmentCommand#execute()` method. "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "4. The `AddAppointmentCommand#execute()` method will do 2 things: "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\t+ If there is no patients in the `PatientMap` with the given nric, the method returns a string to notify the user "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\tthat the patient does not exist. "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\t"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\t+ If the patient with the given nric exists in `PatientMap`, a new Appointment object with the given arguments "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\t(nric, date, time and reason) are created and added into the `AppointmentMap` and into the ArrayList of Appointment "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\tobjects in the Patient object mapped with the nric given. The `Appointment` object is stored in the storage by calling `Storage#writeAllToFile()`. "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\tSubsequently, the method returns a string to notify the user that the patient has been added into the `AppointmentMap` "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\tand displays the `AppointmentID` associated to the `Appointment` object created. "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Key-value for adding"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e        Alternative 1 (current choice): Use Nric as Key for all"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e          Pros: Universal checking would be easy  "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e                Ease of use as the user can access all information with one NRIC "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e                "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e          Cons: NRIC is lenghty"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e            "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e        Alternative 2: Use Index as Key for all"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e          Pros: Shorter key"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e          Cons: Hard to remeber unique index for each patient."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e                Increase coupling between component."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e        "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e        Alternative 3: Different index as key for all"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e          Pros: Reduce coupling between components."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e          Cons: It require the user to remember all different "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e          "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e        Alternative 1 was chosen as NRIC is unique and it decrease coupling between components (PatientMap, PatientRecordMap, AppointmentMap).  "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Add Patient Details"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 (current choice): "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 2: "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 was chosen as it decrease coupling between components. And reduces major failure during v1."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        P.S subject to change in v2."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Add Patient Record Details"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 (current choice):"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 2: "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 was chosen as it decrease coupling between components. And reduces major failure during v1."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        P.S subject to change in v2."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### 4.3 List Features "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The list features implemented in HappyPills allow users to view a list of **_patients_, _patient\u0027s records_** and "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**_appointments_**. "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The list commands used in HappyPills are listed as follows: "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. list patient"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    2. list pr NRIC"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    3. list appt"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The `list patient` will list all the existing patients in the patient list.  "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The `list pr NRIC` will list all the existing patient records for a particular searched patient (identified by the NRIC).    "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The `list appt` will list all the existing appointments in the appointment list.  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003eThe implementation of all the list commands in HappyPills utilises \u003ccode\u003esimilar method\u003c/code\u003e. "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   The following section will elaborate more on the \u003ccode\u003elist appt\u003c/code\u003e command which can be generalise to other "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   list commands."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The `ListAppointmentCommand` extends the `AppointmentCommand` which implements the `Command` class."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The following sequence diagram summarises how the `ListAppointmentCommand` operation works: "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![List Appointment Sequence Diagram](images/DG/ListAppointmentSequenceDiagram.png \"list sequence diagram\")"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The following steps below is an example of how the `ListAppointmentCommand` class behaves: "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "1. The user enters `list appt` into the application. The `HappyPills` class then calls the `Parser#parse()` to parse the "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "user input. Upon checking that it is an Appointment-related command, `Parser` then calls the `AppointmentParser#parse()` method. "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "2. `AppointmentParser#parse()` will then split the user input and calls the `ListAppointmentCommand` class. "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "3. `HappyPills` will then call the `ListAppointmentCommand#execute()` method. "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "4. The `ListAppointmentCommand#execute()` method will check if there are any appointments in the program. "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "itskesin"
        },
        "content": "5. If there are appointments in the program, it gets the list of appointments by calling `PatientMap#getAppointments()` "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "and displays all the appointments. Otherwise, the user will receive a message saying that the there is no appointments in the list. "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.3.1. List Patients"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "itskesin"
        },
        "content": "_Aspect: Information needed to be displayed_"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Alternative 1 **(current choice)**: Display only NRIC and NAME of the patient"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  * Pros: Allow faster lookup of patients’ information using the unique identifier (nric)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  * Cons: Implementation is harder and may result in bugs if not implemented accurately."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Alternative 2: Array List"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  * Pros: This would be easier to implement and retrieve the information."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  * Cons: When a patient is deleted, all the patients in the patient list need to be checked. "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "itskesin"
        },
        "content": "          This would cause the deletion to be very slow when there is a large number of patients in the list."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.3.2 List Patient\u0027s Records"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.3.3 List Appointments "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### 4.4. Find/Get Feature"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The find/get features implemented in HappyPills allow users to view detailed information of **_patient\u0027s particulars_, "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "itskesin"
        },
        "content": "_a specified patient record_** and **_appointment for a particular patient_**. "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The find/get commands used in HappyPills are listed as follows: "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. get patient NRIC"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    2. find pr NRIC INDEX"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    3. find appt NRIC"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The `get patient NRIC` will retrieve all basic information related to the searched patient."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The `find pr NRIC INDEX` will display detailed information of a particular patient record identified by the NRIC and INDEX."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The `find appt NRIC` will find all the appointments that the patient with the specified NRIC has."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003eThe implementation of all the find/get commands in HappyPills utilises \u003ccode\u003esimilar method\u003c/code\u003e. "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   The following section will elaborate more on the \u003ccode\u003efind appt NRIC\u003c/code\u003e command which can be generalise to other "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   find/get commands."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The `FindAppointmentCommand` extends the `AppointmentCommand` which implements the `Command` class and initialises the "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "`patientNric` in its constructor. "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The following sequence diagram summarises how the `FindAppointmentCommand` operation works: "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Find Appointment Sequence Diagram](images/DG/FindAppointmentSequenceDiagram.png)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The following steps below is an example of how the `FindAppointmentCommand` class behaves: "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "1. The user enters `find appt S1234567Z` into the application. The `HappyPills` class then calls the `Parser#parse()` "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "to parse the user input. Upon checking that it is an Appointment-related command, `Parser` then calls the `AppointmentParser#parse()` "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "method. "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "2. `AppointmentParser#parse()` will then split the user input and calls the `EditAppointmentCommand` class. "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "3. `HappyPills` will then call the `FindAppointmentCommand#execute()` method. "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "4. `FindAppointmentCommand#execute()` first checks the validity of the nric given. It then checks if a patient exists in the "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "`PatientMap`. "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "5. If it exists, it gets the list of appointments by calling `PatientMap.getAppointments()` and displays all the appointments "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "belonging to the patient, otherwise it displays that there is no patient with the given nric that exists. "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.4.1. Get Patient Detail"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "itskesin"
        },
        "content": "_Aspect: Information needed to be displayed_"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.4.2. Find Patient Record Detail"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "itskesin"
        },
        "content": "_Aspect: Information needed to be displayed_"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.4.3. Find Appointment Detail"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "itskesin"
        },
        "content": "_Aspect: Information needed to be displayed_"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 4.5. Edit Features"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The edit features implemented in HappyPills allow users to view detailed information of **_patient\u0027s particulars_, "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "itskesin"
        },
        "content": "_a specified patient record_** and **_appointment for a particular patient_**. "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The edit commands used in HappyPills are listed as follows: "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. edit patient NRIC "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    2. edit pr NRIC INDEX "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    3. edit appt NRIC APPT_ID "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The user can edit an appointment from the list of appointments currently in the program. The command:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    edit appt S1234567Z 1 /d 04/04/2020"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "will edit the date of the appointment with appointment id `1`, to `04/04/2020`, if found. "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The `EditAppointmentCommand` extends the `AppointmentCommand` which implements the `Command` class and initialises the "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "`nric`, `apptId` and `newContent` in its constructor. "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The following sequence diagram summarises how the `EditAppointmentCommand` operation works: "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "itskesin"
        },
        "content": "![Edit Appointment Sequence Diagram](images/DG/EditAppointmentSequenceDiagram.png)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The following steps below is an example of how the `EditAppointmentCommand` class behaves: "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "1. The user enters `edit appt S1234567Z 1 /d 04/04/2020` into the application. The `HappyPills` class then calls the "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "`Parser#parse()` to parse the user input. Upon checking that it is an Appointment-related command, `Parser` then calls "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "the `AppointmentParser#parse()` method. "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "2. `AppointmentParser#parse()` will then split the user input and calls the `EditAppointmentCommand` class. "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    **Warning**: If the number of arguments given is not equal to 3, the `HappyPillsException()` will be thrown."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "3. `HappyPills` will then call the `EditAppointmentCommand#execute()` method. "
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "4. In `EditAppointmentCommand#execute()`, does two things: "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\t+ If the patient and/or appointment does not exist, the `HappyPillsException()` will be thrown."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\t+ `EditAppointmentCommand#execute()` checks for which parameter is to be edited, `date`, `time` or `reason`. "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\tAfterwards, the method calls both `AppointmentMap` and `PatientMap` to edit the appropriate details. `Storage#writeAllToFile()` "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\twill then be called to update the storage of the newly edited appointment. "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "5. A display message will be shown to the user to indicate whether or not the edit was successful. "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.5.1. Edit Patient Detail"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Prompt handling method"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 (current choice):"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: "
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 2: "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 was chosen as it decrease coupling between components. And reduces major failure during v1."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        P.S subject to change in v2."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.5.2. Edit Patient Record Detail"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Prompt handling method"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 (current choice):"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 2: "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          "
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 was chosen as it decrease coupling between components. And reduces major failure during v1."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        P.S subject to change in v2."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.5.3. Edit Appointment Detail"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Prompt handling method"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 (current choice):"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 2: "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 was chosen as it decrease coupling between components. And reduces major failure during v1."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        P.S subject to change in v2."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### 4.6. Delete Features"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The user can delete an appointment from the list of appointments currently in the program. The command: "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    delete appt S1234567Z 1 "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "will delete the appointment with appointment ID `1`, if found. "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The `DeleteAppointmentCommand` extends the `AppointmentCommand` which implements the `Command` class and initialises "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "the `nric` and `apptId` in its constructor. "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The following steps below is an example of how the `DeleteAppointmentCommand` class behaves: "
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "1. The user enters `delete appt S1234567Z 1` into the application. The `HappyPills` class then calls the `Parser#parse()` "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "to parse the user input. Upon checking that it is an Appointment-related command, `Parser` then calls the "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "`AppointmentParser#parse()` method. "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "2. `AppointmentParser#parse()` will then split the user input and calls the `DeleteAppointmentCommand` class. "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\t**Warning**: If the number of arguments given is not equal to 2, the `HappyPillsException()` will be thrown."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\t"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "3. `HappyPills` will then call the `DeleteAppointmentCommand#execute()` method.  "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "4. In `DeleteAppointmentCommand#execute()`, if the patient and/or appointment does not exist, the `HappyPillsException()` "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "will be thrown. Otherwise, `DeleteAppointmentCommand#execute()` will call `Storage#writeAllToFile()` and remove the "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "appointment from the program. A display message will be shown to the user to indicate that the deletion have been successful. "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The following sequence diagram summarises how the `DeleteAppointmentCommand` operation works: "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "![Delete Appointment Sequence Diagram](images/DG/DeleteAppointmentSequenceDiagram.png)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.6.1. Delete Patient Detail"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Prompt handling method"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 (current choice):"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 2: "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 was chosen as it decrease coupling between components. And reduces major failure during v1."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        P.S subject to change in v2."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.6.2. Delete Patient Record Detail"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Prompt handling method"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 (current choice):"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 2: "
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 was chosen as it decrease coupling between components. And reduces major failure during v1."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        P.S subject to change in v2."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.6.3. Delete Appointment Detail"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Prompt handling method"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 (current choice):"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: "
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            "
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 2: "
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: "
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 was chosen as it decrease coupling between components. And reduces major failure during v1."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        P.S subject to change in v2."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### 4.7. Done Appointment Feature"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The user can mark an appointment as done from the list of appointments currently in the program. The command: "
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    done appt S1234567Z 1"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "will mark the appointment with appointment ID `1` as done, if found. "
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The `DoneAppointmentCommand` extends the `AppointmentCommand` which implements the `Command` class and initialises the "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "`nric` and `apptId` in its constructor. "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "![Done Appointment Sequence Diagram](images/DG/DoneAppointmentSequenceDiagram.png)"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The following steps below is an example of how the `DoneAppointmentCommand` class behaves:"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "1. The user enters `done appt S1234567Z 1` into the application. The `HappyPills` class then calls `Parser#parse()` to "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "parse the user input. Upon checking that it is an Appointment-related command, `Parser` then calls the `AppointmentParser#parse()` "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "method. "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "2. `AppointmentParser#parse()` will then split the user input and calls the `DoneAppointmentCommand` class. "
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    **Warning**: If the number of arguments given is not equal to 2, the `HappyPillsException()` will be thrown."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "3. A new instance of `DoneAppointmentCommand` with the given arguments will be created. `HappyPills` will subsequently call "
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "the `DoneAppointmentCommand#execute()` method."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "4. The `DoneAppointmentCommand#execute()` method will then check that the nric given is valid and that a patient with that "
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "nric and appointment exists. If all the checks are successful, it calls `Storage#writeAllToFile()` and displays a success "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "message to the user. Otherwise the `HappyPillsException()` will be thrown according to what is invalid. "
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The following sequence diagram summarises how the `DoneAppointmentCommand` operation works: "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### 4.8. Storage"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This is an internal feature of the program, implemented to allow users to recover information even after HappyPills is "
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "closed in the terminal. This is achieved by storing all relevant information in a text file using a structured format."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " The current methods implemented in this class and a brief description of each method:"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `writeAllToFile` — writes the entire list of object to the specified text file."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `addSingleItemToFile` — appends a new object as a single string to the specified text file."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `loadPatientFromFile` — access the patient file and retrieve all information in the file as strings."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `parsePatientFileContent` — process line-by-line to create a patient object and add to the shared patient map."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `loadAppointmentFromFile` — access the patient file and retrieve all information in the file as strings."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `parseAppointmentFileContent` — process line-by-line to create an appointment object and add to the "
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                                   shared appointment map."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `loadPatientRecordFromFile` — access the patient record file and retrieve all information in the file as strings."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `parsePatientRecordFileContent` — process line-by-line to create a patient record object and "
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                                    add to the shared patient map."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " The following diagram shows how each command interacts with the other classes."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " *writeAllToFile*"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " For illustration purposes, assume the editPatientCommand has called this method."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   "
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  1. editPatientCommand first gets a single formatted string from StorageTextUi."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  2. StorageTextUi then access the patients in the patientMap one by one to retrieve the a string of the object by the"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     toSave() method. This is a private method that formats a string that contains all the values of the variables."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     It is constructed with \u0027|\u0027 as a divider, and a newline to indicate the end of the object."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  3. The formatted string is a concatenation of all the toSave() strings of the objects in the list."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  4. `writeAllToFile` is then called from the editPatientCommand and writes the string into the text file, "
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  overwriting any pre-existing strings in the file."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  This is implemented for edit and delete command of the various object. The process is identical regardless of"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  the object. It is also implemented in the exitCommand for all the objects, to ensure a final save of the current state"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  of the program."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  ![writing](images/DG/STORAGE/StorageWriteAll.png)"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " *addSingleItemToFile*"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " For illustration purposes, assume addPatientCommand has called this method."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " 1. The toSave() method formats a string that contains all the values of the variables. "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " It is constructed with \u0027|\u0027 as a divider, and a newline to indicate the end of the object."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  2. `addSingleItemToFile` is called by addPatientCommand and appends the string to the back of the text file. "
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " This is implemented for all add command of the various object, and process is identical. "
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " This provides improved performance for add commands as compared to using writeAllToFile(), as less strings need "
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " to be retrieved and formatted."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " ![saving](images/DG/STORAGE/StorageSave.png)"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " *loading and parsing file content to HappyPills*"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Loading and parsing methods are separated by class types. Each text file in HappyPills represent a single class."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "For illustration purposes, only the load and parse for patient is called. The process is similar for all object."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "1.  `loadPatientsFromFile` retrieves the entire content of the patient file, if any. "
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "2. `loadPatientsFromFile` then passes it line by line to `parsePatientFileContent`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "3. `parsePatientFileContent` creates a patient object and adds the details from the single line string into the object."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "4. `parsePatientFileContent` then adds the patient object into the patient map and returns. "
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "5. Step 2 - 4  is repeated if there is a next line in the content of the file."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "4. `loadPatient` then returns the whole patientMap to `HappyPills`."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " ![loading](images/DG/STORAGE/StorageLoadPatient.png)"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Aspect: Saving method"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Alternative 1 was chosen as fewer checks means that the program is less prone to exception, especially"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "so if the checks are confusing to implement. This would put lesser risk on the user experience for now."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Alternative 1 (current choice): Save the objects by object type."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: Fewer checks required to identify class of the string, parsing is easier."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          Cons: Delete and update operation may take a long time if there are alot of objects."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Alternative 2: Store each patient as an individual text file, along with all its associated objects. "
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                       A list with all the patient’s NRIC will also be stored for referencing."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          Pros: Delete and edit operation on a patient will only affect the patient\u0027s file, and the referencing list."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          Cons: More checks are requires to identify class of the string in the file."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "*Aspect: Updating deletion/edit* "
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Alternative 1 was chosen for now as the program is relatively new, and is more likely to be subjected to unexpected exceptions."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 1 (current choice): Upon every delete/edit operation, update the relevant text file"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          Pros: All deletions are updated in the relevant text files immediately and will not be affected by any "
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          unexpected termination of the program."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          Cons: In the event that there is a large amount of deletion, it could be time-consuming for the user "
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          and memory-intensive on the machine."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 2: Saving the delete/edit operation to a list, then process it before the exit of the program"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: Delay deletion time cost so that the use of the program is faster and smoother during time of use."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: If the program was to terminate unexpectedly, the deletion may not be reflected in the respective files."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### 4.9. User Prompting "
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.9.1. Description"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "When the user adds a patient’s details, the input could be missing a few compulsory fields. Instead of prompting the user to re-enter the entire input, HappyPills will only ask the user for the missing details."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The user may choose to abort the command because of a lack of knowledge of the compulsory field or provide the requested details. The add command will only be executed when all the compulsory fields are provided. "
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " "
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "*Representing a prompt*"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The prompting mechanism uses tag such as `/ic[NRIC]` to represent individual field in patient\u0027s information. A list of tags is use to pass to the `Parser` which contains:"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        - Parser #addCommandParser(String input) — This method break down user input base on tags such as (/ic, /p)"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "*Passing the prompts*"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "![PromptSequenceDiagram](images/DG/PromptSequenceDiagram.png)"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Given below is an example scenario where the user command has missing compulsory fields"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 1: The `HappyPills` pass the user\u0027s command to `Parser`, which finds one or more missing compulsory fields."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 2: The `Parser` call `Parser#parseAddCommand`, which prompt the corresponding missing field back to the user. And wait for user response"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 3: The new user input was than check again by `Parser#parseAddCommand` and repeat the process until all the compulsory fields is added correctly."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 4: `Parser#parseAddCommand` will ask for conformation before passing the correct input into `AddCommand`."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 5: `HappyPills` will execute the command."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Prompt handling method"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 (current choice): The `HappyPill` functions is unaware of prompting. The `Parser` keeps track of the incomplete command and sends back as `addCommand` objects."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: Decrease coupling between `HappyPill` and `Parser` components"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: `HappyPill` has no way to know if it is currently handling prompting, so it cannot abort prompts, `Parser` return IncorrectCommand to act as abort."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            "
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 2: The `Parser` componetnt keeps track of the incomplete command and throws an exception containing promts to the `HappyPills`."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: Greater flexibility for `HappyPill` to handle prompt, e.g. aborting"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: A new class is required to keep track of the command entered, rather than simply acting as a bridge between the `Command` and `Parser` sub-component. Increase number of pontential points of failure and decrease maintainability."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          "
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 was chosen as it decrease coupling between components. And reduces major failure during v1."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        P.S subject to change in v2."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "## 5. Testing"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Refer to the guide [here](Testing.md)."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "## 6. Useful links"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [User Guide](UserGuide-Main.md)"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [About Us](AboutUs.md)"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## Appendices "
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix A: Product Scope "
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Our product is targeted at users who:"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  "
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - has a need to record significant number of patients\u0027 information"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - want to keep patients\u0027 information organised"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - prefer desktop apps over other types"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - can type fast"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - prefer typing over mouse input"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - prefer CLI apps over GUI apps"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  "
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Value proposition: Note taking application built for doctors to manage notes faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix B: User Stories "
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v1.0|Doctor|add Patient\u0027s details|view their information in their subsequent visits|"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v1.0|Doctor|have a quick overview of a list of all patients|check for their detailed information|"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "itskesin"
        },
        "content": "|v1.0|Doctor|add Patient\u0027s details|view their information in their subsequent patientRecords.|"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "|v1.0|Doctor|have a quick overview of a list of all patients|check for their detailed information.|"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "|v1.0|Doctor|retrieve my patient\u0027s detailed information|check for his/her allergies and provide a more accurate diagnosis|"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "|v1.0|Doctor|edit a particular patient\u0027s information|the most up-to-date details in our patient records|"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|ensure that Patient\u0027s details are accurate before I add into the patient list|so that I can rectify mistakes earlier|"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|schedule appointments with my patients|ensure that I will prescribe enough medicine until the next appointment|"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|note down the prescription that I gave my patients|know what side effects are to be expected (based on the patient\u0027s current condition)|"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|record down the symptoms of my patients|check for any persistent health condition|"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|add Patient\u0027s medical records|view the previous reasons for doctor\u0027s visits|"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "itskesin"
        },
        "content": "|v2.1|Doctor|reduce the number of typing errors|ensure all information recorded are accurate|"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix C: Non-functional Requirements"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Should work on any mainstream OS as long as it has `Java 11` installed."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. A user with above average typing speed should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. Should be able to hold up to 1000 patients\u0027 information without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "itskesin"
        },
        "content": "4. Should be able to display large amount of information quickly."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix D: Glossary "
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- *Mainstream OS* - Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- *dob* - date of birth"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- *ic* - "
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix E: Instructions for Manual Testing"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Given below are instructions to test the application manually."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003eThese instructions only provide a starting point for tests to work on; testers are expected to do more exploratory testing.\u003c/td\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### E.1. Launch and Shutdown"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Initial launch "
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. Download the latest jar file [here](https://github.com/AY1920S2-CS2113T-T12-2/tp/releases)"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     and copy into an empty folder"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. Open the terminal and run the JAR file using `java -jar HappyPills.jar` command"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. Expected output: **HappyPills** startup screen is displayed"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Shut down of application"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. Enters `exit`"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. Expected output: **HappyPills** programs terminates"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    "
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### E.2. General Patient Information Commands"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Add patient to the list (User Prompting)"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `add patient /ic S9876543F /n Mallory /p 91265432 /dob 22/05/1999 /b O-`   "
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The program will prompt the user for confirmation before saving the inputs.  "
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Continuation: `y`  "
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: A new patient named `Mallory` will be added to the list.  "
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `add patient /ic S1234567G /p 91234567 /dob 10/03/1998 /b B+ /n Bob`  "
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The program will prompt the user for confirmation before saving the inputs.  "
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Continuation: `n`  "
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The patient named `Bob` will not be added to the list.  "
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    "
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `add patient /ic S6699999N /p 81234567 /b AB+ /n Alice /rm High Blood Pressure`  "
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The program will prompt the user for missing DOB.  "
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Continuation: `20/20/2020` (or any invalid date)  "
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the input is invalid. "
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    The program will continue to prompt the user for missing DOB.  "
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `add patient /ic S6699999N /p 81234567 /b AB+ /n Alice /rm High Blood Pressure`  "
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The program will prompt the user for missing DOB  "
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Continuation: `20/2/2020`  "
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The program will prompt the user for confirmation before saving the inputs.  "
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Continuation: `y`  "
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: A new patient named `Alice` will be added to the list.  "
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        "
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `add patient /ic S9888888G /n Eve`  "
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The program will prompt the user for missing necessary information.    "
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Continuation: `clear`  "
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: A message will be shown indicating that the command has been aborted.  "
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003ctable\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     \u003ctr\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "itskesin"
        },
        "content": "       \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "itskesin"
        },
        "content": "       \u003ctd\u003eTesters can conduct tests with invalid phone number, NRIC and blood type. Output is expected to be similar "
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "itskesin"
        },
        "content": "       to \u003ccode\u003eTest case iii\u003c/code\u003e \u003c/td\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     \u003c/tr\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003c/table\u003e"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      "
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. Edit patient"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is no patient in the list.*"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit patient S9876543F /p 99112233`  "
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the patient does not exists in the list.  "
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is a patient in the list with NRIC number S1234567F.*"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit patient S1234567F /rm Referred to National Centre for Infectious Diseases`  "
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The remarks for patient with NRIC `S1234567F` will be edited."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit patient S1234567F /p 911`  "
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the phone number is invalid. "
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit patient S1234567F /ic S9876543F`  "
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown, telling the user to read more about the edit patient command.  "
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit patient S123F /a Peanuts`  "
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the NRIC is invalid.  "
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit patient S1234567F`  "
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the command is incomplete.  "
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit patient`  "
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the necessary fields are missing.     "
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit patient S1234567G /p 91857432`  "
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the patient does not exists in list.  "
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003ctable\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     \u003ctr\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "itskesin"
        },
        "content": "       \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "itskesin"
        },
        "content": "       \u003ctd\u003eTesters can conduct tests with invalid DOB and blood type. Output is expected to be similar "
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "itskesin"
        },
        "content": "       to \u003ccode\u003eTest case ii\u003c/code\u003e \u003c/td\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     \u003c/tr\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003c/table\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. Delete Patient"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is no patient in the list.*"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `delete patient S9876543A`  "
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the patient does not exists in the list.  "
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is a patient in the list with NRIC number S9876543A.*"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `delete patient S9876543A`  "
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The program will prompt the user for confirmation.  "
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Continuation: `y`  "
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The patient with NRIC `S9876543A` will be deleted from the list.  "
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `delete patient S9876543A`  "
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The program will prompt the user for confirmation.  "
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Continuation: `n`  "
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The patient with NRIC `S9876543A` will **not** be deleted from the list.     "
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `delete patient S983A`  "
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the NRIC is invalid.  "
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `delete patient`  "
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the input format is incorrect.  "
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "itskesin"
        },
        "content": "4. List patient"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is no patient in the list.*"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `list patient`  "
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An message will appear indicating that there is no patient in the list."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There are patients in the list.*  "
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `list patient`  "
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The patients\u0027 Name and NRIC will be listed down.  "
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `list patient 123`  "
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the input format is incorrect.  "
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   "
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "itskesin"
        },
        "content": "5. Get Patient"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is a patient in the list with NRIC number S1234567F.*  "
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  "
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   1. **Test case:** `get patient`  "
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  Expected: An error message will be shown indicating that the command is incomplete.  "
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  "
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `get patient S1234567F`  "
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  Expected: The detailed information of the patient `S1234567F` will be displayed.  "
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `get patient S9876543G`  "
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  Expected: An error message will be shown indicating that the patient does not exists in the list.  "
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  "
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `get patient S987G`  "
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  Expected: An error message will be shown indicating that the NRIC is invalid.  "
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  "
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### E.3. Patient Medical Records Commands"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Add patient record (User Prompting)"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is no patient in the list.*"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `add pr /ic S9876543F /sym Cough /diag Fever /d 22/02/1992 /t 22:22`   "
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The program will prompt the user for confirmation before saving the inputs.  "
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Continuation: `y`  "
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the patient does not exists in the list.   "
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is a patient with NRIC number S9876543F in the list.*"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `add pr /ic S9876543F /sym Cough /diag Fever /d 22/02/1992 /t 22:22`   "
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The program will prompt the user for confirmation before saving the inputs.  "
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Continuation: `y`  "
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: A new patient record for the patient with `S9876543F` will be added.  "
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `add pr /ic S9876543F /sym Cough /diag Cough Syrup /d 22/4/2020 /t 22:22`   "
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The program will prompt the user for confirmation before saving the inputs.  "
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Continuation: `n`  "
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The patient record will not be added."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `add pr /ic S983F /sym Cough /diag Cough Syrup /d 22/4/2020 /t 22:22`   "
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The program will prompt the user for valid NRIC.  "
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Continuation: `S9876543F` (valid NRIC of a patient existing in the patient list)"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: A new patient record for the patient with `S9876543F` will be added.  "
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `add pr`.   "
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the command is incomplete.  "
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003ctable\u003e"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     \u003ctr\u003e"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "itskesin"
        },
        "content": "       \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "itskesin"
        },
        "content": "       \u003ctd\u003eTesters can conduct tests with invalid date and time. Output is expected to be similar "
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "itskesin"
        },
        "content": "       to \u003ccode\u003eTest case iii\u003c/code\u003e \u003c/td\u003e"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     \u003c/tr\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003c/table\u003e    "
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. List patient record"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is no patient in the list.*"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `list pr S1234567F`  "
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the patient record is not found.  "
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `list pr`  "
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the command is incomplete.      "
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### Prerequisite: There is a patient with NRIC S9876543F in the list and the patient have existing patient records.  "
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `list pr S9876543F`  "
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The patient\u0027s record summary will be listed down with the ID, Date and Time.  "
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `list pr S9999999Z`  "
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the patient does not exist.  "
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `list pr S98G`  "
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that format of the NRIC is invalid.  "
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        "
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is a patient with NRIC S9876543F in the list and the patient have NO existing patient records.*  "
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `list pr S9876543F`  "
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the patient record is not found.  "
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Find patient record"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is no patient in the list. There is a patient with NRIC S9876543F but the patient has no existing records.*  "
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `find pr S9876543F 2`  "
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the patient record is not found.  "
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is a patient in the list with NRIC S9876543F and the patient have 3 existing patient records.*  "
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `find pr S9876543F 5`  "
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that there is no patient record found with the given index.      "
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `find pr S9876543F 2`  "
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: A detailed patient record will be listed down.  "
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `find pr S9876543F abc`  "
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the index is invalid. "
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `find pr S98F 1`  "
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the format of the NRIC is invalid.  "
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `find pr S9876543F`  "
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the command is incomplete.  "
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `find pr`  "
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the command is incomplete.  "
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Edit Patient Record  "
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is no patient in the list. There is a patient with NRIC S9876543F but the patient has no existing records.*  "
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit pr S9876543F 1 /sym Fever`  "
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the patient record is not found."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is a patient in the list with NRIC S9876543F and the patient has 3 existing patient records.*  "
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1.  **Test case:** `edit pr S9876543F 1 /sym Fever`  "
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: The `symptom` of patient record with index `1` is edited for the patient with NRIC `S9876543F`.   "
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit pr S9876543F 1 /d 44/0/2020`"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the date is invalid.  "
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit pr S9876543F 5 /d 11/04/2020`  "
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the patient record is not found.  "
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit pr S9876543F -1 /time 12:00`  "
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the index is invalid.  "
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit pr S9873F 1 /time 12:00`  "
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the format of the NRIC is invalid.  "
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1. **Test case:** `edit pr S9876543F 1`  "
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Expected: An error message will be shown indicating that the command is incomplete."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003ctable\u003e"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     \u003ctr\u003e"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "itskesin"
        },
        "content": "       \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "itskesin"
        },
        "content": "       \u003ctd\u003eTesters can conduct tests with invalid time. Output is expected to be similar "
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "itskesin"
        },
        "content": "       to \u003ccode\u003eTest case ii\u003c/code\u003e \u003c/td\u003e"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     \u003c/tr\u003e"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003c/table\u003e        "
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "itskesin"
        },
        "content": " 1. Delete Patient Record  "
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     ###### *Prerequisite: There is no patient in the list. There is a patient with NRIC S9876543F but the patient has no existing records.*  "
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     1. **Test case:** `delete pr S9876543F 1`    "
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     Expected:  An error message will be shown indicating that the patient record is not found.  "
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     1. **Test case:** `delete pr S9876543F`  "
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     Expected: An error message will be shown indicating that the command is incomplete.  "
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     ###### *Prerequisite: There is a patient in the list with NRIC S9876543F and the patient has 3 existing patient records.*  "
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     1. **Test case:** `delete pr S9876543F 1`   "
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     Expected: The `first` patient record will be deleted for patient `S9876543F`."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     1. **Test case:** `delete pr S9876543F 5`  "
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     Expected: An error message will be shown indicating that no patient record is found with the given index.  "
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     1. **Test case:** `delete pr S9876543F abc`  "
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     Expected: An error message will be shown indicating that the index is invalid.  "
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     1. **Test case:** `delete pr S9876F 1`  "
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     Expected: An error message will be shown indicating that the format of the NRIC is invalid.  "
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     1. **Test case:** `delete pr 1`  "
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     Expected: An error message will be shown indicating that the command is incomplete.  "
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### E.4. Appointment Scheduling Commands"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "1. Add appointment to the list (User Prompting)"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: There is a patient with NRIC S1234567G in the list.*"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    1. **Test case:** `add appt /ic S1234567G /d 02/02/2020`   "
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: The program will prompt the user for missing information.  "
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Continuation: `/t 12:00 /r sick`  "
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: The program will prompt the user for confirmation before saving the inputs."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Continuation:`y`"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: A new appointment will be added to the list.  "
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: There is a patient with NRIC S1234567G in the list.*"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    2. **Test case:** `add appt /ic S1234567G /d 02/02/2020 /t 13:00 /r ill`    "
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: The program will prompt the user for confirmation before saving the inputs.  "
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Continuation: `n`  "
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: The appointment will not be added to the list.  "
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    3. **Test case:** `add appt /ic S1234567G /d 20/20/2020 /t 13:00 /r ill`   "
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the date is incorrect or missing."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Continuation: `clear` "
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: The program will prompt that command is aborted."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    4. **Test case:** `add appt /ic S1234567G /d 20/20/2020 /t 13:00 /r ill`   "
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the date is incorrect or missing."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Continuation: `/d 21/12/2020` "
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: The program will prompt the user for confirmation before saving the inputs."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Continuation: `n`"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: The appointment is *not* added to the list. "
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    \u003ctable\u003e"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "      \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "      \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     \u003ctr\u003e"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "       \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "       \u003ctd\u003eTesters can conduct tests with other forms of missing/invalid date, time or reason. Program is expected to"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "       capture and return error message.\u003c/td\u003e"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     \u003c/tr\u003e"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    \u003c/table\u003e"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "      "
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "2. Edit appointment"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: Patient with stated NRIC not in the patient list.*"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    1. **Test case:** `edit appt S7654321A 1 /d 15/12/2020`  "
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the patient does not exists.  "
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is no appointment with the stated appointment ID in the list.*"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    2. **Test case:** `edit appt S1234567G 100 /d 15/12/2020`  "
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the appointment does not exist."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: There is a patient in the list with NRIC number S1234567G and appointment id is valid.*"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    3. **Test case:** `edit appt S1234567G 1 /d 15/12/2020`  "
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: The appointment will be edited."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: There is a patient in the list with NRIC number S1234567G and appointment id is valid.*"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    5. **Test case:** `edit appt S1234567G 1 /d 20/20/2020`  "
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the date is invalid."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    6. **Test case:** `edit appt S1234567G 1 xxx`  "
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown, telling the user to read more about the edit appt command.    "
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    7. **Test case:** `edit appt S1234567G`  "
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown, telling the user to read more about the edit appt command.   "
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    8. **Test case:** `edit appt`  "
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the command is incomplete."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    9. **Test case:** `edit appt xxx 1 /d 20/20/2020`"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the NRIC is invalid.    "
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    \u003ctable\u003e"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "      \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "      \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     \u003ctr\u003e"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "       \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "       \u003ctd\u003eTesters can conduct tests with missing/invalid date, time or reason. Program is expected to "
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "       capture and return error message.\u003c/td\u003e"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     \u003c/tr\u003e"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    \u003c/table\u003e"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "3. Delete appointment"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: Patient with stated NRIC not in the patient list.*"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "       "
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    1. **Test case:** `delete appt S7654321A 1`  "
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the patient does not exists.  "
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is no appointment with the stated appointment ID in the list.*"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    2. **Test case:** `delete appt S1234567G 100`  "
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the appointment does not exist."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: There is a patient in the list with NRIC number S1234567G and appointment id is valid.*"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    3. **Test case:** `delete appt S1234567G 1`  "
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: The appointment will be deleted."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    4. **Test case:** `delete appt S983A 1`  "
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the NRIC is invalid.  "
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    5. **Test case:** `delete patient`  "
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the input format is incorrect.  "
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "       "
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    6. **Test case:** `delete appt S1234567G xxx`  "
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating appointment does not exist.    "
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    7. **Test case:** `delete appt S1234567G`  "
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown, telling the user to read more about the delete appt command.   "
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "4. List appointment"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: There is no appointment in the list.*"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    1. **Test case:** `list appt`  "
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: A message will appear indicating that there is no patient in the list."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: There are appointment(s) in the list.*  "
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    2. **Test case:** `list appt`  "
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: The patients\u0027 Name and NRIC will be listed down.  "
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "3. Mark appointment as Done"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: Patient with stated NRIC does not exist in the patient list.*"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "       "
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    1. **Test case:** `done appt S7654321A 2`  "
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the patient does not exists.  "
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is no appointment with the stated appointment ID in the list.*"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    2. **Test case:** `done appt S1234567G 100`  "
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the appointment does not exist."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: There is a patient in the list with NRIC number S1234567G and appointment id is valid.*"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    3. **Test case:** `done appt S1234567G 2`  "
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: The appointment will be marked done."
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    4. **Test case:** `done appt S983A 2`  "
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the NRIC is invalid.  "
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    6. **Test case:** `done appt`  "
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the input format is incomplete.  "
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "       "
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    7. **Test case:** `delete appt S1234567G xxx`  "
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating appointment cannot be found.    "
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    8. **Test case:** `delete appt S1234567G`  "
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown, telling the user to read more about the edit appt command.   "
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "5. Find appointment"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: There is no patient in the list with NRIC number S1234567B.*  "
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    1. **Test case:** `find appt S1234567B`  "
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the patient cannot be found.  "
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ###### *Prerequisite: There is a patient in the list with NRIC number S1234567G.*  "
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    2. **Test case:** `find appt`  "
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating that the command is incomplete.  "
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is a patient with stated NRIC number and there is no appointment for the patient.*"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    3. **Test case:** `find appt S1234567G`  "
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: TA message will appear indicating that patient has no appointment in the list.  "
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ###### *Prerequisite: There is a patient with stated NRIC number and there is an appointment for the patient.*"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    4. **Test case:** `find patient S9876543G`  "
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: Appointment for the patient will be displayed  "
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    5. **Test case:** `find patient S987G`"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Expected: An error message will be shown indicating invalid NRIC.  "
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## Useful links:"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [User Guide](UserGuide-Main.md)"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 406,
      "Janicetyy": 270,
      "sitinadiah25": 224,
      "itskesin": 448,
      "-": 18
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "# HappyPills"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "HappyPills is a note-taking application that allows doctors to take down notes using Command Line Interface (CLI)."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The application replaces all physical papers and is highly optimised for fast typing users.    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "If you can type fast, HappyPills can help to manage patients’ records **faster** than traditional Graphical User Interface (GUI) applications.  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "All notes are **neatly organised** in HappyPills so that all your important information are **safely stored**.  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Say **HELLO** to neater desks and time-saving electronic notes with HappyPills! \u003cspan style\u003d\u0027font-size:20px;\u0027\u003e\u0026#128522;\u003c/span\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## Useful links:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [User Guide](UserGuide-Main.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 1,
      "sitinadiah25": 5,
      "itskesin": 1,
      "-": 3
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#HappyPills - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 1. Prerequisites"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1.  JDK 11 or above"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2.  IntelliJ IDE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003ctd\u003eIntelliJ by default has Gradle and JavaFx plugins installed. Do not disable them. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    If you have disabled them, go to \u003ccode\u003eFile\u003c/code\u003e \u003e \u003ccode\u003eSettings\u003c/code\u003e \u003e "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003ccode\u003ePlugins\u003c/code\u003e to re-enable them.\u003c/td\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 2. Setting up the project on your computer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1.  Fork this repository, and clone the fork to your computer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2.  Open the IntelliJ IDE. If you are not in the welcome screen, click `File` \u0026gt; `Close Project` to close the existing project."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3.  Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    1.  Click `Configure` \u0026gt; `Project Defaults` \u0026gt; `Project Structure`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    2.  Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "4.  Click on `Import Project`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "5.  Locate and select the `build.gradle` file, then click `OK`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "6.  Click `Open as Project`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "7.  Click `OK` to use the default settings provided"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 3. Verifying the Setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1.  In Intellij, run `seedu.happypills.HappyPills` and try a few commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * Commands that you can try to get familiar with HappyPills:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        - `help`: list all the available commands in HappyPills"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        - `add patient /ic S9876543F /n Eve /p 91265432 /dob 22/05/1999 /b O- /a School /rm Best Friend with Mallory`:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Add patient\u0027s information in HappyPills."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        - `list patient`: list all the patients stored in HappyPills."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "itskesin": 45
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "# HappyPills - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Running Tests"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### Method 1 : Using IntelliJ JUnit Tests"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- To run all test, right-click on `src/test/java` folder and choose `Run \u0027Tests in HappyPills\u0027`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027TEST\u0027`."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### Method 2 : Using Gradle"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- To run all test using Gradle: Open a terminal and run the command `gradlew clean test` "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "(Mac/Linux: `./gradlew clean test`)  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ctable\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     \u003ctd\u003e See \u003ca href\u003d\"https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/tutorials/gradleTutorial.md\"\u003eGradle Tutorial\u003c/a\u003e "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     for more info on how to run tests using Gradle. \u003c/td\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     \u003c/td\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003c/tr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003c/table\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Using Input-Output Tests"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Right-click on `text-ui-test` folder and choose `Open in terminal` "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Enters `runtest.bat` (Windows) or `runtest.sh` (Mac / Linux) in the terminal to run the script."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- This will run HappyPills with the commands given in the `input.txt` and compare its output in the `ACTUAL.txt` "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "with the `EXPECTED.txt`."
      }
    ],
    "authorContributionMap": {
      "itskesin": 28
    }
  },
  {
    "path": "docs/UserGuide-Appointment.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [3.4. Appointment Scheduling Commands](#34-appointment-scheduling-commands)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.1. Add Appointment: `add appt`](#341-add-appointment-add-appt)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.2. Edit Appointment: `edit appt`](#342-edit-appointment-edit-appt)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.3. Delete Appointment: `delete appt`](#343-delete-appointment-delete-appt)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.4. Mark Appointment as Done: `done appt`](#344-mark-appointment-as-done-done-appt)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.5. List All Appointments: `list appt`](#345-list-all-appointments-list-appt)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.6. Find Patient\u0027s Appointments: `find appt`](#346-find-patients-appointments-find-appt)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003cdiv align\u003d\"left\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide.html\"\u003e \u0026#8592; Back to Main \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.4. Appointment Scheduling Commands "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HappyPills helps to store appointment schedules. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.1. Add Appointment: `add appt`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Add a new appointment for the patient with the specified NRIC. An appointmentID will be allocated to the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "patient automatically."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     add appt /ic NRIC /d DATE /t TIME /r REASON"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    add appt /ic S1234567F /d 01/02/2020 /t 12:00 /r sick"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![addSuccess](images/UG/APPT/AddAppt.png)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003eConfirm appointment details are correct by typing \"y\" or \"Y\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![addConfirmSuccess](images/UG/APPT/confirmAddAppt.png)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.2. Edit Appointment: `edit appt`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Edit information of the appointment with the specified appointmentID(apptID)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " The appointment should belong to the patient with the specified NRIC. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format:  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     edit appt NRIC apptID [Options][editedInput]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     Options:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         /d edit date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         /t edit time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         /r edit reason"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    edit appt S1234567F 1 /d 12/02/2020"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![editSuccess](images/UG/APPT/EditAppt.png)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.3. Delete Appointment: `delete appt`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Delete an appointment of a patient as specified by the NRIC and appointmentID(apptID). "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    delete appt NRIC apptID"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    delete appt S1234567F 1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![deleteSuccess](images/UG/APPT/DeleteAppt.png)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.4. Mark Appointment as Done: `done appt` "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Mark the appointment with the specified appointmentID(apptID) as done if arrived."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " The appointment should belong to the patient with the specified NRIC. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     done appt NRIC apptID"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    done appt S9473069F 4 "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![doneSuccess](images/UG/APPT/DoneAppt.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.5. List All Appointments: `list appt` "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "List all the existing appointments in the clinic. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "This can be used as a method to check for appointmentID."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     list appt"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![ListSuccess](images/UG/APPT/ListAppt.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.6. Find Patient\u0027s Appointments: `find appt`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Check all appointments that the patient with the specified NRIC has. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "This can be used as a method to check for appointmentID."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     find appt NRIC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    find appt S9473069F"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![findSuccess](images/UG/APPT/FindAppt.png)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 113,
      "sitinadiah25": 10,
      "itskesin": 13
    }
  },
  {
    "path": "docs/UserGuide-Main.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- [2. Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    * [3.1. General Commands](#31-general-commands)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        + [3.1.1. View help: `help`](#311-view-help-help)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        + [3.1.2. Exit program: `exit`](#312-exit-program-exit)        "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    * [3.2. General Patient Information Commands](UserGuide-Patient.md) "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    * [3.3. Patient Medical Records Commands](UserGuide-Records.md)    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    * [3.4. Appointment Scheduling Commands](UserGuide-Appointment.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- [4. Command Summary](#4-command-summary)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- [5. Useful Links](#5-useful-links)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## 1. Introduction "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HappyPills is a note-taking application that allows doctors to take down notes using Command Line Interface (CLI)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The application replaces all physical papers and is highly optimised for fast typing users.    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "If you can type fast, HappyPills can help you to manage patients’ records **faster** than traditional Graphical "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "User Interface (GUI) applications.    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "All notes are **neatly organised** in HappyPills so that all your important information are **safely stored**.  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Say **HELLO** to neater desks and time-saving electronic notes with HappyPills! \u003cspan style\u003d\u0027font-size:20px;\u0027\u003e\u0026#128522;\u003c/span\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Installation**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "1. Ensure that you have `Java 11` or above installed in your computer. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "2. Click [here](https://github.com/AY1920S2-CS2113T-T12-2/tp/releases) to download the HappyPills JAR File."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "3. Copy the file to the folder you want to use as your home folder for HappyPills."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**For all users**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "1. Open Command Prompt in the directory where the JAR file is located."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "2. Run the command `java -jar happypills.jar`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![Start of Application](images/UG/StartOfApplication.PNG \"Start of App\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "3. When you start the application for the first time, you can type `help` to check all the available commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "4. Refer to [here](#3-features) for detailed instructions on how to use each command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HappyPills have three main features: `Patient Details`, `Patient Records` and `Appointment Scheduling`. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "`Patient Details` notes down the general details of the patient. (e.g. NRIC, name, phone number, date of birth, "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "blood type and allergies)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "`Patient Records` documents the patient\u0027s previous visits to the doctor and includes detailed information of those visits"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "(e.g. patient\u0027s symptoms, diagnosis and date/time of the medical treatment)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "`Appointment Scheduling` helps the you schedule future appointments with your patients. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "These features come together to help you easily manage their patients\u0027 information. You can now provide their patients "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "with better service by being able to retrieve their patients\u0027 information quickly and easily.  "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "This section will elaborate more on how to use these features in HappyPills. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### Command Format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- Words in `UPPER_CASE` are the parameters to be supplied by you **e.g.** in `add patient /ic NRIC`, `NRIC` is the input required from you."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- In case a tag is used multiple times in a command then its last instance will be taken and the previous instances will be overwritten."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- Items in square brackets are optional fields **e.g.** `/ic NRIC /a [ALLERGIES]` can be used as `/ic S1234567F` or as `/ic S1234567F /a Dust`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- Items in angle brackets indicates that only one field can be supplied at each time **e.g.** `/n\u003cNAME\u003e /p\u003cPHONE_NUMBER\u003e /dob\u003cDOB\u003e` can be used as `/nYAP` or `/p91122334` or `/dob18/06/2020`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- Parameters can be in any order **e.g.** if the command requires `/n NAME /ic NRIC` or `/ic NRIC /n NAME `"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- All commands are case insensitive **e.g.** `help` or `HELP` or `HeLp` will display all the commands and their usage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### Legend For Tags"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- `/n` → Patient\u0027s Name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- `/ic` → Patient\u0027s NRIC"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- `/p` → Patient\u0027s Phone Number"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- `/dob` → Patient\u0027s Date of birth"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- `/b` → Patient\u0027s Blood type"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- `/a` → Patient\u0027s Allergies"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- `/rm` → Patient\u0027s Remarks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- `/t` → Time of the Patient\u0027s appointment"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- `/d` → Date of the Patient\u0027s appointment"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- `/r` → Reason for the Patient\u0027s appointment"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- `/sym` → Patient\u0027s Symptoms"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- `/diag` → Patient\u0027s Diagnosis"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.1. General Commands "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.1.1. View Help: `help`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Displays the list of commands and their syntax."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "###### Usage example:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![help](images/UG/HelpOutput.PNG \"help output\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ctd\u003eThe help command is split into four different sections \u003ccode\u003e(highlighted by the boxes)\u003c/code\u003e.\u003c/td\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.1.2. Exit program: `exit`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Exits the program and ends the current session. "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![help](images/UG/Exit.PNG \"exit output\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### [3.2. General Patient Information Commands](UserGuide-Patient.md) "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### [3.3. Patient Medical Records Commands](UserGuide-Records.md)    "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### [3.4. Appointment Scheduling Commands](UserGuide-Appointment.md)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### General Patient Information"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Add a patient\u0027s information | `add patient /ic NRIC /n NAME /p PHONE_NUMBER /dob DOB /b BLOOD_TYPE /a [ALLERGIES] /rm [REMARKS]`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Edit a patient\u0027s information |  `edit patient NRIC /n\u003cNAME\u003e or /p\u003cPHONE_NUMBER\u003e or /dob\u003cDOB\u003e or /b\u003cBLOOD_TYPE\u003e or /a\u003cALLERGIES\u003e or /rm\u003cREMARKS\u003e`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "list all patients | `list patient`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Retrieve a patient\u0027s information | `get patient NRIC`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### Patient Medical Records"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " Add a Patient Record |`add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS /d DATE /t TIME`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " List all Patient Records |`list pr NRIC`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " Find a Patient Record|`find pr NRIC INDEX`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " Edit a Patient Record |`edit pr NRIC INDEX /sym\u003cSYMPTOMS\u003e or /diag\u003cDIAGNOSIS\u003e or /d\u003cDATE\u003e or /t\u003cTIME\u003e`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " Delete a Patient Record | `delete pr NRIC INDEX`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### Appointments"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Add an appointment | `add appt /ic NRIC /d DATE /t TIME /r REASON`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Edit an appointment | `edit appt NRIC /d DATE /t TIME /r REASON`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Delete an appointment | `delete appt NRIC APPT_ID`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Mark an appointment as done | `done appt NRIC APPT_ID`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "List all appointments | `list appt`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Find an appointment| `find appt NRIC`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## 5. Useful links:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [About Us](AboutUs.md)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 174
    }
  },
  {
    "path": "docs/UserGuide-Patient.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [3.2. General Patient Information Commands](#32-general-patient-information)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.1. Add Patient: `add patient`](#321-add-patient-add-patient)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.2. Edit Patient: `edit patient`](#322-edit-patient-edit-patient)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.3. Delete Patient: `delete patient`](#323-delete-patient-delete-patient)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.4. List All Patients: `list patient`](#324-list-all-patients-list-patient)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.5. Retrieve a Patient\u0027s Information: `get patient`](#325-retrieve-a-patients-information-get-patient)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003cdiv align\u003d\"left\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide.html\"\u003e \u0026#8592; Back to Main \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003cdiv align\u003d\"right\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide-Records.html\"\u003e \u0026#8594; Go to Medical Records \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.2. General Patient Information"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HappyPills can help users to manage their patients\u0027 information easily. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.1. Add Patient: `add patient`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "This feature allows you to add more patients into the existing patients\u0027 list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills will prompt you if there are any missing fields. Instead of having to type the whole command again, "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "you will only need to fill in the couple of fields you missed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "You can also add a new patient with the specified parameters in any order."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Format:   "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add patient /ic NRIC /n NAME /p PHONE_NUMBER /dob DOB /b BLOOD_TYPE /a[ALLERGIES] /rm[REMARKS]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    add patient /ic S9876543F /n Eve /dob 22/05/1999 /b O-"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e![MissingInput](images/UG/PATIENT/MissingAddPatientInput.PNG \"Missing Add Output\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eHappyPills will prompt you for any missing inputs that are necessary.\u003c/td\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Enter `/p 91265432` to add the missing field."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e   ![CheckConfirmAdd](images/UG/PATIENT/addConfirm.PNG \"Add Confirmation Output\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e Entering \u003ccode\u003en\u003c/code\u003e will abort the command and HappyPills will not save the patients\u0027 information.\u003c/td\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    \u003c!--This is a comment. Patient\u0027s information will be discarded if \u003ccode\u003en\u003c/code\u003e is entered.--\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Enter `y` to confirm."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e  ![SuccessfulAdd](images/UG/PATIENT/SuccessfullyAddedPatientInformation.PNG \"Successfully Added Output\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.2. Edit Patient: `edit patient`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Edit information of the patient with the specified NRIC. "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    edit patient NRIC /n\u003cNAME\u003e "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                      /p\u003cPHONE_NUMBER\u003e "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                      /dob\u003cDOB\u003e "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                      /b\u003cBLOOD_TYPE\u003e "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                      /a\u003cALLERGIES\u003e "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                      /rm\u003cREMARKS\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e You can only edit \u003ccode\u003eone\u003c/code\u003e field at a time. Those fields that can be edited are in \u003ccode\u003e\u003c\u003e\u003c/code\u003e. "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   There should \u003ccode\u003eno spaces\u003c/code\u003e between the tag and the edited information.\u003c/td\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    edit patient S9876543F /p99112233"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![editPatientOutput](images/UG/PATIENT/EditCommandOutput.PNG \"Edit Patient Output\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e NRIC \u003ccode\u003ecannot\u003c/code\u003e be edited because it is used to uniquely identify the patient.\u003c/td\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.3. Delete Patient: `delete patient`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Delete a patient as specified by the NRIC. "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete patient NRIC"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete patient S1234567F"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![confirmDelete](images/UG/PATIENT/ConfirmationDeletion.PNG \"Delete Confirmation Output\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e HappyPills will \u003ccode\u003eprompt for confirmation\u003c/code\u003e before deleting patient in the patient list. \u003c/td\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Enter `y` to confirm."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e    "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e  ![SuccessfulDelete](images/UG/PATIENT/DeleteSuccessful.PNG \"Successfully Deleted Output\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e Upon \u003ccode\u003esuccessful deletion\u003c/code\u003e, patient\u0027s information will not be able to be retrieved again. \u003c/td\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.4. List All Patients: `list patient`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Displays all the patients in the patient list. "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    list patient"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![ListPatient](images/UG/PATIENT/ListPatientOutput.PNG \"List Output\")  "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.5. Retrieve a Patient\u0027s Information: `get patient`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Retrieve details of the patient with the specified NRIC."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    get patient NRIC"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    get patient T9999999N"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![getpatient](images/UG/PATIENT/GetPatientOutput.PNG \"Get Output\")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 4,
      "Janicetyy": 106,
      "itskesin": 79
    }
  },
  {
    "path": "docs/UserGuide-Records.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [3.3. Patient Medical Records Commands](#33-patient-medical-information-commands)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + [3.3.1. Add Patient Records : `add pr`](#331-add-patient-records-add-pr)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + [3.3.2. List Patient Records : `list pr`](#332-list-patient-records-list-pr)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + [3.3.3. Find Patient Records : `find pr`](#333-find-patient-records-find-pr)    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + [3.3.4. Edit Patient Records : `edit pr`](#334-edit-patient-records-edit-pr)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + [3.3.5. Delete Patient Records : `delete pr`](#335-delete-patient-records-delete-pr)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003cdiv align\u003d\"left\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide.html\"\u003e \u0026#8592; Back to Main \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003cdiv align\u003d\"right\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide-Appointment.html\"\u003e \u0026#8594; Go to Appointments \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.3. Patient Medical Records "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.3.1. Add Patient Records: `add pr`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Add patient\u0027s medical records to the database, to support the diagnosis and to justify the treatment."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e Patient\u0027s records can only be added if the patient information exists in the database. \u003c/td\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS /d DATE /t TIME"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    add pr /ic S9876543F /sym Cough /diag Fever /d 22/02/1992 /t 22:22"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![addPR](images/UG/PR/AddPR.PNG \"addPR\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e Enter `y` to confirm."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![cfmAddPR](images/UG/PR/addprcfm.PNG \"cfmAddPR\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 3.3.2. List Patient Records: `list pr`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Displays all  patient records for the patient using his/her NRIC. Patient\u0027s records will be listed with their respective "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "index which is needed for [find pr](#333-find-patient-records-find-pr), "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[edit pr](#334-edit-patient-records-edit-pr) and [delete pr](#335-delete-patient-records-delete-pr) commands."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    list pr NRIC"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    list pr S9876543F"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![listPR](images/UG/PR/listpr.PNG \"list PR output\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003eIf the patient have no past medical records. The message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![listPR not found](images/UG/PR/listprfail.PNG \"list PR not found\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.3. Find Patient Records: `find pr`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Display detailed information for that particular patient\u0027s visit using the NRIC and index of the patient\u0027s records "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "which can obtained from the [list pr](#332-list-patient-records-list-pr) command. "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    find pr NRIC INDEX"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    find pr S9876543F 2"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![findPR](images/UG/PR/findpr.PNG \"find PR output\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003eIf no record is found with the given NRIC, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![PR not found](images/UG/PR/prEmpty.PNG \"PR not found\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.4. Edit Patient Records: `edit pr`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit patient\u0027s past medical record using the index of the patient\u0027s records "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "which can obtained from the [list pr](#332-list-patient-records-list-pr) command."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    edit pr NRIC INDEX /sym\u003cSYMPTOMS\u003e "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                       /diag\u003cDIAGNOSIS\u003e "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                       /d\u003cDATE\u003e "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                       /t\u003cTIME\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                       "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e You can only edit \u003ccode\u003eone\u003c/code\u003e field at a time. Those fields that can be edited are in \u003ccode\u003e\u003c\u003e\u003c/code\u003e. "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   There should \u003ccode\u003eno spaces\u003c/code\u003e between the tag and the edited information.\u003c/td\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    edit pr S9876543F 2 /t12:00"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ![EditPR](images/UG/PR/editprsuccess.PNG \"edit pr output\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eIf the record is not found with the given input. The message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e![prEmpty](images/UG/PR/prEmpty.PNG \"help output\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.5. Delete Patient Records: `delete pr`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Delete patient\u0027s medical records based on the given NRIC and the index of the patient\u0027s records "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "itskesin"
        },
        "content": "which can obtained from the [list pr](#332-list-patient-records-list-pr) command."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    delete pr NRIC INDEX"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    delete pr S9876543F 1"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![Delete PR](images/UG/PR/deleteprsuccess.PNG \"Delete PR output\")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eIf the record is not found with the given input. The message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![PR not found](images/UG/PR/prEmpty.PNG \"Delete PR not found\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 83,
      "Janicetyy": 70,
      "sitinadiah25": 7,
      "itskesin": 38
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [2. Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.1. General Commands](#31-general-commands)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.1.1. View help: `help`](#311-view-help-help)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.1.2. Exit program: `exit`](#312-exit-program-exit)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    * [3.2. General Patient Information](#32-general-patient-information)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        + [3.2.1. Add Patient: `add patient`](#321-add-patient-add-patient)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        + [3.2.2. Edit Patient: `edit patient`](#322-edit-patient-edit-patient)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        + [3.2.3. Delete Patient: `delete patient`](#323-delete-patient-delete-patient)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        + [3.2.4. List All Patients: `list patient`](#324-list-all-patients-list-patient)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        + [3.2.5. Retrieve a Patient\u0027s Information: `get patient`](#325-retrieve-a-patients-information-get-patient)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    * [3.3. Patient Medical Records](#33-patient-medical-records)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        + [3.3.1. Add Patient Records : `add pr`](#331-add-patient-records-add-pr)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [3.3.2. Edit Patient Records : `edit pr`](#332-edit-patient-records-edit-pr)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [3.3.3. Delete Patient Records : `delete pr`](#333-delete-patient-records-delete-pr)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [3.3.4. List Patient Records : `list pr`](#334-list-patient-records-list-pr)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [3.3.5. Find Patient Records : `find pr`](#335-find-patient-records-find-pr)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.4. Appointment Scheduling](#34-appointment-scheduling-commands)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        + [3.4.1. Add Appointment: `add appt`](#341-add-appointment-add-appt)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        + [3.4.2. Edit Appointment: `edit appt`](#342-edit-appointment-edit-appt)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        + [3.4.3. Delete Appointment: `delete appt`](#343-delete-appointment-delete-appt)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [3.4.4. List All Appointments: `list appt`](#344-list-all-appointments-list-appt)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [3.4.5. Find Patient\u0027s Appointments: `find appt`](#345-find-patients-appointments-find-appt)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [3.4.6. Mark Appointment as Done: `done appt`](#346-mark-appointment-as-done-done-appt)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [4. Command Summary](#4-command-summary)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [5. Useful Links](#5-useful-links)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 1. Introduction "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills is a note-taking application that allows doctors to take down notes using Command Line Interface (CLI)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The application replaces all physical papers and is highly optimised for fast typing users.    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "If you can type fast, HappyPills can help you to manage patients’ records **faster** than traditional Graphical "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "User Interface (GUI) applications.    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "All notes are **neatly organised** in HappyPills so that all your important information are **safely stored**.  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Say **HELLO** to neater desks and time-saving electronic notes with HappyPills! \u003cspan style\u003d\u0027font-size:20px;\u0027\u003e\u0026#128522;\u003c/span\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Installation**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Ensure that you have `Java 11` or above installed in your computer. "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. Click [here](https://github.com/AY1920S2-CS2113T-T12-2/tp/releases) to download the HappyPills JAR File."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. Copy the file to the folder you want to use as your home folder for HappyPills."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**For all users**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Open Command Prompt in the directory where the JAR file is located."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. Run the command `java -jar happypills.jar`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003cimg src\u003d\"images/UG/StartOfApplication.PNG\" alt\u003d\"Start of Application\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. When you start the application for the first time, you can type `help` to check all the available commands."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. Refer to the features below for detailed instructions on how to use each command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "HappyPills have three main features: `General Patient Information`, `Patient Medical Records` and `Appointment Scheduling`. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "`General Patient Information` notes down the general details of the patient. (e.g. NRIC, name, phone number, date of birth, "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "blood type and allergies)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "`Patient Medical Records` documents the patient\u0027s previous visits to the doctor and includes detailed information of those visits"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "(e.g. patient\u0027s symptoms, diagnosis and date/time of the medical treatment)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "`Appointment Scheduling` helps the you schedule appointments with your patients (e.g. appointment date, time and "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "reason for appointment). "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "These features come together to help you easily manage your patients\u0027 information. You can now provide your patients "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "with better service by being able to retrieve your patients\u0027 information quickly and easily.  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This section will elaborate more on how to use these features in HappyPills. "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Command Format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Words in `UPPER_CASE` are the parameters to be supplied by you **e.g.** in `add patient /ic NRIC`, `NRIC` is the input required from you."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- In case a tag is used multiple times in a command then its last instance will be taken and the previous instances will be overwritten."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Items in square brackets are optional fields **e.g.** `/ic NRIC /a [ALLERGIES]` can be used as `/ic S1234567F` or as `/ic S1234567F /a Dust`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Items in angle brackets indicates that only one field can be supplied at each time **e.g.** `/n\u003cNAME\u003e /p\u003cPHONE_NUMBER\u003e /dob\u003cDOB\u003e` can be used as `/nYAP` or `/p91122334` or `/dob18/06/2020`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Parameters can be in any order **e.g.** if the command requires `/n NAME /ic NRIC` or `/ic NRIC /n NAME `"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- All commands are case insensitive **e.g.** `help` or `HELP` or `HeLp` will display all the commands and their usage."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Legend For Tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/n` → Patient\u0027s Name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/ic` → Patient\u0027s NRIC"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/p` → Patient\u0027s Phone Number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/dob` → Patient\u0027s Date of birth"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/b` → Patient\u0027s Blood type"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/a` → Patient\u0027s Allergies"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/rm` → Patient\u0027s Remarks"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/t` → Time of the Patient\u0027s appointment"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/d` → Date of the Patient\u0027s appointment"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/r` → Reason for the Patient\u0027s appointment"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `/sym` → Patient\u0027s Symptoms"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `/diag` → Patient\u0027s Diagnosis"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.1. General Commands "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.1.1. View Help: `help`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Displays the list of commands and their syntax."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "##### Format: `help`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/HelpOutput.PNG\" alt\u003d\"Help Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctd\u003eThe help command is split into four different sections as highlighted by the boxes.\u003c/td\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.1.2. Exit program: `exit`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Exits the program and ends the current session. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "##### Format: `exit`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/Exit.PNG\" alt\u003d\"Exit Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.2. General Patient Information"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HappyPills can help users to manage their patients\u0027 information easily. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.1. Add Patient: `add patient`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Add a patient into the database."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctable\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     \u003ctd\u003eHappyPills will prompt you if there are any missing fields. Instead of having to type the whole command again, "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          you will only need to fill in the couple of fields you missed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          You can also add a new patient with the specified parameters in any order.\u003c/td\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003c/tr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/table\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "###### Format:   "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add patient /ic NRIC /n NAME /p PHONE_NUMBER /dob DOB /b BLOOD_TYPE /a[ALLERGIES] /rm[REMARKS]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add patient /ic S9876543F /n Eve /dob 22/05/1999 /b O-"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PATIENT/MissingAddPatientInput.PNG\" alt\u003d\"Missing Add Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ctd\u003eHappyPills will prompt you for any missing inputs that are necessary.\u003c/td\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Enter `/p 91265432` to add the missing field."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PATIENT/addConfirm.PNG\" alt\u003d\"Add Confirmation Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Enter `y` to confirm."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e    "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PATIENT/SuccessfullyAddedPatientInformation.PNG\" alt\u003d\"Successfully Added Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ctd\u003e Entering \u003ccode\u003en\u003c/code\u003e will abort the command and HappyPills will not save the patients\u0027 information.\u003c/td\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    \u003c!--This is a comment. Patient\u0027s information will be discarded if \u003ccode\u003en\u003c/code\u003e is entered.--\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.2. Edit Patient: `edit patient`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Edit information of a patient with the specified NRIC. "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    edit patient NRIC /n\u003cNAME\u003e "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                      /p\u003cPHONE_NUMBER\u003e "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                      /dob\u003cDATE_OF_BIRTH\u003e "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                      /b\u003cBLOOD_TYPE\u003e "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                      /a\u003cALLERGIES\u003e "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                      /rm\u003cREMARKS\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctd\u003e You can only edit \u003cb\u003eone\u003c/b\u003e field at a time. Those fields that can be edited are in \u003ccode\u003e\u003c\u003e\u003c/code\u003e. "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   There should \u003cb\u003eno spaces\u003c/b\u003e between the tag and the edited information.\u003c/td\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    edit patient S9876543F /p99112233"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PATIENT/EditCommandOutput.PNG\" alt\u003d\"Edit Patient Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf the patient is not found, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PATIENT/PatientNoExist.png\" alt\u003d\"Patient Not Found\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctd\u003e NRIC \u003cb\u003ecannot\u003c/b\u003e be edited because it is used to uniquely identify the patient.\u003c/td\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.3. Delete Patient: `delete patient`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Delete a patient as specified by the NRIC. "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete patient NRIC"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete patient S1234567F"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PATIENT/ConfirmationDeletion.PNG\" alt\u003d\"Delete Confirmation Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctd\u003e HappyPills will prompt for confirmation before deleting patient in the patient list. \u003c/td\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Enter `y` to confirm."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e    "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PATIENT/DeleteSuccessful.PNG\" alt\u003d\"Successfully Deleted Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf the patient is not found, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PATIENT/PatientNoExist.png\" alt\u003d\"Patient Not Found\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctd\u003e Upon successful deletion, patient\u0027s information will no longer be retrievable. \u003c/td\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.4. List All Patients: `list patient`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Display all the patients in the patient list. "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    list patient"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PATIENT/ListPatientOutput.PNG\" alt\u003d\"List Patient Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf there are no patients in the list, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PATIENT/ListNoPatient.png\" alt\u003d\"No Patients Found\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.5. Retrieve a Patient\u0027s Information: `get patient`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Diaplay details of a patient with the specified NRIC."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    get patient NRIC"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    get patient T9999999N"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PATIENT/GetPatientOutput.PNG\" alt\u003d\"Get Patient Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf the patient is not found, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PATIENT/PatientNoExist.png\" alt\u003d\"Patient Not Found\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.3. Patient Medical Records "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.3.1. Add Patient Records: `add pr`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Add a patient\u0027s medical records into the database to support the diagnosis of a patient\u0027s illness "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "and to justify the treatment carried out."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctable\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctr\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     \u003ctd\u003eHappyPills will prompt you if there are any missing fields. Instead of having to type the whole command again, "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          you will only need to fill in the couple of fields you missed."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          You can also add a new patient record with the specified parameters in any order.\u003c/td\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003c/tr\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/table\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ctd\u003e Patient\u0027s records can only be added if the patient information exists in the database. \u003c/td\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS /d DATE /t TIME"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add pr /ic S9876543F /sym Cough /diag Fever /d 22/02/1992 /t 22:22"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PR/AddPR.PNG\" alt\u003d\"Add PR Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Enter `y` to confirm."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PR/addprcfm.PNG\" alt\u003d\"Confirm Add PR\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctd\u003e Entering \u003ccode\u003en\u003c/code\u003e will abort the command and HappyPills will not save the patients\u0027 records.\u003c/td\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003c!--This is a comment. Patient\u0027s information will be discarded if \u003ccode\u003en\u003c/code\u003e is entered.--\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.2. Edit Patient Records: `edit pr`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Edit a patient\u0027s past medical record using the patient\u0027s NRIC and the index of the patient\u0027s records "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " which can be obtained from the [`list pr`](#334-list-patient-records-list-pr) command."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    edit pr NRIC INDEX /sym\u003cSYMPTOMS\u003e "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                       /diag\u003cDIAGNOSIS\u003e "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                       /d\u003cDATE\u003e "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                       /t\u003cTIME\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                        "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003e You can only edit \u003cb\u003eone\u003c/b\u003e field at a time. Those fields that can be edited are in \u003ccode\u003e\u003c\u003e\u003c/code\u003e. "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    There should \u003cb\u003eno spaces\u003c/b\u003e between the tag and the edited information.\u003c/td\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    edit pr S9876543F 2 /t12:00"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PR/editprsuccess.PNG\" alt\u003d\"Edit PR Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf the record is not found with the given input, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PR/prEmpty.PNG\" alt\u003d\"Help Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.3. Delete Patient Records: `delete pr`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Delete patient\u0027s medical records based on the given NRIC and the index of the patient\u0027s records "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " which can be obtained from the [`list pr`](#334-list-patient-records-list-pr) command."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    delete pr NRIC INDEX"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    delete pr S9876543F 1"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PR/deleteprsuccess.PNG\" alt\u003d\"Delete PR Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf the record is not found with the given input, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PR/prEmpty.PNG\" alt\u003d\"Delete PR not found\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  [\u0026#8593; Return to Top](#table-of-content)  "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.4. List Patient Records: `list pr`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Display all patient records of a patient using his/her NRIC. The patient\u0027s records will be listed with their respective "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " index which is used for [`find pr`](#335-find-patient-records-find-pr), "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " [`edit pr`](#332-edit-patient-records-edit-pr) and [`delete pr`](#333-delete-patient-records-delete-pr) commands."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    list pr NRIC"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    list pr S9876543F"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PR/listpr.PNG\" alt\u003d\"List PR Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf the patient have no past medical records. The message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PR/listprfail.PNG\" alt\u003d\"List PR not found\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   "
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.5. Find Patient Records: `find pr`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Display detailed information of a patient\u0027s visit using the NRIC and index of the patient\u0027s records "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "which can be obtained from the [`list pr`](#334-list-patient-records-list-pr) command. "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    find pr NRIC INDEX"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    find pr S9876543F 2"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PR/findpr.PNG\" alt\u003d\"Find PR Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf no record is found with the given NRIC, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/PR/prEmpty.PNG\" alt\u003d\"PR not found\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.4. Appointment Scheduling Commands "
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HappyPills helps to store appointment schedules. "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.1. Add Appointment: `add appt`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Add a new appointment for a patient with the given NRIC. An Appointment ID will be allocated to the"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " patient\u0027s appointment automatically."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctable\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctr\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     \u003ctd\u003eHappyPills will prompt you if there are any missing fields. Instead of having to type the whole command again, "
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          you will only need to fill in the couple of fields you missed."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          You can also add a new appointment with the specified parameters in any order.\u003c/td\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003c/tr\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/table\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctable\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctr\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     \u003ctd\u003e Appointments can only be added for a patient if the patient exists in the database. \u003c/td\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003c/tr\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/table\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add appt /ic NRIC /d DATE /t TIME /r REASON"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          "
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  **Example:**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "      "
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add appt /ic S1234567F /d 01/02/2020 /t 12:00 /r sick"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/APPT/AddAppt.png\" alt\u003d\"Add Appt Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Enter `y` to confirm."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/APPT/confirmAddAppt.png\" alt\u003d\"Confirm Add Appt\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctd\u003e Entering \u003ccode\u003en\u003c/code\u003e will abort the command and HappyPills will not save the appointment.\u003c/td\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003c/table\u003e "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.2. Edit Appointment: `edit appt`"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Edit information of an appointment using the patient\u0027s NRIC and Appointment ID which can be be obtained"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "from the [`list appt`](#344-list-all-appointments-list-appt) and [`find appt`](#345-find-patients-appointments-find-appt) commands."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format:  "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    edit appt NRIC apptID /d\u003cDATE\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                          /t\u003cTIME\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                          /r\u003cREASON\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          "
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ctd\u003e You can only edit \u003cb\u003eone\u003c/b\u003e field at a time. Those fields that can be edited are in \u003ccode\u003e\u003c\u003e\u003c/code\u003e. "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   There should \u003cb\u003eno spaces\u003c/b\u003e between the tag and the edited information.\u003c/td\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          "
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  **Example:**"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "      "
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    edit appt S1234567F 1 /d12/02/2020"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/APPT/EditAppt.png\" alt\u003d\"Edit Appt Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf the appointment is not found with the given input, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/APPT/ApptNotFound.png\" alt\u003d\"Appt Not Found\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.3. Delete Appointment: `delete appt`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Delete an appointment of a patient using the patient\u0027s NRIC and Appointment ID which can be be obtained"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " from the [`list appt`](#344-list-all-appointments-list-appt) and [`find appt`](#345-find-patients-appointments-find-appt) commands."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete appt NRIC apptID"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete appt S1234567F 1"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/APPT/DeleteAppt.png\" alt\u003d\"Delete Appt Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf the appointment is not found with the given input, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/APPT/ApptNotFound.png\" alt\u003d\"Appt Not Found\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.4.4. List All Appointments: `list appt` "
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Display all the existing appointments in the clinic. "
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This can be used as a method to check for appointmentID which is used for the [`edit appt`](#342-edit-appointment-edit-appt), "
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "[`delete appt`](#343-delete-appointment-delete-appt) and [`done appt`](#346-mark-appointment-as-done-done-appt) commands. "
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    list appt"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          "
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  **Example:**"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/APPT/ListAppt.png\" alt\u003d\"List Appt Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf there are no appointments found, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/APPT/NoApptList.png\" alt\u003d\"No Appt in List\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.4.5. Find Patient\u0027s Appointments: `find appt`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Display all the appointments that a patient has using the patient\u0027s NRIC."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This can be used as a method to check for appointmentID which is used for the [`edit appt`](#342-edit-appointment-edit-appt), "
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "[`delete appt`](#343-delete-appointment-delete-appt) and [`done appt`](#346-mark-appointment-as-done-done-appt) commands. "
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format: "
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    find appt NRIC"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          "
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  **Example:**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "      "
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    find appt S9473069F"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/APPT/FindAppt.png\" alt\u003d\"Find Appt Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf the patient does not have any appointments, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/APPT/NoAppt.png\" alt\u003d\"Patient have no appt\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.4.6. Mark Appointment as Done: `done appt` "
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Mark appointments as done using the patinet\u0027s NRIC and Appointment ID which can be be obtained"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "from the [`list appt`](#344-list-all-appointments-list-appt) and [`find appt`](#345-find-patients-appointments-find-appt) commands.  "
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Format:"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    done appt NRIC apptID"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "          "
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "      "
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    done appt S9473069F 4 "
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/APPT/DoneAppt.png\" alt\u003d\"Done Appt Output\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003ctable\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    \u003ctd\u003eIf the appointment is not found with the given input, the message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " \u003c/table\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e \u003cimg src\u003d\"images/UG/APPT/ApptNotFound.png\" alt\u003d\"Appt Not Found\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  [\u0026#8593; Return to Top](#table-of-content) "
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### General Patient Information"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Add a Patient | `add patient /ic NRIC /n NAME /p PHONE_NUMBER /dob DATE_OF_BIRTH /b BLOOD_TYPE /a [ALLERGIES] /rm [REMARKS]`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Edit a Patient | `edit patient NRIC /n\u003cNAME\u003e or /p\u003cPHONE_NUMBER\u003e or /dob\u003cDATE_OF_BIRTH\u003e or /b\u003cBLOOD_TYPE\u003e or /a\u003cALLERGIES\u003e or /rm\u003cREMARKS\u003e`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Delete a Patient | `delete patient NRIC`"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "List all Patients | `list patient`"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Retrieve a Patient\u0027s Information | `get patient NRIC`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### Patient Medical Records"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Add a Patient Record | `add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS /d DATE /t TIME`"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Edit a Patient Record | `edit pr NRIC INDEX /sym\u003cSYMPTOMS\u003e or /diag\u003cDIAGNOSIS\u003e or /d\u003cDATE\u003e or /t\u003cTIME\u003e`"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Delete a Patient Record | `delete pr NRIC INDEX`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "List all Patient Records | `list pr NRIC`"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Find a Patient Record| `find pr NRIC INDEX`"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### Appointments"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Add an Appointment | `add appt /ic NRIC /d DATE /t TIME /r REASON`"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Edit an Appointment | `edit appt NRIC /d\u003cDATE\u003e or /t\u003cTIME\u003e or /r\u003cREASON\u003e`"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Delete an Appointment | `delete appt NRIC APPT_ID`"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "List all Appointments | `list appt`"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Find an Appointment| `find appt NRIC`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Mark an Appointment as Done | `done appt NRIC APPT_ID`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 5. Useful links:"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [About Us](AboutUs.md)"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 25,
      "Janicetyy": 376,
      "sitinadiah25": 376,
      "itskesin": 68,
      "-": 2
    }
  },
  {
    "path": "docs/team/itskesin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "# Yap Kesin - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## `PROJECT: HappyPills`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## About the project"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Our team consists of 4 software engineering students were tasked to build a basic command line interface desktop "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "application for our Software Engineering project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Our team chose to develop a note management application called HappyPills. HappyPills is specially designed for "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Doctors to record patient\u0027s details, past medical records and future appointments. HappyPills allows users"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "to store all information in a single place and users can always have quick access to the saved information."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### Major enhancement: I implemented `PatientMap` to store all patients\u0027 details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  + What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - The PatientMap uses HashMap from Java Collection framework to store the patient objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - The PatientMap maps the Patient object to the Patient\u0027s NRIC. Each Patient\u0027s NRIC (key) is associated with a "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    patient object(value) which consists of the patient\u0027s details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  + Justification:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - The data structure (HashMap) was used to look up an NRIC quickly, the HashMap has O(1) performance for every NRIC "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    search, it will be faster when there are large number of patients\u0027 information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - HashMap will also helps to ensure that there will be no duplicated NRICs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  + Highlights:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - There were challenging design decisions involved in the selection of the underlying data structure because the "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    enhancement affects all the patients commands.  The implementation was also challenging as required changes "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    to the existing patient commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - To ensure our application maintains its robustness under extremely heavy load conditions, I did in-depth analysis "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    of different design alternatives."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### Major enhancement: I implemented the ability for user to `filter` patient records."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  + What it does:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - The `list pr NRIC` command will display a list of past patient records with index for the searched patient."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    - The `find pr NRIC INDEX` command find a particular patient record with given index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    - The `edit pr NRIC INDEX [/sym or /diag or /date or /time]` command edit a particular patient record with given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    index and tag."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    - The `delete pr NRIC INDEX` command delete a particular patient record with given index."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  + Justification:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    - In the case that the Patient Record grows, it will be difficult to find records. The `find pr NRIC INDEX` command "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    allows users to easily find and filter the notes that they require. It also allows users to edit wrongly added "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    detail or update the existing records."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  + Highlights:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - The `list pr NRIC` will provide all the index of the past records. User can always view the date/time of the "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    patient record with the corresponding index."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - Array indexing was used to store the list of patient record for the particular patient instead of HashMap "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    and Keyword is because patients do not usually visit the doctor unless they are sick. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - Arraylist have advantage such as `auto indexing` and resizing of the array making the "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    space of the app low and manageable."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Code contributed:** [Reposense Report](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003ditskesin\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Other contributions:**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Project management:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Handled `v1.0` release on GitHub"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Handled the creation of JAR file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Created tags on GitHub Issues"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Maintaining the issue tracker on GitHub"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Enhancements to existing features:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Refactor messages used to a common Messages class in `Ui`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Wrote more JUnit tests to test new and old components of the UI ??? "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Community:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Reported bugs and suggestions for other teams in the class:  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    [#170](https://github.com/AY1920S2-CS2113T-M16-2/tp/issues/170),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    [#173](https://github.com/AY1920S2-CS2113T-M16-2/tp/issues/173), "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    [#179](https://github.com/AY1920S2-CS2113T-M16-2/tp/issues/179)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + DG reviewed (with non-trivial review comments)  "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    [[CS2113-T15-4] Diet Management Assistant](https://github.com/nus-cs2113-AY1920S2/tp/pull/29)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e Given below are sections I contributed to the User Guide. "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Main](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide.md)  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Patient Commands](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide-Patient.md)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e Given below are sections I contributed to the Developer Guide. "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Architecture](https://ay1920s2-cs2113t-t12-2.github.io/tp/DeveloperGuide.html#31-architecture)  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Section 4.1 to 4.1.1](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#41-patient-details-feature)  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Appendices](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#43-user-prompting)  "
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "itskesin": 75,
      "-": 4
    }
  },
  {
    "path": "docs/team/janicetyy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# Janice - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## `PROJECT: HappyPills`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## About the project"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Our team consists of 4 software engineering students were tasked to build a basic command line interface desktop "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "application for our Software Engineering project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Our team chose to develop a note management application called HappyPills. HappyPills is specially designed for "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Doctors to record patient\u0027s details, past medical records and future appointments. HappyPills allows users"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "to store all information in a single place and users can always have quick access to the saved information."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### Major enhancement: Implemented `storage` to store all patients\u0027 details in a text file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The storage add function takes a formatted string from the various objects and appends it to the back of the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    corresponding text file, upon every add operation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The storage write function takes a formatted string from TextUi which concatenates all the strings from the objects"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    in a given list and overwrites the content of the corresponding text file, upon every delete and edit operation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - Return a map with the corresponding objects obtain from the text file at the start of the program, "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    using the load and parse function in Storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + Justification:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - Using append for add instead overwriting with the entire map of objects improves the time taken for the program to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    process the add operation, especially when there is a large amount of objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + Highlights:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - Almost all storage related documentation and code are done by me, unless there are minor issues, of which I would"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    provide solution which the team member can help to modify quickly."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### Major enhancement: Implemented three of the appointment commands and made significant changes to the delete."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + What it does:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The `Done appt NRIC ApptID` command will mark an appointment with the specified index for the specific"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    patient as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The `edit appt NRIC ApptID` command edits the value of certain variables in the appointment with the specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    index for the specific patient."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        - The variable is specified by `/d` for editing date, `/t` for editing time and `r` for editing reason."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        - Validation is done for the date to be entered in `DD/MM/YYY` format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        - Validation is done for the time to be entered as `HH:mm` format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The `find appt NRIC ` command returns a list of all specified appointments that the patient has, according to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    appointment list in the patient object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - As for the `delete appt NRIC ApptID`, I revised the deletion logic so that it removes from both the map"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    and the appointment list in the specified patient object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - I also revised the id system for assigning an ID to a new appointment object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + Justification:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - In the case of appointments, the appointment ID is allocated by the program and hence the find function"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    is important to carry out the basic edit and delete operations."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - Added extensive checks to identify cause of error message such as invalid nric, invalid date time or "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    patient/appointment does not exist, so as to improve user feedback."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + Highlights:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The assignment of the ID is done by incrementing the count of the appointment object, along with every creation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    of an appointment object. This prevents the appointment object from changing after every delete operation, which "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    user have to find the appointment\u0027s ID using the find function repeatedly."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### Minor enhancement: Implemented get patient command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "+ What it does:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The `get patient NRIC` command will return a patient\u0027s detailed information."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + Justification:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - It is a minor implementation as the retrieval process of the patient is trivial."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - Added a minor check on the NRIC to check if NRIC is invalid or does not exist, for better user feedback. "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Code contributed:** [Reposense Report](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003djanicetyy\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Other contributions:**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- Project management:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + Maintaining the issue tracker on GitHub"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- Enhancements to existing features:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + Refactor TextUi to be parent class of other objectTextUi so that they only return strings that "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    are used by or is related to their corresponding object classes."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + Wrote JUnit tests to test all features implemented by me except storage."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- Community:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + Reported bugs and suggestions for other teams in the class:  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#165](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/165),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#163](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/163), "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#162](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/162),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#160](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/160),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#166](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/166), "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#158](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/158),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#159](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/159), "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#167](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/167), "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#164](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/164)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + DG reviewed (with non-trivial review comments)  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   [[CS2113-T15-4] Diet Management Assistant](https://github.com/nus-cs2113-AY1920S2/tp/pull/29)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e Given below are sections I contributed to the User Guide. "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "[Main](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide.md)  "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "[Appointment Commands](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide.md#34-appointment-scheduling-commands)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e Given below are sections I contributed to the Developer Guide. "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "[Section 3](https://ay1920s2-cs2113t-t12-2.github.io/tp/DeveloperGuide.html#35-storage-component)    "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "[Storage](https://ay1920s2-cs2113t-t12-2.github.io/tp/DeveloperGuide.html#44-storage)   "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "[Appendix E.3](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#E4-Appointment-Scheduling-Commands)"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 100
    }
  },
  {
    "path": "docs/team/nyanwunpaing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "# Nyan Wun Paing - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "## `PROJECT: HappyPills`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "## About the project"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Our team consists of 4 software engineering students were tasked to build a basic command line interface desktop "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "application for our Software Engineering project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Our team chose to develop a note management application called HappyPills. Happy Pills is a fast and intuitive "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "note-taking app designed specially for doctors. With Happy Pills, you can safely store patients’ details, past medical "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "records as well as their future appointment details in a single place."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "*Major enhancement:* I added `User Prompting` for commands in HappyPills."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + What it does: HappyPills can detect if a command entered by the user is missing some information or the "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   information given is in incorrect format. For example, a user may forget to indicate the phone number of a patient"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   which is deemed as a necessary detail. In this case, HappyPills will prompt the user for the missing/incorrect "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + Justification: This feature benefits inexperienced users by allowing them to easily fix mistakes without having to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   re-enter the entire command. It also ensure that all users are able to know exactly which part of the entered input "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   is incorrect."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + Highlights: This feature increase user-friendliness, as I included messages to tell the user the reason "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   behind the prompting, so that users do not have to figure out the problem themselves."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   For future commands, this feature is easily extensible. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "*Major enhancement:* I added `Add Command` feature."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + What it does: "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e       - The `add patient` command stores the patient\u0027s details in HappyPills."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e       - The `add pr` command stores the patient\u0027s medical records in HappyPills."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + Justification: This feature allows the user to add information into HappyPills. This features solves the user need"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e     to manage all his information in a single location."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + Highlights: This feature will prompt for User Confirmation before adding the information into HappyPills. "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e     Information that is going to be added will be listed down for the user. The `add` command is simple to use and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e     user-friendly."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "*Major enhancement:* I implemented parser."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + What it does: "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e       - The parser makes sense of input to execute the correct command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + Justification: This feature allows the to user input to be broken down into sub command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + Highlights: This feature allow the user to input tags, such as \"/d,/t,etc\", to come in different order"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   allowing flexibility to the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Code contributed:** [RepoSense](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003dnyanwunpaing\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Other contributions:**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- Project management:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + Handled releases `v2` (1 release) on GitHub"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + Maintaining the issue tracker on GitHub"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + Used my iP project as base for tP."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- Enhancements to existing features:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + Refactor messages used to a common Messages class in `PatientParser`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + JUnit tests to test on Patient command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- Community:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + Reported bugs and suggestions for other teams in the class:  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    [#99](https://github.com/AY1920S2-CS2113-T15-2/tp/issues/99),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    [#100](https://github.com/AY1920S2-CS2113-T15-2/tp/issues/100), "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    [#105](https://github.com/AY1920S2-CS2113-T15-2/tp/issues/105)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + DG reviewed (with non-trivial review comments)  "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    [[CS2113T-T13-2] Nuke](https://github.com/nus-cs2113-AY1920S2/tp/pull/16)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e Given below are sections I contributed to the User Guide. "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "[Main](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide.md)  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "[Patient Commands](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide-Patient.md)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e Given below are sections I contributed to the Developer Guide. "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "[Architecture](https://ay1920s2-cs2113t-t12-2.github.io/tp/DeveloperGuide.html#31-architecture)  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "[Section 4.5 to 4.5.3](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#41-patient-details-feature)  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "[Appendices](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#43-user-prompting)  "
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 86
    }
  },
  {
    "path": "docs/team/sitinadiah25.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#Siti Nadiah - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## `PROJECT: HappyPills`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## About the project"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Our team consists of 4 software engineering students were tasked to build a basic command line interface desktop "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "application for our Software Engineering project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Our team chose to develop a note management application called HappyPills. HappyPills is specially designed for "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Doctors to record patient\u0027s details, past medical records and future appointments. HappyPills allows users"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "to store all information in a single place and users can always have quick access to the saved information."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Major enhancement:** I implemented two `PatientCommand` and three `AppointmentCommand` classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "+ What it does:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - The two `PatientCommand` classes that I implemented is `EditPatientCommand` and `ListPatientCommand`. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        - `EditPatientCommand` allows the user to edit the `name`, `date of birth`, `phone number`, `blood type`, `allergies` and `remarks` of a patient."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        - `ListPatientCommand` displays all the patient\u0027s `nric` and `name`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - The three `AppointmentCommand` classes that I implemented is `AddAppointmentCommand`, `ListAppointmentCommand` and "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    `DeleteAppointmentCommand`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        - `AddAppointmentCommand` allows the user to add a schedule appointment into the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        - `ListAppointmentCommand` displays all the appointments that the user has added."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        - `DeleteAppointmentCommand` deletes an appointment according to the patient\u0027s NRIC and appointment ID. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "+ Justification:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - The Command classes that I have implemented are essential to the application as it allows the user to "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    add, modify and delete their data. "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Major enhancement:** I implemented the `Appointment` and `AppointmentMap` class and parts of the Appointment-related commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "+ What it does:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - The Appointment class stores information regarding appointments that the user may want to schedule. This includes "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    the patient\u0027s nric, date and time of appointment and the reason for the appointment. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - The AppointmentMap class uses a HashMap from Java Collection framework to store the Appointment objects. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - The AppointmentMap maps the AppointmentID of an Appointment object to the object itself.   "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "+ Justification: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - The data structure (HashMap) was used to look up an Appointment object. The HashMap has O(1) performance for every AppointmentID "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        search, hence it will be faster when there are large number of appointments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "+ Highlights: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - It was challenging to decide whether HashMaps or ArrayLists would be a more appropriate data structure to use for "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    the list of appointments. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - We also had to decide whether to use the AppointmentID or Datetime as a key for the HashMap but as our future plans is to "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    make this application multi-user, we decided that using an AppointmentID would be a better choice as many users may have an "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    appointment schedule at the same Datetime."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Other contributions:**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- Project management:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + Maintaining the issue tracker on GitHub"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- Enhancements to existing features:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + Enhancement of Help Command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + Validation of Date and Time"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + Refactoring of the Parser and Command classes into sub-classes"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- Community:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + Reported bugs and suggestions for other teams in the class:  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#89](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/89),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#90](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/90), "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#91](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/91),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#92](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/92),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#93](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/93),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#94](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/94),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#95](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/95),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#96](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/96)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + DG reviewed (with non-trivial review comments)  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [[CS2113T-M16-1] Task Scheduler](https://github.com/nus-cs2113-AY1920S2/tp/pull/7)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e Given below are sections I contributed to the User Guide. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "[Main](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide.md)  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "[Appointment Commands](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide.md#34-appointment-scheduling-commands)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e Given below are sections I contributed to the Developer Guide. "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "[Section 3](https://ay1920s2-cs2113t-t12-2.github.io/tp/DeveloperGuide.html#3-design)  "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "[Section 4.3](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#43-appointment-scheduling-feature)  "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "[Appendices](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#43-user-prompting)  "
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 99
    }
  },
  {
    "path": "src/main/java/seedu/happypills/HappyPills.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class HappyPills {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static Scanner scanner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private PatientMap patients;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private AppointmentMap appointments;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private PatientRecordMap patientRecords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Sets up the required objects, loads up the data from the storage file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public HappyPills() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        appointments \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecords \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        logSetup();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            patients \u003d Storage.loadPatientsFromFile(Storage.PATIENT_FILEPATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"    Patient loaded from file.\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"   No patients in file.\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            appointments \u003d Storage.loadAppointmentFromFile(Storage.APPOINTMENT_FILEPATH, patients);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"    Appointment loaded from file.\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"   No appointment in file.\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            patientRecords \u003d Storage.loadPatientRecordFromFile(Storage.PATIENT_RECORD_FILEPATH,patients);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"    Patient Records loaded from file.\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"   No patient record in file.\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Sets up the logging configuration for the main program."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void logSetup() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        ch.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param args arguments"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        new HappyPills().run();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        TextUi.printWelcomeMessage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"going to start processing\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String fullCommand \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String message \u003d getCommandType(fullCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (!message.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                System.out.println(message);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            logger.info(\"end of processing\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getCommandType(String fullCommand) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            message \u003d c.execute(patients, appointments, patientRecords);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (HappyPillsException hpe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(hpe.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(hpe.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            System.out.println(Messages.MESSAGE_INCOMPLETE_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(ui.DIVIDER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 42,
      "Janicetyy": 42,
      "sitinadiah25": 13,
      "itskesin": 18
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientRecordMap patientRecordMap) throws HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 12
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Executes the exit command and write data to the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patients       The list of patients."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param appointments  The list of appointments."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords The list of patient records."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Storage.writeAllToFile(Storage.PATIENT_FILEPATH, StorageTextUi.getFormattedPatientString(patients));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(StorageTextUi.FAIL_TO_WRITE_PATIENT_MSG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Storage.writeAllToFile(Storage.APPOINTMENT_FILEPATH, StorageTextUi.getFormattedApptString(appointments));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(StorageTextUi.FAIL_TO_WRITE_APPOINTMENT_MSG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Storage.writeAllToFile(Storage.PATIENT_RECORD_FILEPATH,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    StorageTextUi.getFormattedPrString(patientRecords,patients));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(StorageTextUi.FAIL_TO_WRITE_PR_MSG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        TextUi.printExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 23,
      "sitinadiah25": 14,
      "itskesin": 10
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Displays full help instructions for every command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public HelpCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Returns help command instructions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return message The command instructions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecordMap) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] userCommand \u003d command.split(\"\\\\s+\", 3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(\"help\") \u0026\u0026 userCommand.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.GENERAL_HELP_MESSAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[1].equalsIgnoreCase(\"exit\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.EXIT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[2].equalsIgnoreCase(\"patient\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d getPatientHelp(userCommand[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[2].equalsIgnoreCase(\"pr\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d getPatientRecordHelp(userCommand[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[2].equalsIgnoreCase(\"appt\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d getAppointmentHelp(userCommand[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d TextUi.incorrectCommandMessage(userCommand[1] + \" \" + userCommand[2]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getPatientHelp(String patient) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (patient.equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.ADD_PATIENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (patient.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.LIST_PATIENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (patient.equalsIgnoreCase(\"get\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.GET_PATIENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (patient.equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.EDIT_PATIENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (patient.equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.DELETE_PATIENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.GENERAL_PATIENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getPatientRecordHelp(String pr) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (pr.equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.ADD_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (pr.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.LIST_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (pr.equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.FIND_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (pr.equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.EDIT_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (pr.equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.DELETE_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.GENERAL_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getAppointmentHelp(String appt) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (appt.equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.ADD_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.LIST_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.FIND_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.DONE_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.EDIT_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.DELETE_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.GENERAL_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 27,
      "sitinadiah25": 50,
      "itskesin": 21
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/AddAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class AddAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String reason;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for AddPatientCommand Class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * It creates a new AddPatientCommand Object with the information provided."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param nric   patient\u0027s nric."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param date   date of appointment."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param time   time of appointment."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param reason reason for appointment."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public AddAppointmentCommand(String nric, String date, String time, String reason) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Add appointment into the Appointment list and the patient\u0027s appointment list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients     the list of patients."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param appointments the list of appointments."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the message to be displayed to the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException throws exception if there is already an appointment at the same datetime."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (!patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.PATIENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            Appointment appointment \u003d new Appointment(nric, reason, date, time);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            appointments.addAppointment(appointment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            Patient patient \u003d (Patient) patients.get(nric);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            patient.addAppointment(appointment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.addSingleItemToFile(Storage.APPOINTMENT_FILEPATH, appointment.toSave());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.warning(StorageTextUi.FAIL_TO_ADD_APPOINTMENT_MSG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.addAppointmentSuccessMessage(appointment);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 10,
      "Janicetyy": 16,
      "sitinadiah25": 42,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/AppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public abstract class AppointmentCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute(AppointmentMap appointments) throws HappyPillsException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 10,
      "itskesin": 2
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/DeleteAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class DeleteAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String appointmentId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Retrieve the patient\u0027s confirmation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric          nric of the patient."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param appointmentId The id of the appointment to be deleted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public DeleteAppointmentCommand(String nric, String appointmentId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.appointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the patient from the NRIC of the delete command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the appointment from the patient provided."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the appointment map to get appointment from."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Appointment findAppointment(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (appointments.containsKey(appointmentId)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \u0026\u0026 appointments.get(appointmentId).getNric().equalsIgnoreCase(nric)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return appointments.get(appointmentId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    //@@ sitinadiah25"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Delete an appointment of the patient from the shared map."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments  The shared appointment map."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointmentId The id of the appointment to be deleted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean deleteAppt(AppointmentMap appointments, String appointmentId) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (appointments.containsKey(appointmentId)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            appointments.remove(appointmentId);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    //@@ janicetyy"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Delete an appointment of the patient in the patient object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient The patient whose appointment is to be deleted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param apptID  The id of the appointment to be deleted."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean deleteAppt(Patient patient, String apptID) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                patient.getAppointments().remove(appointment);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    //@@ janicetyy, sitinadiah25"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Carry out the procedures for deleting appointment."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients     Shared map of patients"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Shared map of appointments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param visits       Shared map of patient records"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return errorMessage or successMessage"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws HappyPillsException not used but required as part of command"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidNric(nric)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.appendDivider(TextUi.INVALID_NRIC_MESSAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient delPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (delPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.PATIENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment delAppt \u003d findAppointment(appointments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (delAppt \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(AppointmentTextUi.APPOINTMENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Boolean isSuccess \u003d deleteAppt(appointments, appointmentId) \u0026\u0026 deleteAppt(delPatient, appointmentId);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (isSuccess) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            message \u003d \"    Appointment has been removed.\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.APPOINTMENT_FILEPATH,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedApptString(appointments));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.FAIL_TO_WRITE_APPOINTMENT_MSG);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(AppointmentTextUi.APPOINTMENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 21,
      "Janicetyy": 94,
      "sitinadiah25": 19,
      "itskesin": 5
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/DoneAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class DoneAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String apptID;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for DoneAppointmentCommand Class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new DoneAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param apptID Contains the id of the appointment to be marked as done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public DoneAppointmentCommand(String nric, String apptID) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.apptID \u003d apptID;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the patient from the NRIC of the Done command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return patient or null if not found"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the appointment from the patient provided."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the appointment map to get appointment from."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Appointment findAppointment(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (appointments.containsKey(apptID)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \u0026\u0026 appointments.get(apptID).getNric().equalsIgnoreCase(nric)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return appointments.get(apptID);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Mark appointment in the list within the patient object as done."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editDone(Patient patient) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                appointment.setDone(true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Mark appointment in the shared appointment map as done."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment which is to be marked done."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if successful, false otherwise."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editDone(Appointment appointment) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        appointment.setDone(true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the appointment details with the information provided by calling."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients on which the commands are executed on."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the list of appointments on which the commands are executed on."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws HappyPillsException Throws an exception if the edit field is not valid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return errorMessage or successMessage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidNric(nric)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.appendDivider(TextUi.INVALID_NRIC_MESSAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient editPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (editPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.PATIENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment editAppt \u003d findAppointment(appointments); //from the shared appointment map"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (editAppt \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(AppointmentTextUi.APPOINTMENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Boolean output \u003d editDone(editPatient) \u0026\u0026 editDone(editAppt);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!output) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(\"   An unknown error has occurred, please try again later.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.APPOINTMENT_FILEPATH,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedApptString(appointments));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.FAIL_TO_WRITE_APPOINTMENT_MSG);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return AppointmentTextUi.doneAppointmentSuccessMessage(editAppt);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 4,
      "Janicetyy": 126,
      "sitinadiah25": 2,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/EditAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "//@@author janicetyy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class EditAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String newContent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected  String apptID;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for EditAppointmentCommand Class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new EditAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newContent Contains the string that the attribute is to be updated to."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param apptID Contains the id of the appointment that is to be edited"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public EditAppointmentCommand(String nric, String apptID, String newContent) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.nric \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.newContent \u003d newContent;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.apptID \u003d apptID;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the patient from the NRIC of the Edit command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the appointment from the patient provided."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the appointment map to get appointment from."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Appointment findAppointment(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (appointments.containsKey(apptID)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \u0026\u0026 appointments.get(apptID).getNric().equalsIgnoreCase(nric)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return appointments.get(apptID);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the date of the appointment in the list within the patient object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newDate The new date to be edited into."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editDate(Patient patient, String newDate) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidDate(newDate)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                appointment.setDate(newDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the date of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment which date is to be edited."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newDate The new date to be edited into."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if successful, false otherwise."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editDate(Appointment appointment, String newDate) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidDate(newDate)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            TextUi.print(HelpTextUi.EDIT_APPOINTMENT_HELP_MESSAGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            appointment.setDate(newDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the time of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newTime The new time to be edited into."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editTime(Patient patient, String newTime) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidTime(newTime)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        newTime +\u003d \":00\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                appointment.setTime(newTime);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the time of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment which time is to be edited."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newTime The new date to be edited into."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if successful, false otherwise."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editTime(Appointment appointment, String newTime) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (Checker.isValidTime(newTime)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            appointment.setTime(newTime);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the reason of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newReason The new reason to be edited into."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editReason(Patient patient, String newReason) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                appointment.setReason(newReason);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the remark of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment which reason is to be edited."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newReason The appointment\u0027s updated reason."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if successful, false otherwise"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editReason(Appointment appointment, String newReason) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        appointment.setReason(newReason);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the appointment details with the information provided by calling."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients on which the commands are executed on."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the list of appointments on which the commands are executed on."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws HappyPillsException Throws an exception if the edit field is not valid."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidNric(nric)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.appendDivider(TextUi.INVALID_NRIC_MESSAGE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isPositiveInteger(apptID)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.appendDivider(TextUi.INVALID_APPTID_MESSAGE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (newContent.length() \u003c 3) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return HelpTextUi.EDIT_APPOINTMENT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String content \u003d newContent.substring(2).trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (content.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return HelpTextUi.EDIT_APPOINTMENT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String field \u003d newContent.substring(0,2).trim();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient editPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (editPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.PATIENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment editAppt \u003d findAppointment(appointments); //from the shared appointment map"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (editAppt \u003d\u003d null) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(AppointmentTextUi.APPOINTMENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Boolean output \u003d false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String errorMsg \u003d \"    Something went wrong, the edit could not be made.\\n\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (field.equals(\"/d\")) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            output \u003d editDate(editPatient, content) \u0026\u0026 editDate(editAppt,content);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            errorMsg \u003d output ? errorMsg : Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else if (field.equals(\"/t\")) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            output \u003d editTime(editPatient, content) \u0026\u0026 editTime(editAppt,content);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            errorMsg \u003d output ? errorMsg : Messages.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else if (field.equals(\"/r\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            output \u003d editReason(editPatient, content) \u0026\u0026 editReason(editAppt,content);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(\"    Please try again. To learn more about the Edit appointment command, \""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"\\n    enter \\\"help appt edit\\\"\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (output) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.APPOINTMENT_FILEPATH,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedApptString(appointments));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.FAIL_TO_WRITE_APPOINTMENT_MSG);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        errorMsg \u003d TextUi.appendDivider(errorMsg);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return output ? AppointmentTextUi.editAppointmentSuccessMessage(editAppt) : errorMsg;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 228,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/FindAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class FindAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for FindAppointmentCommand Class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new FindAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientNric        Contains the NRIC of the patient that is to be retrieved."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public FindAppointmentCommand(String patientNric) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.patientNric \u003d patientNric.toUpperCase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Find appointments for a specific patient."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Shared map of patients"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Shared map of appointments"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param visits Shared map of patient records"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return errorMessage or successMessage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If patient not found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap visits)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidNric(patientNric)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.appendDivider(TextUi.INVALID_NRIC_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return AppointmentTextUi.getAppointmentSuccessMessage(patients.get(patientNric));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.PATIENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 8,
      "Janicetyy": 38,
      "itskesin": 2
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/ListAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class ListAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (appointments.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.GET_EMPTY_APPOINTMENT_LIST_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            assert !appointments.isEmpty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.getAppointmentList(appointments);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 3,
      "sitinadiah25": 13,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/AddPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Adds patient into Patient Map."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class AddPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected int phoneNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String dateOfBirth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String bloodType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String allergies;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String remarks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Constructor for AddPatientCommand Class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * It creates a new AddPatientCommand Object with the information provided."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param name        Name of the patient."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric        Nric of the patient."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param phoneNumber Phone number of the patient."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param dateOfBirth Date of birth of the patient."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param bloodType   Blood type of the patient."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param allergies   Allergies of the patient."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param remarks     Remarks for the patient."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public AddPatientCommand(String name, String nric, int phoneNumber, String dateOfBirth,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                             String bloodType, String allergies, String remarks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        logger.log(logLevel, \"patient is added\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Executes the add patient command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param patients       The list of patients."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param appointments   The list of appointments."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param patientRecords The list of patient records."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return Error Message or Success Message."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If NRIC already exist in the patient list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assert !patients.containsKey(nric) : \"New NRIC can be added\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Patient tempPatient \u003d new Patient(name, nric, phoneNumber, dateOfBirth, bloodType, allergies, remarks);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        logger.log(logLevel, \"patient is added\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isValidNric(tempPatient.getNric())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return Messages.MESSAGE_INVALID_NRIC;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        patients.add(tempPatient);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assert patients.containsKey(nric) : \"NRIC added successfully\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            Storage.addSingleItemToFile(Storage.PATIENT_FILEPATH, tempPatient.toSave());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            logger.info(StorageTextUi.FAIL_TO_ADD_PATIENT_MSG);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String message \u003d PatientTextUi.addPatientSuccessMessage(patients.get(nric));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        logger.log(logLevel, \"end of add command\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 82,
      "Janicetyy": 4,
      "itskesin": 2
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/DeletePatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class DeletePatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Constructor for Delete Patient Command Class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public DeletePatientCommand(String nric) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Retrieve the patient\u0027s confirmation."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return y to confirm deletion, n to stop deletion."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getPatientConfirmation() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Scanner in \u003d HappyPills.scanner;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String confirm \u003d in.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return confirm;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Remove the patient from the patient list in the program."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient  The patient to be deleted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients The patient list within the program."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return Message to inform the user that the patient has been deleted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private String deletePatient(Patient patient, PatientMap patients) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patients.remove(nric);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.deletePatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return TextUi.prependDivider(message);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Run the delete command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients       Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param appointments   The list of appointments"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords The list of patient records"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The message to confirm deletion of patient or to confirm that the patient has not be deleted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException Throws an exception if patient does not exist."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            Patient patient \u003d patients.get(nric);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientTextUi.printDeleteConfirmation(patient);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String message \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String confirm \u003d getPatientConfirmation();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            boolean isConfirmed \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            while (!isConfirmed) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                if (confirm.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                    message \u003d deletePatient(patient, patients);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        Storage.writeAllToFile(Storage.PATIENT_FILEPATH,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                                StorageTextUi.getFormattedPatientString(patients));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        logger.info(StorageTextUi.FAIL_TO_WRITE_PATIENT_MSG);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    isConfirmed \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    logger.log(logLevel, \"patient is deleted\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                } else if (confirm.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    message \u003d PatientTextUi.patientNotDeletedMessage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    isConfirmed \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    logger.log(logLevel, PatientTextUi.patientNotDeletedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    PatientTextUi.printDeleteConfirmationAgain(patient);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    confirm \u003d getPatientConfirmation();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            assert isConfirmed : \"Delete is not confirmed.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.appendDivider(message);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 11,
      "Janicetyy": 15,
      "sitinadiah25": 59,
      "itskesin": 20
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/EditPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "//@@author sitinadiah25"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class EditPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String newContent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static final String REMARKS_TAG \u003d \"/rm\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static final String DATE_OF_BIRTH_TAG \u003d \"/dob\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static final String NAME_TAG \u003d \"/n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static final String PHONE_NUMBER_TAG \u003d \"/p\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static final String BLOOD_TYPE_TAG \u003d \"/b\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static final String ALLERGIES_TAG \u003d \"/a\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for EditCommand Class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Creates a new EditCommand Object with the information provided."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param nric       Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param newContent Contains the string that the attribute is to be updated to."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public EditPatientCommand(String nric, String newContent) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.nric \u003d nric.toUpperCase().trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.newContent \u003d newContent.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Retrieves the patient from the NRIC of the Edit command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            logger.log(logLevel, \"patient to be edited is found\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edits the phone number of the patient."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose phone number is to be edited."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new phone number."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editPhone(Patient patient, String content) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setPhoneNumber(Integer.parseInt(content.trim()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edits the allergies of the patient."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose allergies is to be edited."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s updated allergies."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editAllergies(Patient patient, String content) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setAllergies(content.trim());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edits the remarks of the patient."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose remarks is to be edited."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new remarks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editRemarks(Patient patient, String content) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setRemarks(content.trim());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edits the Date of Birth of the patient."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose DOB is to be edited."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new DOB."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editDob(Patient patient, String content) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setDateOfBirth(content.trim());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edits the name of the patient."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose name is to be edited."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new name."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editName(Patient patient, String content) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setName(content.trim());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edits the blood type of the patient."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose blood type is to be edited."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new blood type."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editBloodType(Patient patient, String content) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setBloodType(content.trim());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Executes the edit patient command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients       The list of patients"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param appointments   The list of appointments"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patientRecords The list of patient records"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return Error Message or Success Message"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException if NRIC already exist in the patient list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (newContent.length() \u003c 2) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INCOMPLETE_COMMAND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        // assert newContent.length() \u003e\u003d 2 : \"Length of content has to be more than 2 characters.\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String field \u003d \"\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (newContent.contains(REMARKS_TAG)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            field \u003d newContent.substring(0, 3);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            content \u003d newContent.substring(3);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (newContent.contains(DATE_OF_BIRTH_TAG)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            field \u003d newContent.substring(0, 4);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            content \u003d newContent.substring(4);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            field \u003d newContent.substring(0, 2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            content \u003d newContent.substring(2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Patient editPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (editPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_CONTENT_IS_EMPTY);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        content \u003d content.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        output \u003d checkTag(field, content, editPatient);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        saveEditedInformation(patients);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assert output.length() \u003e 0 : \"output message is invalid\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Checks which field of information the user intends to edit."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param field       The tag given by the user."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content     The information given by the user."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param editPatient The patient\u0027s information."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException If the edit field is not valid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String checkTag(String field, String content, Patient editPatient) throws HappyPillsException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (field.equals(PHONE_NUMBER_TAG)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (Checker.isValidPhoneNum(content.trim())) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                output \u003d editPhone(editPatient, content);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_INVALID_PHONE_NUMBER);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (field.equals(REMARKS_TAG)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            output \u003d editRemarks(editPatient, content.trim());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (field.equals(ALLERGIES_TAG)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            output \u003d editAllergies(editPatient, content.trim());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (field.equals(DATE_OF_BIRTH_TAG)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (Checker.isValidDate(content.trim())) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                output \u003d editDob(editPatient, content.trim());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_INVALID_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (field.equals(BLOOD_TYPE_TAG)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (Checker.isValidBloodType(content.trim())) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                output \u003d editBloodType(editPatient, content.trim());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_INVALID_BLOOD_TYPE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            output \u003d editBloodType(editPatient, content.trim());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (field.equals(NAME_TAG)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            output \u003d editName(editPatient, content.trim());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_EDIT_PATIENT);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Saves the edited patient record details with the information provided by user."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients The list of patients on which the commands are executed on."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private void saveEditedInformation(PatientMap patients) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            Storage.writeAllToFile(Storage.PATIENT_FILEPATH,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    StorageTextUi.getFormattedPatientString(patients));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            logger.info(StorageTextUi.FAIL_TO_WRITE_PATIENT_MSG);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 4,
      "sitinadiah25": 217,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/GetPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.nio.charset.CharacterCodingException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "//@@author janicetyy"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class GetPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for GetPatientCommand Class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new GetPatientCommand Object with the information provided."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientNric        Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public GetPatientCommand(String patientNric) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Get the details of a patient."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Shared map of patients"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Shared map of appointments"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param visits Shared map of patient records"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return Error Message or Success Message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws HappyPillsException if patient not found"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) throws HappyPillsException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (Checker.isValidNric(patientNric)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.INVALID_NRIC_MESSAGE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return PatientTextUi.getPatientSuccessMessage(patients.get(patientNric));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 45,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/ListPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@ itskesin"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Lists all patients to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class ListPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Executes the list patient command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patients The list of patients."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param appointments The list of appointments."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords The list of patient records."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return Error Message or Success Message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (patients.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d PatientTextUi.EMPTY_PATIENT_LIST_MESSAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.log(logLevel, \"no patient information is in list\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assert !patients.isEmpty();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d PatientTextUi.getPatientList(patients);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.log(logLevel, \"retrieve patient\u0027s information\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 3,
      "sitinadiah25": 2,
      "itskesin": 34
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/PatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@ NyanWunPaing"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Contains both the information related to user commands and methods to execute them."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Implementation is done on child classes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public abstract class PatientCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Contains boolean to check for exit condition."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for Command Class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Set isExit to false as default."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected PatientCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Executes the command based on the information provided by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute()  {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 28,
      "itskesin": 6
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/AddPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@ NyanWunPaing"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Adds patient record into Patient Record Map."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class AddPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String symptom;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String diagnosis;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Constructor for PatientRecordCommand Class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Creates a new PatientCommand Object with the information provided."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric      The patient\u0027s NRIC."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param symptom   The patient\u0027s symptom."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param diagnosis The patient\u0027s diagnosis."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param date      The date of the medical treatment."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param time      The time of the medical treatment."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public AddPatientRecordCommand(String nric, String symptom, String diagnosis, String date, String time) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.symptom \u003d symptom;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Executes the add patient record command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patients       The list of patients."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param appointments   The list of appointments."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords The list of patient records."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return message Error message or success message to be displayed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException If NRIC already exist in the patient list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientRecord patientRecord \u003d new PatientRecord(nric, symptom, diagnosis, date, time);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            patientRecords.add(patientRecord, nric);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.addSingleItemToFile(Storage.PATIENT_RECORD_FILEPATH, patientRecord.toSave());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.warning(StorageTextUi.FAIL_TO_ADD_PR_MSG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String message \u003d Messages.MESSAGE_PATIENT_RECORD_ADDED;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 13,
      "itskesin": 57
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/DeletePatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@ itskesin"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Deletes patient record from Patient Record Map."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class DeletePatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Constructor for Delete Patient Record Command Class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric The NRIC of the patient that is to be retrieved."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index       The index for the record of the searched patient."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public DeletePatientRecordCommand(String nric, int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Removes the patient record from the patient record map in the program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecordMap The NRIC of the patient that is to be retrieved."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords   The list of patient records for given NRIC."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private void deletePatientRecord(PatientRecordMap patientRecordMap, ArrayList\u003cPatientRecord\u003e patientRecords) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecordMap.removePersonalRecord(patientRecords, nric);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        patientRecords.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Runs the delete command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patients       The list of patients."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param appointments   The list of appointments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecordMap The list of patient records."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return message The message to confirm deletion of patient or to confirm that the patient has not be deleted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException If the patient does not exist."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecordMap"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!patientRecordMap.containsKey(nric)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean isIndexOutOfBound \u003d patientRecordMap.get(nric).size() \u003c\u003d index \u0026\u0026 index \u003e 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert !nric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            if (patientRecordMap.get(nric) \u003d\u003d null || patientRecordMap.get(nric).isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_EMPTY_PATIENT_RECORD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (isIndexOutOfBound) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            ArrayList\u003cPatientRecord\u003e patientRecords \u003d patientRecordMap.get(nric);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientRecord patientRecord \u003d patientRecords.get(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            deletePatientRecord(patientRecordMap, patientRecords);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.PATIENT_RECORD_FILEPATH,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedPrString(patientRecordMap, patients));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.FAIL_TO_WRITE_PR_MSG);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String message \u003d PatientRecordTextUi.deletePatientRecordSuccessMessage(patientRecord, nric);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 23,
      "itskesin": 65
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/EditPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import org.w3c.dom.Text;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@ itskesin"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Edits patient record in the Patient Record Map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class EditPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String newContent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String SYMPTOM_TAG \u003d \"/sym\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIAGNOSIS_TAG \u003d \"/diag\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DATE_TAG \u003d \"/d\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String TIME_TAG \u003d \"/t\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Constructor for EditPatientRecordCommand Class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric       Nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index      Index for the record of the searched patient."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param newContent Contains the string that the attribute is to be updated to."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public EditPatientRecordCommand(String nric, int index, String newContent) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.nric \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.newContent \u003d newContent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        logger.info(\"New Edit Patient Record Command\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Edits the patient record details with the information provided by user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patients       Contains the list of patients on which the commands are executed on."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param appointments   Contains the list of appointments on which the commands are executed on."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords Contains the list of patient records."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException If the edit field is not valid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (newContent.length() \u003c 4) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(HelpTextUi.EDIT_PATIENT_RECORD_HELP_MESSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String content \u003d newContent.substring(2).trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (content.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(TextUi.DIVIDER + \"/n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    + HelpTextUi.EDIT_PATIENT_RECORD_HELP_MESSAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String field;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (newContent.contains(SYMPTOM_TAG)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            field \u003d newContent.substring(0, 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            content \u003d newContent.substring(4);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (newContent.contains(DIAGNOSIS_TAG)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            field \u003d newContent.substring(0, 5);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            content \u003d newContent.substring(5);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            field \u003d newContent.substring(0, 2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            content \u003d newContent.substring(2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientRecord editPatientRecord \u003d checkInvalidInput(patientRecords, content);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return updateRecord(patients, patientRecords, content, field, editPatientRecord);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private String updateRecord("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            PatientMap patients, PatientRecordMap patientRecords, String content,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "             String field, PatientRecord editPatientRecord) throws HappyPillsException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        content \u003d content.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean output;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String errorMsg \u003d Messages.MESSAGE_EDIT_ERROR + TextUi.NEWLINE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (field.equals(SYMPTOM_TAG)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            output \u003d editSymptom(editPatientRecord, content);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(DIAGNOSIS_TAG)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            output \u003d editDiagnosis(editPatientRecord, content);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(DATE_TAG)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            output \u003d editDate(editPatientRecord, content);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            errorMsg \u003d output ? errorMsg : Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(TIME_TAG)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            output \u003d editTime(editPatientRecord, content);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            errorMsg \u003d output ? errorMsg : Messages.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_EDIT_PR);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        saveEditedInformation(patients, patientRecords, output);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        errorMsg \u003d TextUi.appendDivider(errorMsg);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d PatientRecordTextUi.editPatientRecordSuccessMessage(editPatientRecord);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return output ? message : errorMsg;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Saves the edited patient record details with the information provided by user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patients       The list of patients on which the commands are executed on."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords The list of patient records."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param output         The boolean to check whether the patient record is updated."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private void saveEditedInformation(PatientMap patients, PatientRecordMap patientRecords, boolean output) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (output) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.PATIENT_RECORD_FILEPATH,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedPrString(patientRecords, patients));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.FAIL_TO_WRITE_PR_MSG);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Check for invalid input provided by user."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords The list of patient records."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param content        The updated user input."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException If the edit field is not valid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private PatientRecord checkInvalidInput(PatientRecordMap patientRecords, String content)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!patientRecords.containsKey(nric)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.info(\"Patient Record not found\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientRecord editPatientRecord \u003d findPatientRecord(nric, index, patientRecords);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean isIndexOutOfBound \u003d patientRecords.get(nric).size() \u003c index || index \u003c 0;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (editPatientRecord \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.info(\"Patient Record not found\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patientRecords.get(nric) \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.info(\"No patient in the list\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_EMPTY_PATIENT);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (isIndexOutOfBound) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.info(\"Patient Record not found with given index\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.info(\"Patient Record not found with given index\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_CONTENT_IS_EMPTY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return editPatientRecord;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Edits the Diagnosis of the patient record with the newly given diagnosis."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecord Contains the patient record."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param newDiagnosis  Contains the new Diagnosis given by the user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return Boolean to indicate whether the Diagnosis is edited."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Boolean editDiagnosis(PatientRecord patientRecord, String newDiagnosis) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecord.setDiagnosis(newDiagnosis);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Edits the symptom of the patient record with the newly given symptom."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecord Contains the patient record."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param newSymptom    Contains the new symptom given by the user."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return Boolean to indicate whether the symptom is edited."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Boolean editSymptom(PatientRecord patientRecord, String newSymptom) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecord.setSymptom(newSymptom);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Edits the date of the patient record with the newly given date."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecord The patient record."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param newDate       The new date given by the user."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return Boolean to indicate whether the date is edited."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Boolean editDate(PatientRecord patientRecord, String newDate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!Checker.isValidDate(newDate)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecord.setDate(newDate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Edits the time of the patient record with the newly given time."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecord The patient record."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param newTime       The new time given by the user."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return Boolean to indicate whether the time is edited."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Boolean editTime(PatientRecord patientRecord, String newTime) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!Checker.isValidTime(newTime)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecord.setTime(newTime);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Finds patient record with the given NRIC and index."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric           The NRIC of patient."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index          The index of the given user input."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords The list of patient records."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return patientRecord If patient record is existing in the patient record list otherwise null."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private PatientRecord findPatientRecord(String nric, int index, PatientRecordMap patientRecords) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        ArrayList\u003cPatientRecord\u003e patientRecordlist \u003d patientRecords.get(nric);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patientRecordlist !\u003d null \u0026\u0026 index \u003c patientRecordlist.size()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return patientRecordlist.get(index);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 11,
      "Janicetyy": 6,
      "sitinadiah25": 1,
      "itskesin": 213
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/FindPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@ itskesin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Finds patient record in the Patient Record Map."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class FindPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Constructor for FindPatientRecordCommand Class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric  The nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index The index for the record of the searched patient."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public FindPatientRecordCommand(String nric, int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Finds the patient record details with the information provided by user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patients       The list of patients on which the commands are executed on."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param appointments   The list of appointments on which the commands are executed on."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords The list of patient records."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException If the patient record is not found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!patientRecords.containsKey(nric)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert !nric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean isIndexOutOfBound \u003d patientRecords.get(nric).size() \u003c\u003d index \u0026\u0026 index \u003e 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (patientRecords.get(nric) \u003d\u003d null || patientRecords.get(nric).isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_EMPTY_PATIENT_RECORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (isIndexOutOfBound) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String message \u003d PatientRecordTextUi.getPatientRecordSuccessMessage(patientRecords, nric, index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 7,
      "Janicetyy": 1,
      "itskesin": 50
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/ListPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@ itskesin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Lists all patient records to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class ListPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Constructor for List Patient Record Command Class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public ListPatientRecordCommand(String nric) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Executes the list patient record command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patients       The list of patients."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param appointments   The list of appointments."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords The list of patient records."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return Error Message or Success Message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException If NRIC is not found in the patient record list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert !nric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            if (patientRecords.get(nric) \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String message \u003d PatientRecordTextUi.getPatientRecordListSuccessMessage(patientRecords.get(nric));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 1,
      "itskesin": 49
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/PatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@ NyanWunPaing"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Contains both the information related to user commands and methods to execute them."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Implementation is done on child classes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public abstract class PatientRecordCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Executes the command based on the information provided by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return null"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 19
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/AppointmentParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.AppointmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.DoneAppointmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.EditAppointmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.FindAppointmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.ListAppointmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "//@@author sitinadiah25"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class AppointmentParser extends Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Parses the command given by the user to appointment commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param fullCommand the full command entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the command that the user has entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException throws an exception for invalid commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static AppointmentCommand parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] userCommand \u003d fullCommand.trim().split(\"\\\\s+\", 3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return parseAddCommand(userCommand[2]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String[] detailedCommand \u003d userCommand[2].trim().split(\"\\\\s+\", 3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (detailedCommand.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return new EditAppointmentCommand(detailedCommand[0].trim(), detailedCommand[1].trim(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                        detailedCommand[2].trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(HelpTextUi.incompleteCommandString(\"help edit appt\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String[] detailedCommand \u003d userCommand[2].trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (detailedCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return new DoneAppointmentCommand(detailedCommand[0].trim(), detailedCommand[1].trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(HelpTextUi.incompleteCommandString(\"help done appt\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new ListAppointmentCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String[] detailedCommand \u003d userCommand[2].trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (detailedCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return new DeleteAppointmentCommand(detailedCommand[0].trim(), detailedCommand[1].trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(HelpTextUi.incompleteCommandString(\"help delete appt\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new FindAppointmentCommand(userCommand[2]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(TextUi.incorrectCommandMessage(userCommand[0]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static AppointmentCommand parseAddCommand(String content) throws HappyPillsException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] details \u003d splitInput(content);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] parseInput \u003d {\"\", \"\", \"\", \"\"};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        parseInput \u003d parseInput(details, parseInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        // ensure that all details are not missing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        while (parseInput[0].equalsIgnoreCase(\"\") || parseInput[1].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                || parseInput[2].equalsIgnoreCase(\"\") || parseInput[3].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                || !Checker.isValidDate(parseInput[1].trim()) || !Checker.isValidTime(parseInput[2].trim())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                || !Checker.isValidNric(parseInput[0].trim())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            printMissingInput(parseInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String input \u003d promptUser().trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (input.equalsIgnoreCase(\"clear\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_COMMAND_ABORTED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String[] updates \u003d splitInput(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            parseInput \u003d parseInput(updates, parseInput);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (!loopPrompt(promptConfirmation(parseInput))) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(\"    Appointment is not added.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return new AddAppointmentCommand(parseInput[0].toUpperCase().trim(), parseInput[1].trim(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[2].trim(), parseInput[3].trim());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static String[] parseInput(String[] details, String[] parseInput) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        for (String detail : details) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (detail.trim().startsWith(\"ic\") \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[0] \u003d detail.trim().substring(2).trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.trim().startsWith(\"d\") \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[1] \u003d detail.trim().substring(2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.trim().startsWith(\"t\") \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[2] \u003d detail.trim().substring(1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.trim().startsWith(\"r\") \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[3] \u003d detail.trim().substring(1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return parseInput;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static void printMissingInput(String[] parseInput) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(\"    Please input your missing/incorrect detail listed below\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (parseInput[0].equalsIgnoreCase(\"\") || !Checker.isValidNric(parseInput[0].trim())) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(Messages.MESSAGE_NRIC_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (parseInput[1].equalsIgnoreCase(\"\") || !Checker.isValidDate(parseInput[1].trim())) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(Messages.MESSAGE_DATE_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (parseInput[2].equalsIgnoreCase(\"\") || !Checker.isValidTime(parseInput[2].trim())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(Messages.MESSAGE_TIME_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (parseInput[3].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(\"      /r [REASONS]\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(Messages.MESSAGE_CLEAR_COMMAND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Prompt user for conformation with this message."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param parseInput details to be displayed to user for confirmation"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return string to be displayed to user for confirmation"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String promptConfirmation(String[] parseInput) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String text \u003d \"        Are you sure all the listed details are correct?\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        NRIC : \" + parseInput[0].toUpperCase().trim() + \"\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Date : \" + parseInput[1].trim() + \"\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Time : \" + parseInput[2].trim() + \"\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Reason : \" + parseInput[3].trim() + \"\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"                                                   (Y/N)?\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 3,
      "sitinadiah25": 122,
      "itskesin": 9
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/Checker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class Checker {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Checks the format for phone number."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param phoneNumber String to be validated."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return Boolean true if the time format is correct otherwise false."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidPhoneNum(String phoneNumber) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String pattern \u003d \"([8-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return phoneNumber.matches(pattern);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Checks string if fits date format. Only allows for year 2000 and beyond."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param date Date to be validated."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return True if correct date format, false otherwise."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String pattern \u003d \"(0?[1-9]|[12][0-9]|3[01])\\\\/(0?[1-9]|1[0-2])\\\\/([0-9]{4})\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean isDate \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (date.matches(pattern)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            isDate \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return isDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Checks string if fits time format (HH:MM)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param time Time to be validated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return True if correct date format, false otherwise."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidTime(String time) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String pattern \u003d \"([0-1][0-9]|2[0-3]):([0-5][0-9])\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return time.matches(pattern);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Checks string if is valid blood type."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param blood Blood type to be validated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return True if is valid, false otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidBloodType(String blood) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String pattern \u003d \"(A|B|AB|O)(\\\\+|-)\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return blood.matches(pattern);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Checks string if is numeric."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param number Number to be validated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return True if is numeric, false otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isNumeric(String number) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String pattern \u003d \"^[0-9]*$\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return number.matches(pattern);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Checks string if is valid NRIC."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric Nric to be validated."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return True if is valid, false otherwise."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidNric(String nric) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String pattern \u003d \"(?i)^[STFG]\\\\d{7}[A-Z]$\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return nric.matches(pattern);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Checks if the String can be converted to Integer."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param input Value to check if is positive integer."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return True if is an integer, false otherwise."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static boolean isPositiveInteger(String input) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            int x \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return x \u003e\u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 3,
      "sitinadiah25": 2,
      "itskesin": 83
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import org.w3c.dom.Text;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final DateTimeFormatter DTF \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final DateTimeFormatter DF \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String PATIENT_TAG \u003d \"patient\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String HELP_TAG \u003d \"help\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String APPOINTMENT_TAG \u003d \"appt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String PATIENT_RECORD_TAG \u003d \"pr\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String EXIT_TAG \u003d \"exit\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String YES_TAG \u003d \"y\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String NO_TAG \u003d \"n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Parses the command given by the user to the other command parses."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param fullCommand Full command given by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return The command entered by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException If commands are invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static Command parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] userCommand \u003d fullCommand.trim().split(\"\\\\s+\", 3); // leading spaces removed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (userCommand.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return parseGeneralCommands(fullCommand, userCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(HELP_TAG)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return new HelpCommand(fullCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[1].equalsIgnoreCase(PATIENT_TAG)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return PatientParser.parse(fullCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[1].equalsIgnoreCase(APPOINTMENT_TAG)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return AppointmentParser.parse(fullCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[1].equalsIgnoreCase(PATIENT_RECORD_TAG)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return PatientRecordParser.parse(fullCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Parses and executes general command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param fullCommand Full command given by the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param userCommand User command given by the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return The command based on the user input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException If the user input does not conform the expected format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static Command parseGeneralCommands(String fullCommand, String[] userCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(HELP_TAG)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new HelpCommand(fullCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(EXIT_TAG)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Prompts the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The string entered by the user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String promptUser() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Scanner in \u003d HappyPills.scanner;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String reInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return reInput;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Prompts the user for missing fields or incorrect information."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Prompts the user for confirmation for add commands."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param output Output after the user enters (y)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return True if the user enters y, false if the user enters (n)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static boolean loopPrompt(String output) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        boolean userConfirmation \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        while (!userConfirmation) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String confirmation \u003d promptUser().trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (confirmation.equalsIgnoreCase(YES_TAG)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                userConfirmation \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (confirmation.equalsIgnoreCase(NO_TAG)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                System.out.println(Messages.MESSAGE_USER_CONFIRMATION);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Splits the user input according to the \u0027/\u0027."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param content The user input."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return The array containing the split input."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String[] splitInput(String content) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] details;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (content.startsWith(\"/\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            details \u003d content.substring(1).split(\" /\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            content \u003d \"@\" + content;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            details \u003d content.split(\" /\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 16,
      "Janicetyy": 5,
      "sitinadiah25": 54,
      "itskesin": 49
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/PatientParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.AddPatientCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.DeletePatientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.EditPatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.GetPatientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.ListPatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.PatientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class PatientParser extends Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String NRIC_TAG \u003d \"ic\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String NAME_TAG \u003d \"n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String PHONE_NUMBER_TAG \u003d \"p\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String DATE_OF_BIRTH_TAG \u003d \"dob\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String BLOOD_TYPE_TAG \u003d \"b\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String ALLERGIES_TAG \u003d \"a\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String REMARKS_TAG \u003d \"rm\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String CLEAR_TAG \u003d \"clear\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Parses user input for patient record into a command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param fullCommand Full command entered by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return The command that the user has entered."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the wrong command/format is given by the user as an input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static PatientCommand parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] userCommand \u003d fullCommand.trim().split(\"\\\\s+\", 3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean isCommandLengthOne \u003d userCommand.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        userCommand \u003d trimArray(userCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (userCommand[0].trim().equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return checkListCommand(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].trim().equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return checkAddCommand(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].trim().equalsIgnoreCase(\"get\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return checkGetCommand(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return checkEditCommand(fullCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return checkDeleteCommand(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientCommand checkDeleteCommand(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (userCommand.length !\u003d 3 || isCommandLengthOne) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INCORRECT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isValidNric(userCommand[2].toUpperCase())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new DeletePatientCommand(userCommand[2]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the user inputs conforms to the list command format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param userCommand        User command entered by the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param isCommandLengthOne Boolean that indicates whether the command conforms to the length."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return PatientCommand The command indicated by the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the user input does not conforms to the expected format."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientCommand checkListCommand(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (userCommand.length !\u003d 2 || isCommandLengthOne) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INCORRECT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new ListPatientCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Trims in the user input."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param array The inputs given by the user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return Trimmed array."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static String[] trimArray(String[] array) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] trimmedArray \u003d new String[array.length];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (int size \u003d 0; size \u003c array.length; size++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            trimmedArray[size] \u003d array[size].trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return trimmedArray;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the user inputs conforms to the get command format."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param userCommand        User input given by the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param isCommandLengthOne Boolean that indicates whether the command conforms to the length."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return PatientCommand The command indicated by the user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the user input does not conforms to the expected format."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientCommand checkGetCommand(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (isCommandLengthOne || userCommand[1].isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_NRIC_NOT_PROVIDED);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isValidNric(userCommand[2].toUpperCase())) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new GetPatientCommand(userCommand[2].toUpperCase());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the user inputs conforms to the edit command format."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param fullCommand The entire line of command entered by the user."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return PatientCommand The command indicated by the user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the user input does not conforms to the expected format."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientCommand checkEditCommand(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] edit \u003d fullCommand.split(\"\\\\s+\", 4);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (edit.length \u003c 3) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isValidNric(edit[2].toUpperCase())) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new EditPatientCommand(edit[2], edit[3]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the user inputs conforms to the add command format."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param userCommand        User input given by the user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param isCommandLengthOne Boolean that indicates whether the command conforms to the length."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return PatientCommand The command indicated by the user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the user input does not conforms to the expected format."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientCommand checkAddCommand(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (userCommand[1].isEmpty() || isCommandLengthOne) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_DETAILS_NOT_PROVIDED);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return parseAddCommand(userCommand[2]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static boolean isInputEmpty(String input) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return input.equalsIgnoreCase(\"\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the user input have missing fields or inputs with incorrect format."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param parseInput The array that stores the user input."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return True if there is any missing/incorrect field."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static boolean hasMissingFields(String[] parseInput) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (int index \u003d 0; index \u003c 5; index++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (parseInput[index].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean isIncorrectFormat \u003d !Checker.isValidNric(parseInput[1].trim())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                || !Checker.isValidDate(parseInput[3].trim()) || !Checker.isValidBloodType(parseInput[4].trim())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                || !Checker.isValidPhoneNum(parseInput[2].trim());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return isIncorrectFormat;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Displays missing fields to the user."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param parseInput The array that stores the user input."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static void printMissingFields(String[] parseInput) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        System.out.println(\"    Please input your missing/incorrect detail listed below\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (isInputEmpty(parseInput[0])) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_NAME_FORMAT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[1].equalsIgnoreCase(\"\") || !Checker.isValidNric(parseInput[1])) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_NRIC_FORMAT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[2].equalsIgnoreCase(\"\") || !Checker.isValidPhoneNum(parseInput[2])) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_PHONE_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[3].equalsIgnoreCase(\"\") || !Checker.isValidDate(parseInput[3])) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_DATE_OF_BIRTH_FORMAT);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[4].equalsIgnoreCase(\"\") || !Checker.isValidBloodType(parseInput[4])) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_BLOOD_TYPE_FORMAT);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        System.out.println(Messages.MESSAGE_CLEAR_COMMAND);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Handles the add patient command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param content The entire line of command entered by the user."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return PatientCommand The command indicated by the user."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the user aborted the add command."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientCommand parseAddCommand(String content) throws HappyPillsException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] details \u003d splitInput(content);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] parseInput \u003d {\"\", \"\", \"\", \"\", \"\", \"NIL\", \"NIL\"};"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        parseInput \u003d parseInput(details, parseInput);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        while (hasMissingFields(parseInput)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            printMissingFields(parseInput);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String input \u003d promptUser().trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (input.equalsIgnoreCase(CLEAR_TAG)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_COMMAND_ABORTED);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String[] updates \u003d splitInput(input);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            updates \u003d trimArray(updates);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            parseInput(updates, parseInput);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!loopPrompt(promptConfirmation(parseInput))) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_NOT_ADDED); // check"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new AddPatientCommand(parseInput[0].trim(), parseInput[1].toUpperCase().trim(),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                Integer.parseInt(parseInput[2].trim()), parseInput[3].trim(), parseInput[4].trim(),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[5].trim(), parseInput[6].trim());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Updates the parsedInput array based on the newly entered inputs for add command prompt."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param details    The user input entered by the user."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param parseInput The array that stores the user input."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return parseInput The updated array."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static String[] parseInput(String[] details, String[] parseInput) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (String detail : details) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (detail.startsWith(NAME_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[0] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(NRIC_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[1] \u003d detail.substring(2).trim().toUpperCase();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(PHONE_NUMBER_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[2] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(DATE_OF_BIRTH_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[3] \u003d detail.substring(3).trim();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(BLOOD_TYPE_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[4] \u003d detail.substring(1).trim().toUpperCase();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(ALLERGIES_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[5] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(REMARKS_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[6] \u003d detail.substring(2).trim();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                PatientTextUi.patientNotAddedMessage(detail);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return parseInput;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Prompts user for confirmation by displaying their previously entered inputs."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param parseInput The array that stores the user input."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return text The string to be displayed for user\u0027s confirmation."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static String promptConfirmation(String[] parseInput) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String text \u003d \"        Are you sure all the listed details are correct?\\n\""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Name : \" + parseInput[0].trim() + \"\\n\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        NRIC : \" + parseInput[1].toUpperCase().trim() + \"\\n\""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Phone Number : \" + parseInput[2].trim() + \"\\n\""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        DOB : \" + parseInput[3].trim() + \"\\n\""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Blood Type : \" + parseInput[4].trim() + \"\\n\""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Allergies : \" + parseInput[5].trim() + \"\\n\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Remarks : \" + parseInput[6].trim() + \"\\n\""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"                                                   (Y/N)?\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 273,
      "sitinadiah25": 2,
      "itskesin": 1
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/PatientRecordParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.AddPatientRecordCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.DeletePatientRecordCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.EditPatientRecordCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.FindPatientRecordCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.ListPatientRecordCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.PatientRecordCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Parses the user input for patient record commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class PatientRecordParser extends Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String NRIC_TAG \u003d \"ic\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String SYMPTOM_TAG \u003d \"sym\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String DIAGNOSIS_TAG \u003d \"diag\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String DATE_TAG \u003d \"d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String TIME_TAG \u003d \"t\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    static Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Parses user input for patient record into a command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param fullCommand The full command entered by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return The command that the user has entered."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the user input does not conform the expected format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static PatientRecordCommand parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] userCommand \u003d fullCommand.split(\"\\\\s+\", 3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean isCommandLengthOne \u003d userCommand.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        userCommand \u003d trimArray(userCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return checkListPatientRecord(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return checkAddPatientRecord(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return checkFindPatientRecord(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return checkEditPatientRecord(fullCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return checkDeletePatientRecord(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            logger.info(\"Invalid Command\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the user inputs conforms to the delete command format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param userCommand        The input given by the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param isCommandLengthOne Boolean that indicates whether the command conforms to the length."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return PatientRecordCommand The command indicated by the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the user input does not conforms to the expected format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientRecordCommand checkDeletePatientRecord(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkEmptyNric(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] input \u003d userCommand[2].split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        input \u003d trimArray(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkIndexValidity(input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkNricValidity(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new DeletePatientRecordCommand(input[0].toUpperCase(), Integer.parseInt(input[1]));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the NRIC given by the user conforms to the NRIC format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param input Input given by the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the NRIC does not conforms to the expected format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static void checkNricValidity(String[] input) throws HappyPillsException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isValidNric(input[0].toUpperCase())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the index given by the user is an integer."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param input Input given by the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the index does not conforms to the expected format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static void checkIndexValidity(String[] input) throws HappyPillsException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isPositiveInteger(input[1])) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the user provides the NRIC of the patient in the user input."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param userCommand        User input given by the user."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param isCommandLengthOne Boolean that indicates whether the command conforms to the length."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the index does not conforms to the expected format."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static void checkEmptyNric(String[] userCommand, boolean isCommandLengthOne) throws HappyPillsException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (isCommandLengthOne || userCommand[1].isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_NRIC_NOT_PROVIDED);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the user inputs conforms to the find command format."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param userCommand        User input given by the user."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param isCommandLengthOne Boolean that indicates whether the command conforms to the length."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return PatientRecordCommand The command indicated by the user."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the NRIC or index does not conforms to the expected format."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientRecordCommand checkFindPatientRecord(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkEmptyNric(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] input \u003d userCommand[2].split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        input \u003d trimArray(input);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkIndexValidity(input);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkNricValidity(input);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new FindPatientRecordCommand(input[0].toUpperCase(), Integer.parseInt(input[1]));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the user inputs conforms to the add command format."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param userCommand        User input given by the user."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param isCommandLengthOne Boolean that indicates whether the command conforms to the length."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return PatientRecordCommand The command indicated by the user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the user input does not conforms to the expected format."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientRecordCommand checkAddPatientRecord(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (isCommandLengthOne || userCommand[1].isEmpty()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_DETAILS_NOT_PROVIDED);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return parseAddCommand(userCommand[2]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the user inputs conforms to the list command format."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param userCommand        User command entered by the user."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param isCommandLengthOne Boolean that indicates whether the command conforms to the length."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return PatientRecordCommand The command indicated by the user."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the user input does not conforms to the expected format."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientRecordCommand checkListPatientRecord(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkEmptyNric(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isValidNric(userCommand[2].toUpperCase())) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            logger.info(\"Invalid NRIC\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new ListPatientRecordCommand(userCommand[2].toUpperCase());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Trims in the user input."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param array The inputs given by the user."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return Trimmed array."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static String[] trimArray(String[] array) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] trimmedArray \u003d new String[array.length];"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (int size \u003d 0; size \u003c array.length; size++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            trimmedArray[size] \u003d array[size].trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return trimmedArray;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the user inputs conforms to the edit command format."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param fullCommand The entire line of command entered by the user."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return PatientRecordCommand The command indicated by the user."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the user input does not conforms to the expected format."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientRecordCommand checkEditPatientRecord(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] edit \u003d fullCommand.split(\"\\\\s+\", 5);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (edit.length \u003c 4) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isPositiveInteger(edit[3].trim())) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isValidNric(edit[2].toUpperCase().trim())) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new EditPatientRecordCommand("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                edit[2].trim().toUpperCase(), Integer.parseInt(edit[3].trim()), edit[4].trim());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static boolean isInputEmpty(String input) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return input.equalsIgnoreCase(\"\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether there are any missing fields in the add patient record command."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param parseInput The array that stores the user input."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return Boolean which indicates whether the format is correct or incorrect."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static boolean hasMissingFields(String[] parseInput) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (int index \u003d 0; index \u003c 5; index++) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (parseInput[index].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean isIncorrectFormat \u003d !Checker.isValidNric(parseInput[0])"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                || !Checker.isValidDate(parseInput[3]) || !Checker.isValidTime(parseInput[4]);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return isIncorrectFormat;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Handles the add patient command."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param content The entire line of command entered by the user."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return PatientRecordCommand The command indicated by the user."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the user aborted the add command."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientRecordCommand parseAddCommand(String content) throws HappyPillsException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] details;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        details \u003d splitInput(content);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] parseInput \u003d {\"\", \"\", \"\", \"\", \"\", \"\"};"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        parseInput \u003d parseInput(details, parseInput);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        while (hasMissingFields(parseInput)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            printMissingFields(parseInput);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String input \u003d promptUser().trim();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (input.equalsIgnoreCase(\"clear\")) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_COMMAND_ABORTED);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String[] updates \u003d splitInput(input);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            updates \u003d trimArray(updates);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            parseInput(updates, parseInput);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!loopPrompt(PatientRecordTextUi.promptConfirmation(parseInput))) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_NOT_ADDED);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new AddPatientRecordCommand(parseInput[0].toUpperCase(), parseInput[1],"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[2], parseInput[3], parseInput[4]);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Updates the parsedInput array based on the newly entered inputs for add command prompt."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param details    The user input entered by the user."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param parseInput The array that stores the user input."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return parseInput The updated array."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static String[] parseInput(String[] details, String[] parseInput) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (String detail : details) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (detail.startsWith(NRIC_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[0] \u003d detail.substring(2).trim().toUpperCase();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(SYMPTOM_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[1] \u003d detail.substring(3).trim();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(DIAGNOSIS_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[2] \u003d detail.substring(4).trim();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(DATE_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[3] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(TIME_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[4] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                PatientRecordTextUi.patientRecordNotAddedMessage(detail);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return parseInput;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Displays missing fields to the user."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param parseInput The array that stores the user input."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static void printMissingFields(String[] parseInput) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        System.out.println(\"    Please input your missing/incorrect detail listed below\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (isInputEmpty(parseInput[0]) || !Checker.isValidNric(parseInput[0])) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_NRIC_FORMAT);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[1].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_SYMPTOM_FORMAT);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[2].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_DIAGNOSIS_FORMAT);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[3].equalsIgnoreCase(\"\") || !Checker.isValidDate(parseInput[3])) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_DATE_FORMAT);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[4].equalsIgnoreCase(\"\") || !Checker.isValidTime(parseInput[4])) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_TIME_FORMAT);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        System.out.println(Messages.MESSAGE_CLEAR_COMMAND);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 290,
      "itskesin": 15
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/Appointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import static java.lang.String.valueOf;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Represents an appointment."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * It also functions as base class for appointments from which specialised tasks are inherited from."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Stores the details of the appointment."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected static int count \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String reason;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String appointmentId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected Boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for Appointment class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Creates a new appointment with the details provided by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param nric NRIC of patient."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param reason reason for appointment."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param date date of appointment."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param time time of appointment."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public Appointment(String nric, String reason, String date, String time) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.appointmentId \u003d valueOf(count);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        count +\u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for Appointment class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new appointment with the details provided by load function in storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param id Id of the appointment"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric NRIC of patient."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param reason Reason for appointment."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param date Date of appointment."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param time Time of appointment."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param done Status of whether the appointment is over."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public Appointment(String id, String nric, String date,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                       String time, String reason, Boolean done) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.appointmentId \u003d id;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        count +\u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setNric(String nric) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getReason() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return reason;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setReason(String reason) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setTime(String time) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getAppointmentId() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return appointmentId;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String status \u003d this.isDone ? \"Yes\" : \"No\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String text \u003d \"        NRIC     : \" + this.nric + \"\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Date     : \" + this.date + \"\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Time     : \" + this.time + \"\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Reason   : \" + this.reason + \"\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        ID       : \" + this.appointmentId + \"\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Attended : \" + status + \"\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String doneString(boolean done) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return done ? \"T\" : \"F\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Create a string with all the appointment\u0027s data for storage to a text file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Each variable is separated with | as a divider."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return a formatted string with appointment\u0027s data."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String text \u003d this.appointmentId + \"|\" + this.nric + \"|\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + this.date + \"|\" + this.time + \"|\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + this.reason + \"|\" + doneString(this.isDone) + System.lineSeparator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 32,
      "sitinadiah25": 92,
      "itskesin": 6
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/AppointmentMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import static java.lang.String.valueOf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class AppointmentMap {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private final Map\u003cString, Appointment\u003e argMultimap \u003d new HashMap\u003cString, Appointment\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Adds an appointment into the AppointmentMap."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param appointment the appointment to be added into the map."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException throws exception if there is already an appointment with the given datetime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void addAppointment(Appointment appointment) throws HappyPillsException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        int current \u003d argMultimap.size() + 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        //appointment.setAppointmentId(valueOf(current));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!argMultimap.containsKey(appointment.appointmentId)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            argMultimap.put(appointment.appointmentId,appointment);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public Iterable\u003c? extends Map.Entry\u003e entrySet() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return argMultimap.entrySet();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return argMultimap.isEmpty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public Appointment get(String appointmentID) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return argMultimap.get(appointmentID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public boolean containsKey(String appointmentId) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return argMultimap.containsKey(appointmentId);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void remove(String appointmentId) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        argMultimap.remove(appointmentId);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 7,
      "sitinadiah25": 42
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Represents a patient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * It also functions as base class for patients from which specialised tasks are inherited from."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Stores the description of the patient."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected int phoneNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String dateOfBirth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String bloodType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String allergies \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String remarks \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected ArrayList\u003cAppointment\u003e appointments \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Constructor for Patient Class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Creates a new patient with the description provided by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param name          Name of the patient."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric          NRIC of the patient."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param phoneNumber   Phone number of the patient."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param dateOfBirth   Date of birth of the patient."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param bloodType     Blood type of the patient."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param allergies     Allergies the patient may have."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param remarks       Remarks for the patient."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public Patient(String name, String nric, int phoneNumber, String dateOfBirth,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                   String bloodType, String allergies, String remarks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (dateValidation(dateOfBirth)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.appointments \u003d new ArrayList\u003cAppointment\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(\"    Date of birth is invalid. Please try again in this format:\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                                + \"\\n    DD/MM/YYYY\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for name of the patient."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return name Represents the name of the patient."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for Nric of the patient."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return nric Represents the nric of the patient."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.nric;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for the phone number of the patient."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return phoneNumber Represents the phone number of the patient."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public int getPhoneNumber() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.phoneNumber;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for the date of birth of the patient."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return dateOfBirth Represents the date of birth of the patient."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getDateOfBirth() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.dateOfBirth;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for the blood type of the patient."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return bloodType Represents the blood type of the patient."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getBloodType() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.bloodType;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for the allergies of the patient."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return allergies Represents the allergies of the patient."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getAllergies() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.allergies;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for the remarks of the patient."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return remarks Represents the remarks of the patient."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.remarks;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for the ArrayList of appointments of the patient."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return appointments Represents the ArrayList of appointments of the patient."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public ArrayList\u003cAppointment\u003e getAppointments() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return appointments;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void addAppointment(Appointment appt) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.appointments.add(appt);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the information related to the patient in form of a string."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return string The string that consists the patient\u0027s detailed information."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String text \u003d \"        Name : \" + this.name + \"\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        NRIC : \" + this.nric + \"\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Phone Number : \" + this.phoneNumber + \"\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        DOB : \" + this.dateOfBirth + \"\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Blood Type : \" + this.bloodType + \"\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Allergies : \" + this.allergies + \"\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Remarks : \" + this.remarks + \"\\n\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Setter for phone number of the patient."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param phoneNumber The phone number of the patient."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setPhoneNumber(int phoneNumber) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Setter for allergies of the patient."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param allergies The allergies of the patient."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setAllergies(String allergies) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Setter for remarks of the patient."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param remarks The remarks of the patient."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Setter for name of the patient."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param name The name of the patient."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Setter for allergies of the patient."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param dateOfBirth The date of birth of the patient."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Setter for blood type of the patient."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param bloodType The blood type of the patient."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setBloodType(String bloodType) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Creates a string with all the patient\u0027s data for storage to a text file."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Each variable is separated with | as a divider."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return text A formatted string with patient\u0027s details."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String text \u003d this.name + \"|\" + this.nric + \"|\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + this.phoneNumber + \"|\" + this.dateOfBirth + \"|\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + this.bloodType + \"|\" + this.allergies + \"|\" + this.remarks + System.lineSeparator();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Checks whether the date is in correct format."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return status The boolean to indicate the correctness of the date."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static boolean dateValidation(String date) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean status \u003d false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (Checker.isValidDate(date)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                dateFormat.parse(date);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                status \u003d true;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                status \u003d false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 233,
      "sitinadiah25": 4
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/PatientMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@author itskesin"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class PatientMap {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private final Map\u003cString, Patient\u003e argMultimap \u003d new HashMap\u003cString, Patient\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Associates the specified argument value with key in this map."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patient  Patient\u0027s details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException If NRIC already exist in the patient list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void add(Patient patient) throws HappyPillsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!argMultimap.containsKey(patient.nric)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            argMultimap.put(patient.nric, patient);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_IS_IN_THE_MAP);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public Patient get(String nric) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.get(nric);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public boolean containsKey(String patientNric) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.containsKey(patientNric);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.isEmpty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public Iterable\u003c? extends Map.Entry\u003e entrySet() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.entrySet();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void remove(String nric) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        argMultimap.remove(nric);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 4,
      "itskesin": 48
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/PatientRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import static java.lang.String.valueOf;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Represents an patient record."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * It also functions as base class for visit from which specialised tasks are inherited from."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class PatientRecord {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Stores the details of the appointment."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String symptom;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String diagnosis;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Constructor for Patient Record class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Creates a new patient medical record with the details provided by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric      NRIC of patient."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param symptom   Patient\u0027s symptom."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param diagnosis Patient\u0027s diagnosis."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param date      Date of medical treatment."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param time      Time of medical treatment."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public PatientRecord(String nric, String symptom, String diagnosis, String date, String time) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.symptom \u003d symptom;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for NRIC of the patient."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return nric Represents the NRIC of the patient."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for symptom of the patient."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return symptom Represents the symptom of the patient."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getSymptom() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return symptom;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Setter function for symptom of the patient."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param symptom Represents the symptom of the patient."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setSymptom(String symptom) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.symptom \u003d symptom;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for diagnosis of the patient."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return diagnosis Represents the diagnosis of the patient."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getDiagnosis() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return diagnosis;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Setter function for diagnosis of the patient."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param diagnosis Represents the diagnosis of the patient."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setDiagnosis(String diagnosis) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for date of the patient."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return date Represents the date of the medical treatment."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Setter function for date of the patient."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param date Represents the date of the medical treatment."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Getter function for time of the patient."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return time Represents the time of the medical treatment."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Setter function for time of the patient."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param time Represents the time of the medical treatment."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setTime(String time) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the information related to the patient medical record in form of a string."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return string The string which consists of the patient\u0027s detailed medical record information."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return \"        NRIC : \" + nric.trim().toUpperCase() + \"\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Symptom : \" + symptom.trim() + \"\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Diagnosis : \" + diagnosis.trim() + \"\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Date : \" + date.trim() + \"\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        time : \" + time.trim() + \"\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Creates a string with all the patient\u0027s record for storage to a text file."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Each variable is separated with | as a divider."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return String A formatted string with patient\u0027s records."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return nric.trim().toUpperCase() + \"|\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + symptom.trim() + \"|\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + diagnosis.trim() + \"|\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + date.trim() + \"|\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + time.trim() + System.lineSeparator();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 147
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/PatientRecordMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class PatientRecordMap {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private final Map\u003cString, ArrayList\u003cPatientRecord\u003e\u003e argMultimap \u003d new HashMap\u003cString, ArrayList\u003cPatientRecord\u003e\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Adds patient record into the PatientRecordMap."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param patientRecord The patient record to be added into the map."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric Nric of the patient."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the patient\u0027s nric is already in the PatientRecordMap."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void add(PatientRecord patientRecord, String nric) throws HappyPillsException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        ArrayList\u003cPatientRecord\u003e patientRecords \u003d argMultimap.get(nric);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        // if list does not exist create it"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (patientRecords \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            patientRecords \u003d new ArrayList\u003cPatientRecord\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            patientRecords.add(patientRecord);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            argMultimap.put(patientRecord.getNric(), patientRecords);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            // add if item is not already in list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (!patientRecords.contains(patientRecord.nric)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                patientRecords.add(patientRecord);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                argMultimap.put(patientRecord.getNric(), patientRecords);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(\"    The Patient Record is already in the database.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                        + \"    Please try again.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public Iterable\u003c? extends Map.Entry\u003e entrySet() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.entrySet();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.isEmpty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public ArrayList\u003cPatientRecord\u003e get(String nric) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.get(nric);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public boolean containsKey(String appointmentId) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.containsKey(appointmentId);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void removePersonalRecord(ArrayList\u003cPatientRecord\u003e patientRecord, String patientNric) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        argMultimap.put(patientNric, patientRecord);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 63
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/exception/HappyPillsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class HappyPillsException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Updates Exception message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param message Contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public HappyPillsException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 14
    }
  },
  {
    "path": "src/main/java/seedu/happypills/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " * A class that manages read and write operations to file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String PATIENT_FILEPATH \u003d \"data/patient.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String APPOINTMENT_FILEPATH \u003d \"data/appointment.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String PATIENT_RECORD_FILEPATH \u003d \"data/patientrecord.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Overwrite file with a formatted string of the entire list provided. Creates file if it does not exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Used for edit and delete commands"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to save to, requires directory/file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param dataString  a formatted string of a list of items to be saved to file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws IOException if unable to save to file, possibly due to interruptions."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void writeAllToFile(String filePath, String dataString) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File d \u003d new File(filePath.substring(0, filePath.lastIndexOf(\u0027/\u0027)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!d.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            d.mkdir();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.write(dataString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Add new single line formatted strings to file. Creates file if it does not exist."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to save to, requires directory/file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param dataString  single item as string to be saved to file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws IOException if unable to save to file, possibly due to interruptions."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void addSingleItemToFile(String filePath, String dataString) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File d \u003d new File(filePath.substring(0, filePath.lastIndexOf(\u0027/\u0027)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!d.exists()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            d.mkdir();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath,true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.write(dataString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Read and send file data to parse line by line as string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of historical patients patient list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to read from."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return patientList of all patients found in the file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws FileNotFoundException if the file specified by directory/filename does not exist."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static PatientMap loadPatientsFromFile(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientMap storedPatients \u003d new PatientMap();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String stringInput \u003d s.nextLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            parsePatientFileContent(stringInput, storedPatients);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return storedPatients;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * convert a single line data into values of a patients and add it back to the provided patientList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param savedString a single string with all the data required for a patient."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param storedPatients a list which the patient details retrieved should be added into."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static void parsePatientFileContent(String savedString, PatientMap storedPatients) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String[] dataString \u003d savedString.split(\"[|]\", 7);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient tempPatient \u003d new Patient(dataString[0], dataString[1],"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Integer.parseInt(dataString[2]), dataString[3], dataString[4],"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                dataString[5], dataString[6]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            storedPatients.add(tempPatient);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Read and send file data to parse line by line as string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of historical appointment list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to read from."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Shared map of all patient"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return patientList of all patients found in the file."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws FileNotFoundException if the file specified by directory/filename does not exist."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static AppointmentMap loadAppointmentFromFile(String filePath, PatientMap patients)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        AppointmentMap storedAppt \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String stringInput \u003d s.nextLine();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            parseAppointmentFileContent(stringInput, storedAppt, patients);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return storedAppt;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * convert a single line data into values of an appointment and add it back to the provided apptList."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param savedString a single string with all the data required for a appointment."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param storedAppt a list which the appointment details retrieved should be added into."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static void parseAppointmentFileContent(String savedString,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                                                    AppointmentMap storedAppt, PatientMap patients) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String[] dataString \u003d savedString.split(\"[|]\", 7);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Boolean isDone \u003d dataString[5].equals(\"T\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment tempAppt \u003d new Appointment(dataString[0], dataString[1],"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                dataString[2], dataString[3], dataString[4], isDone);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient patient \u003d (Patient) patients.get(dataString[1]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (patient !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                patient.addAppointment(tempAppt);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                storedAppt.addAppointment(tempAppt);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Read and send file data to parse line by line as string."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of historical patients record list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to read from."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Shared map of all patients"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return patientList of all patients found in the file."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws FileNotFoundException if the file specified by directory/filename does not exist."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static PatientRecordMap loadPatientRecordFromFile(String filePath, PatientMap patients)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        PatientRecordMap storedPr \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String stringInput \u003d s.nextLine();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            parsePatientRecordFileContent(stringInput, storedPr, patients);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return storedPr;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * convert a single line data into values of an appointment and add it back to the provided apptList."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param savedString a single string with all the data required for a appointment."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param storedPr a list which the patient record details retrieved should be added into."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static void parsePatientRecordFileContent(String savedString,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                                                    PatientRecordMap storedPr, PatientMap patients) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String[] dataString \u003d savedString.split(\"[|]\", 5);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        PatientRecord tempPr \u003d new PatientRecord(dataString[0], dataString[1],"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                dataString[2], dataString[3], dataString[4]);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient patient \u003d (Patient) patients.get(dataString[0]);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (patient !\u003d null) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                storedPr.add(tempPr,dataString[0]);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 203,
      "itskesin": 5
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/AppointmentTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class AppointmentTextUi extends TextUi {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String GET_EMPTY_APPOINTMENT_LIST_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    There are no appointments in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String APPOINTMENT_NOT_FOUND_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            + \"    The appointment cannot be found. Please try again.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Shows list of appointments in the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments The list of appointments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return message to be displayed to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getAppointmentList(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Here is your list of appointments:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    ID    | date       | time      | NRIC\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry appointment : appointments.entrySet()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Appointment a \u003d (Appointment)appointment.getValue();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String nric \u003d a.getNric();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String id \u003d a.getAppointmentId()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(6 - a.getAppointmentId().length());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String date \u003d a.getDate()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(11 - a.getDate().length());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String time \u003d a.getTime()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(10 - a.getTime().length());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message +\u003d \"    \" + id + \"| \" + date + \"| \" + time + \"| \" + nric + \"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message +\u003d DIVIDER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Generate a success message upon adding the appointment."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment the appointment which the program added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return Appointment details if any, and a notification message otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String addAppointmentSuccessMessage(Appointment appointment) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Appointment has been added with Appointment ID \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + appointment.getAppointmentId() + \".\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Generate a success message upon finding the correct appointment."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient the patient which the program have to find the appointment for."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return Appointment details if any, and a notification message otherwise."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getAppointmentSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here are the patient\u0027s appointments:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    ID    | NRIC      | Date       | Time      | Reason      \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ArrayList\u003cAppointment\u003e tempList \u003d patient.getAppointments();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : tempList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String id \u003d appointment.getAppointmentId()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(6 - appointment.getAppointmentId().length());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String nric \u003d appointment.getNric()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(10 - appointment.getNric().length());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String reason \u003d appointment.getReason();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String date \u003d appointment.getDate()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(11 - appointment.getDate().length());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String time \u003d appointment.getTime()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(10 - appointment.getTime().length());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            content +\u003d \"    \" + id + \"| \" + nric + \"| \" + date + \"| \" + time + \"| \" + reason + \"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            returnMessage \u003d \"    The patient does not have any appointments scheduled.\\n\" + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            returnMessage +\u003d content + DIVIDER;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Display updated patient\u0027s appointment."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment that was updated."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return The patient\u0027s updated appointment."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String editAppointmentSuccessMessage(Appointment appointment) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Patient appointment have been updated as follows:\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + appointment + DIVIDER;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Display updated patient\u0027s appointment."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment that was updated."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return The patient\u0027s updated appointment."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String doneAppointmentSuccessMessage(Appointment appointment) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    The following appointment has been marked done:\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + appointment + DIVIDER;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 88,
      "sitinadiah25": 17
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/HelpTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class HelpTextUi extends TextUi {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Construct a string for incomplete commands, probably missing something."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param helpString provide the help command that user can use to find the right format"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a string for incomplete commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String incompleteCommandString(String helpString) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String msg \u003d \"    Command is incomplete. Please use the \" + helpString + \" command to find out more.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String GENERAL_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    HappyPills Commands\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    General Commands:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      help | Displays all of HappyPill\u0027s Commands\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      exit | Exits the program\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Patient Details Commands:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add patient | Adds a patient into the program\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list patient | Lists all the patients in the program\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      get patient | Retrieves the details of a given patient\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit patient | Edits a patient\u0027s detail\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete patient | Deletes a patient from the program\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Patient Medial Records Commands:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add pr | Adds a prior patient records into the program\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit pr | Edits a prior patient record\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete pr | Deletes a prior patient record\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list pr | List down all records for a particular patient\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      find pr | Retrieves a particular record\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Appointment Scheduling Commands:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add appt | Adds an appointment into the program\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list appt | Lists all the appointments into the program\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit appt | Edits an appointment in the program\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete appt | Deletes an appointment from the program\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      done appt | Marks an appointment as done\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      find appt | Finds all the appointments under a patient\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    For more specific command instructions, enter `help [COMMAND]`\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      Example: help add appt\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String EXIT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To exit the program, run the following command:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      exit\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The above command will save the current patient records and terminate the program.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    //Patient help Strings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String GENERAL_PATIENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Patient Details Commands:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add patient | Adds a patient into the program\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list patient | Lists all the patients in the program\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      get patient | Retrieves the details of a given patient\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit patient | Edits a patient\u0027s detail\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete patient | Deletes a patient from the program\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    For more specific command instructions, enter `help [COMMAND]`\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      Example: help add patient\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String ADD_PATIENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To add a new patient into the program, use the following command:\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE and optional details are in parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      add patient /ic NRIC /n NAME /p PHONE_NUMBER /dob DOB \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"/b BLOOD_TYPE /a[Allergies] /rm[Remarks]\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The command above adds a new patient.\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String LIST_PATIENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To retrieve a list of all the patients within the program,\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    run the following command:\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list patient\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String GET_PATIENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To retrieve a patient\u0027s information, run the following command:\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      get patient NRIC\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Example:\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      get patient S9999999Z\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The command above will display information regarding the patient with NRIC S9999999Z.\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String EDIT_PATIENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To edit a patient\u0027s information, run the following command:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE and optional details are in parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit patient NRIC /n[NAME] to edit patient\u0027s name\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit patient NRIC /dob[DOB] to edit patient\u0027s date of birth\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit patient NRIC /b[BLOOD_TYPE] to edit patient\u0027s blood type\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit patient NRIC /p[PHONE_NUMBER] to edit patient\u0027s phone number,\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit patient NRIC /a[ALLERGIES] to edit patient\u0027s allergies,\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit patient NRIC /r[REMARKS] to edit patient\u0027s remarks\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Do note that you can only edit one parameter at a time and \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \" editing the patient\u0027s records will overwrite any previous information.\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Adding of allergies or remarks can be done with the add command.\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String DELETE_PATIENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To delete a patient, run the following command:\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      delete patient NRIC\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The user will be prompted to confirm if they would like to delete the patient\u0027s records.\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that deletion cannot be undone.\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    //Patient Record Help Strings"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String GENERAL_PATIENT_RECORD_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Patient Medial Records Commands:\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add pr | Adds a prior patient records into the program\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit pr | Edits a prior patient record\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete pr | Deletes a prior patient record\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list pr | List down all records for a particular patient\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      find pr | Retrieves a particular record\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    For more specific command instructions, enter `help [COMMAND]`\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      Example: help add pr\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String ADD_PATIENT_RECORD_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To add a new patient record into the program, use the following command:\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS /d DATE /t TIME\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The command above adds a new patient medical record.\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String LIST_PATIENT_RECORD_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To retrieve a list of all the patient records of a particular patient,\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    run the following command:\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      list pr NRIC\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String EDIT_PATIENT_RECORD_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To edit a patient\u0027s records, run the following command:\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE and optional details are in parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The INDEX can be found by running the list pr command.\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit pr NRIC INDEX /sym [SYMPTOMS] /diag [DIAGNOSIS] /d [DATE] /t [TIME]\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    You can also edit a single attribute: \\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit pr NRIC INDEX /sym [SYMPTOMS] to edit patient\u0027s symptoms,\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that editing the patient\u0027s records will overwrite any previous information.\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String DELETE_PATIENT_RECORD_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To delete a patient\u0027s records on a particular visit, run the following command:\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The INDEX can be found by running the list pr command.\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      delete pr NRIC INDEX\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The user will be prompted to confirm if they would like to delete the patient\u0027s records.\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that deletion cannot be undone.\\n\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FIND_PATIENT_RECORD_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To get a better look at a patient\u0027s particular record, run the following command:\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The INDEX can be found by running the list pr command.\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      find pr NRIC INDEX\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    //Appointment"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String GENERAL_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Appointment Scheduling Commands:\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add appt | Adds an appointment into the program\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list appt | Lists all the appointments into the program\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit appt | Edits an appointment in the program\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete appt | Deletes an appointment from the program\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      done appt | Marks an appointment as done\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      find appt | Finds all the appointments under a patient\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    For more specific command instructions, enter `help [COMMAND]`\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      Example: help add appt\\n\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String ADD_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To add a new appointment into the program, use the following command:\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE and optional details are in parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    A unique ID will be given to every appointment added.\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      add appt /ic NRIC /d DATE /t TIME /r REASON\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The command above adds a new appointment.\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Please ensure that the date is formatted as DD-MM-YYYY and time as HH:mm:ss\\n\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String LIST_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To retrieve a list of all the appointments within the program,\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    run the following command:\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list appt\\n\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String EDIT_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To edit a patient\u0027s appointment, run the following command:\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE and optional details are in parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit appt NRIC APPT_ID /d [DD/MM/YYYY] to edit appointment\u0027s date,\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit appt NRIC APPT_ID /t [HH:MM] to edit appointment\u0027s time,\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit appt NRIC APPT_ID /r [REASON] to edit appointment\u0027s reason\\\"\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that editing the patient\u0027s records will overwrite any previous information.\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    The apptID can be found using \\\"find appt NRIC\\\"\\n\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String DELETE_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To delete an appointment, run the following command:\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      delete appt NRIC APPT_ID\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The user will be prompted to confirm if they would like to delete the patient\u0027s records.\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that deletion cannot be undone.\\n\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FIND_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To find all of a patient\u0027s appointments, run the following command:\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      find appt NRIC\\n\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String DONE_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To make an appointment as done, run the following command:\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      done appt NRIC APPT_ID\\n\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 158,
      "sitinadiah25": 39,
      "itskesin": 1
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static seedu.happypills.ui.TextUi.DIVIDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Contains user visible messages."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"    Command is invalid. \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"Enter help to know how to use HappyPills.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_COMMAND \u003d \"    Command is incomplete. Please use the help command.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d \"    Patient does not exist. Please try again.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_ADDED \u003d \"    Patient Record has been added.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + DIVIDER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_MISSING_FIELD \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"    Please input all necessary fields for the edit command.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"    Invalid index.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_NRIC \u003d \"    Invalid NRIC format.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_NRIC_NOT_PROVIDED \u003d \"    NRIC of the patient not provided\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_DETAILS_NOT_PROVIDED \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"    Patient\u0027s record details are not provided.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_PATIENT_DETAILS_NOT_PROVIDED \u003d \"    Patient\u0027s detail is empty.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INFORM_MISSING \u003d \"    Please input your missing detail listed below\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_NRIC_FORMAT \u003d \"      /ic NRIC (Format: [S/T][7-digits][A-Z])\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_SYMPTOM_FORMAT \u003d \"      /sym SYMPTOMS\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_DIAGNOSIS_FORMAT \u003d \"      /diag DIAGNOSIS\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_DATE_FORMAT \u003d \"      /d DATE (Format: DD/MM/YYYY)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_TIME_FORMAT \u003d \"      /t TIME (Format: HH:mm)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_COMMAND_ABORTED \u003d DIVIDER"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"\\n    Command has been aborted.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_NOT_ADDED \u003d \"    The current information is not added.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            + \"    Please add all the details again! Thank you.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_USER_CONFIRMATION \u003d \"    Please enter [y] for yes or [n] for no\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_NOT_FOUND \u003d \"    Patient record not found. Please try again.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_EDIT_ERROR \u003d \"    Something went wrong, the edit could not be made.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"    Invalid date or date format(DD/MM/YYYY).\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_OF_BIRTH \u003d \"    Please ensure that the DATE is in DD/MM/YYYY \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_BLOOD_TYPE \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"    Please ensure that the BLOOD TYPE is in [A|B|AB|O][+-] \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"    Invalid time or time format(HH:MM).\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_INVALID_PHONE_NUMBER \u003d \"    Please ensure that all the phone number is 8 digit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static final String MESSAGE_INVALID_EDIT_APPOINTMENT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"    Please try again. To learn more about the Edit appointment command, \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + \"\\n    enter \\\"help edit appt\\\"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static final String MESSAGE_INVALID_EDIT_PR \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            \"    Please try again. To learn more about the Edit patient record command, \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + \"\\n    enter \\\"help edit pr\\\"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static final String MESSAGE_INVALID_EDIT_PATIENT \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            \"    Please try again. To learn more about the Edit patient command, \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + \"\\n    enter \\\"help edit patient\\\"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_EMPTY_PATIENT \u003d \"    There is no patient in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INDEX_OUT_OF_BOUND \u003d \"    No record found with given index\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_PATIENT_IS_IN_THE_MAP \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            \"    Patient is already in the list. Please use help command.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_CONTENT_IS_EMPTY \u003d \"    Please do not leave the field as empty string\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_NAME_FORMAT \u003d \"      /n NAME\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PHONE_NUMBER_FORMAT \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"      /p PHONE (Format: 8-digit number starting with 8/9)\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_BLOOD_TYPE_FORMAT \u003d \"      /b BLOOD TYPE (Format: A/B/O/AB with +/-)\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_INCORRECT_INPUT_FORMAT \u003d \"    Incorrect input format. Sorry please try again\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_DATE_OF_BIRTH_FORMAT \u003d \"      /dob DATE OF BIRTH (Format: DD/MM/YYYY)\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_CLEAR_COMMAND \u003d \"\\n    To abort, enter \\\"clear\\\"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_EMPTY_PATIENT_RECORD \u003d \"    There is no patient record in the list.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 15,
      "sitinadiah25": 8,
      "itskesin": 43
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/PatientRecordTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class PatientRecordTextUi extends TextUi {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Formats a list patient record success message for user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords Patient records of the patient."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return message A formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException If the list is empty"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static String getPatientRecordListSuccessMessage(ArrayList\u003cPatientRecord\u003e patientRecords)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (patientRecords.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_EMPTY_PATIENT_RECORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String nric \u003d patientRecords.get(0).getNric();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"    Here is the list of \" + nric + \"\u0027s records:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    ID    | Date       | Time     \\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (int index \u003d 0; index \u003c patientRecords.size(); index++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String id \u003d Integer.toString(index + 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String date \u003d patientRecords.get(index).getDate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String time \u003d patientRecords.get(index).getTime();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message +\u003d \"    \" + id + repeat(6 - id.length()) + \"| \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + date + repeat(11 - date.length()) + \"| \" + time + \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message +\u003d DIVIDER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Formats a get patient record success message for user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecordMap Patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientNric      Nric of the patient."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index            Index for the record of the searched patient."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return returnMessage A formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientRecordSuccessMessage("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientRecordMap patientRecordMap, String patientNric, int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ArrayList\u003cPatientRecord\u003e patientRecord \u003d patientRecordMap.get(patientNric);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here are the patient\u0027s record details:\\n\" + patientRecord.get(index) + DIVIDER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Formats a edit patient success message for user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecord Patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return returnMessage A formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String editPatientRecordSuccessMessage(PatientRecord patientRecord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here is the edited patient\u0027s record details:\\n\" + patientRecord + DIVIDER;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Formats a delete patient success message for user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecord Patient record object to be returned as a part of the string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientNric   Nric of the patient."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String deletePatientRecordSuccessMessage("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientRecord patientRecord, String patientNric) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    \" + patientNric + \"\u0027s patient record will be deleted.\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + patientRecord + DIVIDER;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void patientRecordNotAddedMessage(String detail) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(\"    \" + detail + \" is not a valid input.\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \" + detail + \" will not be added\\n\" + TextUi.DIVIDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Prompts user for conformation with this message."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param parseInput Details to be displayed to user for confirmation."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return text The string to be displayed to user for confirmation."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static String promptConfirmation(String[] parseInput) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String text \u003d \"        Are you sure all the listed details are correct?\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        NRIC : \" + parseInput[0].trim().toUpperCase() + \"\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Symptom : \" + parseInput[1].trim() + \"\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Diagnosis : \" + parseInput[2].trim() + \"\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Date : \" + parseInput[3].trim() + \"\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        time : \" + parseInput[4].trim() + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"                                                   (Y/N)?\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 7,
      "Janicetyy": 53,
      "sitinadiah25": 6,
      "itskesin": 37
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/PatientTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class PatientTextUi extends TextUi {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String PATIENT_NOT_FOUND_MESSAGE \u003d \"    The patient cannot be found. Please try again.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String EMPTY_PATIENT_LIST_MESSAGE \u003d \"    There are no patients in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Shows a list of patients\u0027 name and their NRIC to the user, formatted as an indexed list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients A patient list with all existing patients."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return message A message to be displayed to user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientList(PatientMap patients) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"    Here is your list of patients:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    NRIC      | Name\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry patient : patients.entrySet()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String nric \u003d (String)patient.getKey();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient p \u003d (Patient)patient.getValue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String name \u003d p.getName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message +\u003d \"    \" + nric + repeat(10 - nric.length())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + \"| \" + name + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message +\u003d DIVIDER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Formats an add patient success message for user verification."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, patient details and a divider."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patient Patient object added to patientList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return message A string message to be displayed to the user for successful addCommand executed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String addPatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message \u003d \"    Got it! I\u0027ve added this patient:\\n\" + patient + DIVIDER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Formats a get patient success message for user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patient Patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return returnMessage A formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here are the patient\u0027s details:\\n\" + patient + DIVIDER;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Displays updated patient\u0027s records."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient The patient whose records were updated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return message The patient\u0027s updated records."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String editPatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Patient details have been updated as follows:\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + patient + DIVIDER;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Displays message that patient is successfully deleted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Patient to be deleted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return display message."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String deletePatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return \"    Patient \" + patient.getName() + \" | \" + patient.getNric()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \" has been deleted successfully.\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Displays confirmation message for deleting patients."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient The patient to be deleted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void printDeleteConfirmation(Patient patient) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        print(\"    Are you sure you want to delete this patient:\\n      \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + patient.getName() + \" | \" + patient.getNric() + \"\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"                                                   (Y/N)?\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + DIVIDER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Displays confirmation message for deleting patients."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient The patient to be deleted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void printDeleteConfirmationAgain(Patient patient) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        print(DIVIDER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        print(\"    Input is incorrect. Please try again.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        print(DIVIDER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        printDeleteConfirmation(patient);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static String patientNotDeletedMessage \u003d DIVIDER + \"\\n    Patient is not deleted.\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static void patientNotAddedMessage(String detail) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        System.out.println(\"    \" + detail + \" is not a valid input.\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"    \" + detail + \" will not be added\\n\" + TextUi.DIVIDER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 9,
      "Janicetyy": 85,
      "sitinadiah25": 4,
      "itskesin": 10
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/StorageTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class StorageTextUi extends TextUi {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FAIL_TO_ADD_PATIENT_MSG \u003d \"Fail to add patient to file.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FAIL_TO_ADD_APPOINTMENT_MSG \u003d \"Fail to add appointment to file.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FAIL_TO_WRITE_PATIENT_MSG \u003d \"Failed to write patients to file.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FAIL_TO_WRITE_APPOINTMENT_MSG \u003d \"Failed to write patient\u0027s appointments to file.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FAIL_TO_ADD_PR_MSG \u003d \"Fail to add patient record to file.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FAIL_TO_WRITE_PR_MSG \u003d \"Failed to write patient records to file.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * returns a list of patients\u0027 name and their details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients A patient list with all existing patients."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a message to be displayed to user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getFormattedPatientString(PatientMap patients) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String formattedPatientString \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry patient : patients.entrySet()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient p \u003d (Patient)patient.getValue();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            formattedPatientString +\u003d p.toSave();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return formattedPatientString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of patients\u0027 NRIC and appointment details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments An appointment list with all existing patients."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a message to be displayed to user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getFormattedApptString(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String formattedAppointmentString \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry appointment : appointments.entrySet()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Appointment a \u003d (Appointment) appointment.getValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            formattedAppointmentString +\u003d a.toSave();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return formattedAppointmentString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of patients\u0027 NRIC and records."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientRecords A list with all existing patient record."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientMap A shared map of patients"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a string to be used in storage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getFormattedPrString(PatientRecordMap patientRecords, PatientMap patientMap) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String formattedPrString \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry patients : patientMap.entrySet()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient patient \u003d (Patient) patients.getValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (patientRecords.containsKey(patient.getNric())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    \u0026\u0026 (patientRecords.get(patient.getNric()) !\u003d null)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                ArrayList\u003cPatientRecord\u003e prs \u003d patientRecords.get(patient.getNric());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                for (int index \u003d 0; index \u003c prs.size(); index++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    formattedPrString +\u003d prs.get(index).toSave();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return formattedPrString;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 74
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/TextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String NEWLINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Generates and prints the welcome message upon the start of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void printWelcomeMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String logo \u003d \"\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \" __   __  _______  _______  _______  __   __  _______  ___   ___      ___      _______\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|  | |  ||   _   ||       ||       ||  | |  ||       ||   | |   |    |   |    |       |\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|  |_|  ||  |_|  ||    _  ||    _  ||  |_|  ||    _  ||   | |   |    |   |    |  _____|\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|       ||       ||   |_| ||   |_| ||       ||   |_| ||   | |   |    |   |    | |_____\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"|       ||       ||    ___||    ___||_     _||    ___||   | |   |___ |   |___ |_____  |\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"|   _   ||   _   ||   |    |   |      |   |  |   |    |   | |       ||       | _____| |\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|__| |__||__| |__||___|    |___|      |___|  |___|    |___| |_______||_______||_______|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(\"Hello from\" + logo);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(\"What can I do for you today, doctor?\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Displays Exit message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void printExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        System.out.println(\"    Thank you for using HappyPills! ^.^\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        System.out.println(\"    See you again!\\n\" + DIVIDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    //General methods"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * print any string as needed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param string print any string to screen"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void print(String string) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        System.out.println(string);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Appends the divider to the given message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param s The message that requires the divider to be appended."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The message with the appended divider."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String appendDivider(String s) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return s + DIVIDER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Prepends the divider to the given message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param s The message that requires the divider to be prepended."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The message with the prepended divider."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String prependDivider(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return DIVIDER + \"\\n\" + s;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String incorrectCommandMessage(String command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return \"    The command \\\"\" + command + \"\\\" does not exist. Please try again.\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Constructs a string for incomplete commands, probably missing something."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param helpString provide the help command that user can use to find the right format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a string for incomplete commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String incompleteCommandString(String helpString) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String msg \u003d \"    Command is incomplete. Please use the \" + helpString + \" command.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Repeats a string count number of times."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param count the number of times to be repeated."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param with  the string to be repeated."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the resulting string."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String repeat(int count, String with) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return new String(new char[count]).replace(\"\\0\", with);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Repeats a blank space count number of times."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param count the number of times to be repeated."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the resulting string."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String repeat(int count) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return repeat(count, \" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String INVALID_NRIC_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The NRIC provided is invalid, please try again with a valid NRIC.\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String INVALID_APPTID_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The appointment ID provided is invalid, please try again with a valid appointment ID.\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 4,
      "Janicetyy": 28,
      "sitinadiah25": 51,
      "itskesin": 24
    }
  },
  {
    "path": "src/test/java/seedu/happypills/HappyPillsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "class HappyPillsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/appointmentcommands/DoneAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.DoneAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class DoneAppointmentCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newAppointmentMap \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //Add test patient"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S1234567A\", 123,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S4567890B\", 456,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //add test appointment"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentOne \u003d new Appointment(\"1\",\"S1234567A\", \"01/02/2020\", \"12:00:00\",\"reason1\",false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentTwo \u003d new Appointment(\"2\",\"S1234567A\", \"01/03/2020\", \"13:00:00\",\"reason2\", false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientOne.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientOne.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_Done() throws HappyPillsException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputMissingInput \u003d \"    The following appointment has been marked done:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        NRIC     : S1234567A\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Date     : 01/02/2020\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Time     : 12:00:00\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Reason   : reason1\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        ID       : 1\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Attended : Yes\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new DoneAppointmentCommand(\"S1234567A\", \"1\").execute("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputMissingInput, message);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 6,
      "itskesin": 63
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/appointmentcommands/EditAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.EditAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class EditAppointmentCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newAppointmentMap \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //Add test patient"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S1234567A\", 123,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S4567890B\", 456,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //add test appointment"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentThree \u003d new Appointment(\"3\",\"S1234567A\",  \"01/04/2020\", \"14:00:00\",\"reason3\",false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentOne \u003d new Appointment(\"1\",\"S1234567A\", \"01/02/2020\", \"12:00:00\",\"reason1\",false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentTwo \u003d new Appointment(\"2\",\"S1234567A\", \"01/03/2020\", \"13:00:00\",\"reason2\", false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientOne.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientOne.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentThree);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientOne.addAppointment(appointmentThree);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_missingInput() throws HappyPillsException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputMissingInput \u003d \"    To edit a patient\u0027s appointment, run the following command:\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    Note: patient details are in UPPER CASE and optional details are in parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      edit appt NRIC APPT_ID /d [DD/MM/YYYY] to edit appointment\u0027s date,\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      edit appt NRIC APPT_ID /t [HH:MM] to edit appointment\u0027s time,\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      edit appt NRIC APPT_ID /r [REASON] to edit appointment\u0027s reason\\\"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    Do note that editing the patient\u0027s records will overwrite any previous information.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    The apptID can be found using \\\"find appt NRIC\\\"\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S1234567A\", \"2\", \"/r \").execute("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputMissingInput, message);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_editReason() throws HappyPillsException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputeditReason \u003d \"    Patient appointment have been updated as follows:\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        NRIC     : S1234567A\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Date     : 01/03/2020\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Time     : 13:00:00\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Reason   : Very sick hehe\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        ID       : 2\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Attended : No\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S1234567A\", \"2\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/r Very sick hehe\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputeditReason, message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_editDate_invalidDate() throws HappyPillsException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputEditDateInvalid \u003d \"    Invalid date or date format(DD/MM/YYYY).\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S1234567A\", \"3\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/d 01/01/202s\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputEditDateInvalid, message);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_editDate_validDate() throws HappyPillsException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputEditDateValid \u003d \"    Patient appointment have been updated as follows:\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        NRIC     : S1234567A\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Date     : 01/01/2020\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Time     : 14:00:00\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Reason   : reason3\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        ID       : 3\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Attended : No\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S1234567A\", \"3\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/d 01/01/2020\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputEditDateValid, message);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_editTime_invalidTime() throws HappyPillsException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputEditTimeInvalid \u003d \"    Invalid time or time format(HH:MM).\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S1234567A\", \"1\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/t 24:00\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputEditTimeInvalid, message);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_editTime_validTime() throws HappyPillsException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S1234567A\", \"1\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/t 23:59\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputEditTimeValid \u003d \"\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + AppointmentTextUi.editAppointmentSuccessMessage(newAppointmentMap.get(\"1\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputEditTimeValid, message);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 19,
      "sitinadiah25": 4,
      "itskesin": 108
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/appointmentcommands/FindAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.FindAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class FindAppointmentCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newAppointmentMap \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //Add test patient"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S1234567A\", 123,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S4567890B\", 456,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Appointment appointmentOne \u003d new Appointment("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \"1\",\"S1234567A\", \"01/02/2020\", \"12:00:00\",\"reason1\",false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Appointment appointmentTwo \u003d new Appointment("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \"2\",\"S1234567A\", \"01/03/2020\", \"13:00:00\",\"reason2\", false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientOne.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientOne.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void getAppointment_patientNotFound() throws HappyPillsException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String expectedOutputNotfound \u003d \"    The patient cannot be found. Please try again.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            new FindAppointmentCommand(\"S7890123C\").execute("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                    newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            assertEquals(expectedOutputNotfound, e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void getAppointment_EmptyList_notFound() throws HappyPillsException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String expectedOutputEmptyList \u003d \"    The patient does not have any appointments scheduled.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new FindAppointmentCommand(\"S4567890B\").execute("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputEmptyList, message);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void getAppointment_List_found() throws HappyPillsException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputInList \u003d AppointmentTextUi.getAppointmentSuccessMessage(newPatientMap.get(\"S1234567A\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new FindAppointmentCommand(\"S1234567A\").execute("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputInList, message);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 7,
      "Janicetyy": 8,
      "sitinadiah25": 1,
      "itskesin": 70
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/patientcommands/AddPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class AddPatientCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    PatientRecordMap newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientMap patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        AddPatientCommand testAddCommand \u003d new AddPatientCommand("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"Eve\", \"S9876543F\", 91234567, \"22/09/1998\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                \"B-\",\"-\", \"-\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            testAddCommand.execute(patients, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(1,patients.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertTrue(patients.containsKey(\"S9876543F\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "itskesin": 30
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/patientcommands/EditPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "//@@author sitinadiah25"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "class EditPatientCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        PatientMap patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        PatientRecordMap newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        AddPatientCommand testAddCommand \u003d new AddPatientCommand("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"kesin\", \"S1234567F\", 912, \"22/08/1998\", \"B-\",\"meat\", \"Strong\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            testAddCommand.execute(patients, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            // catch exception"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        EditPatientCommand testEditCommand \u003d new EditPatientCommand(\"S1234567F\", \"/rmWeak\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            testEditCommand.execute(patients, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            // catch exception"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assertEquals(1, patients.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (patients.containsKey(\"S1234567F\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            Patient patient \u003d patients.get(\"S1234567F\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            assertEquals(\"Weak\", patient.getRemarks());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 32,
      "itskesin": 10
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/patientcommands/GetPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.GetPatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class GetPatientCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S123A\", 123,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S456B\", 456,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void getList_notInList_notFound() throws HappyPillsException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String expectedOutputNotInList \u003d \"    Patient does not exist. Please try again.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            new GetPatientCommand(\"S7890123C\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException hpe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(expectedOutputNotInList, hpe.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void getList_InList_found() throws HappyPillsException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputInList \u003d \"    Here are the patient\u0027s details:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Name : P1\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        NRIC : S123A\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Phone Number : 123\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        DOB : 01/01/2000\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Blood Type : O+\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Allergies : None\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Remarks : NIL\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new GetPatientCommand(\"S123A\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputInList, message);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 2,
      "itskesin": 63
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/patientcommands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "//@@author sitinadiah25"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        newAppointmentMap \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S123A\", 123,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S456B\", 456,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void helpCommand_addCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.ADD_PATIENT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help add patient\").execute("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void helpCommand_listCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.LIST_PATIENT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help list patient\").execute("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void helpCommand_getCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.GET_PATIENT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help get patient\").execute("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void helpCommand_editCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.EDIT_PATIENT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help edit patient\").execute("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void helpCommand_deleteCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.DELETE_PATIENT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help delete patient\").execute("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void helpCommand_helpCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.GENERAL_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help\").execute("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void helpCommand_exitCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.EXIT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d new HelpCommand(\"help exit\").execute("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 84,
      "itskesin": 15
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/patientcommands/ListPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@author itskesin"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Contains all the tests related to the ListPatientCommand class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class ListPatientCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap filledPatientMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap emptyPatientMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static String expectedOutputFromEmptyList \u003d \"    There are no patients in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static String expectedOutputFromFilledList \u003d \"    Here is your list of patients:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    NRIC      | Name\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    T9999999N | Mallory\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    S9876543F | Eve\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    S9888888G | Bob\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + DIVIDER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        filledPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        emptyPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientOne \u003d new Patient(\"Eve\", \"S9876543F\", 91265432,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"22/08/1996\", \"O+\", \"Peanuts\", \"Friend with Mallory\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"Mallory\", \"T9999999N\", 81234567,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"25/09/1998\", \"A-\", \"School\", \"NIL\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientThree \u003d new Patient(\"Bob\", \"S9888888G\", 91234567,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"10/03/1998\", \"B+\", \"NIL\", \"NIL\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            filledPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            filledPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            filledPatientMap.add(patientThree);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void printList_emptyList_emptyListMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new ListPatientCommand().execute(emptyPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputFromEmptyList, message);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void printList_filledList_filledListMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new ListPatientCommand().execute(filledPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputFromFilledList, message);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 69
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/patientrecordcommands/AddPatientRecordCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.AddPatientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class AddPatientRecordCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    PatientRecordMap newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        PatientMap patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        AddPatientCommand testAddCommand \u003d new AddPatientCommand("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                \"Eve\", \"S9876543F\", 91234567, \"22/09/1998\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                \"B-\",\"-\", \"-\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            testAddCommand.execute(patients, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(1,patients.size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertTrue(patients.containsKey(\"S9876543F\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 20,
      "itskesin": 17
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/parser/CheckerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@author itskesin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Contains all the tests for Validation class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class CheckerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidPhoneNumber() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidPhoneNum(\"123456789\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidPhoneNum(\"       \"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidPhoneNum(\"qwerty\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidPhoneNum(\"-12345678\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidPhoneNum(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidDate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"18June\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"4/20/2020\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"4/-20/2020\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //assertFalse(Validation.isValidDate(\"4/04/2020\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //assertFalse(Validation.isValidDate(\"04/4/2020\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"444/4/2020\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"-44/4/2020\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"04/04/20202\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"04/04/-44\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"04/04\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"04/04///////\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"04/04/              2020\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"       \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"HH:MM\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"     \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"22:2222\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"22:-12\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"22:\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"24:12\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"24:00\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"-12:00\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\":00\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"123456:00\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"00:00:00\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"00:00:\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"00:59.4356789\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"12.324567543:59\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidBloodType() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidBloodType(\"        \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidBloodType(\"OS\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidBloodType(\"O\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidBloodType(\"\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidBloodType(\"1234567\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidBloodType(\"AB\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //assertFalse(Checker.isValidBloodType(\"AB+\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidNric() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"        \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"S9820463\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"S12345679\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"-123456\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"qwerty\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"12345\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"99999999F\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"999999999\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidNumber() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"-12354678\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"qwerty\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"1.11111\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"!@#$%^\u0026*\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidInteger() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"-12354678\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"qwerty\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"1.11111\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"!@#$%^\u0026*\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 97
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@author itskesin"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Contains all the tests for Parser class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseCommand_invalidCommand_throwException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"list\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid command not identified\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Command is invalid. Enter help to know how to use HappyPills.\",e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseCommand_emptyCommand_throwException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid command not identified\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Command is invalid. Enter help to know how to use HappyPills.\",e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 36
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/parser/PatientParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Contains all the tests for Patient Parser class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "class PatientParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    PatientParser parser \u003d new PatientParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientMap filledPatientMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientMap emptyPatientMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void parseDeletePatientCommand_invalidNric_throwException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            command \u003d parser.parse(\"delete patient\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            fail(\"Invalid delete patient command not identified\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            assertEquals(Messages.MESSAGE_INCORRECT_INPUT_FORMAT,e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 33
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/parser/PatientRecordParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@author itskesin"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Contains all the tests for Patient Record Parser class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class PatientRecordParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    PatientRecordParser parser \u003d new PatientRecordParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap filledPatientMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap emptyPatientMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseDeletePatientRecordCommand_invalidIndex_throwException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"delete pr S9876543F abc\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid delete pr command not identified\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid index.\",e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseDeletePatientRecordCommand_invalidNric_throwException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"delete pr abc 1\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid delete pr command not identified\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid NRIC format.\",e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseEditPatientRecordCommand_invalidIndex_throwException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"edit pr S9876543F abc\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid edit pr command not identified\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid index.\",e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseEditPatientRecordCommand_insufficientInformation_throwException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"edit pr S9876543F\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid edit pr command not identified\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Please input all necessary fields for the edit command.\",e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseEditPatientRecordCommand_invalidNric_throwException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"edit pr abc 1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid edit pr command not identified\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid NRIC format.\",e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parsePatientRecordCommand_invalidCommand_throwException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"get pr\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid pr command not identified\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Command is invalid. Enter help to know how to use HappyPills.\",e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseListPatientRecordCommand_invalidNric_throwException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"list pr 1234\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid list pr command not identified\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid NRIC format.\",e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseFindPatientRecordCommand_invalidNric_throwException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"find pr S9999 1\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid add pr command not identified\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid NRIC format.\",e.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseFindPatientRecordCommand_invalidIndex_throwException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"find pr S9876543F abc\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid add pr command not identified\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid index.\",e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 110
    }
  },
  {
    "path": "src/test/java/seedu/happypills/model/data/PatientRecordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Contains all the tests related to the Patient Record class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "class PatientRecordTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    PatientRecord recordOne \u003d new PatientRecord(\"S9876543F\",\"High Temperature\",\"Influenza\",\"1/1/2020\",\"10:00\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    PatientRecord recordTwo \u003d new PatientRecord(\"S9876543F\",\"Fever\",\"Spanish Flu\",\"30/1/2020\",\"11:10\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    PatientRecord recordThree \u003d new PatientRecord(\"S9888888G\",\"Fever\",\"Spanish Flu\",\"30/1/2020\",\"16:45\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void getNric() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"S9876543F\",recordOne.getNric());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"S9876543F\",recordTwo.getNric());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"S9888888G\",recordThree.getNric());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void getSymptom() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"High Temperature\",recordOne.getSymptom());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Fever\",recordTwo.getSymptom());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Fever\",recordThree.getSymptom());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void setSymptom() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordOne.setSymptom(\"Chills\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordTwo.setSymptom(\"Headache\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Chills\",recordOne.getSymptom());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Headache\",recordTwo.getSymptom());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Fever\",recordThree.getSymptom());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void getDiagnosis() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Influenza\",recordOne.getDiagnosis());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Spanish Flu\",recordTwo.getDiagnosis());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Spanish Flu\",recordThree.getDiagnosis());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void setDiagnosis() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordOne.setDiagnosis(\"Spanish Flu\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordTwo.setDiagnosis(\"Common Cold\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordThree.setDiagnosis(\"Influenza\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Spanish Flu\",recordOne.getDiagnosis());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Common Cold\",recordTwo.getDiagnosis());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Influenza\",recordThree.getDiagnosis());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"1/1/2020\",recordOne.getDate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"30/1/2020\",recordTwo.getDate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"30/1/2020\",recordThree.getDate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void setDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordOne.setDate(\"2/1/2020\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordTwo.setDate(\"28/1/2020\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordThree.setDate(\"31/1/2020\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"2/1/2020\",recordOne.getDate());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"28/1/2020\",recordTwo.getDate());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"31/1/2020\",recordThree.getDate());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void getTime() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"10:00\",recordOne.getTime());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"11:10\",recordTwo.getTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"16:45\",recordThree.getTime());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void setTime() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordOne.setTime(\"9:45\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordTwo.setTime(\"12:00\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordThree.setTime(\"16:33\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"9:45\",recordOne.getTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"12:00\",recordTwo.getTime());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"16:33\",recordThree.getTime());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String test \u003d \"        NRIC : \" + \"S9876543F\" + \"\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Symptom : \" + \"High Temperature\" + \"\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Diagnosis : \" + \"Influenza\" + \"\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Date : \" + \"1/1/2020\" + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        time : \" + \"10:00\" + \"\\n\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(test,recordOne.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void toSave() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String test \u003d \"S9888888G\" + \"|\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"Fever\" + \"|\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"Spanish Flu\" + \"|\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"30/1/2020\" + \"|\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"16:45\" + System.lineSeparator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(test, recordThree.toSave());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 113
    }
  },
  {
    "path": "src/test/java/seedu/happypills/model/data/PatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@author itskesin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Contains all the tests related to the Patient class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class PatientTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Patient patientOne \u003d new Patient(\"Eve\", \"S9876543F\", 91265432,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"22/08/1996\", \"O+\", \"Peanuts\", \"Friend with Mallory\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Patient patientTwo \u003d new Patient(\"Mallory\", \"T9999999N\", 81234567,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"25/09/1998\", \"A-\", \"School\", \"NIL\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Patient patientThree \u003d new Patient(\"Bob\", \"S9888888G\", 91234567,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"10/03/1998\", \"B+\", \"NIL\", \"NIL\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"Eve\", patientOne.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getNric() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"T9999999N\", patientTwo.getNric());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getPhoneNumber() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(91234567, patientThree.getPhoneNumber());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getDateOfBirth() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"25/09/1998\", patientTwo.getDateOfBirth());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getBloodType() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"O+\", patientOne.getBloodType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getAllergies() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"NIL\", patientThree.getAllergies());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getRemarks() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"NIL\", patientThree.getRemarks());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String correctOutput \u003d \"        Name : \" + \"Eve\" + \"\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        NRIC : \" + \"S9876543F\" + \"\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Phone Number : \" + 91265432 + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        DOB : \" + \"22/08/1996\" + \"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Blood Type : \" + \"O+\" + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Allergies : \" + \"Peanuts\" + \"\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Remarks : \" + \"Friend with Mallory\" + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(correctOutput, patientOne.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "itskesin": 67
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add /ic"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add patinet /ic /blah /p 123456 /dob /b"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": " add patient /ic"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/ic S9876543F /n Eve /p 9126543 /dob 22/05/1999 /b O- /a School /rm Best Friend with Mallory"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "91265432"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add /p91265432"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "n"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": " add patient /ic S9876543F /n Eve /p 91265432 /dob 22/05/1999 /b O- /a School /rm Best Friend with Mallory"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "y"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add patient /ic /blah /p 123456 /dob /b"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/ic S9876543F /n Eve /p 91265432 /dob 22/05/1999 /b O- /a School /rm Best Friend with Mallory"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "n"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "add patient /ic S9876543F /n Eve /p 91265432 /dob 22/05/1999 /b O- /a School /rm Best Friend with Mallory"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "y"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add patient /ic S9876543G /p 99999999 /dob 22/09/1989 /b O- /n Alice"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "n"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add patient /ic S9876543G /p 99999999 /dob 22/09/1989 /b O-"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/n Alice"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "y"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "list s9876543"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "list s9876543F"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "list patient"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "list patient -S9876543F"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add pr"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add /ic"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add pr /ic /sym /d 22feb92 /t 2o\u0027clock"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add pr /ic s9876543f /sym /d 22feb92 /t 2o\u0027clock"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/ic S9876543F /sym cough /diag fever /d 22/02/1992 /t 22:22"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "n"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add pr /ic S9876543F /sym cough /diag fever /d 22/02/1992 /t 22:22"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "y"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add pr /ic S9876543F /sym cough /diag cough syrup /d 22/03/2020 /t 22:22"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "y"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 22,
      "itskesin": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.txt"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 1,
      "itskesin": 7,
      "-": 18
    }
  }
]
