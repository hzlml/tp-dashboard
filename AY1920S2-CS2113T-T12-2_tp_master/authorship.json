[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    mainClassName \u003d \"seedu.happypills.HappyPills\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 2,
      "-": 39
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nyan Wun Paing | [Github](https://github.com/NyanWunPaing) | [Portfolio](docs/team/Nyan.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Janice| [Github](https://github.com/Janicetyy/tp) | [Portfolio](docs/team/janice.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yap Kesin | [Github](https://github.com/itskesin) | [Portfolio](docs/team/Kesin.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Siti Nadiah | [Github](https://github.com/sitinadiah25) | [Portfolio](docs/team/sitinadiah.md)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 1,
      "sitinadiah25": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "By: `CS2113T-T12-2` Since: `March 2020`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![Supported Java versions](https://img.shields.io/badge/Java-11-blue.svg) "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "![Supported OS](https://img.shields.io/badge/Supported%20OS-Windows|MacOS|Linux-yellow.svg) "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [1.1. Purpose](#11-purpose)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [1.2. Scope](#12-scope)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [2. Setting up](#2-setting-up)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [3. Design](#3-design)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.1. Architecture](#31-architecture)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.2. TextUi Component](#32-textui-component)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.3. Logic Component](#33-logic-component)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.4. Model Component](#34-model-component)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.5. Storage Component](#35-storage-component)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [4. Implementation](#4-implementation)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [4.1. Patient Details Feature](#41-patient-details-feature)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.1.1. Add Patient Details](#411-add-patient-details)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.1.2. Edit Patient Details](#412-edit-patient-details)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.1.3. Delete Patient Details](#413-delete-patient-details)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.1.4. List Patients](#414-list-patients)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.1.5. Retrieve Patient Details](#415-retrieve-patient-details)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [4.2. Patient Medical Records Feature](#42-patient-medical-records-feature)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [4.3. Appointment Scheduling Feature](#43-appointment-scheduling-feature)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.3.1. Add Appointment](#431-add-appointment)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.3.2. Edit Appointment](#432-edit-appointment)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.3.3. Delete Appointment](#433-delete-appointment)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.3.4. Mark Appointment as Done](#434-mark-appointment-as-done)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.3.5. List Appointments](#435-list-appointments)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        + [4.3.6. Find Appointments of Patient](#436-find-appointments-of-patient)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [4.4 Storage](#44-storage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [4.5 User Prompting](#45-user-prompting)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [4.6 Logging](#46-logging)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [5. Documentation](#5-documentation)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [6. Testing](#6-testing)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [7. Useful Links](#7-useful-links)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [Appendices](#appendices)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix A: Product Scope](#qppendix-a-product-scope)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix C: Non-functional Requirements](#appendix-c-non-functional-requirements)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix D: Glossary](#appendix-d-glossary)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [Appendix E: Instructions for Manual Testing](#appendix-e-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 1.1. Purpose"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This document contains the architecture and software design specifications for the application HappyPills."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 1.2. Scope"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This guide is mainly for developers, designers and software engineers that are working on and using HappyPills."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. Ensure that you have `Java 11` or later installed in your computer "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. Click [here](link to be added later?) to download the latest HappyPills JAR File"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 3. Design "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This section provides a high-level overview of HappyPills."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.1. Architecture"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![Architecture diagram](images/DG/ArchitectureDiagram.PNG \"Overview of the Application\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The **Architecture diagram** above explains the high-level design of HappyPills."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Main has one class called `HappyPills`.  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "It is responsible for:  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- At shut down: Shuts down the components."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- `TextUi`: The UI of the App."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `Logic`: The command executor."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `Model`: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `Storage`: Reads data from and writes data to the text file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The architecture of HappyPills is broken down into seven main classes:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `TextUi`: This class handles the User Interface of the application."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Parser`: This class handles the parsing and handling of user commands."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Command`: This class handles all the commands the application has."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Storage`: This class reads and writes data to and from text files for future use."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Patient`: This class manages the data of data type Patient in memory. "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `Appointment`: This class manages the data of data type Appointment in memory."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* `MedicalRecords`: This class manages the data of data type MedicalRecord in memory."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.2. TextUi Component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The `TextUi` component: "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* Executes user commands using the command component."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* Listens for changes and outputs messages accordingly from the Command component."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* Store or generate formatted messages used by the other components, for display to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* Consist of 6 sub-parts:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - PatientTextUi"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - AppointmentTextUi"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - PatientRecordTextUi"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - StorageTextUi"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - HelpTextUi"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - Messages"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The first three TextUi sub classes are categorized based on object type. Results and error messages for "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "commands executed on the relevant object are located here."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "StorageTextUi contains only strings used for logging of storage activities and format strings saved to"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "the text files, so as to recover objects on next startup."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HelpTextUi contains only the messages used in the help command, so as to provide guidance to the user on"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "the usage of the commands."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.3. Logic Component"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![Logic Diagram](images/DG/Logic.png)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The diagram above shows the logic flow of HappyPills."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. `HappyPills` uses the `Parser` to parse the commands given by the user."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. This results in a `Command` object being returned which is then executed by `HappyPills`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. The command executed will cause a change in the program (e.g. Patient added into program). "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. The result of the command is then passed back to the `TextUi` to display the message. "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.4. Model Component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![Model Diagram](images/DG/ModelDiagram.jpg)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.5. Storage Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The `Storage` class is called by the `HappyPills` class to handle the loading and saving of patient general details, "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "patient medical details and appointment schedule. "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The `loadPatientsFromFile()`, `loadPatientRecordFromFile()` and `loadAppointmentsFromFile()` methods are used "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "to read saved data from local files into the current session of HappyPills. "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "These data are parsed into corresponding"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "objects, and added to a map which will be returned to the main program, using `parsePatientFileContent()`,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "`parsePatientRecordFileContent` and `parseAppointmentFileContent` respectively."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The `writeAllToFile()` method will write the current list of object into the corresponding text file by stating"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "the predefined filepath. This method is called on every delete, done and edit command for the corresponding objects, "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "as well as by the `ExitCommand` class to confirm the storage of the current state of HappyPills."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The `addSingleItemToFile` appends an object as a new line the corresponding text file. This method is called only"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "for add commands executed on the various objects. "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This section describes some of the details on how the features of the program has been implemented. This section has been broken "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "down into five main features: `Patient Details`, `Patient Medical Records`, `Appointment Scheduling`, `Storage` and `Logging`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 4.1. Patient Details Feature"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The commands introduced in this feature include : `add`, `edit`, `list`, `delete`, `get`. "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The commands are implemented with HashMap and use NRIC as key and the Patient class as value."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The patient list feature is facilitated by PatientMap class which implements the following operations: "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - PatientMap #add(Patient patient) — This command adds the patient object into the patient list using the patient’s nric as key."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - PatientMap #remove(String nric) — This command removes the patient object from the existing patient list. "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    - PatientMap #hasKey(String nric) — This command checks whether the patient object resides in the existing patient list. "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "** Design Considerations ** "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "*Aspect: Data Structure of the Patient List* "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 1 (current choice): Hash Map"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: Allow faster lookup of patients’ information using the unique identifier (nric)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: Implementation is harder and may result in bugs if not implemented accurately."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 2: Array List"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: This would be easier to implement and retrieve the information."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: When a patient is deleted, all the patients in the patient list need to be checked. "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                This would cause the deletion to be very slow when there is a large number of patients in the list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.1.1 Add Patient Details"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user is able to add patients into the program to keep track of the patient\u0027s details. "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The command: "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    add patient /ic S7777777Z /n Alice /p 98765432 /d 01/01/2000 /b B+ /a Peanuts"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will add a patient with `NRIC` as S7777777Z with the following attributes: "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* name: `Alice`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* phone number: `98765432`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* date of birth: `01/01/2000`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* blood type: `B+`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* allergies: `Peanuts`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The activity diagram below summarises the process of executing an `add` command."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![Add Patient Sequence Diagram](images/DG/AddPatientSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `add patient /ic S7777777Z /n Alice /p 98765432 /d 01/01/2000 /b B+ /a Peanuts`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `PatientParser#parse()`. "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `PatientParser#parse()` will call its own method `PatientParser#parseAddCommand()`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. `PatientParser#parseAddCommand()` will first validate the attributes and then create an object `AddPatientCommand` "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "if the attributes are valid. "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. `HappyPills` then calls `AddPatientCommand.execute()` to execute the command. "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "6. In `AddPatientCommand.execute()`, a patient is added and the display message is returned."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.1.2 Edit Patient Details"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user is able to edit the details of a patient in the list of patients currently in the program. The command: "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    edit patient S7777777Z /a School"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will edit the patient\u0027s allergies to `School`. "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![Edit Patient Sequence Diagram](images/DG/EditPatientSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `edit patient S7777777Z /a School` "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `PatientParser#parse()`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `PatientParser#parse()` will then create an object `EditPatientCommand`. "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. `HappyPills` then calls `EditPatientCommand.execute()` method to execute the command. "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. In `EditPatientCommand.execute()`, the given attribute of the patient is edited and the display message is returned. "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.1.3. Delete Patient Details "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user can delete a patient from the list of patients currently in the program. The command: "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    delete patient S7777777Z "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will delete the patient with NRIC `S7777777Z`, if found. "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![Delete Patient Sequence Diagram](images/DG/DeletePatientSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `delete patient S7777777Z`. "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `PatientParser#parse()`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `PatientParser#parse()` will then create an object `DeletePatientCommand`. "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. `HappyPills` then calls `DeletePatientCommand.execute()` to execute the command. "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. In `DeletePatientCommand.execute()`, the respective patient is deleted and the display message is returned. "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.1.4. List Patients"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user is able to get a list of all the patients currently in the program."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The command: "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    list patient"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will list all the appointments in the `PatientMap`. "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `list patient`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `PatientParser#parse()`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `APatientParser#parse()` will create an object `ListPatientCommand`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. `HappyPills` then calls `ListPatientCommand.execute()` to execute the method. "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. In `ListPatientCommand.execute()`, it calls `TextUi.getPatientList()` which is then returned as the display message. "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.1.5. Retrieve Patient Details "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user can retrieve a patient\u0027s details. The command: "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    get patient S7777777Z"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will retrieve the details of the patient with NRIC `S7777777Z`. "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![Get Patient Sequence Diagram](images/DG/GetPatientSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `get patient S7777777Z` ."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `PatientParser#parse()`. "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `PatientParser#parse()` will create an object `GetPatientCommand`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. `HappyPills` then calls `GetPatientCommand.execute()` to execute the method. "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "6. `GetPatientCommand.execute()` calls `TextUi.getPatientSuccessMessage()` if a patient of NRIC `S7777777Z` can be found "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "or `TextUi.patientNotExists()` if no patient with the given NRIC exists in the program. "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "7. The respective `TextUi` methods will then display the message to the user accordingly."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 4.2 Patient Medical Records Features "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 4.3. Appointment Scheduling Feature "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.3.1. Add Appointment"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user is able to add appointments into the program to manage the appointment schedule. "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The command: "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    add appt /ic S7777777Z /d 01/04/2020 /t 12:00:00 /r Checkup "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will add an appointment with `NRIC` as S7777777Z with the following attributes: "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* appointment date: `01/04/2020`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* appointment time: `12:00:00`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* reason for appointment: `Checkup`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "An `appointmentId` will also be given when an appointment is successfully added. "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![Add Appointment Sequence Diagram](images/DG/AddAppointmentSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `add appt /ic S7777777Z /d 01/04/2020 /t 12:00:00 /r Checkup` ."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `AppointmentParser#parse()`. "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `AppointmentParser#parse()` will create an object `AddAppointmentCommand`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. `HappyPills` then calls `AddAppointmentCommand.execute()` to execute the method. "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "6. In `AddAppointmentCommand.execute()`, an appointment is added and the display message is returned."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.3.2. Edit Appointment "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The user can edit an appointment from the list of appointments currently in the program. The command:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    edit appt S9999999z 1 /d 02/20/2020"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "will edit the date of the appointment with appointment id `1`, to `02/02/2020`, if found. "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The following steps explains the sequence of events:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "1. The user enters edit command."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `AppointmentParser#parse()`."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "3. `AppointmentParser#parse()` will then create an object `EditAppointmentCommand`. "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "4. `HappyPills` then calls `EditAppointmentCommand.execute()` to execute the command. "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "5. In `EditAppointmentCommand.execute()`, the respective appointment is edited and "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "a display message is obtained by calling `AppointmentTextUi#editAppointmentSuccessMessage()`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "6. The display message is returned as a String until it reaches `HappyPills` where it would be printed. "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.3.3. Delete Appointment "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user can delete an appointment from the list of appointments currently in the program. The command: "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete appt S9999999z 1 "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will delete the appointment with appointment ID `1`, if found. "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `delete appt 1`. "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `AppointmentParser#parse()`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `AppointmentParser#parse()` will then create an object `DeleteAppointmentCommand`. "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. `HappyPills` then calls `DeleteAppointmentCommand.execute()` to execute the command. "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "5. In `DeleteAppointmentCommand.execute()`, the respective patient is deleted and the display message is returned. "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.3.4. Mark Appointment as Done "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The user can mark an appointment as done from the list of appointments currently in the program. The command: "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    done appt S9999999z 1 "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "will mark the appointment with appointment ID `1` as done, if found. "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "1. The user enters `done appt S9999999z 1`. "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `AppointmentParser#parse()`."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "3. `AppointmentParser#parse()` will then create an object `DoneAppointmentCommand`. "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "4. `HappyPills` then calls `DoneAppointmentCommand.execute()` to execute the command. "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "5. In `DoneAppointmentCommand.execute()`, the respective appointment is marked as done and "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "a display message is obtained by calling `AppointmentTextUi#doneAppointmentSuccessMessage()`."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "6. The display message is returned as a String until it reaches `HappyPills` where it would be printed. "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.3.5. List Appointments "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user is able to get a list of all the appointments currently in the program."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The command: "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    list appt"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will list all the appointments in the `AppointmentMap`. "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![List Appointment Sequence Diagram](images/DG/ListAppointmentSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. The user enters `list appt`."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `AppointmentParser#parse()`."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. `AppointmentParser#parse()` will create an object `ListAppointmentCommand`."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "4. `HappyPills` then calls `ListAppointmentCommand.execute()` to execute the method. "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "5. In `ListAppointmentCommand.execute()`, it calls `TextUi.getAppointmentList()` which is "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "then returned as the display message. "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 4.3.6. Find Appointments of Patient"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The user is able to find all the appointments a specific patient has."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The command: "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    find appt S7777777Z"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "will list all the appointments that the patient with NRIC S7777777Z has. "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![Find Appointment Sequence Diagram](images/DG/FindAppointmentSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "The following steps explains the sequence of events: "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "1. The user enters `find appt S7777777z`. "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "2. `HappyPills` calls `Parser#parse()` which then calls `AppointmentParser#parse()`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "3. `AppointmentParser#parse()` will then create an object `FindAppointmentCommand`. "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "4. `HappyPills` then calls `FindAppointmentCommand.execute()` to execute the command. "
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "5. In `FindAppointmentCommand.execute()`, the respective appointment is retrieved and "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "a display message is obtained by calling `AppointmentTextUi#findAppointmentSuccessMessage()`."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "6. The display message is returned as a String until it reaches `HappyPills` where it would be printed. "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 4.4. Storage"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This is an internal feature of the program, implemented to allow users to recover information even after HappyPills is "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "closed in the terminal. This is achieved by storing all relevant information in a text file using a structured format."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " The current methods implemented in this class and a brief description of each method:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `writeAllToFile` — writes the entire list of object to the specified text file."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `addSingleItemToFile` — adds a new object as a single string to the end of specified text file."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `loadPatientFromFile` — access the patient file and retrieve all information in the file as strings."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `parsePatientFileContent` — process line-by-line to create a patient object and add to the shared patient map."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `loadAppointmentFromFile` — access the patient file and retrieve all information in the file as strings."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `parseAppointmentFileContent` — process line-by-line to create an appointment object and add to the "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                                   shared appointment map."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `loadPatientRecordFromFile` — access the patient record file and retrieve all information in the file as strings."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " - `parsePatientRecordFileContent` — process line-by-line to create a patient record object and add to the shared patient map."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Implementation** "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " The following diagram shows how each command interacts with the other classes."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " *writeAllToFile*"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  This storage method : `writeAllToFile`, gets a single formatted string from TextUi, containing details of all the "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  objects in a map. Each class object would have a class method to construct a toSave() string, and "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  each object is stored as a single line within the text file. Hence, the toSave() string is constructed with  "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  \u0027|\u0027 as a divider, and a newline to indicate the end of the object. The formatted string is a concatenation of all "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  the toSave() strings of the objects in the list. `writeAllToFile` then writes the entire string into the text file, "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  overwriting any existing strings in the file."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  This is implemented for edit and delete commands as they cannot be appended."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  ![writing](images/DG/STORAGE/StorageWriteAll.png)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " *addSingleItemToFile*"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " Each class object would have a class method to construct a toSave() string, and each object is stored as a single line"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " within the text file. Hence, the toSave() string is constructed with  \u0027|\u0027 as a divider, and a newline to indicate "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " the end of the object.  This storage method : addSingleItemToFile, uses the toSave() string of the object "
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " it needs to save, by appending it to the back of the text file. "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " This provides improved performance for add commands as compared to using writeAllToFile(), as less strings need "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " to be retrieved."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " ![saving](images/DG/STORAGE/StorageSave.png)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " *loading and parsing file content to HappyPills*"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Loading and parsing methods are separated by class types. Each text file in HappyPills represent a single class."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "For example, `loadingPatientsFromFile` retrieves the entire string from the patient file and uses "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "`parsePatientFileContent` to convert each line into a patient object and adds it back to the patient map. "
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "`loadAppointmentFromFile` and `parseAppointmentFileContent` does the same with the appointment file."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " ![loading](images/DG/STORAGE/StorageLoad.png)"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Aspect: Saving method"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Alternative 1 was chosen as fewer checks means that the program is less prone to exception, especially"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "so if the checks are confusing to implement. This would put lesser risk on the user experience for now."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 1 (current choice): Single object stored into the same file"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: Fewer checks required to identify class of the string, parsing is easier."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: Delete and update operation may take a long time if the string is very long"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 2: Store each patient as an individual text file, along with all its relevant class objects. "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                       A list with all the patient’s NRIC will also be stored for referencing."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: Delete and edit operation on a patient will only affect his/her file, and the referencing list."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: More checks are requires to identify class of the string"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "*Aspect: Updating deletion/edit* "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Alternative 1 was chosen for now as the program is relatively new, and is more likely to be subjected to unexpected exceptions."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 1 (current choice): Upon every delete/edit operation, update the relevant text file"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: All deletions are updated in the relevant text files immediately and will not be affected by any unexpected termination of the program."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: In the event that there is a large amount of deletion, it could be time-consuming for the user and memory-intensive on the machine."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Alternative 2: Saving the delete/edit operation to a list, then process it before the exit of the program"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Pros: Delay deletion time cost so that the use of the program is faster and smoother during time of use."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "          Cons: If the program was to terminate unexpectedly, the deletion may not be reflected in the respective files."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### 4.5 User Prompting "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.5.1 Description"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "When the user adds a patient’s details, the input could be missing a few compulsory fields. Instead of prompting the user to re-enter the entire input, HappyPills will only ask the user for the missing details."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The user may choose to abort the command because of a lack of knowledge of the compulsory field or provide the requested details. The add command will only be executed when all the compulsory fields are provided. "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.5.2 Implementation "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Representing a prompt"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The prompting mechanism uses prefix to represent individual "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.5.3 Design Consideration"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Representing a prompt"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The prompting mechanism uses tag such as `/ic[NRIC]` to represent individual field in patient\u0027s information. A list of tags is use to pass to the `Parser` which contains:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        - Parser #addCommandParser(String input) — This method break down user input base on tags such as (/ic, /p)"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Passing the prompts"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Given below is an example scenario where the user command has missing compulsory fields"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 1: The `HappyPills` pass the user\u0027s command to `Parser`, which finds one or more missing compulsory fields."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 2: The `Parser` call `Parser#parseAddCommand`, which prompt the corresponding missing field back to the user. And wait for user response"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 3: The new user input was than check again by `Parser#parseAddCommand` and repeat the process until all the compulsory fields is added correctly."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 4: `Parser#parseAddCommand` will ask for conformation before passing the correct input into `AddCommand`."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 5: `HappyPills` will execute the command."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Prompt handling method"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 (current choice): The `HappyPill` functions is unaware of prompting. The `Parser` keeps track of the incomplete command and sends back as `addCommand` objects."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: Decrease coupling between `HappyPill` and `Parser` components"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: `HappyPill` has no way to know if it is currently handling prompting, so it cannot abort prompts, `Parser` return IncorrectCommand to act as abort."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 2: The `Parser` componetnt keeps track of the incomplete command and throws an exception containing promts to the `HappyPills`."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: Greater flexibility for `HappyPill` to handle prompt, e.g. aborting"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: A new class is required to keep track of the command entered, rather than simply acting as a bridge between the `Command` and `Parser` sub-component. Increase number of pontential points of failure and decrease maintainability."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 was chosen as it decrease coupling between components. And reduces major failure during v1."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        P.S subject to change in v2."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### 4.6 Logging "
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 5. Documentation "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 6. Testing "
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 7. Useful links"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [About Us](AboutUs.md)"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## Appendices "
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix A: Product Scope "
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Our product is targeted at users who:"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - has a need to record significant number of patients\u0027 information"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - want to keep patients\u0027 information organised"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - prefer desktop apps over other types"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - can type fast"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - prefer typing over mouse input"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   "
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "   - prefer CLI apps over GUI apps"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Value proposition: Note taking application built for doctors to manage notes faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix B: User Stories "
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v1.0|Doctor|add Patient\u0027s details|view their information in their subsequent visits|"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v1.0|Doctor|have a quick overview of a list of all patients|check for their detailed information|"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "itskesin"
        },
        "content": "|v1.0|Doctor|add Patient\u0027s details|view their information in their subsequent patientRecords.|"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "|v1.0|Doctor|have a quick overview of a list of all patients|check for their detailed information.|"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "|v1.0|Doctor|retrieve my patient\u0027s detailed information|check for his/her allergies and provide a more accurate diagnosis|"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "|v1.0|Doctor|edit a particular patient\u0027s information|the most up-to-date details in our patient records|"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|ensure that Patient\u0027s details are accurate before I add into the patient list|so that I can rectify mistakes earlier|"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|schedule appointments with my patients|ensure that I will prescribe enough medicine until the next appointment|"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|note down the prescription that I gave my patients|know what side effects are to be expected (based on the patient\u0027s current condition)|"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|record down the symptoms of my patients|check for any persistent health condition|"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "|v2.0|Doctor|add Patient\u0027s medical records|view the previous reasons for doctor\u0027s visits|"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "itskesin"
        },
        "content": "|v2.1|Doctor|reduce the number of typing errors|ensure all information recorded are accurate|"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix C: Non-functional Requirements"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. A user with above average typing speed should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "3. Should be able to hold up to 1000 patients\u0027 information without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "itskesin"
        },
        "content": "4. Should be able to display large amount of information quickly. "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix D: Glossary "
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "*Mainstream OS*"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Appendix E: Instructions for Manual Testing"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Given below are instructions to test the application manually."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003eThese instructions only provide a starting point for tests to work on; testers are expected to do more exploratory testing.\u003c/td\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## Useful links:"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [About Us](AboutUs.md)"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "------"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### 4.3. User Prompting "
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.2.1 Description"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "When the user adds a patient’s details, the input could be missing a few compulsory fields. Instead of prompting the user to re-enter the entire input, HappyPills will only ask the user for the missing details."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The user may choose to abort the command because of a lack of knowledge of the compulsory field or provide the requested details. The add command will only be executed when all the compulsory fields are provided. "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.2.2 Implementation "
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Representing a prompt"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The prompting mechanism uses prefix to represent individual "
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 4.2.3 Design Consideration"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Representing a prompt"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "The prompting mechanism uses tag such as `/ic[NRIC]` to represent individual field in patient\u0027s information. A list of tags is use to pass to the `Parser` which contains:"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        - Parser #addCommandParser(String input) — This method break down user input base on tags such as (/ic, /p)"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Passing the prompts"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Given below is an example scenario where the user command has missing compulsory fields"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 1: The `HappyPills` pass the user\u0027s command to `Parser`, which finds one or more missing compulsory fields."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 2: The `Parser` call `Parser#parseAddCommand`, which prompt the corresponding missing field back to the user. And wait for user response"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 3: The new user input was than check again by `Parser#parseAddCommand` and repeat the process until all the compulsory fields is added correctly."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 4: `Parser#parseAddCommand` will ask for conformation before passing the correct input into `AddCommand`."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Step 5: `HappyPills` will execute the command."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "##### Aspect: Prompt handling method"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 (current choice): The `HappyPill` functions is unaware of prompting. The `Parser` keeps track of the incomplete command and sends back as `addCommand` objects."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: Decrease coupling between `HappyPill` and `Parser` components"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: `HappyPill` has no way to know if it is currently handling prompting, so it cannot abort prompts, `Parser` return IncorrectCommand to act as abort."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            "
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 2: The `Parser` componetnt keeps track of the incomplete command and throws an exception containing promts to the `HappyPills`."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Pros: Greater flexibility for `HappyPill` to handle prompt, e.g. aborting"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          Cons: A new class is required to keep track of the command entered, rather than simply acting as a bridge between the `Command` and `Parser` sub-component. Increase number of pontential points of failure and decrease maintainability."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "          "
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Alternative 1 was chosen as it decrease coupling between components. And reduces major failure during v1."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        P.S subject to change in v2."
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 122,
      "Janicetyy": 150,
      "sitinadiah25": 425,
      "itskesin": 26,
      "-": 18
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "# HappyPills"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "HappyPills is a note-taking application that allows doctors to take down notes using Command Line Interface (CLI)."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "The application replaces all physical papers and is highly optimised for fast typing users.    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "If you can type fast, HappyPills can help to manage patients’ records **faster** than traditional Graphical User Interface (GUI) applications.  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "All notes are **neatly organised** in HappyPills so that all your important information are **safely stored**.  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Say **HELLO** to neater desks and time-saving electronic notes with HappyPills! :relaxed:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## Useful links:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 4,
      "sitinadiah25": 5,
      "-": 4
    }
  },
  {
    "path": "docs/UserGuide-Appointment.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [3.4. Appointment Scheduling Commands](#34-appointment-scheduling-commands)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.1. Add Appointment: `add appt`](#341-add-appointment-add-appt)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.2. Edit Appointment: `edit appt`](#342-edit-appointment-edit-appt)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.3. Delete Appointment: `delete appt`](#343-delete-appointment-delete-appt)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.4. Mark Appointment as Done: `done appt`](#344-mark-appointment-as-done-done-appt)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.5. List All Appointments: `list appt`](#345-list-all-appointments-list-appt)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.4.6. Find Patient\u0027s Appointments: `find appt`](#346-find-patients-appointments-find-appt)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003cdiv align\u003d\"left\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide.html\"\u003e \u0026#8592; Back to Main \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.4. Appointment Scheduling Commands "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HappyPills helps to store appointment schedules. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.1. Add Appointment: `add appt`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Add a new appointment for the patient with the specified NRIC. An appointmentID will be allocated to the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "patient automatically."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     add appt /ic NRIC /d DATE /t TIME /r REASON"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add appt /ic S1234567F /d 01/02/2020 /t 12:00:00 /r sick"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![addSuccess](images/UG/APPT/AddAppt.png)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003eConfirm appointment details are correct by typing \"y\" or \"Y\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![addConfirmSuccess](images/UG/APPT/confirmAddAppt.png)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.2. Edit Appointment: `edit appt`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Edit information of the appointment with the specified appointmentID(apptID)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " The appointment should belong to the patient with the specified NRIC. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     edit appt NRIC apptID [Options][editedInput]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     Options:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         /d edit date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         /t edit time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         /r edit reason"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    edit appt S1234567F 5 /d 12/02/2020"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![editSuccess](images/UG/APPT/EditAppt.png)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.3. Delete Appointment: `delete appt`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Delete an appointment of a patient as specified by the NRIC and appointmentID(apptID). "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    delete appt NRIC apptID"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete appt S1234567F 6"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![deleteSuccess](images/UG/APPT/DeleteAppt.png)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.4. Mark Appointment as Done: `done appt` "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Mark the appointment with the specified appointmentID(apptID) as done if arrived."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " The appointment should belong to the patient with the specified NRIC. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     done appt NRIC apptID"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    done appt S1234567F 5 "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![doneSuccess](images/UG/APPT/DoneAppt.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.5. List All Appointments: `list appt` "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "List all the existing appointments in the clinic. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "This can be used as a method to check for appointmentID."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     list appt"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![ListSuccess](images/UG/APPT/ListAppt.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.4.6. Find Patient\u0027s Appointments: `find appt`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Check all appointments that the patient with the specified NRIC has. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "This can be used as a method to check for appointmentID."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     find appt NRIC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "         "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    find appt S1234567F"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![findSuccess](images/UG/APPT/FindAppt.png)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 124,
      "sitinadiah25": 5,
      "itskesin": 7
    }
  },
  {
    "path": "docs/UserGuide-Patient.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [3.2. General Patient Information Commands](#32-general-patient-information)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.1. Add Patient: `add patient`](#321-add-patient-add-patient)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.2. Edit Patient: `edit patient`](#322-edit-patient-edit-patient)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.3. Delete Patient: `delete patient`](#323-delete-patient-delete-patient)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.4. List All Patients: `list patient`](#324-list-all-patients-list-patient)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + [3.2.5. Retrieve a Patient\u0027s Information: `get patient`](#325-retrieve-a-patients-information-get-patient)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003cdiv align\u003d\"left\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide.html\"\u003e \u0026#8592; Back to Main \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003cdiv align\u003d\"right\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide-Records.html\"\u003e \u0026#8594; Go to Medical Records \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.2. General Patient Information"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HappyPills can help users to manage their patients\u0027 information easily. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.1. Add Patient: `add patient`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "This feature allows you to add more patients into the existing patients\u0027 list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "HappyPills will prompt you if there are any missing fields and ask for confirmation before adding the patient\u0027s information into the patients\u0027s list.  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "You can also add a new patient with the specified parameters in any order."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "###### Usage Example:   "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add patient /ic NRIC /n NAME /p PHONE_NUMBER /dob DOB /b BLOOD_TYPE /a[ALLERGIES] /rm[REMARKS]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    add patient /ic S9999999Z /n Bob /dob 12-11-98 /b A+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![MissingInput](images/UG/PATIENT/MissingAddPatientInput.PNG \"Missing Add Ouput\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e Enter `/p 999` to add missing field."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eHappyPills will prompt you for missing details that are important.\u003c/td\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e   ![CheckConfirmAdd](images/UG/PATIENT/addConfirm.PNG \"Add Confirmation Ouput\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e Enter `y` to confirm."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e Entering \u003ccode\u003en\u003c/code\u003e will not save the patients\u0027 information when HappyPills prompt you for confirmation.\u003c/td\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    \u003c!--This is a comment. Patient\u0027s information will be discarded if \u003ccode\u003en\u003c/code\u003e is entered.--\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e  ![SuccessfulAdd](images/UG/PATIENT/SuccessfullyAddedPatientInformation.PNG \"Successfully Added Ouput\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.2. Edit Patient: `edit patient`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Edit information of the patient with the specified NRIC. "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    edit patient NRIC /n[NAME] /p[PHONE_NUMBER] /dob[DOB] /b[BLOOD_TYPE] /a[ALLERGIES] /rm[REMARKS]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    edit patient S0618 /p9111"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![editPatientOutput](images/UG/PATIENT/EditCommandOutput.PNG \"Edit Patient Ouput\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e NRIC \u003ccode\u003ecannot\u003c/code\u003e be edited because it is what uniquely identifies the patient.\u003c/td\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    \u003c!--This is a comment. NRIC cannot be edited.--\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.3. Delete Patient: `delete patient`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Delete a patient as specified by the NRIC. "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete patient NRIC"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    delete patient S1234567F"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![confirmDelete](images/UG/PATIENT/ConfirmationDeletion.PNG \"Delete Confirmation Ouput\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e Enter `y` to confirm."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e HappyPills will \u003ccode\u003eprompt for confirmation\u003c/code\u003e before deleting patient in the patient list. \u003c/td\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e    "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e  ![SuccessfulDelete](images/UG/PATIENT/DeleteSuccessful.PNG \"Successfully Deleted Ouput\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#9888; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e Upon \u003ccode\u003esuccessful deletion \u003c/code\u003e, patient\u0027s information will not be able to be retrieved again. \u003c/td\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.4. List All Patients: `list patient`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Displays all the patients in the patient list. "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    list patient"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![ListPatient](images/UG/PATIENT/ListPatientOutput.PNG \"List Ouput\")  "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.2.5. Retrieve a Patient\u0027s Information: `get patient`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Retrieve details of the patient with the specified NRIC."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    get patient NRIC"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    get patient S9876543Z"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![getpatient](images/UG/PATIENT/GetPatientOutput.PNG \"Get Ouput\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 130,
      "itskesin": 39
    }
  },
  {
    "path": "docs/UserGuide-Records.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "* [3.3. Patient Medical Records Commands](#33-patient-medical-information-commands)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + [3.3.1. Add Patient Records : `add pr`](#331-add-patient-records-add-pr)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + [3.3.2. List Patient Records : `list pr`](#332-list-patient-records-list-pr)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + [3.3.3. Find Patient Records : `find pr`](#333-find-patient-records-find-pr)    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + [3.3.4. Edit Patient Records : `edit pr`](#334-edit-patient-records-edit-pr)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + [3.3.5. Delete Patient Records : `delete pr`](#335-delete-patient-records-delete-pr)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003cdiv align\u003d\"left\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide.html\"\u003e \u0026#8592; Back to Main \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003cdiv align\u003d\"right\"\u003e\u003ca href\u003d\"https://ay1920s2-cs2113t-t12-2.github.io/tp/UserGuide-Appointment.html\"\u003e \u0026#8594; Go to Appointments \u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### 3.3. Patient Medical Records "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### 3.3.1. Add Patient Records: `add pr`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Add patient\u0027s medical records to the database, to support the diagnosis and to justify the treatment."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS /d Date /t Time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    add pr /ic S0618 /sym ddd /diag dsfs /d 22/02/1992 /t 22:22:22"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![addPR](images/UG/PR/AddPR.PNG \"addPR\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e Enter `y` to confirm."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![cfmAddPR](images/UG/PR/addprcfm.PNG \"cfmAddPR\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### 3.3.2. List Patient Records: `list pr`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Displays all the patients record for a particular patient. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    list pr NRIC"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    list pr S0618"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![listPR](images/UG/PR/listpr.PNG \"list PR output\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eIf the patient have no past record command. The message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![listPR not found](images/UG/PR/listprfail.PNG \"list PR not found\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.3. Find Patient Records: `find pr`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Check all patient reports that the patient with the specified NRIC has. This can be used"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "to check for the index used for the other commands."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    find pr NRIC INDEX"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    find pr s0618 1"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![findPR](images/UG/PR/findpr.PNG \"find PR output\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eIf the record is not found with the given input. The message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![PR not found](images/UG/PR/prEmpty.PNG \"PR not found\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.4. Edit Patient Records: `edit pr`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Edit patient\u0027s medical records when there is any error in previous inputs."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    edit pr NRIC INDEX /sym [SYMPTOMS] /diag [DIAGNOSIS] /d [DATE] /t [TIME]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    edit pr s0618 1 /sym fever"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![](images/UG/PR/editprsuccess.PNG \"help output\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eIf the record is not found with the given input. The message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![](images/UG/PR/prEmpty.PNG \"help output\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.3.5. Delete Patient Records: `delete pr`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Delete patient\u0027s medical records based on the given NRIC and the index of records  . "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    delete pr NRIC INDEX"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![Delete PR](images/UG/PR/deleteprsuccess.PNG \"Delete PR output\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   \u003ctd\u003eIf the record is not found with the given input. The message below will be printed instead.\u003c/td\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![PR not found](images/UG/PR/prEmpty.PNG \"Delete PR not found\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 80,
      "Janicetyy": 77,
      "sitinadiah25": 7,
      "itskesin": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [2. Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    * [3.1. General Commands](#31-general-commands)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.1.1. View help: `help`](#311-view-help-help)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.1.2. Exit program: `exit`](#312-exit-program-exit)        "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [3.2. General Patient Information Commands](UserGuide-Patient.md) "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [3.3. Patient Medical Records Commands](UserGuide-Records.md)    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    * [3.4. Appointment Scheduling Commands](UserGuide-Appointment.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [4. Command Summary](#4-command-summary)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- [5. Useful Links](#5-useful-links)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 1. Introduction "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills is a note-taking application that allows doctors to take down notes using Command Line Interface (CLI)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The application replaces all physical papers and is highly optimised for fast typing users.    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "If you can type fast, HappyPills can help to manage patients’ records **faster** than traditional Graphical User Interface (GUI) applications.  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "All notes are **neatly organised** in HappyPills so that all your important information are **safely stored**.  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Say **HELLO** to neater desks and time-saving electronic notes with HappyPills! :relaxed:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Installation**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Ensure that you have `Java 11` installed in your computer "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "2. Click [here](https://github.com/AY1920S2-CS2113T-T12-2/tp/releases) to download the HappyPills JAR File"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. Copy the file to the folder you want to use as your home folder for HappyPills."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**For all users**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Open Command Prompt in the directory where the JAR file is located."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. Run the command `java -jar happypills.jar`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![Start of Application](images/UG/StartOfApplication.PNG \"Start of App\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. When you start the application for the first time, you can type `help` to check all the available commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "4. Refer to [here](#3-features) for detailed instructions on how to use each command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills have three main features: `Patient Details`, `Patient Records` and `Appointment Scheduling`. "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`Patient Details` notes down the general details of the patient such as their NRIC, name, phone number, date of birth, blood type and allergies. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`Patient Records` are previous visits to the doctors and the outcomes of it including their symptoms, the diagnosis and when the visit occurred. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "`Appointment Scheduling` helps the users schedule future appointments with their patients. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "These features come together to help users manage their patients\u0027 information and give their patients better service by being able to retrieve their patients\u0027 information quickly and easily while also being able to note down details of the visit as accurately as possible. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This section will elaborate more on how to use these features in HappyPills. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Command Format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Words in `UPPER_CASE` are the parameters to be supplied by you **e.g.** in `add patient \\ic NRIC`, `NRIC` is the input required from you."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- In case a tag is used multiple times in a command then its first instance will be taken and the remaining instances will be treated as invalid input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- Items in square brackets are optional **e.g.** `/ic NRIC /a [ALLERGIES]` can be used as `/ic S1234567F` or as `/ic S1234567F /a Dust`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Parameters can be in any order **e.g.** if the command requires `/n NAME /ic NRIC` or `/ic NRIC /n NAME `"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- All commands are case insensitive **e.g.** `help` or `HELP` or `HeLp` will display all the commands and their usage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Legend For Tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/n` → Patient\u0027s Name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/ic` → Patient\u0027s NRIC"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/p` → Patient\u0027s Phone Number"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/dob` → Patient\u0027s Date of birth"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/b` → Patient\u0027s Blood type"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/a` → Patient\u0027s Allergies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/rm` → Patient\u0027s Remarks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/t` → Time of the Patient\u0027s appointment"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/d` → Date of the Patient\u0027s appointment"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/r` → Reason for the Patient\u0027s appointment"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `/sym` → Patient\u0027s Symptoms"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- `/diag` → Patient\u0027s Diagnosis"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### 3.1. General Commands "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.1.1. View Help: `help`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Displays the list of commands and their syntax."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Usage example:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![help](images/UG/HelpOutput.PNG \"help output\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003eThe help command is split into four different sections \u003ccode\u003e(highlighted by the boxes)\u003c/code\u003e.\u003c/td\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#### 3.1.2. Exit program: `exit`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Exits the program and ends the current session. "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![help](images/UG/Exit.PNG \"exit output\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### [3.2. General Patient Information Commands](UserGuide-Patient.md) "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### [3.3. Patient Medical Records Commands](UserGuide-Records.md)    "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### [3.4. Appointment Scheduling Commands](UserGuide-Appointment.md)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### General Patient Information"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Add a patient\u0027s information | `add patient /ic NRIC /n NAME /p PHONE_NUMBER /dob DOB /b BLOOD_TYPE /a [ALLERGIES] /rm [REMARKS]`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit a patient\u0027s information |  `edit patient NRIC /n\u003cNAME\u003e or /p\u003cPHONE_NUMBER\u003e or /dob\u003cDOB\u003e or /b\u003cBLOOD_TYPE\u003e or /a\u003cALLERGIES\u003e or /rm\u003cREMARKS\u003e`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "list all patients | `list patient`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Retrieve a patient\u0027s information | `get patient NRIC`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### Patient Medical Records"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Add a Patient Record |`add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS /d DATE /t TIME`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " List all Patient Records |`list pr NRIC`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Find a Patient Record|`find pr NRIC INDEX`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Edit a Patient Record |`edit pr NRIC INDEX`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " Delete a Patient Record | `delete pr NRIC INDEX`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "#### Appointments"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Add an appointment | `add appt /ic NRIC /d DATE /t TIME /r REASON`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Edit an appointment | `edit appt NRIC /d DATE /t TIME /r REASON`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Delete an appointment | `delete appt NRIC APPT_ID`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Mark an appointment as done | `done appt NRIC APPT_ID`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "List all appointments | `list appt`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Find an appointment| `find appt NRIC`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## 5. Useful links:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "* [About Us](AboutUs.md)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " [\u0026#8593; Return to Top](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 31,
      "Janicetyy": 3,
      "sitinadiah25": 58,
      "itskesin": 75,
      "-": 2
    }
  },
  {
    "path": "docs/UserGuide2.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "# HappyPills - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": "By: `Team CS2113T-T12-2` Since `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [2. Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [3.1. General Commands](#31-general-commands)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.1.1. View help: `help`](#311-view-help-help)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.1.2. Exit program: `exit`](#312-exit-program-exit)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [3.2. General Patient Information](#32-general-patient-information)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.2.1. Add Patient: `add patient`](#321-add-patient-add-patient)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.2.2. Edit Patient: `edit patient`](#322-edit-patient-edit-patient)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.2.3. Delete Patient: `delete patient`](#323-delete-patient-delete-patient)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.2.4. List All Patients: `list patient`](#324-list-all-patients-list-patient)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.2.5. Retrieve a Patient\u0027s Information: `get patient`](#325-retrieve-a-patients-information-get-patient)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [3.3. Patient Medical Records](#33-patient-medical-information-commands)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.3.1. Add Patient Records : `add pr`](#331-add-patient-records-add-pr)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.3.2. Edit Patient Records : `edit pr`](#332-edit-patient-records-edit-pr)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.3.3. Delete Patient Records : `delete pr`](#333-delete-patient-records-delete-pr)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.3.4. List Patient Records : `list pr`](#334-list-patient-records-list-pr)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.3.5. Find Patient Records : `find pr`](#335-find-patient-records-find-pr)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    * [3.4. Appointments](#34-appointment-scheduling-commands)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.4.1. Add Appointment: `add appt`](#341-add-appointment-add-appt)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.4.2. Edit Appointment: `edit appt`](#342-edit-appointment-edit-appt)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.4.3. Delete Appointment: `delete appt`](#343-delete-appointment-delete-appt)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.4.4. Mark Appointment as Done: `done appt`](#344-mark-appointment-as-done-done-appt)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.4.5. List All Appointments: `list appt`](#345-list-all-appointments-list-appt)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        + [3.4.6. Find Patient\u0027s Appointments: `find appt`](#346-find-patients-appointments-find-appt)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "      "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * [3.5. Saving Data](#)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [4. Command Summary](#4-command-summary)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- [5. Useful Links](#5-useful-links)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 1. Introduction "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills is a note-taking application that allows doctors to take down notes using Command Line Interface (CLI)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "The application replaces all physical papers and is highly optimised for fast typing users.    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "If you can type fast, HappyPills can help to manage patients’ records **faster** than traditional Graphical User Interface (GUI) applications.  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "All notes are **neatly organised** in HappyPills so that all your important information are **safely stored**.  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Say **HELLO** to neater desks and time-saving electronic notes with HappyPills! :relaxed:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Installation**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Ensure that you have `Java 11` installed in your computer "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. Click [here](https://github.com/AY1920S2-CS2113T-T12-2/tp/releases) to download the HappyPills JAR File"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. Copy the file to the folder you want to use as your home folder for HappyPills."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**For all users**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "1. Open Command Prompt in the directory where the JAR file is located."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "2. Run the command `java -jar happypills.jar`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "![Start of Application](images/UG/StartOfApplication.PNG \"Start of App\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "3. When you start the application for the first time, you can type `help` to check all the available commands."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "4. Refer to [here](#3-features) for detailed instructions on how to use each command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Command Format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Words in `UPPER_CASE` are the parameters to be supplied by you **e.g.** in `add patient \\ic NRIC`, `NRIC` is the input required from you."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- In case a tag is used multiple times in a command then its first instance will be taken and the remaining instances will be treated as invalid input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Items in square brackets are optional **e.g.** `/ic NRIC /a [ALLERGIES]` can be used as `/ic S1234567F` or as `/ic S1234567F /a Dust`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Parameters can be in any order **e.g.** if the command requires `/n NAME /ic NRIC` or `/ic NRIC /n NAME `"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- All commands are case insensitive **e.g.** `help` or `HELP` or `HeLp` will display all the commands and their usage."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Legend For Tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/n` → Patient\u0027s Name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/ic` → Patient\u0027s NRIC"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/p` → Patient\u0027s Phone Number"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/dob` → Patient\u0027s Date of birth"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/b` → Patient\u0027s Blood type"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/a` → Patient\u0027s Allergies"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/rm` → Patient\u0027s Remarks"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/t` → Time of the Patient\u0027s appointment"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/d` → Date of the Patient\u0027s appointment"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/r` → Reason for the Patient\u0027s appointment"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/sym` → Patient\u0027s Symptoms"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- `/diag` → Patient\u0027s Diagnosis"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 3.1. General Commands "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.1.1. View Help: `help`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Displays the list of commands and their syntax."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Usage example:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![help](images/UG/HelpOutput.PNG \"help output\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  \u003ccol width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003ctr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003e\u003cspan\u003e \u0026#8505; \u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "   \u003ctd\u003eThe help command is split into four different sections \u003ccode\u003e(highlighted by the boxes)\u003c/code\u003e.\u003c/td\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": " \u003c/tr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.1.2. Exit program: `exit`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Exits the program and ends the current session. "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![Exit](images/UG/Exit.PNG \"Exit Ouput\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 3.2. General Patient Information"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills can help users to manage their patients\u0027 information easily. "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.2.1. Add Patient: `add patient`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itskesin"
        },
        "content": "This feature allows you to add more patients into the existing patients\u0027 list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills will prompt you if there are any missing fields and ask for confirmation before adding the patient\u0027s information into the patients\u0027s list.  "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itskesin"
        },
        "content": "You can also add a new patient with the specified parameters in any order."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itskesin"
        },
        "content": "###### Usage Example:   "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    add patient /ic NRIC /n NAME /p PHONE_NUMBER /dob DOB /b BLOOD_TYPE /a[ALLERGIES] /rm[REMARKS]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    add patient /ic S9999999Z /n Bob /dob 12-11-98 /b A+"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e***Expected output:***"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![MissingInput](images/UG/PATIENT/MissingAddPatientInput.PNG \"Missing Add Ouput\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e Enter `/p 999` to add missing field."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itskesin"
        },
        "content": ":information_source: | HappyPills will prompt you for missing details that are important."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itskesin"
        },
        "content": "---------------------|-------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e   ![CheckConfirmAdd](images/UG/PATIENT/addConfirm.PNG \"Add Confirmation Ouput\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e Enter `y` to confirm."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itskesin"
        },
        "content": ":information_source: | Entering `n` will not save the patients\u0027 information when HappyPills prompt you for confirmation."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itskesin"
        },
        "content": "---------------------|--------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e    "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e  ![SuccessfulAdd](images/UG/PATIENT/SuccessfullyAddedPatientInformation.PNG \"Successfully Added Ouput\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.2.2. Edit Patient: `edit patient`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit information of the patient with the specified NRIC. "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    edit patient NRIC /n[NAME] /p[PHONE_NUMBER] /dob[DOB] /b[BLOOD_TYPE] /a[ALLERGIES] /rm[REMARKS]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    edit patient S0618 /p9111"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![editPatientOutput](images/UG/PATIENT/EditCommandOutput.PNG \"Edit Patient Ouput\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itskesin"
        },
        "content": ":information_source: | NRIC cannot be edited because it is what uniquely identifies the patient."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "itskesin"
        },
        "content": "---------------------|--------------------------------------------------------------------------"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.2.3. Delete Patient: `delete patient`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Delete a patient as specified by the NRIC. "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    delete patient NRIC"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    delete patient S1234567F"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![confirmDelete](images/UG/PATIENT/ConfirmationDeletion.PNG \"Delete Confirmation Ouput\")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e Enter `y` to confirm."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "itskesin"
        },
        "content": ":information_source: | HappyPills will prompt for confirmation before deleting patient in the patient list.  "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "itskesin"
        },
        "content": "---------------------|-------------------------------------------------------------------"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e    "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e  ![SuccessfulDelete](images/UG/PATIENT/DeleteSuccessful.PNG \"Successfully Deleted Ouput\")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "itskesin"
        },
        "content": ":heavy_exclamation_mark: | Upon successful deletion, patient\u0027s information will not be able to be retrieved again. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "itskesin"
        },
        "content": "-------------------------|-------------------------------------------------------------------"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.2.4. List All Patients: `list patient`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Displays all the patients in the patient list. "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    list patient"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![ListPatient](images/UG/PATIENT/ListPatientOutput.PNG \"List Ouput\")  "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.2.5. Retrieve a Patient\u0027s Information: `get patient`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Retrieve details of the patient with the specified NRIC."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    get patient NRIC"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    get patient S9876543Z"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![getpatient](images/UG/PATIENT/GetPatientOutput.PNG \"Get Ouput\")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 3.3. Patient Medical Records "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.3.1. Add Patient Records: `add pr`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Add patient\u0027s medical records to the database, to support the diagnosis and to justify the treatment."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![]()"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.3.2. Edit Patient Records: `edit pr`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit patient\u0027s medical records when there is any error in previous inputs."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    edit pr NRIC INDEX /sym [SYMPTOMS] /diag [DIAGNOSIS] /d [DATE] /t [TIME]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![]()"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.3.3. Delete Patient Records: `delete pr`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Delete patient\u0027s medical records based on the given NRIC and the index of records  . "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    delete pr NRIC INDEX"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![]()"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.3.4. List Patient Records: `list pr`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    list pr NRIC"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ![]()"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.3.5. Find Patient Records: `find pr`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    find pr NRIC INDEX"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e![]()"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### 3.4. Appointment Scheduling Commands "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "itskesin"
        },
        "content": "HappyPills helps to store appointment schedules. "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.4.1. Add Appointment: `add appt`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Add a new appointment for the patient with the specified NRIC. An appointmentID will be allocated to the"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "itskesin"
        },
        "content": "patient automatically."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "itskesin"
        },
        "content": " ##### Usage example: "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     add appt /ic[NRIC] /d[date] /t[time] /r[reason]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "itskesin"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    add appt /icS1234567F /d01/02/2020 /t 12:00:00 /rsick"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![addSuccess](/docs/images/UG/APPT/AddAppt.png)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003eConfirm appointment details are correct by typing \"y\" or \"Y\""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![addConfirmSuccess](/docs/images/UG/APPT/confirmAddAppt.png)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.4.2. Edit Appointment: `edit appt`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit information of the appointment with the specified appointmentID(apptID)."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "itskesin"
        },
        "content": " The appointment should belong to the patient with the specified NRIC. "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "itskesin"
        },
        "content": " ##### Usage example: "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     edit appt [NRIC] [apptID] [Options][editedInput]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     Options:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         /d edit date"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         /t edit time"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         /r edit reason"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "itskesin"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    edit appt S1234567F 5 /d 12/02/2020"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![editSuccess](/docs/images/UG/APPT/EditAppt.png)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.4.3. Delete Appointment: `delete appt`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Delete an appointment of a patient as specified by the NRIC and appointmentID(apptID). "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "itskesin"
        },
        "content": "##### Usage example: "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    delete appt [NRIC] [apptID]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    delete appt S1234567F 6"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e ![editSuccess](/docs/images/UG/APPT/DeleteAppt.png)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.4.4. Mark Appointment as Done: `done appt` "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Mark the appointment with the specified appointmentID(apptID) as done if arrived."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "itskesin"
        },
        "content": " The appointment should belong to the patient with the specified NRIC. "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "itskesin"
        },
        "content": " ##### Usage example: "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     done appt [NRIC] [apptID]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "itskesin"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    done appt S1234567F 5 "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![doneSuccess](/docs/images/UG/APPT/DoneAppt.png)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.4.5. List All Appointments: `list appt` "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "itskesin"
        },
        "content": "List all the existing appointments. This can be used to check for appointmentID"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "itskesin"
        },
        "content": "as used by other commands."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "itskesin"
        },
        "content": " ##### Usage example: "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     list appt"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "itskesin"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![ListSuccess](/docs/images/UG/APPT/ListAppt.png)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### 3.4.6. Find Patient\u0027s Appointments: `find appt`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Check all appointments that the patient with the specified NRIC has. This can be used"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "itskesin"
        },
        "content": "to check for the appointmentID used for the other commands."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "itskesin"
        },
        "content": " ##### Usage example: "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "itskesin"
        },
        "content": " "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     find appt [NRIC]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "itskesin"
        },
        "content": "         "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "itskesin"
        },
        "content": " **Example:**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    find appt S1234567F"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e ***Expected output:***"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e![findSuccess](/docs/images/UG/APPT/FindAppt.png)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### General Patient Information"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "itskesin"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Add a patient\u0027s information | `add patient /ic [NRIC] /n [NAME] /p [PHONE_NUMBER] /dob [DOB] /b [BLOOD_TYPE] /a [ALLERGIES] /rm [REMARKS]`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit a patient\u0027s information |  `edit patient NRIC /n[NAME] /p[PHONE_NUMBER] /dob[DOB] /b[BLOOD_TYPE] /a[ALLERGIES] /rm[REMARKS]`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "itskesin"
        },
        "content": "list all patients | `list patient`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Retrieve a patient\u0027s information | `get patient NRIC`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### Patient Medical Records"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "itskesin"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "itskesin"
        },
        "content": " Add a Patient Record |`add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS /d DATE /t TIME`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "itskesin"
        },
        "content": " List all Patient Records |`list pr NRIC`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "itskesin"
        },
        "content": " Find a Patient Record|`find pr NRIC INDEX`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "itskesin"
        },
        "content": " Edit a Patient Record |`edit pr NRIC INDEX`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "itskesin"
        },
        "content": " Delete a Patient Record | `delete pr NRIC INDEX`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### Appointments"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Command** | **Format**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "itskesin"
        },
        "content": "--------|----------"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Add an appointment | `add appt /ic NRIC /d DATE /t TIME /r REASON`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Edit an appointment | `edit appt NRIC /d DATE /t TIME /r REASON`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Delete an appointment | `delete appt APPT_ID`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Mark an appointment as done | `done appt APPT_ID`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "itskesin"
        },
        "content": "List all appointments | `list appt`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Find an appointment| `find appt NRIC`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## 5. Useful links:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "itskesin"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 18,
      "itskesin": 444
    }
  },
  {
    "path": "docs/team/itskesin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "# Yap Kesin - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## `PROJECT: HappyPills`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "## About the project"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Our team consists of 4 software engineering students were tasked to build a basic command line interface desktop "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "application for our Software Engineering project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Our team chose to develop a note management application called HappyPills. HappyPills is specially designed for "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "Doctors to record patient\u0027s details, past medical records and future appointments. HappyPills allows users"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "to store all information in a single place and users can always have quick access to the saved information."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### Major enhancement: I implemented `PatientMap` to store all patients\u0027 details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  + What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - The PatientMap uses HashMap from Java Collection framework to store the patient objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - The PatientMap maps the Patient object to the Patient\u0027s NRIC. Each Patient\u0027s NRIC (key) is associated with a "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    patient object(value) which consists of the patient\u0027s details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  + Justification:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - The data structure (HashMap) was used to look up an NRIC quickly, the HashMap has O(1) performance for every NRIC "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    search, it will be faster when there are large number of patients\u0027 information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - HashMap will also helps to ensure that there will be no duplicated NRICs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  + Highlights:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - There were challenging design decisions involved in the selection of the underlying data structure because the "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    enhancement affects all the patients commands.  The implementation was also challenging as required changes "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    to the existing patient commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - To ensure our application maintains its robustness under extremely heavy load conditions, I did in-depth analysis "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    of different design alternatives."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "#### Major enhancement: I implemented the ability for user to `filter` patient records."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  + What it does:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - The `list pr NRIC` command will display a list of past patient records with index for the searched patient."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    - The `find pr NRIC INDEX` command find a particular patient record with given index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    - The `edit pr NRIC INDEX [/sym or /diag or /date or /time]` command edit a particular patient record with given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    index and tag."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    - The `delete pr NRIC INDEX` command delete a particular patient record with given index."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  + Justification:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    - In the case that the Patient Record grows, it will be difficult to find records. The `find pr NRIC INDEX` command "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    allows users to easily find and filter the notes that they require. It also allows users to edit wrongly added "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    detail or update the existing records."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  + Highlights:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - The `list pr NRIC` will provide all the index of the past records. User can always view the date/time of the "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    patient record with the corresponding index."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - Array indexing was used to store the list of patient record for the particular patient instead of HashMap "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    and Keyword is because patients do not usually visit the doctor unless they are sick. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    - Arraylist have advantage such as `auto indexing` and resizing of the array making the "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    space of the app low and manageable."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Code contributed:** [Reposense Report](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003ditskesin\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "**Other contributions:**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Project management:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Handled releases `v1.0 - v2.1` (3 releases) on GitHub"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Created tags on GitHub Issues"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Maintaining the issue tracker on GitHub"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Enhancements to existing features:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Refactor messages used to a common Messages class in `Ui`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Wrote more JUnit tests to test new and old components of the UI ??? "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "- Community:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + Reported bugs and suggestions for other teams in the class:  "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    [#170](https://github.com/AY1920S2-CS2113T-M16-2/tp/issues/170),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    [#173](https://github.com/AY1920S2-CS2113T-M16-2/tp/issues/173), "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    [#179](https://github.com/AY1920S2-CS2113T-M16-2/tp/issues/179)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    + DG reviewed (with non-trivial review comments)  "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    [[CS2113-T15-4] Diet Management Assistant](https://github.com/nus-cs2113-AY1920S2/tp/pull/29)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e Given below are sections I contributed to the User Guide. "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Main](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide.md)  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Patient Commands](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide-Patient.md)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e Given below are sections I contributed to the Developer Guide. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "\u003e They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Architecture](https://ay1920s2-cs2113t-t12-2.github.io/tp/DeveloperGuide.html#31-architecture)  "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Section 4.1 to 4.1.1](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#41-patient-details-feature)  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "[Appendices](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#43-user-prompting)  "
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "itskesin": 74,
      "-": 4
    }
  },
  {
    "path": "docs/team/janicetyy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "# Janice - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## `PROJECT: HappyPills`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "## About the project"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Our team consists of 4 software engineering students were tasked to build a basic command line interface desktop "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "application for our Software Engineering project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Our team chose to develop a note management application called HappyPills. HappyPills is specially designed for "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "Doctors to record patient\u0027s details, past medical records and future appointments. HappyPills allows users"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "to store all information in a single place and users can always have quick access to the saved information."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### Major enhancement: I implemented `storage` to store all patients\u0027 details in a text file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The storage functions takes a formatted string from the various objects and appends it to the back of the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    corresponding text file, upon every add operation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The storage function takes a formatted string from TextUi which concatenates all the strings from the objects"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    in a given list and overwrites the content of the corresponding text file, upon every delete and edit operation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - Recover each object from the strings in the corresponding text file, line-by-line, at the start of the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + Justification:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - Using append for add instead overwriting with the entire map of objects improves the time taken for the program to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    process the add operation, especially when there is a large amount of objects."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + Highlights:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "#### Major enhancement: I implemented three of the appointment commands and made significant changes to the delete."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + What it does:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The `Done appt NRIC ApptID` command will mark an appointment with the specified index for the specific"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    patient as done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The `edit appt NRIC ApptID` command edits the value of certain variables in the appointment with the specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    index for the specific patient."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        - The variable is specified by `/d` for editing date, `/t` for editing time and `r` for editing reason."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        - Validation is done for the date to be entered in `DD/MM/YYY` format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        - Validation is done for the time to be entered as `HH:mm` and the seconds are predefined as \u0027 :00\u0027."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The `find appt NRIC ` command returns a list of all specified appointments that the patient has, according to the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    appointment list in the patient object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - As for the `delete appt NRIC ApptID`, I revised the deletion logic so that it removes from both the map"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    and the appointment list in the specified patient object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - I also revised the id system for assigning an ID to a new appointment object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + Justification:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - In the case of appointments, the appointment ID is allocated by the program and hence the find function"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    is important to carry out the basic edit and delete operations."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  + Highlights:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    - The assignment of the ID is done by incrementing the count of the appointment object, along with every creation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    of an appointment object. This prevents the appointment object from changing after every delete operation, which "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    user have to find the appointment\u0027s ID using the find function repeatedly."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Code contributed:** [Reposense Report](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003djanicetyy\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "**Other contributions:**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- Project management:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + Created tags on GitHub Issues"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + Maintaining the issue tracker on GitHub"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- Enhancements to existing features:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + Refactor TextUi to be parent class of other objectTextUi so that they only return strings that "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    are used by or is related to their corresponding object classes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + Wrote JUnit tests to test all features implemented by me except storage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "- Community:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + Reported bugs and suggestions for other teams in the class:  "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#165](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/165),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#163](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/163), "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#162](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/162),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#160](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/160),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#166](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/166), "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#158](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/158),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#159](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/159), "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#167](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/167), "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        [#164](https://github.com/AY1920S2-CS2113T-M16-1/tp/issues/164)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "  "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    + DG reviewed (with non-trivial review comments)  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "   [[CS2113-T15-4] Diet Management Assistant](https://github.com/nus-cs2113-AY1920S2/tp/pull/29)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e Given below are sections I contributed to the User Guide. "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "[Main](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide.md)  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "[Appointment Commands](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide-Appointment.md)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "I have also broken down the user guide into smaller sections for the ease of viewing the various"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "section."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e Given below are sections I contributed to the Developer Guide. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "\u003e They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "[Storage](https://ay1920s2-cs2113t-t12-2.github.io/tp/DeveloperGuide.html#44-storage)   "
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 90
    }
  },
  {
    "path": "docs/team/nyanwunpaing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "# Nyan Wun Paing - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "## `PROJECT: HappyPills`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "## About the project"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Our team consists of 4 software engineering students were tasked to build a basic command line interface desktop "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "application for our Software Engineering project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "Our team chose to develop a note management application called HappyPills. Happy Pills is a fast and intuitive "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "note-taking app designed specially for doctors. With Happy Pills, you can safely store patients’ details, past medical "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "records as well as their future appointment details in a single place."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "*Major enhancement:* I added `User Prompting` for commands in HappyPills."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + What it does: HappyPills can detect if a command entered by the user is missing some information or the "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   information given is in incorrect format. For example, a user may forget to indicate the phone number of a patient"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   which is deemed as a necessary detail. In this case, HappyPills will prompt the user for the missing/incorrect "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + Justification: This feature benefits inexperienced users by allowing them to easily fix mistakes without having to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   re-enter the entire command. It also ensure that all users are able to know exactly which part of the entered input "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   is incorrect."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + Highlights: This feature increase user-friendliness, as I included messages to tell the user the reason "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   behind the prompting, so that users do not have to figure out the problem themselves."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   For future commands, this feature is easily extensible. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "   "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "*Major enhancement:* I added `Add Command` feature."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + What it does: "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e       - The `add patient` command stores the patient\u0027s details in HappyPills."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e       - The `add pr` command stores the patient\u0027s medical records in HappyPills."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + Justification: This feature allows the user to add information into HappyPills. This features solves the user need"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e     to manage all his information in a single location."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + Highlights: This feature will prompt for User Confirmation before adding the information into HappyPills. "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e     Information that is going to be added will be listed down for the user. The `add` command is simple to use and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e     user-friendly."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "*Major enhancement:* I implemented parser."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + What it does: "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e       - The parser makes sense of input to execute the correct command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + Justification: This feature allows the to user input to be broken down into sub command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   + Highlights: This feature allow the user to input tags, such as \"/d,/t,etc\", to come in different order"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e   allowing flexibility to the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Code contributed:** [RepoSense](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003dnyanwunpaing\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "**Other contributions:**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- Project management:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + Handled releases `v2` (1 release) on GitHub"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + Maintaining the issue tracker on GitHub"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + Used my iP project as base for tP."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- Enhancements to existing features:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + Refactor messages used to a common Messages class in `PatientParser`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + JUnit tests to test on Patient command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "- Community:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + Reported bugs and suggestions for other teams in the class:  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    [#99](https://github.com/AY1920S2-CS2113-T15-2/tp/issues/99),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    [#100](https://github.com/AY1920S2-CS2113-T15-2/tp/issues/100), "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    [#105](https://github.com/AY1920S2-CS2113-T15-2/tp/issues/105)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    + DG reviewed (with non-trivial review comments)  "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    [[CS2113T-T13-2] Nuke](https://github.com/nus-cs2113-AY1920S2/tp/pull/16)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e Given below are sections I contributed to the User Guide. "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "[Main](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide.md)  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "[Patient Commands](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide-Patient.md)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e Given below are sections I contributed to the Developer Guide. "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "\u003e They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "[Architecture](https://ay1920s2-cs2113t-t12-2.github.io/tp/DeveloperGuide.html#31-architecture)  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "[Section 4.5 to 4.5.3](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#41-patient-details-feature)  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "[Appendices](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#43-user-prompting)  "
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 86
    }
  },
  {
    "path": "docs/team/sitinadiah25.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "#Siti Nadiah - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## `PROJECT: HappyPills`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "## About the project"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Our team consists of 4 software engineering students were tasked to build a basic command line interface desktop "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "application for our Software Engineering project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Our team chose to develop a note management application called HappyPills. HappyPills is specially designed for "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "Doctors to record patient\u0027s details, past medical records and future appointments. HappyPills allows users"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "to store all information in a single place and users can always have quick access to the saved information."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Major enhancement:** I implemented the `Appointment` and `AppointmentMap` class and parts of the Appointment-related commands"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        - The Appointment class stores information regarding appointments that the user may want to schedule. This includes "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        the patient\u0027s nric, date and time of appointment and the reason for the appointment. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        - The AppointmentMap class uses a HashMap from Java Collection framework to store the Appointment objects. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        - The AppointmentMap maps the AppointmentID of an Appointment object to the object itself.   "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        - Commands that I implemented includes Add Appointment and List Appointment. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + Justification: "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        - The data structure (HashMap) was used to look up an Appointment object. The HashMap has O(1) performance for every AppointmentID "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        search, hence it will be faster when there are large number of appointments."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + Highlights: "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        - "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "**Other contributions:**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + Maintaining the issue tracker on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + Enhancement of Help Command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + Refactoring of the Parser and Command classes into sub-classes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "- Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + Reported bugs and suggestions for other teams in the class:  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#89](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/89),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#90](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/90), "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#91](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/91),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#92](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/92),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#93](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/93),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#94](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/94),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#95](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/95),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [#96](https://github.com/AY1920S2-CS2113-T15-4/tp/issues/96)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    + DG reviewed (with non-trivial review comments)  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    [[CS2113T-M16-1] Task Scheduler](https://github.com/nus-cs2113-AY1920S2/tp/pull/7)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e Given below are sections I contributed to the User Guide. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "[Main](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide.md)  "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "[Appointment Commands](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/UserGuide-Appointment.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e Given below are sections I contributed to the Developer Guide. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "\u003e They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "[Section 3](https://ay1920s2-cs2113t-t12-2.github.io/tp/DeveloperGuide.html#3-design)  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "[Section 4.3](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#43-appointment-scheduling-feature)  "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "[Appendices](https://github.com/AY1920S2-CS2113T-T12-2/tp/blob/master/docs/DeveloperGuide.md#43-user-prompting)  "
      }
    ],
    "authorContributionMap": {
      "sitinadiah25": 62
    }
  },
  {
    "path": "src/main/java/seedu/happypills/HappyPills.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class HappyPills {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static Scanner scanner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private PatientMap patients;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private AppointmentMap appointments;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private PatientRecordMap patientRecords;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Sets up the required objects, loads up the data from the storage file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public HappyPills() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        appointments \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecords \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            patients \u003d Storage.loadPatientsFromFile(Storage.PATIENT_FILEPATH);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"    Patient loaded from file.\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"   No patients in file.\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            appointments \u003d Storage.loadAppointmentFromFile(Storage.APPOINTMENT_FILEPATH, patients);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"    Appointment loaded from file.\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"   No appointment in file.\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            patientRecords \u003d Storage.loadPatientRecordFromFile(Storage.PATIENT_RECORD_FILEPATH,patients);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"    Patient Records loaded from file.\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"   No patient record in file.\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Sets up the logging configuration for the main program."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public void logSetup() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        ch.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param args I dont know."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        new HappyPills().run();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        logSetup();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        TextUi.printWelcomeMessage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(\"going to start processing\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String fullCommand \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String message \u003d getCommandType(fullCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (!message.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                System.out.println(message);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            logger.info(\"end of processing\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getCommandType(String fullCommand) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            message \u003d command.execute(patients, appointments, patientRecords);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (HappyPillsException hpe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(hpe.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(hpe.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            System.out.println(Messages.MESSAGE_INCOMPLETE_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 38,
      "Janicetyy": 46,
      "sitinadiah25": 13,
      "itskesin": 20
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientRecordMap patientRecordMap) throws HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 12
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Execute the exit command and write data to the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patients       the list of patients"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param appointments  the list of appointments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecords the list of patient records"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Storage.writeAllToFile(Storage.PATIENT_FILEPATH, StorageTextUi.getFormattedPatientString(patients));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(StorageTextUi.FAIL_TO_WRITE_PATIENT_MSG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Storage.writeAllToFile(Storage.APPOINTMENT_FILEPATH, StorageTextUi.getFormattedApptString(appointments));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(StorageTextUi.FAIL_TO_WRITE_APPOINTMENT_MSG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Storage.writeAllToFile(Storage.PATIENT_RECORD_FILEPATH,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    StorageTextUi.getFormattedPrString(patientRecords,patients));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(StorageTextUi.FAIL_TO_WRITE_PR_MSG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        TextUi.printExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 23,
      "sitinadiah25": 14,
      "itskesin": 10
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Displays full help instructions for every command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public HelpCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Return help command instructions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return message The command instructions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecordMap) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] userCommand \u003d command.split(\" \", 3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(\"help\") \u0026\u0026 userCommand.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.GENERAL_HELP_MESSAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[1].equalsIgnoreCase(\"exit\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.EXIT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[2].equalsIgnoreCase(\"patient\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d getPatientHelp(userCommand[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[2].equalsIgnoreCase(\"pr\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d getPatientRecordHelp(userCommand[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[2].equalsIgnoreCase(\"appt\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d getAppointmentHelp(userCommand[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d TextUi.incorrectCommandMessage(userCommand[1] + \" \" + userCommand[2]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getPatientHelp(String patient) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (patient.equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.ADD_PATIENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (patient.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.LIST_PATIENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (patient.equalsIgnoreCase(\"get\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.GET_PATIENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (patient.equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.EDIT_PATIENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (patient.equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.DELETE_PATIENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.GENERAL_PATIENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getPatientRecordHelp(String pr) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (pr.equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.ADD_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (pr.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.LIST_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (pr.equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.FIND_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (pr.equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.EDIT_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (pr.equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.DELETE_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.GENERAL_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getAppointmentHelp(String appt) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (appt.equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.ADD_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.LIST_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.FIND_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.DONE_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.EDIT_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (appt.equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.DELETE_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d HelpTextUi.GENERAL_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 27,
      "sitinadiah25": 51,
      "itskesin": 20
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/AddAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class AddAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String reason;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for AddPatientCommand Class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * It creates a new AddPatientCommand Object with the information provided."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param nric   patient\u0027s nric."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param date   date of appointment."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param time   time of appointment."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param reason reason for appointment."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public AddAppointmentCommand(String nric, String date, String time, String reason) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Add appointment into the Appointment list and the patient\u0027s appointment list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients     the list of patients."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param appointments the list of appointments."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the message to be displayed to the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException throws exception if there is already an appointment at the same datetime."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (!patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d PatientTextUi.PATIENT_NOT_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            Appointment appointment \u003d new Appointment(nric, reason, date, time);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            appointments.addAppointment(appointment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            Patient patient \u003d (Patient) patients.get(nric);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            patient.addAppointment(appointment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.addSingleItemToFile(Storage.APPOINTMENT_FILEPATH, appointment.toSave());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.warning(StorageTextUi.FAIL_TO_ADD_APPOINTMENT_MSG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.addAppointmentSuccessMessage(appointment);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 8,
      "Janicetyy": 17,
      "sitinadiah25": 43,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/AppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public abstract class AppointmentCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute(AppointmentMap appointments) throws HappyPillsException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 10,
      "itskesin": 2
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/DeleteAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class DeleteAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String appointmentId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Retrieve the patient\u0027s confirmation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric  y to confirm deletion, n to stop deletion."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public DeleteAppointmentCommand(String nric, String appointmentId) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.appointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the patient from the NRIC of the delete command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the appointment from the patient provided."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the appointment map to get appointment from."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Appointment findAppointment(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (appointments.containsKey(appointmentId)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \u0026\u0026 appointments.get(appointmentId).getNric().equalsIgnoreCase(nric)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return appointments.get(appointmentId);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Delete an appointment of the patient from the shared map."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author sitinadiah25"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments The shared appointment map."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointmentId The id of the appointment to be deleted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean deleteAppt(AppointmentMap appointments, String appointmentId) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (appointments.containsKey(appointmentId)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            appointments.remove(appointmentId);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Delete an appointment of the patient in the patient object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient The patient whose appointment is to be deleted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param apptID The id of the appointment to be deleted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean deleteAppt(Patient patient, String apptID) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                patient.getAppointments().remove(appointment);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Carry out the procedures for deleting appointment."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy, sitinadiah25"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Shared map of patients"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Shared map of appointments"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param visits Shared map of patient records"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return errorMessage or successMessage"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws HappyPillsException not used but required as part of command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidNric(nric)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.appendDivider(TextUi.INVALID_NRIC_MESSAGE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient delPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (delPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d PatientTextUi.PATIENT_NOT_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment delAppt \u003d findAppointment(appointments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (delAppt \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.APPOINTMENT_NOT_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Boolean isSuccess \u003d deleteAppt(appointments,appointmentId) \u0026\u0026 deleteAppt(delPatient,appointmentId);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (isSuccess) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d \"    Appointment has been removed.\\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.APPOINTMENT_FILEPATH,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedApptString(appointments));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.FAIL_TO_WRITE_APPOINTMENT_MSG);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.APPOINTMENT_NOT_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 10,
      "Janicetyy": 104,
      "sitinadiah25": 19,
      "itskesin": 4
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/DoneAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class DoneAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String apptID;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for DoneAppointmentCommand Class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new DoneAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param apptID Contains the id of the appointment to be marked as done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public DoneAppointmentCommand(String nric, String apptID) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.apptID \u003d apptID;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the patient from the NRIC of the Done command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return patient or null if not found"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the appointment from the patient provided."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the appointment map to get appointment from."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Appointment findAppointment(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (appointments.containsKey(apptID)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \u0026\u0026 appointments.get(apptID).getNric().equalsIgnoreCase(nric)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return appointments.get(apptID);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Mark appointment in the list within the patient object as done."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editDone(Patient patient) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                appointment.setDone(true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Mark appointment in the shared appointment map as done."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment which is to be marked done."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if successful, false otherwise."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editDone(Appointment appointment) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        appointment.setDone(true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the appointment details with the information provided by calling."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients on which the commands are executed on."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the list of appointments on which the commands are executed on."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws HappyPillsException Throws an exception if the edit field is not valid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return errorMessage or successMessage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidNric(nric)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.appendDivider(TextUi.INVALID_NRIC_MESSAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient editPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (editPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.PATIENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment editAppt \u003d findAppointment(appointments); //from the shared appointment map"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (editAppt \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(AppointmentTextUi.APPOINTMENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Boolean output \u003d editDone(editPatient) \u0026\u0026 editDone(editAppt);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!output) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(\"   An unknown error has occurred, please try again later.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.APPOINTMENT_FILEPATH,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedApptString(appointments));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.FAIL_TO_WRITE_APPOINTMENT_MSG);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return AppointmentTextUi.doneAppointmentSuccessMessage(editAppt);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 127,
      "sitinadiah25": 2,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/EditAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class EditAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String newContent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected  String apptID;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for EditAppointmentCommand Class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new EditAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newContent Contains the string that the attribute is to be updated to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param apptID Contains the id of the appointment that is to be edited"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public EditAppointmentCommand(String nric, String apptID, String newContent) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.newContent \u003d newContent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.apptID \u003d apptID;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the patient from the NRIC of the Edit command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Retrieve the appointment from the patient provided."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the appointment map to get appointment from."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Appointment findAppointment(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (appointments.containsKey(apptID)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                \u0026\u0026 appointments.get(apptID).getNric().equalsIgnoreCase(nric)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return appointments.get(apptID);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the date of the appointment in the list within the patient object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newDate The new date to be edited into."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editDate(Patient patient, String newDate) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidDate(newDate)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                appointment.setDate(newDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the date of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment which date is to be edited."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newDate The new date to be edited into."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if successful, false otherwise."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editDate(Appointment appointment, String newDate) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidDate(newDate)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            TextUi.print(HelpTextUi.EDIT_APPOINTMENT_HELP_MESSAGE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            appointment.setDate(newDate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the time of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newTime The new time to be edited into."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editTime(Patient patient, String newTime) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidTime(newTime)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        newTime +\u003d \":00\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                appointment.setTime(newTime);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the time of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment which time is to be edited."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newTime The new date to be edited into."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if successful, false otherwise."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editTime(Appointment appointment, String newTime) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (Checker.isValidTime(newTime)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            appointment.setTime(newTime);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the reason of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newReason The new reason to be edited into."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editReason(Patient patient, String newReason) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : patient.getAppointments()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (appointment.getAppointmentId().equals(apptID)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                appointment.setReason(newReason);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the remark of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment which reason is to be edited."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param newReason The appointment\u0027s updated reason."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return true if successful, false otherwise"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private Boolean editReason(Appointment appointment, String newReason) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        appointment.setReason(newReason);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Edit the appointment details with the information provided by calling."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Contains the list of patients on which the commands are executed on."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Contains the list of appointments on which the commands are executed on."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws HappyPillsException Throws an exception if the edit field is not valid."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidNric(nric)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.appendDivider(TextUi.INVALID_NRIC_MESSAGE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isPositiveInteger(apptID)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.appendDivider(TextUi.INVALID_APPTID_MESSAGE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (newContent.length() \u003c 3) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return HelpTextUi.EDIT_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String content \u003d newContent.substring(2).trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (content.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return HelpTextUi.EDIT_APPOINTMENT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String field \u003d newContent.substring(0,2).trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient editPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (editPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.PATIENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment editAppt \u003d findAppointment(appointments); //from the shared appointment map"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (editAppt \u003d\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(AppointmentTextUi.APPOINTMENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Boolean output \u003d false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String errorMsg \u003d \"    Something went wrong, the edit could not be made.\\n\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (field.equals(\"/d\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            output \u003d editDate(editPatient, content) \u0026\u0026 editDate(editAppt,content);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            errorMsg \u003d output ? errorMsg : Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else if (field.equals(\"/t\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            output \u003d editTime(editPatient, content) \u0026\u0026 editTime(editAppt,content);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            errorMsg \u003d output ? errorMsg : Messages.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else if (field.equals(\"/r\")) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            output \u003d editReason(editPatient, content) \u0026\u0026 editReason(editAppt,content);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(\"    Please try again. To learn more about the Edit appointment command, \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"\\n    enter \\\"help appt edit\\\"\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (output) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.APPOINTMENT_FILEPATH,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedApptString(appointments));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.FAIL_TO_WRITE_APPOINTMENT_MSG);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        errorMsg \u003d TextUi.appendDivider(errorMsg);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return output ? AppointmentTextUi.editAppointmentSuccessMessage(editAppt) : errorMsg;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 232,
      "sitinadiah25": 2,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/FindAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class FindAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for FindAppointmentCommand Class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new FindAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientNric        Contains the NRIC of the patient that is to be retrieved."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public FindAppointmentCommand(String patientNric) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Find appointments for a specific patient."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Shared map of patients"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Shared map of appointments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param visits Shared map of patient records"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return errorMessage or successMessage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!Checker.isValidNric(patientNric)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return TextUi.appendDivider(TextUi.INVALID_NRIC_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return AppointmentTextUi.getAppointmentSuccessMessage(patients.get(patientNric));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return PatientTextUi.PATIENT_NOT_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 40,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/IncorrectAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class IncorrectAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public IncorrectAppointmentCommand(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.message \u003d message + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "sitinadiah25": 13,
      "itskesin": 4
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/appointmentcommands/ListAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class ListAppointmentCommand extends AppointmentCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (appointments.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.GET_EMPTY_APPOINTMENT_LIST_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            assert !appointments.isEmpty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d AppointmentTextUi.getAppointmentList(appointments);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 3,
      "sitinadiah25": 13,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/AddPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class AddPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected int phoneNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String dateOfBirth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String bloodType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String allergies;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String remarks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Constructor for AddPatientCommand Class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * It creates a new AddPatientCommand Object with the information provided."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param name        Contains the name of the patient."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric        Contains the nric of the patient."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param phoneNumber Contains the phone number of the patient."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param dateOfBirth Contains the date of birth of the patient."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param bloodType   Contains the blood type of the patient."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param allergies   Contains any allergies the patient has."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param remarks     Contains any remarks for the patient."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public AddPatientCommand(String name, String nric, int phoneNumber, String dateOfBirth,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                             String bloodType, String allergies, String remarks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        logger.log(logLevel, \"patient is added\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Adds a new task to the list with the information provided by calling."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * {} (or) {}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * (or) {} as require"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assert !patients.containsKey(nric) : \"New nric can be added\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Patient tempPatient \u003d new Patient(name, nric, phoneNumber, dateOfBirth, bloodType, allergies, remarks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        logger.log(logLevel, \"patient is added\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isValidNric(tempPatient.getNric())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return Messages.MESSAGE_INVALID_NRIC;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        patients.add(tempPatient);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assert patients.containsKey(nric) : \"nric added successfully\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            Storage.addSingleItemToFile(Storage.PATIENT_FILEPATH, tempPatient.toSave());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            logger.info(StorageTextUi.FAIL_TO_ADD_PATIENT_MSG);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        message \u003d PatientTextUi.addPatientSuccessMessage(patients.get(nric));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        logger.log(logLevel, \"end of addCommand\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 78,
      "Janicetyy": 4,
      "itskesin": 2
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/DeletePatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class DeletePatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public DeletePatientCommand(String nric) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Retrieve the patient\u0027s confirmation."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return y to confirm deletion, n to stop deletion."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String getPatientConfirmation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        Scanner in \u003d HappyPills.scanner;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String confirm \u003d in.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return confirm;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Remove the patient from the patient list in the program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient to be deleted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients The patient list within the program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return Message to inform the user that the patient has been deleted."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private String deletePatient(Patient patient, PatientMap patients) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patients.remove(nric);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.deletePatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return TextUi.prependDivider(message);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Run the delete command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The message to confirm deletion of patient or to confirm that the patient has not be deleted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException Throws an exception if patient does not exist."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            Patient patient \u003d patients.get(nric);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientTextUi.printDeleteConfirmation(patient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String message \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String confirm \u003d getPatientConfirmation();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            boolean isConfirmed \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            while (!isConfirmed) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                if (confirm.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                    message \u003d deletePatient(patient, patients);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        Storage.writeAllToFile(Storage.PATIENT_FILEPATH,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                                StorageTextUi.getFormattedPatientString(patients));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        logger.info(StorageTextUi.FAIL_TO_WRITE_PATIENT_MSG);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    isConfirmed \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    logger.log(logLevel, \"patient is deleted\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                } else if (confirm.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    message \u003d PatientTextUi.patientNotDeletedMessage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    isConfirmed \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    logger.log(logLevel, PatientTextUi.patientNotDeletedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    PatientTextUi.printDeleteConfirmationAgain(patient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    confirm \u003d getPatientConfirmation();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            assert isConfirmed : \"Delete is not confirmed.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message \u003d TextUi.appendDivider(message);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 11,
      "Janicetyy": 15,
      "sitinadiah25": 60,
      "itskesin": 13
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/EditPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class EditPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String newContent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String REMARKS_TAG \u003d \"/rm\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DATE_OF_BIRTH_TAG \u003d \"/dob\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String NAME_TAG \u003d \"/n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String PHONE_NUMBER_TAG \u003d \"/p\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String BLOOD_TYPE_TAG \u003d \"/b\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String ALLERGIES_TAG \u003d \"/a\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for EditCommand Class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * It creates a new EditCommand Object with the information provided."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param nric       Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param newContent Contains the string that the attribute is to be updated to."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public EditPatientCommand(String nric, String newContent) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric.toUpperCase().trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.newContent \u003d newContent.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Retrieve the patient from the NRIC of the Edit command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of patients to be searched."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Patient findPatient(PatientMap patients) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            logger.log(logLevel, \"patient to be edited is found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return patients.get(nric);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the phone number of the patient."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose phone number is to be edited."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new phone number."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editPhone(Patient patient, String content) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setPhoneNumber(Integer.parseInt(content.trim()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the allergies of the patient."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose allergies is to be edited."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s updated allergies."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editAllergies(Patient patient, String content) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setAllergies(content.trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the remarks of the patient."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose remarks is to be edited."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new remarks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editRemarks(Patient patient, String content) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setRemarks(content.trim());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the Date of Birth of the patient."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose DOB is to be edited."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new DOB."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editDob(Patient patient, String content) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setDateOfBirth(content.trim());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the name of the patient."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose name is to be edited."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new name."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editName(Patient patient, String content) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setName(content.trim());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Edit the blood type of the patient."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patient The patient whose blood type is to be edited."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content The patient\u0027s new blood type."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String editBloodType(Patient patient, String content) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        patient.setBloodType(content.trim());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d PatientTextUi.editPatientSuccessMessage(patient);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Adds a new task to the list with the information provided by calling."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * {} (or) {}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * (or) {} as require"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException Throws an exception if the edit field is not valid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (newContent.length() \u003c 2) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INCOMPLETE_COMMAND);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        // assert newContent.length() \u003e\u003d 2 : \"Length of content has to be more than 2 characters.\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String field \u003d \"\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (newContent.contains(REMARKS_TAG)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            field \u003d newContent.substring(0, 3);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            content \u003d newContent.substring(3);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (newContent.contains(DATE_OF_BIRTH_TAG)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            field \u003d newContent.substring(0, 4);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            content \u003d newContent.substring(4);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            field \u003d newContent.substring(0, 2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            content \u003d newContent.substring(2);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Patient editPatient \u003d findPatient(patients);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (editPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.PATIENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_CONTENT_IS_EMPTY);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (field.equals(PHONE_NUMBER_TAG)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (Checker.isValidPhoneNum(content.trim())) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                output \u003d editPhone(editPatient, content);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_INVALID_PHONE_NUMBER);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(REMARKS_TAG)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            output \u003d editRemarks(editPatient, content.trim());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(ALLERGIES_TAG)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            output \u003d editAllergies(editPatient, content.trim());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(DATE_OF_BIRTH_TAG)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (Checker.isValidDate(content.trim())) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                output \u003d editDob(editPatient, content.trim());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_INVALID_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(BLOOD_TYPE_TAG)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (Checker.isValidBloodType(content.trim())) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                output \u003d editBloodType(editPatient, content.trim());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(\"    Please ensure that the BLOOD TYPE is in [A|B|AB|O][+-] \");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            output \u003d editBloodType(editPatient, content.trim());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(NAME_TAG)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            output \u003d editName(editPatient, content.trim());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_EDIT_PATIENT);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Storage.writeAllToFile(Storage.PATIENT_FILEPATH,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    StorageTextUi.getFormattedPatientString(patients));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            logger.info(StorageTextUi.FAIL_TO_WRITE_PATIENT_MSG);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        assert output.length() \u003e 0 : \"output message is invalid\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 37,
      "Janicetyy": 16,
      "sitinadiah25": 125,
      "itskesin": 25
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/GetPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class GetPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for GetPatientCommand Class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new GetPatientCommand Object with the information provided."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientNric        Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public GetPatientCommand(String patientNric) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Get the details of a patient."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Shared map of patients"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments Shared map of appointments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param visits Shared map of patient records"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return Error Message or Success Message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws HappyPillsException if patient not found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) throws HappyPillsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return PatientTextUi.getPatientSuccessMessage(patients.get(patientNric));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throw new HappyPillsException(PatientTextUi.PATIENT_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 30,
      "sitinadiah25": 2,
      "itskesin": 5
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/IncorrectPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Represents an incorrect command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class IncorrectPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public IncorrectPatientCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "sitinadiah25": 18,
      "itskesin": 3
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/ListPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Lists all patients to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class ListPatientCommand extends PatientCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap visits) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (patients.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d PatientTextUi.EMPTY_PATIENT_LIST_MESSAGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.log(logLevel, \"no patient information is in list\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assert !patients.isEmpty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message \u003d PatientTextUi.getPatientList(patients);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            logger.log(logLevel, \"retrieve patient\u0027s information\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 3,
      "Janicetyy": 3,
      "sitinadiah25": 3,
      "itskesin": 24
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientcommands/PatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Used for execution of commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Contains both the information related to user commands and methods to execute them."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Implementation is done on child classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public abstract class PatientCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Contain boolean to check for exit condition."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for Command Class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Set isExit to false as default"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected PatientCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Executes the command based on the information provided by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param patients Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException If issues are found during execution of command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String execute(PatientMap patients) throws HappyPillsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Returns exit condition."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return isExit Contains information that allow the program to exit."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "sitinadiah25": 41,
      "itskesin": 2
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/AddPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class AddPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String symptom;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String diagnosis;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Constructor for PatientRecordCommand Class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * It creates a new PatientCommand Object with the information provided."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric patient\u0027s nric."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param symptom patient\u0027s symptom."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param diagnosis patient\u0027s diagnosis."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param date date of record."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param time time of record."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public AddPatientRecordCommand(String nric, String symptom, String diagnosis, String date, String time) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.symptom \u003d symptom;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients,AppointmentMap appointments, PatientRecordMap patientRecords"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!patients.containsKey(nric)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            message \u003d Messages.MESSAGE_PATIENT_NOT_FOUND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientRecord patientRecord \u003d new PatientRecord(nric,symptom,diagnosis,date,time);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientRecords.addPersonalRecord(patientRecord, nric);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.addSingleItemToFile(Storage.PATIENT_RECORD_FILEPATH, patientRecord.toSave());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.warning(StorageTextUi.FAIL_TO_ADD_PR_MSG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            message \u003d Messages.MESSAGE_PATIENT_RECORD_ADDED;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 4,
      "Janicetyy": 13,
      "itskesin": 46
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/DeletePatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class DeletePatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Constructor for FindAppointmentCommand Class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * It creates a new FindAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientNric Contains the NRIC of the patient that is to be retrieved."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index index for the record of the searched patient"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public DeletePatientRecordCommand(String patientNric, int index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private void deletePr(PatientRecordMap patientRecordMap, ArrayList\u003cPatientRecord\u003e patientRecords) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        patientRecordMap.removePersonalRecord(patientRecords, patientNric);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        patientRecords.remove(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecordMap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean isIndexOutOfBound \u003d patientRecordMap.get(patientNric).size() \u003c\u003d index \u0026\u0026 index \u003e\u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (patientRecordMap.get(patientNric) \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_EMPTY_PATIENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (isIndexOutOfBound) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            ArrayList\u003cPatientRecord\u003e patientRecords \u003d patientRecordMap.get(patientNric);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientRecord patientRecord \u003d patientRecords.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            deletePr(patientRecordMap,patientRecords);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.PATIENT_RECORD_FILEPATH,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedPrString(patientRecordMap,patients));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.FAIL_TO_WRITE_PR_MSG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return PatientRecordTextUi.deletePatientRecordSuccessMessage(patientRecord, patientNric);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String message \u003d Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 28,
      "itskesin": 39
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/EditPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.StorageTextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class EditPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String newContent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String SYMPTOM_TAG \u003d \"/sym\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIAGNOSIS_TAG \u003d \"/diag\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DATE_TAG \u003d \"/d\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String TIME_TAG \u003d \"/t\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Constructor for EditPatientRecordCommand Class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * It creates a new EditPatientRecordCommand Object with the information provided."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric       Contains the nric of the patient that is to be retrieved."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index index for the record of the searched patient"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param newContent Contains the string that the attribute is to be updated to."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public EditPatientRecordCommand(String nric, int index, String newContent) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.nric \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.newContent \u003d newContent;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Edit the appointment details with the information provided by calling."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patients     Contains the list of patients on which the commands are executed on."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param appointments Contains the list of appointments on which the commands are executed on."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException Throws an exception if the edit field is not valid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (newContent.length() \u003c 3) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return HelpTextUi.EDIT_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String content \u003d newContent.substring(2).trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (content.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return HelpTextUi.EDIT_PATIENT_RECORD_HELP_MESSAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String field \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (newContent.contains(SYMPTOM_TAG)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            field \u003d newContent.substring(0, 4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            content \u003d newContent.substring(4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (newContent.contains(DIAGNOSIS_TAG)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            field \u003d newContent.substring(0, 5);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            content \u003d newContent.substring(5);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            field \u003d newContent.substring(0, 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            content \u003d newContent.substring(2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientRecord editPatientRecord \u003d findPatientRecord(nric, index, patientRecords);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean isIndexOutOfBound \u003d patientRecords.get(nric).size() \u003c\u003d index \u0026\u0026 index \u003e 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (editPatientRecord \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patientRecords.get(nric) \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_EMPTY_PATIENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (isIndexOutOfBound) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_CONTENT_IS_EMPTY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean output \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String errorMsg \u003d Messages.MESSAGE_EDIT_ERROR + TextUi.NEWLINE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (field.equals(SYMPTOM_TAG)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            output \u003d editSymptoms(editPatientRecord, content);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(DIAGNOSIS_TAG)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            output \u003d editDiagnosis(editPatientRecord, content);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(DATE_TAG)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            output \u003d editDate(editPatientRecord, content);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            errorMsg \u003d output ? errorMsg : Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (field.equals(TIME_TAG)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            output \u003d editTime(editPatientRecord, content);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            errorMsg \u003d output ? errorMsg : Messages.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_EDIT_PR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (output) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Storage.writeAllToFile(Storage.PATIENT_RECORD_FILEPATH,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                        StorageTextUi.getFormattedPrString(patientRecords,patients));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                logger.info(StorageTextUi.FAIL_TO_WRITE_PR_MSG);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        errorMsg \u003d TextUi.appendDivider(errorMsg);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return output ? PatientRecordTextUi.editPatientRecordSuccessMessage(editPatientRecord) : errorMsg;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Boolean editDiagnosis(PatientRecord editPatientRecord, String content) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        editPatientRecord.setDiagnosis(content);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Boolean editSymptoms(PatientRecord editPatientRecord, String content) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        editPatientRecord.setSymptom(content);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Edit the date of the appointment in the list within the patient object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecord Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param newDate       The new date to be edited into."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Boolean editDate(PatientRecord patientRecord, String newDate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!Checker.isValidDate(newDate)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecord.setDate(newDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Edit the time of the appointment in the shared appointment map."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientRecord Contains the patient that to get appointment from."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param newTime       The new time to be edited into."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return the appointment with the specified apptID or null if not found."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private Boolean editTime(PatientRecord patientRecord, String newTime) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!Checker.isValidTime(newTime)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientRecord.setTime(newTime);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private PatientRecord findPatientRecord(String nric, int index, PatientRecordMap patientRecords) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        ArrayList\u003cPatientRecord\u003e patientRecordlist \u003d patientRecords.get(nric);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patientRecordlist !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientRecord patientRecord \u003d patientRecordlist.get(index);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return patientRecord;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 7,
      "Janicetyy": 9,
      "sitinadiah25": 1,
      "itskesin": 146
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/FindPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class FindPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Constructor for FindAppointmentCommand Class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * It creates a new FindAppointmentCommand Object with the information provided."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientNric Contains the NRIC of the patient that is to be retrieved."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index index for the record of the searched patient"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public FindPatientRecordCommand(String patientNric, int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecordMap"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean isIndexOutOfBound \u003d patientRecordMap.get(patientNric).size() \u003c\u003d index \u0026\u0026 index \u003e\u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (patientRecordMap.get(patientNric) \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_EMPTY_PATIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            } else if (isIndexOutOfBound) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return PatientRecordTextUi.getPatientRecordSuccessMessage(patientRecordMap, patientNric, index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            String message \u003d Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 3,
      "itskesin": 40
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/IncorrectPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class IncorrectPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public IncorrectPatientRecordCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecordMap) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 19
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/ListPatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class ListPatientRecordCommand extends PatientRecordCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    protected String patientNric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public ListPatientRecordCommand(String patientNric) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            PatientMap patients, AppointmentMap appointments, PatientRecordMap patientRecords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    ) throws HappyPillsException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assert !patientNric.isEmpty() : \"No NRIC was provided\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (patients.containsKey(patientNric)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (patientRecords.get(patientNric) \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_NOT_FOUND);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return PatientRecordTextUi.getPatientRecordListSuccessMessage(patientRecords.get(patientNric));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String message \u003d  Messages.MESSAGE_PATIENT_NOT_FOUND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 3,
      "itskesin": 27
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/commands/patientrecordcommands/PatientRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public abstract class PatientRecordCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public String execute(PatientRecordMap patientRecordMap) throws HappyPillsException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 11
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/AppointmentParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import org.w3c.dom.Text;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.AppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.DoneAppointmentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.EditAppointmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.FindAppointmentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.IncorrectAppointmentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.ListAppointmentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "//@@author sitinadiah25"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class AppointmentParser extends Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Parses the command given by the user to appointment commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param fullCommand the full command entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the command that the user has entered."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException throws an exception for invalid commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static AppointmentCommand parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] userCommand \u003d fullCommand.trim().split(\" \", 3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return parseAddCommand(userCommand[2]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String[] detailedCommand \u003d userCommand[2].trim().split(\" \", 3);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (detailedCommand.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return new EditAppointmentCommand(detailedCommand[0].trim(), detailedCommand[1].trim(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                        detailedCommand[2]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(HelpTextUi.incompleteCommandString(\"help edit appt\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String [] detailedCommand \u003d userCommand[2].trim().split(\" \",2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (detailedCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return new DoneAppointmentCommand(detailedCommand[0].trim(),detailedCommand[1].trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(HelpTextUi.incompleteCommandString(\"help done appt\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new ListAppointmentCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String [] detailedCommand \u003d userCommand[2].trim().split(\" \",2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (detailedCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return new DeleteAppointmentCommand(detailedCommand[0].trim(), detailedCommand[1].trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(HelpTextUi.incompleteCommandString(\"help delete appt\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new FindAppointmentCommand(userCommand[2]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            throw new HappyPillsException(TextUi.incorrectCommandMessage(userCommand[0]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static AppointmentCommand parseAddCommand(String content) throws HappyPillsException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] details \u003d splitInput(content);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] parseInput \u003d {\"\", \"\", \"\", \"\"};"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        parseInput \u003d parseInput(details, parseInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        // ensure that all details are not missing"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        while (parseInput[0].equalsIgnoreCase(\"\") || parseInput[1].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                || parseInput[2].equalsIgnoreCase(\"\") || parseInput[3].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                || !Checker.isValidDate(parseInput[1].trim()) || !Checker.isValidTime(parseInput[2].trim())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                || !Checker.isValidNric(parseInput[0].trim())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            printMissingInput(parseInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String input \u003d promptUser().trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (input.equalsIgnoreCase(\"clear\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_COMMAND_ABORTED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String[] updates \u003d splitInput(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            parseInput \u003d parseInput(updates, parseInput);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (!loopPrompt(promptConfirmation(parseInput))) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new IncorrectAppointmentCommand(\"    Appointment is not added.\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return new AddAppointmentCommand(parseInput[0].toUpperCase().trim(), parseInput[1].trim(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[2].trim(), parseInput[3].trim());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static String[] parseInput(String[] details, String[] parseInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        for (String detail : details) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (detail.trim().startsWith(\"ic\") \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[0] \u003d detail.trim().substring(2).trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.trim().startsWith(\"d\") \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[1] \u003d detail.trim().substring(2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.trim().startsWith(\"t\") \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[2] \u003d detail.trim().substring(1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (detail.trim().startsWith(\"r\") \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                parseInput[3] \u003d detail.trim().substring(1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return parseInput;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private static void printMissingInput(String[] parseInput) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(\"    Please input your missing/incorrect detail listed below\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (parseInput[0].equalsIgnoreCase(\"\") || !Checker.isValidNric(parseInput[0].trim())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(Messages.MESSAGE_NRIC_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (parseInput[1].equalsIgnoreCase(\"\") || !Checker.isValidDate(parseInput[1].trim())) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(Messages.MESSAGE_DATE_FORMAT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (parseInput[2].equalsIgnoreCase(\"\") || !Checker.isValidTime(parseInput[2].trim())) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(Messages.MESSAGE_TIME_FORMAT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (parseInput[3].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(\"    /r[REASONS]\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(\"    To abort, enter \\\"clear\\\"\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Prompt user for conformation with this message."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param parseInput details to be displayed to user for confirmation"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return string to be displayed to user for confirmation"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String promptConfirmation(String[] parseInput) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String text \u003d \"        Are you sure all the listed details are correct?\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        NRIC : \" + parseInput[0].toUpperCase().trim() + \"\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Date : \" + parseInput[1].trim() + \"\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Time : \" + parseInput[2].trim() + \"\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"        Reason : \" + parseInput[3].trim() + \"\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"                                                   (Y/N)?\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 3,
      "sitinadiah25": 124,
      "itskesin": 10
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/Checker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class Checker {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * To check format for phone."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param phoneNumber string to be validated"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return boolean true if the time format is correct otherwise false"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidPhoneNum(String phoneNumber) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        //String pattern \u003d \"^[89][0-9]{7}$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //return phoneNumber.matches(pattern);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String pattern \u003d \"([8-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return phoneNumber.matches(pattern);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * check string if fits date format. Only allows for year 2000 and beyond."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param date string to be validated"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return true if correct date format, false otherwise"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String pattern \u003d \"(0?[1-9]|[12][0-9]|3[01])\\\\/(0?[1-9]|1[0-2])\\\\/([0-9]{4})\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        boolean isDate \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (date.matches(pattern)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            isDate \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return isDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * check string if fits time format. (HH:MM)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param time string to be validated"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return true if correct date format, false otherwise."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidTime(String time) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String pattern \u003d \"([0-1][0-9]|2[0-3]):([0-5][0-9])\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return time.matches(pattern);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Check string if is valid blood type."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param blood String to be validated"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return true if is valid, false otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidBloodType(String blood) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String pattern \u003d \"(A|B|AB|O)(\\\\+|-)\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return blood.matches(pattern);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Check string if is numeric."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param number String to be validated"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return true if is numeric, false otherwise."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isNumeric(String number) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String pattern \u003d \"^[0-9]*$\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return number.matches(pattern);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Check string if is valid NRIC."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param nric String to be validated"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return true if is valid, false otherwise."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static boolean isValidNric(String nric) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String pattern \u003d \"(?i)^[STFG]\\\\d{7}[A-Z]$\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return nric.matches(pattern);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Check if the String can be converted to Integer."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param input value to check if is positive integer"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return true if is an integer, false otherwise"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static boolean isPositiveInteger(String input) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            int x \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            return x \u003e\u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 5,
      "sitinadiah25": 2,
      "itskesin": 83
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final DateTimeFormatter DTF \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final DateTimeFormatter DF \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String PATIENT_TAG \u003d \"patient\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String HELP_TAG \u003d \"help\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String APPOINTMENT_TAG \u003d \"appt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String PATIENT_RECORD_TAG \u003d \"pr\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Parses the command given by the user to the other command parses."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param fullCommand the full command given by the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return the command entered by the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException throws an exception for invalid commands"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static Command parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] userCommand \u003d fullCommand.trim().split(\" \", 3); // leading spaces removed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (userCommand.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return parseGeneralCommands(fullCommand, userCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(HELP_TAG)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return new HelpCommand(fullCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[1].equalsIgnoreCase(PATIENT_TAG)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return PatientParser.parse(fullCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[1].equalsIgnoreCase(APPOINTMENT_TAG)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return AppointmentParser.parse(fullCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else if (userCommand[1].equalsIgnoreCase(PATIENT_RECORD_TAG)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            return PatientRecordParser.parse(fullCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Parses and executes general command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param fullCommand the full command given by the user"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param userCommand the full command given by the user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static Command parseGeneralCommands(String fullCommand, String[] userCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(\"help\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new HelpCommand(fullCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"exit\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Prompt the user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The string entered by the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String promptUser() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        Scanner in \u003d HappyPills.scanner;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String reInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return reInput;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Loop the user prompting (y/n)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param output The output after the user enters (y)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return true if the user enters y, false if the user enters n."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static boolean loopPrompt(String output) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        boolean userConfirmation \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        while (!userConfirmation) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String confirmation \u003d promptUser();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            System.out.println(TextUi.DIVIDER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            if (confirmation.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                userConfirmation \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else if (confirmation.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                System.out.println(\"    Please input [y] for yes or [n] for no\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * split the user input according to the tags."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param content the user input."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the array containing the split input."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String[] splitInput(String content) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String[] details;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        if (content.startsWith(\"/\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            details \u003d content.substring(1).split(\" /\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            content \u003d \"@\" + content;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            details \u003d content.split(\" /\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 9,
      "Janicetyy": 5,
      "sitinadiah25": 64,
      "itskesin": 41
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/PatientParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.AddPatientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.DeletePatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.EditPatientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.PatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.IncorrectPatientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.ListPatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.GetPatientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.PatientTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class PatientParser extends Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String NRIC_TAG \u003d \"ic\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String NAME_TAG \u003d \"n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String PHONE_NUMBER_TAG \u003d \"p\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String DATE_OF_BIRTH_TAG \u003d \"dob\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String BLOOD_TYPE_TAG \u003d \"b\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String ALLERGIES_TAG \u003d \"a\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String REMARKS_TAG \u003d \"rm\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Parses user input for patient record into a command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param fullCommand the full command entered by the user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return the command that the user has entered"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static PatientCommand parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] userCommand \u003d fullCommand.trim().split(\" \", 3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean isCommandLengthOne \u003d userCommand.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        userCommand \u003d trimArray(userCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (userCommand[0].trim().equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return parsePatientList(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].trim().equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return parsePatientAdd(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].trim().equalsIgnoreCase(\"get\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return parsePatientGet(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return parsePatientEdit(fullCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (userCommand.length !\u003d 3 || isCommandLengthOne) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_INCORRECT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return new DeletePatientCommand(userCommand[2]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientCommand parsePatientList(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (userCommand.length !\u003d 2 || isCommandLengthOne) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INCORRECT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new ListPatientCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static String[] trimArray(String[] array) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] trimmedArray \u003d new String[array.length];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (int size \u003d 0; size \u003c array.length; size++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            trimmedArray[size] \u003d array[size].trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return trimmedArray;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientCommand parsePatientGet(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (isCommandLengthOne || userCommand[1].isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_NRIC_NOT_PROVIDED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new GetPatientCommand(userCommand[2].toUpperCase());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientCommand parsePatientEdit(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] edit \u003d fullCommand.split(\" \", 4);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (edit.length \u003c 3) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new EditPatientCommand(edit[2], edit[3]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientCommand parsePatientAdd(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (userCommand[1].isEmpty() || isCommandLengthOne) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_DETAILS_NOT_PROVIDED);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return parseAddCommand(userCommand[2]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static boolean isInputEmpty(String input) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return input.equalsIgnoreCase(\"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static boolean hasMissingFields(String[] parseInput) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (int index \u003d 0; index \u003c 5; index++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (parseInput[index].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean isIncorrectFormat \u003d !Checker.isValidNric(parseInput[1].trim())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                || !Checker.isValidDate(parseInput[3].trim()) || !Checker.isValidBloodType(parseInput[4].trim())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                || !Checker.isValidPhoneNum(parseInput[2].trim());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return isIncorrectFormat;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static void printMissingFields(String[] parseInput) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        System.out.println(\"    Please input your missing/incorrect detail listed below\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (isInputEmpty(parseInput[0])) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_NAME_FORMAT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[1].equalsIgnoreCase(\"\") || !Checker.isValidNric(parseInput[1])) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_NRIC_FORMAT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[2].equalsIgnoreCase(\"\") || !Checker.isValidPhoneNum(parseInput[2])) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_PHONE_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[3].equalsIgnoreCase(\"\") || !Checker.isValidDate(parseInput[3])) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_DATE_OF_BIRTH_FORMAT);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[4].equalsIgnoreCase(\"\") || !Checker.isValidBloodType(parseInput[4])) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_BLOOD_TYPE_FORMAT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        System.out.println(\"    To abort, enter \\\"clear\\\"\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientCommand parseAddCommand(String content) throws HappyPillsException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] details \u003d splitInput(content);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] parseInput \u003d {\"\", \"\", \"\", \"\", \"\", \"NIL\", \"NIL\"};"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        parseInput \u003d parseInput(details, parseInput);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        while (hasMissingFields(parseInput)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            printMissingFields(parseInput);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String input \u003d promptUser().trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (input.equalsIgnoreCase(\"clear\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_COMMAND_ABORTED);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String[] updates \u003d splitInput(input);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            updates \u003d trimArray(updates);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            parseInput(updates, parseInput);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!loopPrompt(promptConfirmation(parseInput))) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_COMMAND_ABORTED); // check"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new AddPatientCommand(parseInput[0].trim(), parseInput[1].toUpperCase().trim(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                Integer.parseInt(parseInput[2].trim()), parseInput[3].trim(), parseInput[4].trim(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[5].trim(), parseInput[6].trim());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static String[] parseInput(String[] details, String[] parseInput) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (String detail : details) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (detail.startsWith(NAME_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[0] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(NRIC_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[1] \u003d detail.substring(2).trim().toUpperCase();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(PHONE_NUMBER_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[2] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(DATE_OF_BIRTH_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[3] \u003d detail.substring(3).trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(BLOOD_TYPE_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[4] \u003d detail.substring(1).trim().toUpperCase();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(ALLERGIES_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[5] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(REMARKS_TAG) \u0026\u0026 detail.trim().length() \u003e 3) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[6] \u003d detail.substring(2).trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                PatientTextUi.patientNotAddedMessage(detail);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return parseInput;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static void updateInput(String[] parseInput, String[] updates) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (String update : updates) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (update.trim().startsWith(\"n\") \u0026\u0026 parseInput[0].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[0] \u003d update.substring(1).trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (update.trim().startsWith(\"ic\") \u0026\u0026 ((parseInput[1].equalsIgnoreCase(\"\"))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    || !Checker.isValidNric(parseInput[1].trim()))) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[1] \u003d update.trim().substring(2).toUpperCase().trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (update.trim().startsWith(\"p\") \u0026\u0026 ((parseInput[2].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    || !Checker.isPositiveInteger(parseInput[2].trim())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    || !Checker.isValidPhoneNum(parseInput[2].trim())))) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[2] \u003d update.substring(1).trim();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (update.trim().startsWith(\"dob\") \u0026\u0026 (parseInput[3].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    || !Checker.isValidDate(parseInput[3].trim()))) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[3] \u003d update.trim().substring(3).trim();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (update.trim().startsWith(\"b\") \u0026\u0026 (parseInput[4].equalsIgnoreCase(\"\"))"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    || !Checker.isValidBloodType(parseInput[4].trim())) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[4] \u003d update.trim().substring(1).trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                System.out.println(update);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Prompt user for conformation with this message."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param parseInput details to be displayed to user for confirmation"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return string to be displayed to user for confirmation"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static String promptConfirmation(String[] parseInput) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String text \u003d \"        Are you sure all the listed details are correct?\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Name : \" + parseInput[0].trim() + \"\\n\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        NRIC : \" + parseInput[1].toUpperCase().trim() + \"\\n\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Phone Number : \" + parseInput[2].trim() + \"\\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        DOB : \" + parseInput[3].trim() + \"\\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Blood Type : \" + parseInput[4].trim() + \"\\n\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Allergies : \" + parseInput[5].trim() + \"\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Remarks : \" + parseInput[6].trim() + \"\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"                                                   (Y/N)?\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 213,
      "sitinadiah25": 4,
      "itskesin": 9
    }
  },
  {
    "path": "src/main/java/seedu/happypills/logic/parser/PatientRecordParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.AddPatientRecordCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.DeletePatientRecordCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.EditPatientRecordCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.FindPatientRecordCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.IncorrectPatientRecordCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.ListPatientRecordCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientrecordcommands.PatientRecordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.PatientRecordTextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * This class is used to parse the user input for patient record commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class PatientRecordParser extends Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String NRIC_TAG \u003d \"ic\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String SYMPTOM_TAG \u003d \"sym\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String DIAGNOSIS_TAG \u003d \"diag\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String DATE_TAG \u003d \"d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String TIME_TAG \u003d \"t\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Parses user input for patient record into a command for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param fullCommand the full command entered by the user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return the command that the user has entered"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static PatientRecordCommand parse(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] userCommand \u003d fullCommand.split(\" \", 3);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean isCommandLengthOne \u003d userCommand.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        userCommand \u003d trimArray(userCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (userCommand[0].equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return parsePatientRecordList(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"add\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return parsePatientRecordAdd(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return parsePatientRecordFind(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return parsePatientRecordEdit(fullCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else if (userCommand[0].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return parsePatientRecordDelete(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientRecordCommand parsePatientRecordDelete(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkEmptyNric(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] input \u003d userCommand[2].split(\" \", 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        input \u003d trimArray(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkIndexValidity(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkNricValidity(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new DeletePatientRecordCommand(input[0].toUpperCase(), Integer.parseInt(input[1]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static void checkNricValidity(String[] input) throws HappyPillsException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isValidNric(input[0].toUpperCase())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static void checkIndexValidity(String[] input) throws HappyPillsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isPositiveInteger(input[1])) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static void checkEmptyNric(String[] userCommand, boolean isCommandLengthOne) throws HappyPillsException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (isCommandLengthOne || userCommand[1].isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_NRIC_NOT_PROVIDED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientRecordCommand parsePatientRecordFind(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkEmptyNric(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] input \u003d userCommand[2].split(\" \", 2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        input \u003d trimArray(input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkIndexValidity(input);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkNricValidity(input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new FindPatientRecordCommand(input[0].toUpperCase(), Integer.parseInt(input[1]));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientRecordCommand parsePatientRecordAdd(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (isCommandLengthOne || userCommand[1].isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_RECORD_DETAILS_NOT_PROVIDED);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return parseAddCommand(userCommand[2]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientRecordCommand parsePatientRecordList(String[] userCommand, boolean isCommandLengthOne)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throws HappyPillsException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        checkEmptyNric(userCommand, isCommandLengthOne);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isValidNric(userCommand[2].toUpperCase())) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new ListPatientRecordCommand(userCommand[2].toUpperCase());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static String[] trimArray(String[] array) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] trimmedArray \u003d new String[array.length];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (int size \u003d 0; size \u003c array.length; size++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            trimmedArray[size] \u003d array[size].trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return trimmedArray;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientRecordCommand parsePatientRecordEdit(String fullCommand) throws HappyPillsException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] edit \u003d fullCommand.split(\" \", 5);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (edit.length \u003c 4) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isPositiveInteger(edit[3].trim())) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!Checker.isValidNric(edit[2].toUpperCase().trim())) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new EditPatientRecordCommand("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                edit[2].trim().toUpperCase(), Integer.parseInt(edit[3].trim()), edit[4].trim());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static boolean isInputEmpty(String input) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return input.equalsIgnoreCase(\"\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static boolean hasMissingFields(String[] parseInput) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (int index \u003d 0; index \u003c 5; index++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (parseInput[index].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean isIncorrectFormat \u003d !Checker.isValidNric(parseInput[0])"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                || !Checker.isValidDate(parseInput[3]) || !Checker.isValidTime(parseInput[4]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return isIncorrectFormat;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientRecordCommand parseAddCommand(String content) throws HappyPillsException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] details;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        details \u003d splitInput(content);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String[] parseInput \u003d {\"\", \"\", \"\", \"\", \"\", \"\"};"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        parseInput \u003d parseInput(details, parseInput);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        while (hasMissingFields(parseInput)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            printMissingFields(parseInput);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String input \u003d promptUser().trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (input.equalsIgnoreCase(\"clear\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(Messages.MESSAGE_COMMAND_ABORTED);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            String[] updates \u003d splitInput(input);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            updates \u003d trimArray(updates);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            updateInput(parseInput, updates);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (!loopPrompt(PatientRecordTextUi.promptConfirmation(parseInput))) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            return new IncorrectPatientRecordCommand(Messages.MESSAGE_PATIENT_RECORD_NOT_ADDED);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return new AddPatientRecordCommand(parseInput[0].toUpperCase(), parseInput[1],"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[2], parseInput[3], parseInput[4]);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static String[] parseInput(String[] details, String[] parseInput) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (String detail : details) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (detail.startsWith(NRIC_TAG)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[0] \u003d detail.substring(2).trim().toUpperCase();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(SYMPTOM_TAG)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[1] \u003d detail.substring(3).trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(DIAGNOSIS_TAG)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[2] \u003d detail.substring(4).trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(DATE_TAG)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[3] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (detail.startsWith(TIME_TAG)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[4] \u003d detail.substring(1).trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                PatientRecordTextUi.patientRecordNotAddedMessage(detail);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return parseInput;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static void updateInput(String[] parseInput, String[] updates) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        for (String update : updates) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (update.startsWith(NRIC_TAG) \u0026\u0026 (parseInput[0].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    || !Checker.isValidNric(parseInput[0]))) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[0] \u003d update.substring(2).toUpperCase().trim();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (update.startsWith(SYMPTOM_TAG) \u0026\u0026 (parseInput[1].equalsIgnoreCase(\"\"))) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[1] \u003d update.substring(3).trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (update.startsWith(DIAGNOSIS_TAG) \u0026\u0026 parseInput[2].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[2] \u003d update.substring(4).trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (update.startsWith(DATE_TAG) \u0026\u0026 (parseInput[3].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    || !Checker.isValidDate(parseInput[3]))) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[3] \u003d update.substring(1).trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else if (update.startsWith(TIME_TAG) \u0026\u0026 (parseInput[4].equalsIgnoreCase(\"\")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                    || !Checker.isValidTime(parseInput[4]))) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                parseInput[4] \u003d update.substring(1).trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static void printMissingFields(String[] parseInput) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        System.out.println(\"    Please input your missing/incorrect detail listed below\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (isInputEmpty(parseInput[0]) || !Checker.isValidNric(parseInput[0])) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_NRIC_FORMAT);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[1].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_SYMPTOM_FORMAT);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[2].equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_DIAGNOSIS_FORMAT);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[3].equalsIgnoreCase(\"\") || !Checker.isValidDate(parseInput[3])) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_DATE_FORMAT);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (parseInput[4].equalsIgnoreCase(\"\") || !Checker.isValidTime(parseInput[4])) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(Messages.MESSAGE_TIME_FORMAT);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        System.out.println(\"    To abort, enter \\\"clear\\\"\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 215,
      "itskesin": 16
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/Appointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import static java.lang.String.valueOf;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * Represents an appointment."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " * It also functions as base class for appointments from which specialised tasks are inherited from."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Stores the details of the appointment."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected static int count \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String reason;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    protected String appointmentId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    protected Boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Constructor for Appointment class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * It creates a new appointment with the details provided by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param nric NRIC of patient."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param reason reason for appointment."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param date date of appointment."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param time time of appointment."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public Appointment(String nric, String reason, String date, String time) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.appointmentId \u003d valueOf(count);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        count +\u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Constructor for Appointment class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * It creates a new appointment with the details provided by load function in storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param id id of the appointment"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param nric NRIC of patient."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param reason reason for appointment."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param date date of appointment."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param time time of appointment."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param done status of whether the appointment is over"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public Appointment(String id, String nric, String date, String time,String reason, Boolean done) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.appointmentId \u003d id;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        count +\u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setNric(String nric) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getReason() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return reason;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setReason(String reason) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setTime(String time) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setAppointmentId(String appointmentId) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        this.appointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String getAppointmentId() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return appointmentId;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String status \u003d this.isDone ? \"Yes\" : \"No\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String text \u003d \"        NRIC     : \" + this.nric + \"\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Date     : \" + this.date + \"\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Time     : \" + this.time + \"\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Reason   : \" + this.reason + \"\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        ID       : \" + this.appointmentId + \"\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        Attended : \" + status + \"\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private String doneString(boolean done) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return done ? \"T\" : \"F\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Create a string with all the appointment\u0027s data for storage to a text file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Each variable is separated with | as a divider."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return a formatted string with appointment\u0027s data."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String text \u003d this.appointmentId + \"|\" + this.nric + \"|\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + this.date + \"|\" + this.time + \"|\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + this.reason + \"|\" + doneString(this.isDone) + System.lineSeparator();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 38,
      "sitinadiah25": 99
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/AppointmentMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import static java.lang.String.valueOf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "public class AppointmentMap {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    private final Map\u003cString, Appointment\u003e argMultimap \u003d new HashMap\u003cString, Appointment\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Adds an appointment into the AppointmentMap."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param appointment the appointment to be added into the map."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @throws HappyPillsException throws exception if there is already an appointment with the given datetime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void addAppointment(Appointment appointment) throws HappyPillsException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        int current \u003d argMultimap.size() + 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        //appointment.setAppointmentId(valueOf(current));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!argMultimap.containsKey(appointment.appointmentId)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            argMultimap.put(appointment.appointmentId,appointment);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public Iterable\u003c? extends Map.Entry\u003e entrySet() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return argMultimap.entrySet();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return argMultimap.isEmpty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public Appointment get(String appointmentID) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return argMultimap.get(appointmentID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public boolean containsKey(String appointmentId) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return argMultimap.containsKey(appointmentId);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public void remove(String appointmentId) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        argMultimap.remove(appointmentId);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "Janicetyy": 7,
      "sitinadiah25": 42
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.logic.parser.Checker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Represents a patient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * It also functions as base class for patients from which specialised tasks are inherited from."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Stores the description of the patient."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected int phoneNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String dateOfBirth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String bloodType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String allergies \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String remarks \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected ArrayList\u003cAppointment\u003e appointments \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Constructor for Patient Class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * It creates a new patient with the description provided by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param name          Name of the patient."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric          NRIC of the patient."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param phoneNumber   Phone number of the patient."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param dateOfBirth   Date of birth of the patient."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param bloodType     Blood type of the patient."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param allergies     Allergies the patient may have."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param remarks       Remarks for the patient."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public Patient(String name, String nric, int phoneNumber, String dateOfBirth,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                   String bloodType, String allergies, String remarks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (dateValidation(dateOfBirth)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            this.appointments \u003d new ArrayList\u003cAppointment\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            System.out.println(\"    Date of birth is invalid. Please try again in this format:\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                                + \"\\n    DD/MM/YYYY\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the status of the task in form of an icon."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * \"\\u2713\" is returned to denote that the task is complete."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * \"\\u2718\" is returned to denote that the task is incomplete."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return statusIcon Represents the current status of the task as described above."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the nric of the patient."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return nric Represents the nric of the patient."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.nric;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the phone number of the patient."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return phoneNumber Represents the phone number of the patient."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public int getPhoneNumber() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.phoneNumber;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the date of birth of the patient."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return phoneNumber Represents the date of birth of the patient."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getDateOfBirth() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.dateOfBirth;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the blood type of the patient."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return phoneNumber Represents the blood type of the patient."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getBloodType() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.bloodType;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the allergies of the patient."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return allergies Represents the allergies of the patient."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getAllergies() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.allergies;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the remarks of the patient."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return remarks Represents the remarks of the patient."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return this.remarks;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Returns the ArrayList of appointments of the patient."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return appointments Represents the ArrayList of appointments of the patient."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public ArrayList\u003cAppointment\u003e getAppointments() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return appointments;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void addAppointment(Appointment appt) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.appointments.add(appt);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String text \u003d \"        Name : \" + this.name + \"\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        NRIC : \" + this.nric + \"\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Phone Number : \" + this.phoneNumber + \"\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        DOB : \" + this.dateOfBirth + \"\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Blood Type : \" + this.bloodType + \"\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Allergies : \" + this.allergies + \"\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Remarks : \" + this.remarks + \"\\n\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setPhoneNumber(int phoneNumber) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setAllergies(String allergies) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setBloodType(String bloodType) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Create a string with all the patient\u0027s data for storage to a text file."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Each variable is separated with | as a divider."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return a formatted string with patient\u0027s data."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String text \u003d this.name + \"|\" + this.nric + \"|\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + this.phoneNumber + \"|\" + this.dateOfBirth + \"|\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + this.bloodType + \"|\" + this.allergies + \"|\" + this.remarks + System.lineSeparator();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static boolean dateValidation(String date) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        boolean status \u003d false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (Checker.isValidDate(date)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                dateFormat.parse(date);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                status \u003d true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                status \u003d false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 195,
      "sitinadiah25": 4
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/PatientMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@author itskesin"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class PatientMap {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private final Map\u003cString, Patient\u003e argMultimap \u003d new HashMap\u003cString, Patient\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Associates the specified argument value with key in this map."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patient  Patient\u0027s details"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @throws HappyPillsException exception if NRIC already exist"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void add(Patient patient) throws HappyPillsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        if (!argMultimap.containsKey(patient.nric)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            argMultimap.put(patient.nric, patient);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            throw new HappyPillsException(Messages.MESSAGE_PATIENT_IS_IN_THE_MAP);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public Patient get(String nric) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.get(nric);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public boolean containsKey(String patientNric) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.containsKey(patientNric);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.isEmpty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public Iterable\u003c? extends Map.Entry\u003e entrySet() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return argMultimap.entrySet();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void remove(String nric) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        argMultimap.remove(nric);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 4,
      "itskesin": 48
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/PatientRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import static java.lang.String.valueOf;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Represents an patient record."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * It also functions as base class for visit from which specialised tasks are inherited from."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class PatientRecord {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Stores the details of the appointment."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String symptom;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String diagnosis;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Constructor for Visit class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * It creates a new appointment with the details provided by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric NRIC of patient."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param symptom patient\u0027s symptom."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param diagnosis patient\u0027s diagnosis."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param date date of appointment."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param time time of appointment."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public PatientRecord(String nric, String symptom, String diagnosis, String date, String time) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.symptom \u003d symptom;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getSymptom() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return symptom;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setSymptom(String symptom) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.symptom \u003d symptom;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getDiagnosis() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return diagnosis;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setDiagnosis(String diagnosis) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void setTime(String time) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return  \"        NRIC : \" + nric.trim().toUpperCase() + \"\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Symptom : \" + symptom.trim() + \"\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Diagnosis : \" + diagnosis.trim() + \"\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Date : \" + date.trim() + \"\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        time : \" + time.trim() + \"\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Create a string with all the patient\u0027s record for storage to a text file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Each variable is separated with | as a divider."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @return a formatted string with patient\u0027s records."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return  nric.trim().toUpperCase() + \"|\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + symptom.trim() + \"|\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + diagnosis.trim() + \"|\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + date.trim() + \"|\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + time.trim() + System.lineSeparator();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 96
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/data/PatientRecordMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class PatientRecordMap {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private final Map\u003cString, ArrayList\u003cPatientRecord\u003e\u003e argMultimap \u003d new HashMap\u003cString, ArrayList\u003cPatientRecord\u003e\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Adds an Visit into the VisitMap."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param patientRecord the appointment to be added into the map."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param nric nric for the patient"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @throws HappyPillsException throws exception if there is already an appointment with the given datetime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void addPersonalRecord(PatientRecord patientRecord, String nric) throws HappyPillsException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        ArrayList\u003cPatientRecord\u003e patientRecords \u003d argMultimap.get(nric);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        // if list does not exist create it"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (patientRecords \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            patientRecords \u003d new ArrayList\u003cPatientRecord\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            patientRecords.add(patientRecord);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            argMultimap.put(patientRecord.getNric(), patientRecords);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            // add if item is not already in list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            if (!patientRecords.contains(patientRecord.nric)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                patientRecords.add(patientRecord);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                argMultimap.put(patientRecord.getNric(), patientRecords);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                throw new HappyPillsException(\"    The Patient Record is already in the database.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                        + \"    Please try again.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public Iterable\u003c? extends Map.Entry\u003e entrySet() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.entrySet();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.isEmpty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public ArrayList\u003cPatientRecord\u003e get(String nric) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.get(nric);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public boolean containsKey(String appointmentId) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        return argMultimap.containsKey(appointmentId);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void remove(String nric) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        argMultimap.remove(nric);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void removeVisit(String nric, int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        ArrayList\u003cPatientRecord\u003e patientRecords \u003d argMultimap.get(nric);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        patientRecords.remove(index - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public void removePersonalRecord(ArrayList\u003cPatientRecord\u003e patientRecord, String patientNric) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        argMultimap.put(patientNric, patientRecord);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 72
    }
  },
  {
    "path": "src/main/java/seedu/happypills/model/exception/HappyPillsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "public class HappyPillsException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * Updates Exception message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     * @param message Contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public HappyPillsException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 14
    }
  },
  {
    "path": "src/main/java/seedu/happypills/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.HappyPills;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " * A class that manages read and write operations to file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String PATIENT_FILEPATH \u003d \"data/patient.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String APPOINTMENT_FILEPATH \u003d \"data/appointment.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String PATIENT_RECORD_FILEPATH \u003d \"data/patientrecord.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    Logger logger \u003d Logger.getLogger(HappyPills.class.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Overwrite file with a formatted string of the entire list provided. Creates file if it does not exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Used for edit and delete commands"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to save to, requires directory/file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param dataString  a formatted string of a list of items to be saved to file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws IOException if unable to save to file, possibly due to interruptions."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void writeAllToFile(String filePath, String dataString) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File d \u003d new File(filePath.substring(0, filePath.lastIndexOf(\u0027/\u0027)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!d.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            d.mkdir();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.write(dataString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Add new single line formatted strings to file. Creates file if it does not exist."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to save to, requires directory/file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param dataString  single item as string to be saved to file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws IOException if unable to save to file, possibly due to interruptions."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void addSingleItemToFile(String filePath, String dataString) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File d \u003d new File(filePath.substring(0, filePath.lastIndexOf(\u0027/\u0027)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!d.exists()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            d.mkdir();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath,true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.write(dataString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Read and send file data to parse line by line as string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of historical patients patient list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to read from."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return patientList of all patients found in the file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws FileNotFoundException if the file specified by directory/filename does not exist."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static PatientMap loadPatientsFromFile(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientMap storedPatients \u003d new PatientMap();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String stringInput \u003d s.nextLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            parsePatientFileContent(stringInput, storedPatients);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return storedPatients;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * convert a single line data into values of a patients and add it back to the provided patientList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param savedString a single string with all the data required for a patient."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param storedPatients a list which the patient details retrieved should be added into."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static void parsePatientFileContent(String savedString, PatientMap storedPatients) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String[] dataString \u003d savedString.split(\"[|]\", 7);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient tempPatient \u003d new Patient(dataString[0], dataString[1],"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                Integer.parseInt(dataString[2]), dataString[3], dataString[4],"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                dataString[5], dataString[6]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            storedPatients.add(tempPatient);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Read and send file data to parse line by line as string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of historical appointment list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to read from."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Shared map of all patient"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return patientList of all patients found in the file."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws FileNotFoundException if the file specified by directory/filename does not exist."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static AppointmentMap loadAppointmentFromFile(String filePath, PatientMap patients)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        AppointmentMap storedAppt \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String stringInput \u003d s.nextLine();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            parseAppointmentFileContent(stringInput, storedAppt, patients);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return storedAppt;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * convert a single line data into values of an appointment and add it back to the provided apptList."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param savedString a single string with all the data required for a appointment."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param storedAppt a list which the appointment details retrieved should be added into."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static void parseAppointmentFileContent(String savedString,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                                                    AppointmentMap storedAppt, PatientMap patients) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String[] dataString \u003d savedString.split(\"[|]\", 7);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Boolean isDone \u003d dataString[5].equals(\"T\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment tempAppt \u003d new Appointment(dataString[0], dataString[1],"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                dataString[2], dataString[3], dataString[4], isDone);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient patient \u003d (Patient) patients.get(dataString[1]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (patient !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                patient.addAppointment(tempAppt);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                storedAppt.addAppointment(tempAppt);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Read and send file data to parse line by line as string."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of historical patients record list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param filePath location of file to read from."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients Shared map of all patients"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return patientList of all patients found in the file."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @throws FileNotFoundException if the file specified by directory/filename does not exist."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static PatientRecordMap loadPatientRecordFromFile(String filePath, PatientMap patients)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        PatientRecordMap storedPr \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String stringInput \u003d s.nextLine();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            parsePatientRecordFileContent(stringInput, storedPr, patients);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return storedPr;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * convert a single line data into values of an appointment and add it back to the provided apptList."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param savedString a single string with all the data required for a appointment."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param storedPr a list which the patient record details retrieved should be added into."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    private static void parsePatientRecordFileContent(String savedString,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                                                    PatientRecordMap storedPr, PatientMap patients) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String[] dataString \u003d savedString.split(\"[|]\", 5);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        PatientRecord tempPr \u003d new PatientRecord(dataString[0], dataString[1],"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                dataString[2], dataString[3], dataString[4]);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient patient \u003d (Patient) patients.get(dataString[0]);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (patient !\u003d null) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                storedPr.addPersonalRecord(tempPr,dataString[0]);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 204,
      "itskesin": 5
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/AppointmentTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class AppointmentTextUi extends TextUi {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String GET_EMPTY_APPOINTMENT_LIST_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    There are no appointments in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String APPOINTMENT_NOT_FOUND_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    The appointment cannot be found. Please try again.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Shows list of appointments in the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments The list of appointments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return message to be displayed to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getAppointmentList(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Here is your list of appointments:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"    ID    | date       | time      | NRIC\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry appointment : appointments.entrySet()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Appointment a \u003d (Appointment)appointment.getValue();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String nric \u003d a.getNric();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String id \u003d a.getAppointmentId()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(6 - a.getAppointmentId().length());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String date \u003d a.getDate()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(11 - a.getDate().length());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String time \u003d a.getTime()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(10 - a.getTime().length());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            message +\u003d \"    \" + id + \"| \" + date + \"| \" + time + \"| \" + nric + \"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message +\u003d DIVIDER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Generate a success message upon adding the appointment."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment the appointment which the program added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return Appointment details if any, and a notification message otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String addAppointmentSuccessMessage(Appointment appointment) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Appointment has been added with Appointment ID \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + appointment.getAppointmentId() + \".\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Generate a success message upon finding the correct appointment."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient the patient which the program have to find the appointment for."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return Appointment details if any, and a notification message otherwise."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getAppointmentSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here are the patient\u0027s appointments:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    ID    | NRIC      | Date       | Time      | Reason      \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ArrayList\u003cAppointment\u003e tempList \u003d patient.getAppointments();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Appointment appointment : tempList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String id \u003d appointment.getAppointmentId()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(6 - appointment.getAppointmentId().length());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String nric \u003d appointment.getNric()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(10 - appointment.getNric().length());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String reason \u003d appointment.getReason();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String date \u003d appointment.getDate()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(11 - appointment.getDate().length());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String time \u003d appointment.getTime()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + repeat(10 - appointment.getTime().length());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            content +\u003d \"    \" + id + \"| \" + nric + \"| \" + date + \"| \" + time + \"| \" + reason + \"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            returnMessage \u003d \"    The patient does not have any appointments scheduled.\\n\" + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            returnMessage +\u003d content + DIVIDER;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Display updated patient\u0027s appointment."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment that was updated."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return The patient\u0027s updated appointment."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String editAppointmentSuccessMessage(Appointment appointment) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Patient appointment have been updated as follows:\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + appointment + DIVIDER;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Display updated patient\u0027s appointment."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointment The appointment that was updated."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return The patient\u0027s updated appointment."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String doneAppointmentSuccessMessage(Appointment appointment) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    The following appointment has been marked done:\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + appointment + DIVIDER;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 88,
      "sitinadiah25": 18
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/HelpTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class HelpTextUi extends TextUi {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Construct a string for incomplete commands, probably missing something."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param helpString provide the help command that user can use to find the right format"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a string for incomplete commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String incompleteCommandString(String helpString) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String msg \u003d \"    Command is incomplete. Please use the \" + helpString + \" command to find out more.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String GENERAL_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    HappyPills Commands\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    General Commands:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      help | Displays all of HappyPill\u0027s Commands\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      exit | Exits the program\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Patient Details Commands:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add patient | Adds a patient into the program\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list patient | Lists all the patients in the program\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      get patient | Retrieves the details of a given patient\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit patient | Edits a patient\u0027s detail\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete patient | Deletes a patient from the program\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Patient Medial Records Commands:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add pr | Adds a prior patient records into the program\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit pr | Edits a prior patient record\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete pr | Deletes a prior patient record\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list pr | List down all records for a particular patient\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      find pr | Retrieves a particular record\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Appointment Scheduling Commands:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add appt | Adds an appointment into the program\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list appt | Lists all the appointments into the program\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit appt | Edits an appointment in the program\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete appt | Deletes an appointment from the program\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      done appt | Marks an appointment as done\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      find appt | Finds all the appointments under a patient\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    ---------------------------------------------------\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    For more specific command instructions, enter `help [COMMAND]`\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      Example: help add appt\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String EXIT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To exit the program, run the following command:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      exit\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The above command will save the current patient records and terminate the program.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    //Patient help Strings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String GENERAL_PATIENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Patient Details Commands:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add patient | Adds a patient into the program\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list patient | Lists all the patients in the program\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      get patient | Retrieves the details of a given patient\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit patient | Edits a patient\u0027s detail\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete patient | Deletes a patient from the program\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    For more specific command instructions, enter `help [COMMAND]`\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      Example: help add patient\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String ADD_PATIENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To add a new patient into the program, use the following command:\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE and optional details are in parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      add patient /ic NRIC /n NAME /p PHONE_NUMBER /dob DOB \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"/b BLOOD_TYPE /a[Allergies] /rm[Remarks]\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The command above adds a new patient.\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String LIST_PATIENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To retrieve a list of all the patients within the program,\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    run the following command:\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list patient\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String GET_PATIENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To retrieve a patient\u0027s information, run the following command:\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      get patient NRIC\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Example:\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      get patient S9999999Z\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The command above will display information regarding the patient with NRIC S9999999Z.\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String EDIT_PATIENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To edit a patient\u0027s information, run the following command:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE and optional details are in parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit patient NRIC /n[NAME] to edit patient\u0027s name\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit patient NRIC /dob[DOB] to edit patient\u0027s date of birth\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit patient NRIC /b[BLOOD_TYPE] to edit patient\u0027s blood type\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit patient NRIC /p[PHONE_NUMBER] to edit patient\u0027s phone number,\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit patient NRIC /a[ALLERGIES] to edit patient\u0027s allergies,\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit patient NRIC /r[REMARKS] to edit patient\u0027s remarks\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Do note that you can only edit one parameter at a time and \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \" editing the patient\u0027s records will overwrite any previous information.\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Adding of allergies or remarks can be done with the add command.\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String DELETE_PATIENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To delete a patient, run the following command:\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      delete patient NRIC\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The user will be prompted to confirm if they would like to delete the patient\u0027s records.\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that deletion cannot be undone.\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    //Patient Record Help Strings"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String GENERAL_PATIENT_RECORD_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Patient Medial Records Commands:\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add pr | Adds a prior patient records into the program\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit pr | Edits a prior patient record\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete pr | Deletes a prior patient record\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list pr | List down all records for a particular patient\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      find pr | Retrieves a particular record\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    For more specific command instructions, enter `help [COMMAND]`\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      Example: help add pr\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String ADD_PATIENT_RECORD_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To add a new patient record into the program, use the following command:\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      add pr /ic NRIC /sym SYMPTOMS /diag DIAGNOSIS /d DATE /t TIME\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The command above adds a new patient medical record.\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String LIST_PATIENT_RECORD_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To retrieve a list of all the patient records of a particular patient,\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    run the following command:\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      list pr NRIC\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String EDIT_PATIENT_RECORD_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To edit a patient\u0027s records, run the following command:\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE and optional details are in parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The INDEX can be found by running the list pr command.\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit pr NRIC INDEX /sym [SYMPTOMS] /diag [DIAGNOSIS] /d [DATE] /t [TIME]\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    You can also edit a single attribute: \\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit pr NRIC INDEX /sym [SYMPTOMS] to edit patient\u0027s symptoms,\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that editing the patient\u0027s records will overwrite any previous information.\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String DELETE_PATIENT_RECORD_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To delete a patient\u0027s records on a particular visit, run the following command:\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The INDEX can be found by running the list pr command.\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      delete pr NRIC INDEX\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The user will be prompted to confirm if they would like to delete the patient\u0027s records.\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that deletion cannot be undone.\\n\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FIND_PATIENT_RECORD_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To get a better look at a patient\u0027s particular record, run the following command:\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The INDEX can be found by running the list pr command.\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      find pr NRIC INDEX\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    //Appointment"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String GENERAL_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Appointment Scheduling Commands:\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      add appt | Adds an appointment into the program\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list appt | Lists all the appointments into the program\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      edit appt | Edits an appointment in the program\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      delete appt | Deletes an appointment from the program\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      done appt | Marks an appointment as done\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      find appt | Finds all the appointments under a patient\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    For more specific command instructions, enter `help [COMMAND]`\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      Example: help add appt\\n\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String ADD_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To add a new appointment into the program, use the following command:\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE and optional details are in parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    A unique ID will be given to every appointment added.\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      add appt /ic NRIC /d DATE /t TIME /r REASON\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The command above adds a new appointment.\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Please ensure that the date is formatted as DD-MM-YYYY and time as HH:mm:ss\\n\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String LIST_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To retrieve a list of all the appointments within the program,\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    run the following command:\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"      list appt\\n\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String EDIT_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To edit a patient\u0027s appointment, run the following command:\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE and optional details are in parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit appt NRIC APPT_ID /d [DD/MM/YYYY] to edit appointment\u0027s date,\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit appt NRIC APPT_ID /t [HH:MM] to edit appointment\u0027s time,\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      edit appt NRIC APPT_ID /r [REASON] to edit appointment\u0027s reason\\\"\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that editing the patient\u0027s records will overwrite any previous information.\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    The apptID can be found using \\\"find appt NRIC\\\"\\n\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String DELETE_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To delete an appointment, run the following command:\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      delete appt NRIC APPT_ID\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The user will be prompted to confirm if they would like to delete the patient\u0027s records.\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    Do note that deletion cannot be undone.\\n\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FIND_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To find all of a patient\u0027s appointments, run the following command:\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      find appt NRIC\\n\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String DONE_APPOINTMENT_HELP_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    To make an appointment as done, run the following command:\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"    Note: patient details are in UPPER CASE\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            + \"      done appt NRIC APPT_ID\\n\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 158,
      "sitinadiah25": 39,
      "itskesin": 1
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static seedu.happypills.ui.TextUi.DIVIDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"    Command is invalid. \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"Enter help to know how to use HappyPills.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_COMMAND \u003d \"    Command is incomplete. Please use the help command.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + DIVIDER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d \"    Patient does not exist. Please try again.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + DIVIDER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_ADDED \u003d \"    Patient Record has been added.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + DIVIDER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_MISSING_FIELD \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"    Please input all necessary fields for the edit command.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"    Invalid index.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_NRIC \u003d \"    Invalid NRIC format.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_NRIC_NOT_PROVIDED \u003d \"    NRIC of the patient not provided\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_DETAILS_NOT_PROVIDED \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"    Patient\u0027s record details are not provided.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_PATIENT_DETAILS_NOT_PROVIDED \u003d \"    Patient\u0027s detail is empty.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INFORM_MISSING \u003d \"    Please input your missing detail listed below\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_NRIC_FORMAT \u003d \"    /ic NRIC (Format: [S/T][7-digits][A-Z])\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_SYMPTOM_FORMAT \u003d \"    /sym SYMPTOMS\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_DIAGNOSIS_FORMAT \u003d \"    /diag DIAGNOSIS\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_DATE_FORMAT \u003d \"    /d DATE  (Format: DD/MM/YYYY)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_TIME_FORMAT \u003d \"    /t TIME (Format: HH:mm)\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_COMMAND_ABORTED \u003d \"    Command has been aborted.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_NOT_ADDED \u003d \"    The current information is not added.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    Please add all the details again! Thank you.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + DIVIDER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_USER_CONFIRMATION \u003d \"    Please input [y] for yes or [n] for no\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PATIENT_RECORD_NOT_FOUND \u003d \"    Patient record not found. Please try again.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_EDIT_ERROR \u003d \"    Something went wrong, the edit could not be made.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"    Invalid date or date format(DD/MM/YYYY).\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_OF_BIRTH \u003d \"    Please ensure that the DATE is in DD/MM/YYYY \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"    Invalid time or time format(HH:MM).\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_INVALID_PHONE_NUMBER \u003d \"    Please ensure that all the phone number is 8 digit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static final String MESSAGE_INVALID_EDIT_APPOINTMENT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"    Please try again. To learn more about the Edit appointment command, \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + \"\\n    enter \\\"help edit appt\\\"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static final String MESSAGE_INVALID_EDIT_PR \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            \"    Please try again. To learn more about the Edit patient record command, \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + \"\\n    enter \\\"help edit pr\\\"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static final String MESSAGE_INVALID_EDIT_PATIENT \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            \"    Please try again. To learn more about the Edit patient command, \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + \"\\n    enter \\\"help edit patient\\\"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_EMPTY_PATIENT \u003d \"    There are no patients in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_INDEX_OUT_OF_BOUND \u003d \"    No record found with given Index\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_PATIENT_IS_IN_THE_MAP \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            \"    Patient is already in the list. Please use help command.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_CONTENT_IS_EMPTY \u003d \"    Please do not leave the field as empty string\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_NAME_FORMAT \u003d \"    /n NAME\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String MESSAGE_PHONE_NUMBER_FORMAT \u003d \"    /p PHONE (Format: 8-digit number starting with 8/9)\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_BLOOD_TYPE_FORMAT \u003d \"    /b BLOOD TYPE (Format: A/B/O/AB with +/-)\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_INCORRECT_INPUT_FORMAT \u003d \"    Incorrect input format. Sorry please try again\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String MESSAGE_DATE_OF_BIRTH_FORMAT \u003d \"    /dob DATE OF BIRTH (Format: DD/MM/YYYY)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 10,
      "sitinadiah25": 8,
      "itskesin": 45
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/PatientRecordTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class PatientRecordTextUi extends TextUi {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format a list patient record success message for user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientRecords patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientRecordListSuccessMessage(ArrayList\u003cPatientRecord\u003e patientRecords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String nric \u003d patientRecords.get(0).getNric();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"    Here is the list of \" + nric + \"\u0027s records:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    ID    | Date       | Time     \\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (int index \u003d 0; index \u003c patientRecords.size(); index++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            String id \u003d Integer.toString(index + 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String date \u003d patientRecords.get(index).getDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String time \u003d patientRecords.get(index).getTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message +\u003d \"    \" + id + repeat(6 - id.length()) + \"| \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + date + repeat(11 - date.length()) + \"| \" + time + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message +\u003d DIVIDER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format a get patient record success message for user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientRecordMap patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientNric      nric of the patient"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param index            index for the record of the searched patient"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientRecordSuccessMessage("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientRecordMap patientRecordMap, String patientNric, int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        ArrayList\u003cPatientRecord\u003e patientRecord \u003d patientRecordMap.get(patientNric);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here are the patient\u0027s record details:\\n\" + patientRecord.get(index) + DIVIDER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format a edit patient success message for user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientRecord patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String editPatientRecordSuccessMessage(PatientRecord patientRecord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here is the edited patient\u0027s record details:\\n\" + patientRecord + DIVIDER;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format a delete patient success message for user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientRecord    patient record object to be returned as a part of the string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param patientNric      nric of the patient"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String deletePatientRecordSuccessMessage("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            PatientRecord patientRecord, String patientNric) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    \" + patientNric + \"\u0027s patient record will be deleted.\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + patientRecord + DIVIDER;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void patientRecordNotAddedMessage(String detail) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(\"    \" + detail + \" is not a valid input.\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \" + detail + \" will not be added\\n\" + TextUi.DIVIDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Prompt user for conformation with this message."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @param parseInput details to be displayed to user for confirmation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * @return string to be displayed to user for confirmation"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static String promptConfirmation(String[] parseInput) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String text \u003d \"        Are you sure all the listed details are correct?\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        NRIC : \" + parseInput[0].trim().toUpperCase() + \"\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Symptom : \" + parseInput[1].trim() + \"\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Diagnosis : \" + parseInput[2].trim() + \"\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Date : \" + parseInput[3].trim() + \"\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        time : \" + parseInput[4].trim() + \"\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"                                                   (Y/N)?\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 66,
      "sitinadiah25": 6,
      "itskesin": 26
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/PatientTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class PatientTextUi extends TextUi {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static final String PATIENT_NOT_FOUND_MESSAGE \u003d \"    The patient cannot be found. Please try again.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String EMPTY_PATIENT_LIST_MESSAGE \u003d \"    There are no patients in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Shows a list of patients\u0027 name and their NRIC to the user, formatted as an indexed list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients A patient list with all existing patients."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a message to be displayed to user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientList(PatientMap patients) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String message \u003d \"    Here is your list of patients:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    NRIC      | Name\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry patient : patients.entrySet()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String nric \u003d (String)patient.getKey();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient p \u003d (Patient)patient.getValue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            String name \u003d p.getName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "            message +\u003d \"    \" + nric + repeat(10 - nric.length())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                    + \"| \" + name + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message +\u003d DIVIDER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format an add patient success message for user verification."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, patient details and a divider."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient patient object added to patientList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a string message to be displayed to the user for successful addCommand executed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String addPatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        message \u003d \"    Got it! I\u0027ve added this patient:\\n\" + patient + DIVIDER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * format a get patient success message for user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Includes a specified string, requested patient details and a divider."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient patient object to be returned as a part of the string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a formatted success message string to be displayed to user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getPatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String returnMessage \u003d \"    Here are the patient\u0027s details:\\n\" + patient + DIVIDER;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return returnMessage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Display updated patient\u0027s records."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient The patient whose records were updated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return The patient\u0027s updated records."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String editPatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d \"    Patient details have been updated as follows:\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + patient + DIVIDER;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Display message that patient is successfully deleted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient Patient to be deleted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return display message."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String deletePatientSuccessMessage(Patient patient) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return \"    Patient \" + patient.getName() + \" | \" + patient.getNric()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \" has been deleted successfully.\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Displays confirmation message for deleting patients."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient The patient to be deleted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void printDeleteConfirmation(Patient patient) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        print(\"    Are you sure you want to delete this patient:\\n      \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + patient.getName() + \" | \" + patient.getNric() + \"\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"                                                   (Y/N)?\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + DIVIDER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Displays confirmation message for deleting patients."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patient The patient to be deleted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void printDeleteConfirmationAgain(Patient patient) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        print(\"    Please try again. \\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        printDeleteConfirmation(patient);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static String patientNotDeletedMessage \u003d DIVIDER + \"\\n    Patient is not deleted.\\n\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    public static void patientNotAddedMessage(String detail) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        System.out.println(\"    \" + detail + \" is not a valid input.\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"    \" + detail + \" will not be added\\n\" + TextUi.DIVIDER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 6,
      "Janicetyy": 96,
      "sitinadiah25": 4
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/StorageTextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "public class StorageTextUi extends TextUi {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FAIL_TO_ADD_PATIENT_MSG \u003d \"Fail to add patient to file.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FAIL_TO_ADD_APPOINTMENT_MSG \u003d \"Fail to add appointment to file.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FAIL_TO_WRITE_PATIENT_MSG \u003d \"Failed to write patients to file.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FAIL_TO_WRITE_APPOINTMENT_MSG \u003d \"Failed to write patient\u0027s appointments to file.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FAIL_TO_ADD_PR_MSG \u003d \"Fail to add patient record to file.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String FAIL_TO_WRITE_PR_MSG \u003d \"Failed to write patient records to file.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * returns a list of patients\u0027 name and their details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patients A patient list with all existing patients."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a message to be displayed to user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getFormattedPatientString(PatientMap patients) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String formattedPatientString \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry patient : patients.entrySet()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient p \u003d (Patient)patient.getValue();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            formattedPatientString +\u003d p.toSave();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return formattedPatientString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of patients\u0027 NRIC and appointment details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param appointments An appointment list with all existing patients."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a message to be displayed to user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getFormattedApptString(AppointmentMap appointments) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String formattedAppointmentString \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry appointment : appointments.entrySet()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Appointment a \u003d (Appointment) appointment.getValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            formattedAppointmentString +\u003d a.toSave();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return formattedAppointmentString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Returns a list of patients\u0027 NRIC and records."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @author janicetyy"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientRecords A list with all existing patient record."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param patientMap A shared map of patients"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a string to be used in storage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String getFormattedPrString(PatientRecordMap patientRecords, PatientMap patientMap) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String formattedPrString \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        for (Map.Entry patients : patientMap.entrySet()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            Patient patient \u003d (Patient) patients.getValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            if (patientRecords.containsKey(patient.getNric())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    \u0026\u0026 (patientRecords.get(patient.getNric()) !\u003d null)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                ArrayList\u003cPatientRecord\u003e prs \u003d patientRecords.get(patient.getNric());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                for (int index \u003d 0; index \u003c prs.size(); index++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                    formattedPrString +\u003d prs.get(index).toSave();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return formattedPrString;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 74
    }
  },
  {
    "path": "src/main/java/seedu/happypills/ui/TextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String NEWLINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Generates and prints the welcome message upon the start of the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void printWelcomeMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String logo \u003d \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \" __   __  _______  _______  _______  __   __  _______  ___   ___      ___      _______\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|  | |  ||   _   ||       ||       ||  | |  ||       ||   | |   |    |   |    |       |\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|  |_|  ||  |_|  ||    _  ||    _  ||  |_|  ||    _  ||   | |   |    |   |    |  _____|\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|       ||       ||   |_| ||   |_| ||       ||   |_| ||   | |   |    |   |    | |_____\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"|       ||       ||    ___||    ___||_     _||    ___||   | |   |___ |   |___ |_____  |\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"|   _   ||   _   ||   |    |   |      |   |  |   |    |   | |       ||       | _____| |\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"|__| |__||__| |__||___|    |___|      |___|  |___|    |___| |_______||_______||_______|\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        System.out.println(\"Hello from\" + logo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        System.out.println(\"What can I do for you today, doctor?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Displays Exit message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void printExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        System.out.println(\"    Thank you for using HappyPills! ^.^\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        System.out.println(\"    See you again!\\n\" + DIVIDER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    //General methods"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * print any string as needed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param string print any string to screen"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static void print(String string) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        System.out.println(string);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Append the divider to the given message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param s The message that requires the divider to be appended."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The message with the appended divider."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String appendDivider(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return s + DIVIDER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Prepend the divider to the given message."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param s The message that requires the divider to be prepended."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return The message with the prepended divider."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String prependDivider(String s) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return DIVIDER + \"\\n\" + s;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static String incorrectCommandMessage(String command) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return \"    The command \\\"\" + command + \"\\\" does not exist. Please try again.\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * Construct a string for incomplete commands, probably missing something."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @param helpString provide the help command that user can use to find the right format"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "     * @return a string for incomplete commands."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public  static String incompleteCommandString(String helpString) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String msg \u003d \"    Command is incomplete. Please use the \" + helpString + \" command.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Repeat a string count number of times."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param count the number of times to be repeated."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param with the string to be repeated."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the resulting string."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String repeat(int count, String with) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return new String(new char[count]).replace(\"\\0\", with);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * Repeat a blank space count number of times."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @param count the number of times to be repeated."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     * @return the resulting string."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    public static String repeat(int count) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        return repeat(count, \" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String INVALID_NRIC_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The NRIC provided is invalid, please try again with a valid NRIC.\\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "    public static final String INVALID_APPTID_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            + \"    The appointment ID provided is invalid, please try again with a valid appointment ID.\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 5,
      "Janicetyy": 30,
      "sitinadiah25": 55,
      "itskesin": 24
    }
  },
  {
    "path": "src/test/java/seedu/happypills/HappyPillsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "class HappyPillsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/appointmentcommands/DoneAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.DoneAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class DoneAppointmentCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newAppointmentMap \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //Add test patient"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S1234567A\", 123,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S4567890B\", 456,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //add test appointment"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentOne \u003d new Appointment(\"1\",\"S1234567A\", \"01/02/2020\", \"12:00:00\",\"reason1\",false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentTwo \u003d new Appointment(\"2\",\"S1234567A\", \"01/03/2020\", \"13:00:00\",\"reason2\", false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientOne.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientOne.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_Done() throws HappyPillsException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputMissingInput \u003d \"    The following appointment has been marked done:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        NRIC     : S1234567A\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Date     : 01/02/2020\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Time     : 12:00:00\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Reason   : reason1\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        ID       : 1\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Attended : Yes\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new DoneAppointmentCommand(\"S1234567A\", \"1\").execute("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputMissingInput, message);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 6,
      "itskesin": 63
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/appointmentcommands/EditAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.EditAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class EditAppointmentCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newAppointmentMap \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //Add test patient"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S1234567A\", 123,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S4567890B\", 456,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //add test appointment"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentThree \u003d new Appointment(\"3\",\"S1234567A\",  \"01/04/2020\", \"14:00:00\",\"reason3\",false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentOne \u003d new Appointment(\"1\",\"S1234567A\", \"01/02/2020\", \"12:00:00\",\"reason1\",false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Appointment appointmentTwo \u003d new Appointment(\"2\",\"S1234567A\", \"01/03/2020\", \"13:00:00\",\"reason2\", false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientOne.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientOne.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentThree);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            patientOne.addAppointment(appointmentThree);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_missingInput() throws HappyPillsException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputMissingInput \u003d \"    To edit a patient\u0027s appointment, run the following command:\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    Note: patient details are in UPPER CASE and optional details are in parenthesis [ ]\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      edit appt NRIC APPT_ID /d [DD/MM/YYYY] to edit appointment\u0027s date,\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      edit appt NRIC APPT_ID /t [HH:MM] to edit appointment\u0027s time,\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"      edit appt NRIC APPT_ID /r [REASON] to edit appointment\u0027s reason\\\"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    Do note that editing the patient\u0027s records will overwrite any previous information.\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "                + \"    The apptID can be found using \\\"find appt NRIC\\\"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S1234567A\", \"2\", \"/r \").execute("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputMissingInput, message);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_editReason() throws HappyPillsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputeditReason \u003d \"    Patient appointment have been updated as follows:\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        NRIC     : S1234567A\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Date     : 01/03/2020\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Time     : 13:00:00\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Reason   : Very sick hehe\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        ID       : 2\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Attended : No\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S1234567A\", \"2\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/r Very sick hehe\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputeditReason, message);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_editDate_invalidDate() throws HappyPillsException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputEditDateInvalid \u003d \"    Invalid date or date format(DD/MM/YYYY).\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S1234567A\", \"3\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/d 01/01/202s\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputEditDateInvalid, message);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_editDate_validDate() throws HappyPillsException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputEditDateValid \u003d \"    Patient appointment have been updated as follows:\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + \"        NRIC     : S1234567A\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Date     : 01/01/2020\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Time     : 14:00:00\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Reason   : reason3\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        ID       : 3\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Attended : No\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S1234567A\", \"3\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/d 01/01/2020\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputEditDateValid, message);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_editTime_invalidTime() throws HappyPillsException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputEditTimeInvalid \u003d \"    Invalid time or time format(HH:MM).\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S1234567A\", \"1\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/t 24:00\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputEditTimeInvalid, message);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void editAppointment_editTime_validTime() throws HappyPillsException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new EditAppointmentCommand(\"S1234567A\", \"1\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"/t 23:59\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputEditTimeValid \u003d \"\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                + AppointmentTextUi.editAppointmentSuccessMessage(newAppointmentMap.get(\"1\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputEditTimeValid, message);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 16,
      "sitinadiah25": 5,
      "itskesin": 108
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/appointmentcommands/FindAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.appointmentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.appointmentcommands.FindAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.AppointmentTextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class FindAppointmentCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newAppointmentMap \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //Add test patient"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S1234567A\", 123,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S4567890B\", 456,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Appointment appointmentOne \u003d new Appointment("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \"1\",\"S1234567A\", \"01/02/2020\", \"12:00:00\",\"reason1\",false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Appointment appointmentTwo \u003d new Appointment("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "                \"2\",\"S1234567A\", \"01/03/2020\", \"13:00:00\",\"reason2\", false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientOne.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        patientOne.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentOne);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newAppointmentMap.addAppointment(appointmentTwo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void getAppointment_patientNotFound() throws HappyPillsException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String expectedOutputNotfound \u003d \"    The patient cannot be found. Please try again.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new FindAppointmentCommand(\"S7890123C\").execute("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputNotfound, message);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void getAppointment_EmptyList_notFound() throws HappyPillsException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sitinadiah25"
        },
        "content": "        String expectedOutputEmptyList \u003d \"    The patient does not have any appointments scheduled.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new FindAppointmentCommand(\"S4567890B\").execute("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputEmptyList, message);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void getAppointment_List_found() throws HappyPillsException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutputInList \u003d AppointmentTextUi.getAppointmentSuccessMessage(newPatientMap.get(\"S1234567A\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String message \u003d new FindAppointmentCommand(\"S1234567A\").execute("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputInList, message);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 9,
      "sitinadiah25": 1,
      "itskesin": 71
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/patientcommands/AddPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class AddPatientCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    PatientRecordMap newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientMap patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        AddPatientCommand testAddCommand \u003d new AddPatientCommand("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"Eve\", \"S9876543F\", 91234567, \"22/09/1998\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                \"B-\",\"-\", \"-\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            testAddCommand.execute(patients, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(1,patients.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertTrue(patients.containsKey(\"S9876543F\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "itskesin": 30
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/patientcommands/EditPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.AddPatientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.EditPatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class EditPatientCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientMap patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        PatientRecordMap newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        AddPatientCommand testAddCommand \u003d new AddPatientCommand("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                \"kesin\", \"S1234567F\", 912, \"22/08/1998\", \"B-\",\"meat\", \"Strong\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            testAddCommand.execute(patients, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            // catch exception"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        EditPatientCommand testEditCommand \u003d new EditPatientCommand(\"S1234567F\", \"/rmWeak\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            testEditCommand.execute(patients, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            // catch exception"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(1, patients.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        if (patients.containsKey(\"S1234567F\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            Patient patient \u003d patients.get(\"S1234567F\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"Weak\", patient.getRemarks());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 4,
      "itskesin": 39
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/patientcommands/GetPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.GetPatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "public class GetPatientCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S123A\", 123,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S456B\", 456,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void getList_notInList_notFound() throws HappyPillsException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String expectedOutputNotInList \u003d \"    The patient cannot be found. Please try again.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "            new GetPatientCommand(\"S7890123C\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException hpe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(expectedOutputNotInList, hpe.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void getList_InList_found() throws HappyPillsException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String expectedOutputInList \u003d \"    Here are the patient\u0027s details:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Name : P1\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        NRIC : S123A\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Phone Number : 123\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        DOB : 01/01/2000\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Blood Type : O+\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Allergies : None\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Remarks : NIL\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + DIVIDER;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new GetPatientCommand(\"S123A\").execute(newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputInList, message);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "Janicetyy": 2,
      "itskesin": 63
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/patientcommands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.HelpTextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.ui.TextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap newPatientMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        newAppointmentMap \u003d new AppointmentMap();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientOne \u003d new Patient(\"P1\", \"S123A\", 123,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/01/2000\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"P2\", \"S456B\", 456,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"01/02/1990\", \"O+\", \"None\", \"NIL\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            newPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_addCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.ADD_PATIENT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"help add patient\").execute("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_listCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.LIST_PATIENT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"help list patient\").execute("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_getCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.GET_PATIENT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"help get patient\").execute("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_editCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.EDIT_PATIENT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"help edit patient\").execute("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_deleteCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.DELETE_PATIENT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"help delete patient\").execute("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_helpCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.GENERAL_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"help\").execute("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void helpCommand_exitCommandMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "        String expectedOutput \u003d HelpTextUi.EXIT_HELP_MESSAGE + TextUi.DIVIDER;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new HelpCommand(\"help exit\").execute("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                newPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutput, message);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 7,
      "itskesin": 91
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/patientcommands/ListPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@author itskesin"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Contains all the tests related to the ListPatientCommand class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class ListPatientCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap filledPatientMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap emptyPatientMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientRecordMap newPatientRecordMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static final String DIVIDER \u003d \"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static String expectedOutputFromEmptyList \u003d \"    There are no patients in the list.\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static String expectedOutputFromFilledList \u003d \"    Here is your list of patients:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    NRIC      | Name\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    T9999999N | Mallory\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    S9876543F | Eve\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + \"    S9888888G | Bob\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            + DIVIDER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     * Initialize hardcoded test cases for testing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        filledPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        emptyPatientMap \u003d new PatientMap();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientOne \u003d new Patient(\"Eve\", \"S9876543F\", 91265432,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"22/08/1996\", \"O+\", \"Peanuts\", \"Friend with Mallory\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientTwo \u003d new Patient(\"Mallory\", \"T9999999N\", 81234567,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"25/09/1998\", \"A-\", \"School\", \"NIL\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        Patient patientThree \u003d new Patient(\"Bob\", \"S9888888G\", 91234567,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                \"10/03/1998\", \"B+\", \"NIL\", \"NIL\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            filledPatientMap.add(patientOne);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            filledPatientMap.add(patientTwo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            filledPatientMap.add(patientThree);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void printList_emptyList_emptyListMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new ListPatientCommand().execute(emptyPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputFromEmptyList, message);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    public void printList_filledList_filledListMessage() throws HappyPillsException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String message \u003d new ListPatientCommand().execute(filledPatientMap, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(expectedOutputFromFilledList, message);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 69
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/commands/patientrecordcommands/AddPatientRecordCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.commands.patientrecordcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.patientcommands.AddPatientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.AppointmentMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientRecordMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class AddPatientRecordCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static AppointmentMap newAppointmentMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    PatientRecordMap newPatientRecordMap \u003d new PatientRecordMap();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        PatientMap patients \u003d new PatientMap();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        AddPatientCommand testAddCommand \u003d new AddPatientCommand("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                \"Eve\", \"S9876543F\", 91234567, \"22/09/1998\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                \"B-\",\"-\", \"-\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            testAddCommand.execute(patients, newAppointmentMap, newPatientRecordMap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(1,patients.size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertTrue(patients.containsKey(\"S9876543F\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 20,
      "itskesin": 17
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/parser/CheckerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@author itskesin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Contains all the tests for Validation class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class CheckerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidPhoneNumber() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidPhoneNum(\"123456789\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidPhoneNum(\"       \"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidPhoneNum(\"qwerty\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidPhoneNum(\"-12345678\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidPhoneNum(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidDate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"18June\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"4/20/2020\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"4/-20/2020\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //assertFalse(Validation.isValidDate(\"4/04/2020\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //assertFalse(Validation.isValidDate(\"04/4/2020\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"444/4/2020\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"-44/4/2020\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"04/04/20202\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"04/04/-44\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"04/04\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"04/04///////\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"04/04/              2020\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"       \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidDate(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"HH:MM\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"     \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"22:2222\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"22:-12\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"22:\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"24:12\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"24:00\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"-12:00\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\":00\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"123456:00\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"00:00:00\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"00:00:\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"00:59.4356789\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidTime(\"12.324567543:59\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidBloodType() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidBloodType(\"        \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidBloodType(\"OS\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidBloodType(\"O\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidBloodType(\"\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidBloodType(\"1234567\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidBloodType(\"AB\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        //assertFalse(Checker.isValidBloodType(\"AB+\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidNric() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"        \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"S9820463\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"S12345679\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"-123456\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"qwerty\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"12345\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"99999999F\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isValidNric(\"999999999\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidNumber() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"-12354678\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"qwerty\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"1.11111\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"!@#$%^\u0026*\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void invalidInteger() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"-12354678\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"qwerty\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"1.11111\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertFalse(Checker.isNumeric(\"!@#$%^\u0026*\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 97
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@author itskesin"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Contains all the tests for Parser class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseCommand_invalidCommand_throwException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"list\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid command not identified\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Command is invalid. Enter help to know how to use HappyPills.\",e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseCommand_emptyCommand_throwException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"list\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid command not identified\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Command is invalid. Enter help to know how to use HappyPills.\",e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 36
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/parser/PatientParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import seedu.happypills.ui.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Contains all the tests for Patient Parser class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "class PatientParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    PatientParser parser \u003d new PatientParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientMap filledPatientMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    private static PatientMap emptyPatientMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void parseDeletePatientCommand_invalidNric_throwException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            command \u003d parser.parse(\"delete patient\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            fail(\"Invalid delete patient command not identified\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "            assertEquals(Messages.MESSAGE_INCORRECT_INPUT_FORMAT,e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 33
    }
  },
  {
    "path": "src/test/java/seedu/happypills/logic/parser/PatientRecordParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itskesin"
        },
        "content": "package seedu.happypills.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.data.PatientMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import seedu.happypills.model.exception.HappyPillsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@author itskesin"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Contains all the tests for Patient Record Parser class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class PatientRecordParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    PatientRecordParser parser \u003d new PatientRecordParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap filledPatientMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    private static PatientMap emptyPatientMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseDeletePatientRecordCommand_invalidIndex_throwException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"delete pr S9876543F abc\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid delete pr command not identified\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid index.\",e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseDeletePatientRecordCommand_invalidNric_throwException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"delete pr abc 1\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid delete pr command not identified\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid NRIC format.\",e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseEditPatientRecordCommand_invalidIndex_throwException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"edit pr S9876543F abc\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid edit pr command not identified\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid index.\",e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseEditPatientRecordCommand_insufficientInformation_throwException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"edit pr S9876543F\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid edit pr command not identified\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Please input all necessary fields for the edit command.\",e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseEditPatientRecordCommand_invalidNric_throwException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"edit pr abc 1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid edit pr command not identified\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid NRIC format.\",e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parsePatientRecordCommand_invalidCommand_throwException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"get pr\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid pr command not identified\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Command is invalid. Enter help to know how to use HappyPills.\",e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseListPatientRecordCommand_invalidNric_throwException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"list pr 1234\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid list pr command not identified\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid NRIC format.\",e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseFindPatientRecordCommand_invalidNric_throwException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"find pr S9999 1\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid add pr command not identified\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid NRIC format.\",e.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void parseFindPatientRecordCommand_invalidIndex_throwException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            command \u003d parser.parse(\"find pr S9876543F abc\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            fail(\"Invalid add pr command not identified\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        } catch (HappyPillsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            assertEquals(\"    Invalid index.\",e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itskesin": 110
    }
  },
  {
    "path": "src/test/java/seedu/happypills/model/data/PatientRecordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "//@@author NyanWunPaing"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " * Contains all the tests related to the Patient Record class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "class PatientRecordTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    PatientRecord recordOne \u003d new PatientRecord(\"S9876543F\",\"High Temperature\",\"Influenza\",\"1/1/2020\",\"10:00\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    PatientRecord recordTwo \u003d new PatientRecord(\"S9876543F\",\"Fever\",\"Spanish Flu\",\"30/1/2020\",\"11:10\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    PatientRecord recordThree \u003d new PatientRecord(\"S9888888G\",\"Fever\",\"Spanish Flu\",\"30/1/2020\",\"16:45\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void getNric() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"S9876543F\",recordOne.getNric());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"S9876543F\",recordTwo.getNric());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"S9888888G\",recordThree.getNric());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void getSymptom() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"High Temperature\",recordOne.getSymptom());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Fever\",recordTwo.getSymptom());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Fever\",recordThree.getSymptom());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void setSymptom() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordOne.setSymptom(\"Chills\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordTwo.setSymptom(\"Headache\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Chills\",recordOne.getSymptom());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Headache\",recordTwo.getSymptom());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Fever\",recordThree.getSymptom());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void getDiagnosis() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Influenza\",recordOne.getDiagnosis());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Spanish Flu\",recordTwo.getDiagnosis());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Spanish Flu\",recordThree.getDiagnosis());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void setDiagnosis() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordOne.setDiagnosis(\"Spanish Flu\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordTwo.setDiagnosis(\"Common Cold\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordThree.setDiagnosis(\"Influenza\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Spanish Flu\",recordOne.getDiagnosis());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Common Cold\",recordTwo.getDiagnosis());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"Influenza\",recordThree.getDiagnosis());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"1/1/2020\",recordOne.getDate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"30/1/2020\",recordTwo.getDate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"30/1/2020\",recordThree.getDate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void setDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordOne.setDate(\"2/1/2020\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordTwo.setDate(\"28/1/2020\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordThree.setDate(\"31/1/2020\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"2/1/2020\",recordOne.getDate());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"28/1/2020\",recordTwo.getDate());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"31/1/2020\",recordThree.getDate());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void getTime() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"10:00\",recordOne.getTime());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"11:10\",recordTwo.getTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"16:45\",recordThree.getTime());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void setTime() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordOne.setTime(\"9:45\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordTwo.setTime(\"12:00\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        recordThree.setTime(\"16:33\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"9:45\",recordOne.getTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"12:00\",recordTwo.getTime());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(\"16:33\",recordThree.getTime());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String test \u003d \"        NRIC : \" + \"S9876543F\" + \"\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Symptom : \" + \"High Temperature\" + \"\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Diagnosis : \" + \"Influenza\" + \"\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        Date : \" + \"1/1/2020\" + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"        time : \" + \"10:00\" + \"\\n\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(test,recordOne.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    void toSave() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        String test \u003d \"S9888888G\" + \"|\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"Fever\" + \"|\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"Spanish Flu\" + \"|\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"30/1/2020\" + \"|\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "                + \"16:45\" + System.lineSeparator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "        assertEquals(test, recordThree.toSave());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 113
    }
  },
  {
    "path": "src/test/java/seedu/happypills/model/data/PatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "package seedu.happypills.model.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itskesin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": "//@@author itskesin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itskesin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itskesin"
        },
        "content": " * Contains all the tests related to the Patient class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itskesin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "class PatientTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Patient patientOne \u003d new Patient(\"Eve\", \"S9876543F\", 91265432,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"22/08/1996\", \"O+\", \"Peanuts\", \"Friend with Mallory\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Patient patientTwo \u003d new Patient(\"Mallory\", \"T9999999N\", 81234567,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"25/09/1998\", \"A-\", \"School\", \"NIL\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    Patient patientThree \u003d new Patient(\"Bob\", \"S9888888G\", 91234567,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itskesin"
        },
        "content": "            \"10/03/1998\", \"B+\", \"NIL\", \"NIL\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"Eve\", patientOne.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getNric() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"T9999999N\", patientTwo.getNric());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getPhoneNumber() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(91234567, patientThree.getPhoneNumber());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getDateOfBirth() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"25/09/1998\", patientTwo.getDateOfBirth());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getBloodType() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"O+\", patientOne.getBloodType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getAllergies() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"NIL\", patientThree.getAllergies());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void getRemarks() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(\"NIL\", patientThree.getRemarks());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        String correctOutput \u003d \"        Name : \" + \"Eve\" + \"\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        NRIC : \" + \"S9876543F\" + \"\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Phone Number : \" + 91265432 + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        DOB : \" + \"22/08/1996\" + \"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Blood Type : \" + \"O+\" + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Allergies : \" + \"Peanuts\" + \"\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itskesin"
        },
        "content": "                + \"        Remarks : \" + \"Friend with Mallory\" + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itskesin"
        },
        "content": "        assertEquals(correctOutput, patientOne.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itskesin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itskesin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 1,
      "itskesin": 67
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "y"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add patient /ic S9876543G /p 99999999 /dob 22/09/1989 /b O- /n Alice"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add patient /ic S9876543G /p 99999999 /dob 22/09/1989 /b O-"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/n Alice"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "y"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "list s9876543"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "list s9876543F"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "list patient"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "list patient -S9876543F"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add pr"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add /ic"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add pr /ic /sym /d 22feb92 /t 2o\u0027clock"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add pr /ic s9876543f /sym /d 22feb92 /t 2o\u0027clock"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "/ic S9876543F /sym cough /diag fever /d 22/02/1992 /t 22:22"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "n"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add pr /ic S9876543F /sym cough /diag fever /d 22/02/1992 /t 22:22"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "y"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "add pr /ic S9876543F /sym cough /diag cough syrup /d 22/03/2020 /t 22:22"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "y"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NyanWunPaing"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "NyanWunPaing": 22
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itskesin"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itskesin"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itskesin"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itskesin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Janicetyy"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.txt"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "Janicetyy": 1,
      "itskesin": 7,
      "-": 18
    }
  }
]
