[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    mainClassName \u003d \"Main\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    archiveBaseName \u003d \"restaurant\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    archiveVersion \u003d \"2.0\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 13,
      "-": 37,
      "SibingWu": 1
    }
  },
  {
    "path": "build/scripts/tp.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem  tp startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set APP_HOME\u003d%DIRNAME%.."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and TP_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\lib\\tp-0.1.0.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Execute tp"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %TP_OPTS%  -classpath \"%CLASSPATH%\" Main %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "rem Set variable TP_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if  not \"\" \u003d\u003d \"%TP_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 103
    }
  },
  {
    "path": "build/scriptsShadow/tp.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem  tp startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set APP_HOME\u003d%DIRNAME%.."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and TP_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\lib\\restaurant-2.0.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem Execute tp"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %TP_OPTS%  -jar \"%CLASSPATH%\" %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "rem Set variable TP_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if  not \"\" \u003d\u003d \"%TP_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 84
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Doe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/78684285-dd7c9600-7922-11ea-8eb3-1f48e0764e78.PNG\" width\u003d\"100\" height\u003d\"100\" /\u003e | Joseph Lim Wei Jie | [Github](https://github.com/JosephLimWeiJie) | [Portfolio](team/josephlimweijie.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wu Sibing | [Github](https://github.com/SibingWu) | [Portfolio](team/sibingwu.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguan1"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Sloe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 1,
      "-": 6,
      "SibingWu": 1,
      "nguan1": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "**By:** Team T14-4\u003cbr/\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "**Since:** May 2020"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [1. Design \u0026 Implementation](#design-implementation)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    + [1.1. Search stock feature](#search-stock)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    + [1.2. List stock in descending quantities](#list-stock)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    + [1.3. Generate profit for the day](#generate-profit)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    + [1.4. Search reservation](#search-reservation)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    + [1.5. Search dish](#search-dish)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* [Appendix A: Product Scope](#product-scope)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* [Appendix B: User Stories](#user-stories)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* [Appendix C: Non-Functional Requirements](#nonfunctional-requirement)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* [Appendix D: Glossary](#glossary)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* [Appendix E: Instructions for Manual Testing](#manual-test)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    + [E.1. Launch and Shutdown](#e1-launch-and-shutdown)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    + [E.2. Adding a reservation](#e2-adding-a-reservation) "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    + [E.3. Deleting a reservation](#e3-deleting-a-reservation)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    + [E.4. Marking a reservation](#e4-marking-a-reservation)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    + [E.5. Search a reservation](#e5-search-a-reservation)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    + [E.6. List all reservations](#e6-list-all-reservations)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    + [E.7. List all Served reservations](#e7-list-all-served-reservations)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    + [E.8. List all Unserved reservations](#e8-list-all-unserved-reservations)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    + [E.9. Clear all reservations](#e9-clear-all-reservations)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"design-implementation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 1. Design \u0026 Implementation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"search-stock\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguan1"
        },
        "content": "### 1.1 Search stock feature"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 1.1.1 Proposed implementation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "In the restaurant daily report, users can search against the stock category by supplying a keyword."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Given below is an example usage scenario and how the search mechanism behaves at each step."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Step 1. The user launches the application for the first time. An empty `stock` will be initialized."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Step 2. The user executes `add stock; i/tomato; q/10; p/0.40;` command to add a tomato ingredient into the `stock`. Further, the user may add more ingredients into the current `stock`. Suppose the user executes `add stock; i/potato; q/5; p/0.40;` and `add stock; i/rice; q/3; p/0.40;` as well."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Step 3. The user can now search against the current `stock` to see if an ingredient is stored in the `stock`. The user now executes `search stock; k/tomato;`, which will display the following result in the image. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/78976850-a0deb380-7b49-11ea-9235-a4659d611f7b.png\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Step 4. If the ingredient that the user is searching for does not exist within the stock, a different message will be displayed as shown in the following image."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/78976997-ee5b2080-7b49-11ea-8ff1-e62e59e508f9.png\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "The following sequence diagram shows how the search operation works:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/78683492-efaa0480-7921-11ea-82c4-e2b4abb9da92.png\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "The sequence diagram can be interpreted as such:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1. `CommandParser` calls its own `CommandParser#parseCommand(...)`. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2. Assuming the user input the search stock command correctly, `SearchStockCommand#SearchStockCommand(...)` constructor is called. "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "3. The newly constructed `SearchStockCommand` invokes its `SearchStockCommand#parseIntoSearchKeyword(...)` and does not return anything."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "4. The `CommandParser` then invokes `SearchStockCommand#execute(...)`, which then further invokes `Stock#searchStock(...)` from the Stock object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "5. The `Stock` object then self-invoke `Stock#checkIngredientInStock(...)` to see if there are ingredients that matches keyword that was passed into earlier."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "6. If there are search results, `Stock#printSearchResult(...)` will display all the ingredients that matches the keyword given."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "7. If there is no ingredient that matches the keyword, the program will display a different message to show the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "8. Next, the time line returns back to `CommandParser` and the `SearchStockCommand` object is destroyed here."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "9. If however, the user input did not input the search stock command correctly, `CommandParser` will invoke `CommandParser#errorCommand()` to notify the user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 1.1.2 Design Considerations"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##### Aspect: How search stock executes"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 1 (current choice)**: List all ingredients that contains the keyword supplied."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Pros: Easy to implement."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Cons: All ingredients containing the keyword will be listed. This means that even if the keyword doesn\u0027t make sense, such as supplying \"to\", both potato and tomato will be listed since it contains \"to\"."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 2**: The user supplies the exact ingredient name."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Pros: The ingredient that matches exactly with the keyword supplied will be listed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Cons: The user have to input the ingredient name correctly each time he/she uses the search stock feature."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##### Aspect: Data structure to support the search stock feature."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 1 (current choice)**: Use a `List` to store all possible ingredient names that contain the keyword supplied."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Pros: Easy to understand."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Cons: The `List` is derived by converting the existing stock (which is a `HashMap`) into an ArrayList. In order to print out the ingredient\u0027s name, quantity and price, methods such as `getKey()` and `getValue()` have to be used."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 2**: Use the existing `HashMap` data structure employed by the `stock` object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Pros: We do not need to create a new `List` to display the relevant results."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Cons: Iterating a HashMap can be done by converting it to an EntrySet or by using an iterator. These, compared to `List`, is much less straightforward."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"list-stock\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nguan1"
        },
        "content": "### 1.2 List stock ingredients in descending quantity"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 1.2.1 Proposed implementation"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "In the restaurant daily report, users can view all the ingredients presently in the stock by supplying the input `list stock`. The ingredients will be ordered in descending quantities, that is, the ingredient that has the highest quantity will be listed first and vice versa."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Given below is an example usage scenario and how the listing mechanism behaves at each step."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Step 1. The user launches the application for the first time. An empty `stock` will be initialized."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Step 2. The user executes `add stock; i/tomato; q/10; p/0.40;` command to add a tomato ingredient into the `stock`. Further, the user may add more ingredients into the current `stock`. Suppose the user executes `add stock; i/potato; q/0; p/0.40;` and `add stock; i/rice; q/55; p/0.40;` as well."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Step 3. The user can now view the current `stock` to see what ingredients are there in the stock. The user now executes `list stock`, which will display the following result in the image. In this case, `rice` has the highest quantity of `55`, which is listed first as compared to `potato`, which has the lowest quantity of `0`. This can be seen from the image below."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/78977634-05e6d900-7b4b-11ea-8911-057c4ceb768b.png\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "The following class diagram shows how the listing operation works:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/78975984-dda9ab00-7b47-11ea-8df4-f9510b8328ee.png\" width\u003d\"900\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1. When the user first runs the application, the `Main` object is initialized. The `Main` object then initializes the `ui`, the `stock` object and other objects such as `reservations` etc. in its `Main#start()` method. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2. When the `stock` object is created, it will create a `LoadStock` object, which loads all data from the `report.txt` through `LoadStock#loadStockData(...)`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "3. Next, moving back to `Main`, through the `Main#runCommandUntilExit()` method, it then instructs the `ui` object to scan and read for user input. A `CommandParser` object is then initialized to parse this user input into a command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "3. The `CommandParser` object detects `list stock;` as the user input, in which it will then create a `ListStockCommand` object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "4. The `ListStockCommand` object is then executed via its `ListStockCommand#execute(...)` method, which takes in the `stock` object initialized previously and instructs it to list all ingredients through its `Stock#listIngredient()` method."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "5. Within  the `Stock#listIngredient()` method, a temporary `List` data structure is used to convert from the `HashMap` in the `stock` object. The list is then sorted by supplying a `new Comparator` that compares the ingredient\u0027s quantity. Afterwards, the sorted list is then printed to be displayed to the user."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Alternatively, the listing mechanism process can be summarized in the following sequence diagram below:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/78683798-52030500-7922-11ea-8a8d-3aaa5d7af486.png\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "The sequence diagram can be interpreted as such:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1. `CommandParser` calls its own `CommandParser#parseCommand(...)`. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2. Assuming the user input the list stock command correctly, `ListStockCommand#ListStockCommand()` constructor is called. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "3. The time line returns back to `CommandParser`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "4. The `CommandParser` then invokes `ListStockCommand#execute(...)`, which then further invokes `Stock#ListStock()` from the Stock object."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "5. The `Stock` object then self-invoke `Stock#printStock()` to print the ingredients that are in the stock to display it to the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "6. Note that within the method `Stock#printStock()`, the hashMap in the `Stock` will be sorted in descending ingredient quantity."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "7. If there is no ingredient that in the `Stock`, the program will display a different message to show the user."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "8. Next, the time line returns back to `CommandParser` and the `ListStockCommand` object is destroyed here."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "9. If however, the user input did not input the search stock command correctly, `CommandParser` will invoke `CommandParser#errorCommand()` to notify the user."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 1.2.2 Design Considerations"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##### Aspect: How listing stock executes"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 1 (current choice)**: List all ingredients in the stock in descending quantities."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Pros: The user is able to tell which ingredients are the least/most quickly. This can help to facilitate quicker decision making in terms of what ingredients to re-stock."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Cons: The current ingredients are listed in a specific ordering. A change in the ordering requirement would mean that a change in the implementation of the `comparator`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 2**: List all ingredients in the stock without any ordering."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Pros: Easy to implement."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Cons: Hard to identity which ingredients that require re-stocking quickly."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##### Aspect: Data structure to support the search stock feature."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 1 (current choice)**: Use a `List` to store all possible ingredient names."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Pros: Easy to understand."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Cons: The `List` is derived by converting the existing stock (which is a `HashMap`) into an ArrayList. In order to print out the ingredient\u0027s name, quantity and price, methods such as `getKey()` and `getValue()` have to be used."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 2**: Use the existing `HashMap` data structure employed by the `stock` object."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Pros: We do not need to create a new `List` to display the relevant results."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Cons: Iterating a HashMap can be done by converting it to an EntrySet or by using an iterator. Sorting it, however, as compared to `List`, is much less straightforward."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"generate-profit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nguan1"
        },
        "content": "### 1.3 Generate profit for the day"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nguan1"
        },
        "content": "#### 1.3.1 Proposed Implementation"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nguan1"
        },
        "content": "In the restaurant daily report, the user can input the amount of items sold each day and a total profit will be generated, when the user inputs `profit`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Below is an example usage scenario for the user."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Step 1. The user opens the program and an empty `sales` is initialized."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Step 2. The user can add sold items by inputting `sell dish; d/DISH; q/QUANTITY`. An example would be `sell dish; d/pasta; q/15;`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nguan1"
        },
        "content": "The user can input as many sales as they like as long as the dish exists in the menu."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Step 3. The user can generate the profit by inputting `profit`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nguan1"
        },
        "content": "The execution can be viewed in the sequence diagram below."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nguan1"
        },
        "content": "![](https://github.com/nguan1/tp/blob/master/docs/documentations/Ned/GenerateProfitSequenceDiagram.PNG)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 1.3.2 Design Considerations"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##### Aspect: Using a separate class to perform sale commands"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nguan1"
        },
        "content": "**Current Implementation**: Methods are stored in the sales class"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Pros: Easy to understand and implement."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Cons: May make the sales class long and convoluted and may become difficult to find certain features or methods"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nguan1"
        },
        "content": "**Alternative**: Commands are stored in separate classes"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Pros: Easier for a person who hasn\u0027t worked on the project to understand the structure"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Cons: Takes longer to implement"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"search-reservation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nguan1"
        },
        "content": "### 1.4 Search reservation"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "#### 1.4.1. Proposed Implementation"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "In the restaurant daily report, users can search against the reservation category by supplying either a reservation number or a date."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "The feature implements the following operations:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* `SearchReservationCommand#parseInput()` - parse the user input for either reservation number or a date."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* `SearchReservationCommand#execute()` - search along the reservation list for the target reservation(s)."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "The following class diagram shows the structures relevant to the \"search reservation\" feature:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    \u003cimg src\u003d\"documentations\\Sibing\\ClassDiagramforSearchReservation.png\" width\u003d\"900\"\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Given below is an example usage scenario and how the search mechanism behaves at each step."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Step 1. The user launches the application for the first time. An empty `reservations` will be initialized."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Step 2. The user executes `add reservation; p/Peter; d/2020-03-12 12:00; n/3; c/98955555;` command to add a reservation into the `reservations` list.  "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Further, the user may add more reservations into the current `reservations` list.  "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Suppose the user executes `add reservation; p/Mary; d/2020-03-11 12:00; n/8; c/99998888;`  "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "and `add reservation; p/Lisa; m/no spicy food please; d/2020-03-12 12:00; n/3; c/98889999;` as well."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "The following object diagram illustrates how the `reservations` list looks like:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    \u003cimg src\u003d\"documentations\\Sibing\\ObjectDiagramforSearchReservation.png\" width\u003d\"900\"\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Step 3. The user can now search against the current `reservations` list to see if an reservation is stored in the `reservations` list.  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "If the user executes `search reservation; r/1;`, the mechanism is shown as follows:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* The `search reservation` command calls `SearchReservationCommand#execute()`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* The branch with only valid reservation number will be executed, calling `ReservationList#getReservation(reservationNumber)` to fetch the target `Reservation` object."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* The following result with formatted information will be displayed in the image:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    \u003cimg src\u003d\"documentations\\Sibing\\SearchByIndex.png\" width\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "If the user executes `search reservation; d/2020-03-12;`, the mechanism is shown as follows:  "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* The `search reservation` command calls `SearchReservationCommand#execute()`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* The branch with only valid date will be executed, doing a linear search along the whole `reservations` list to pick out the `Reservation` objects with the same date."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* The following result will with formatted information be displayed in the image:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    \u003cimg src\u003d\"documentations\\Sibing\\SearchByDate.png\" width\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "If the user executes `search reservation; r/1; d/2020-03-13;`, the mechanism is shown as follows:  "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* The `search reservation` command calls `SearchReservationCommand#execute()`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* The branch with both valid date and reservation number will be executed."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* `SearchReservationCommand#execute()` is called to fetch the `Reservation` object in that reservation number."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Date of the `Reservation` object is checked to see whether it matches the target date or not."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* In this case, the date does not match, so the following result will be displayed in the image:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    \u003cimg src\u003d\"documentations\\Sibing\\SearchByIndexnDate.png\" width\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "The following sequence diagram shows how `search reservation` operation works:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    \u003cimg src\u003d\"documentations\\Sibing\\SequenceDiagramforSearchReservation.png\" width\u003d\"900\"\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "#### 1.4.2 Design Considerations"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "##### Aspect: How search reservation executes"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* **Alternative 1 (current choice)**: Access reservation by `ReservationList#getReservation(reservationNumber)` if reservation number is provided,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "or do linear search along the reservation list for reservations with date matched."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Pros: Easy to implement and understand."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Cons: May have performance issues in terms of time usage when searching along the reservation list."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* **Alternative 2**: Create a `HashMap` with date as the key and all Reservation objects in that date as the value."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Once a new Reservation object is created, it will be added into the `HashMap` according to its date."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Pros: Easier for searching in terms of date."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Cons: Extra memory space is needed."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "##### Aspect: Data structure to support the search reservation feature."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* **Alternative 1 (current choice)**: Display all all `Reservation` objects that contain the reservation number or date provided to the screen directly."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Pros: Easy to implement and understand."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Cons: The target objects are not really \"contained\" in a data structure."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* **Alternative 2**: Use a `List` to store all `Reservation` objects that contain the reservation number or date provided."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Pros: Objects are stored in a data structure, which is easier to do operation on that specific collections of objects."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Cons: Extra memory space is needed."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"search-dish\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nguan1"
        },
        "content": "### 1.5 Search dish feature"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### 1.5.1 Proposed implementation"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "In restaurant daily report, a user can search from available menu items using the search dish commmand."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "The search dish command takes in a keyword denoted by k/, and searches all dish names for dishes containing the keyword."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "An example of the usage of search dish can be found below."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Step 1. User launches application. An empty `Menu` is initialized."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Step 2. User adds a menu item to the empty menu with `add dish; n/bacon pizza; i/cheese, bacon; p/7.00;`. Bacon pizza is now on the menu."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Step 3. User adds more menu items to the menu. For example, they can `add dish; n/chicken rice; i/chicken, rice; p/4.00;` and `add dish; n/pasta with bacon; i/pasta, bacon; p/6.00;`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Step 4. User searches the menu for any dish names containing a keyword. Let the user execute `search dish; k/bacon;`, the expected behavior can be found in the screenshot below."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/48315922/77872867-3e66e880-7216-11ea-9003-e04bda089f24.png\"\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### 1.5.2 Design Considerations"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "##### Aspect: Execution of search dish"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* **Alternative 1 (current choice)**: Search dish names for keyword"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "  + Pros: Intuitive use of search, easy to implement"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "  + Cons: If dishes are not named intuitively, such as `pasta with bacon`, feature becomes less useful"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* **Alternative 2**: Search dish ingredients for keyword"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "  + Pros: Can find all dishes with a certain ingredient, which is useful if you really like something like `bacon` or are allergic to something like `cilantro`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "  + Cons: Cannot easily find if the menu contains your favorite dish by name, like `ratatouille`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "##### Aspect: Data structure in search dish"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* **Alternative 1 (current choice)**: Create a new temporary `HashMap\u003cString, Dish\u003e` that contains all dishes that match the search"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "  + Pros: Flexible to use later on, easy to implement"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "  + Cons: Potentially duplicate work as similar functionality could be accomplished without creating a new HashMap"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* **Alternative 2**: Use original dish HashMap to identify dishes matching search"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "  + Pros: No duplicate work and we\u0027re always using the same HashMap"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "  + Cons: If we choose to further develop this feature later on, we\u0027ll have to do the search again because we did not save the matching items any way"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"product-scope\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nguan1"
        },
        "content": "The Restaurant Daily Report is a CLI application is designed for restaurant owners, who need a simple and efficient way to manage the operation of their business."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Ideally, the owner would be proficient at using desktop apps and is a quick typer."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Single application to store dishes, stock and reservations"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Can calculate the daily profit and most popular dish"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Allows the owner to see an overview of their restaurant"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Simple and easy to use interface"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "|Version| As a ... | I want to ... | So that ...|"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "|v1.0|restaurant owner|add a new ingredient into the stock|I can keep track of current ingredient quantities|"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "|v1.0|restaurant owner|delete an existing ingredient in the stock|I can remove ingredients that are no longer used in the kitchen|"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "|v1.0|restaurant owner|list all existing ingredients in the stock|I can view what are the ingredients and their quantities currently|"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "|v1.0|restaurant owner|add a newly received reservation|I can record the details about the reservation and make corresponding preparations|"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "|v1.0|restaurant owner|mark a reservation as invalid|I can update the status of the reservation if the reservation gets canceled|"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "|v1.0|restaurant owner|list all reservations|I can view what reservations the restaurant has currently|"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nguan1"
        },
        "content": "|v1.0|restaurant owner|add dishes|I can introduce new dishes to the menu|"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nguan1"
        },
        "content": "|v1.0|restaurant owner|list dishes|I can see all the dishes on the menu|"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nguan1"
        },
        "content": "|v1.0|restaurant owner|delete dishes|I can remove dishes from the menu|"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nguan1"
        },
        "content": "|v1.0|restaurant owner|add stock|I can add stock to the inventory|"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nguan1"
        },
        "content": "|v1.0|restaurant owner|list stock|I can see how much stock I currently have|"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nguan1"
        },
        "content": "|v1.0|restaurant owner|delete stock|I can remove the stock that has been used or spoiled"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nguan1"
        },
        "content": "|v1.0|restaurant owner|save the dishes, stock and reservation|I have a document that contains all the important details about my restaurant|"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "|v2.0|restaurant owner|search an ingredient by giving a keyword|I can quickly find out the current ingredient\u0027s quantity and price|"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "|v2.0|restaurant owner|list the reservations in descending quantities|I can find out the ingredients that we have the most quickly|"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "|v2.0|restaurant owner|mark a reservation as served|I can update the status of the reservation|"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "|v2.0|restaurant owner|list all served reservations|I can view the achievement of served reservation|"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "|v2.0|restaurant owner|list all unserved reservations|I can know what reservations need to be prepared|"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "|v2.0|restaurant owner|search a reservation via reservation number|I can know the details about a specific reservation|"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "|v2.0|restaurant owner|search a reservation via a specific date|I can know the achievement on a certain date or know what reservations I need to prepare on a certain date|"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nguan1"
        },
        "content": "|v2.0|restaurant owner|search dishes|I can know which dishes contain a certain word and the ingredients of those dishes|"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nguan1"
        },
        "content": "|v2.0|restaurant owner|search stock|I can know the quantity and cost of specific ingredients|"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "|v2.1|restaurant owner|clear the reservations list|I can have an empty reservations list when situations, like moving restaurant to a new place, happen|"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nguan1"
        },
        "content": "|v2.1|restaurant owner|load the dishes, stock and reservation|I don\u0027t have to re-enter the dishes, stock and reservations when I start up the program|"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "|v2.1|restaurant owner|clear the ingredients in the stock|I can reset the entire stock if there are too many unwanted ingredients stored in the program|"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "|v2.1|restaurant owner|load the stock data from a data file|I can port the data from one computer to another|"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "|v2.1|restaurant owner|search a reservation without being tied to case sensitivity|I know all the possible ingredients if I typed in a keyword|"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "|v2.1|restaurant owner|clear the reservations list|I can have an empty reservations list when situations, like moving restaurant to a new place, happen|"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"nonfunctional-requirement\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "## Appendix C: Non-Functional Requirements"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Should work on any [mainstream OS](#mainstream-os) as long as it has `Java 11` or above installed."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Commands should be intuitive and follow a logical order"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Information should be displayed in a easy to read format"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"glossary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "## Appendix D: Glossary"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"mainstream-os\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* *Mainstream OS* - Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"manual-test\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "## Appendix E: Instructions for Manual Testing"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"e1-launch-and-shutdown\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "### E.1. Launch and Shutdown"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "1. Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "2. Open a Terminal in that folder."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "3. Run the command `java -jar [CS2113-T14-4][RestaurantDailyReport].jar`. The CLI should appear in a few seconds. It should be a welcome page."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"e2-adding-a-reservation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "### E.2. Adding a reservation"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Adding a reservation to an empty list."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Prerequisite: Clear the `reservations` list using `clear reservation;` command to ensure the empty list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `add reservation; p/Peter; d/2020-03-12 12:00; n/3; c/98955555;`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: An unserved Reservation with reservation number [1] is added into the `reservations` list. Details of the added Reservation are displayed."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `add reservation; p/David; d/2020-03-12 12:00; c/98887777;`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: No Reservation is added. An error message shows to remind the user that \"number of guests n/\" is missing."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `add reservation`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: An error message shows to remind the user that it is a incorrect input format and the user can type `help` for the list of command."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Other incorrect delete commands to try: `add reservation; p/David d/2020-03-12 12:00; n/3; c/98887777;`, `add reservation;`..."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: No Reservation is added. Error messages for input missing displays."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"e3-deleting-a-reservation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "### E.3. Deleting a reservation"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Deleting a reservation while all reservations are listed."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Prerequisites: List all reservations using the `list reservation;` command. Multiple reservations in the list. The status of Reservation[1] is Unserved."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `delete reservation; r/1;`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: The status of the first reservation in the list is changed to **Invalid**. The reservation itself still remains in the list."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `delete reservation; r/X;` where X is a large number exceeding the maximum of reservation number"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: No Reservation is marked as Invalid. An error message shows to remind the user that there is no such reservation in the list."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `delete reservation; r/2.3;`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: No Reservation is marked as Invalid. An error message shows to remind the user to input a positive integer."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"e4-marking-a-reservation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "### E.4. Marking a reservation"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Marking a reservation as Served while all reservations are listed."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Prerequisites: List all reservations using the `list reservation;` command. Multiple reservations in the list. The status of Reservation[2] is Unserved."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `mark reservation; r/2;`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: The status of the second reservation in the list is changed to **Served**."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"e5-search-a-reservation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "### E.5. Search a reservation"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Searching a reservation while all reservations are listed."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Prerequisites: List all reservations using the `list reservation;` command. Multiple reservations in the list. Only Reservation[1] and Reservation[3] are on 2020-04-10."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `search reservation; r/1;`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: The details of the first reservation in the list are displayed on the screen."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `search reservation; d/2020-04-10;`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: The details of the Reservation[1] and Reservation[3] will be displayed on the screen. "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `search reservation; r/1; d/2020-04-11;`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: A message of no such reservation will display."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"e6-list-all-reservations\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "### E.6. List all reservations"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Listing all reservations at the beginning of the program execution with reservation content already exist in the \"report.txt\" file."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Prerequisites: Execute the program for the first time and add some reservations. Type `bye` to exit the program and the reservations added will be automatically saved to the \"report.txt\" file. Execute the program again."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `list reservation;`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: The details of reservations originally in the \"report.txt\" will display on the screen."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `list reservation`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: An error message shows to remind the user that it is a incorrect input format and the user can type `help` for the list of command."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"e7-list-all-served-reservations\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "### E.7. List all Served reservations"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Listing all served reservations while all reservations are listed."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Prerequisites: List all reservations using the `list reservation;` command. Multiple reservations in the list. Only Reservation[2] and Reservation [3] are Served."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `list served reservation;`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: The details of Reservation[2] and Reservation[3] will display on the screen."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `list served reservation`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: An error message shows to remind the user that it is a incorrect input format and the user can type `help` for the list of command."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"e8-list-all-unserved-reservations\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "### E.8. List all Unserved reservations"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Listing all unserved reservations while all reservations are listed."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Prerequisites: List all reservations using the `list reservation;` command. Multiple reservations in the list. Only Reservation[4] and Reservation [5] are Served."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `list unserved reservations`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: The details of Reservation[4] and Reservation[5] will display on the screen."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `list unserved reservation`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: An error message shows to remind the user that it is a incorrect input format and the user can type `help` for the list of command."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"e9-clear-all-reservations\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "### E.9. Clear all reservations"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Clear all reservations in the list while all reservations are listed."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Prerequisites: List all reservations using the `list reservation;` command. Multiple reservations in the list."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `clear reservation;`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: All reservations are cleared, both in `reservations` list and in the \"report.txt\" file. User can type `list reservation` to make sure all reservations are cleared. "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Test case: `clear reservation`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    - Expected: An error message shows to remind the user that it is a incorrect input format and the user can type `help` for the list of command."
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 155,
      "gmuthu17": 40,
      "-": 25,
      "SibingWu": 219,
      "nguan1": 50
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{Give product intro here}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "SibingWu": 1
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* [1. Introduction](#introduction)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* [2. Quick Start](#quick-start)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* [3. Features](#features)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + [3.1. Add:](#add) `add`"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + [3.2. Delete:](#delete) `delete`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + [3.3. List:](#list) `list`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.4. Search:](#search) `search`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    + [3.5. Sales:](#sales) `sales`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    + [3.6. Clear:](#clear) `clear`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    + [3.7. Saving:](#saving) `bye`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    + [3.8. Loading](#load) "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [4. Command Summary](#command-summary)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"introduction\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Restaurant Daily Report is a CLI app that generates a whitepaper, "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "summarizing the internals of a restaurant. It’s aim is to provide "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "restaurant owners a quick overview of how their restaurant is performing "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "daily so that restaurant owners can better manage their business operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "As such, the daily report will include these categories:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Menu: Information on all menu items"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Reservation: Information on number of reservations a day"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Stock: Information on all food items/quantities/prices"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"quick-start\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2. Download the latest version of `Restaurant Report` from [here](https://github.com/AY1920S2-CS2113-T14-4/tp/releases/download/v2.0/restaurant-2.0.jar)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "``` javascript"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Add menu items, ingredients and reservations."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* words in UPPERCASE: parameters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* parameters in [ ]: optional parameters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* parameters in { | }: at least one of them"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* sequence of the parameters can be changed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"add\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "### Add"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Add menu items, ingredients, and reservations."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### Add menu item: add dish"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `add dish; n/NAME; [i/INGREDIENT1, INGREDIENT2, ...]; p/PRICE;`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Example: `add dish; n/bacon pizza; i/cheese, bacon; p/7.00;`\u003cbr/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### Add ingredient into stock: add stock"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `add stock; i/INGREDIENT1; q/QUANTITY; p/PRICE;`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Example: `add stock; i/tomato; q/10; p/0.50;`\u003cbr/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### Add reservation into list: add reservation "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `add reservation; p/CONTACT_PERSON_NAME; d/DATE; n/NUMBER_OF_GUESTS; c/CONTACT; [m/COMMENTS];`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Example: `add reservation; p/Peter; d/2020-03-12 12:00; n/3; c/98955555;`\u003cbr/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "*The `DATE` must be in **yyyy-mm-dd HH:mm** format. The `NUMBER_OF_GUESTS` must be a non-negative integer.*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"delete\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "### Delete"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Delete menu items, ingredients and reservations."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### Delete menu item: delete dish"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `delete dish; n/NAME;`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Example: `delete dish; n/bacon pizza;`\u003cbr/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### Delete ingredient in stock: delete stock"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `delete stock; i/INGREDIENT; [q/QUANTITY;]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Example: `delete stock; i/tomato; q/1;`\u003cbr/\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  + Example: `delete stock; i/tomato;`\u003cbr/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### Mark reservation as invalid: delete reservation"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `delete reservation; r/NUMBER_OF_RESERVATION;`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Example: `delete reservation; r/12;`\u003cbr/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "#### Mark reservation as served: mark reservation"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Cannot mark the reservation as served if the reservation is originally invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `mark reservation; r/NUMBER_OF_RESERVATION;`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Example: `mark reservation; r/4;`\u003cbr/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"list\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "### List"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "List items in the menu, stock and reservations."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* List menu : `list dish;`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* List stock : `list stock;`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* List all reservation : `list reservation;`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* List served reservation : `list served reservation;`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* List unserved reservation : `list unserved reservation;`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"search\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### Search"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Search items in the menu, stock and reservations."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "#### Search for dish: search dish"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Search dish : `search dish; k/KEYWORD;`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Example: `search dish; k/bacon;`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "#### Search for stock: search stock"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Search stock : `search stock; k/KEYWORD;`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Example: `search stock; k/tomato;`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "#### Search for reservation: search reservation"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Search reservation : `search reservation; {r/RESERVATION_NUMBER; | d/DATE;}`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Example: `search reservation; r/1;`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Example: `search reservation; d/2020-02-02;`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  + Example: `search reservation; r/0; d/2020-02-02;`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "*The `DATE` must be in **yyyy-mm-dd** format. The `RESERVATION_NUMBER` must be a non-negative integer.*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nguan1"
        },
        "content": "\u003ca name\u003d\"sales\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nguan1"
        },
        "content": "### Sales"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Add daily sales and calculate profit"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nguan1"
        },
        "content": "#### Sell item : sell item"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Format: `sell dish; d/DISH; q/QUANTITY;`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Example: `sell dish; d/pasta; q/10;`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nguan1"
        },
        "content": "#### Generate Profit : calculate profit"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Calculates the net profit from all the sold dishes"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Format: `profit`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nguan1"
        },
        "content": "#### Find most popular dish : popular"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Prints the most popular dish from the sold list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Format: `popular`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"clear\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "### Clear"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Clear the stock, dish, or reservation list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### Clear stock : clear stock"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Format `clear stock;`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "#### Clear reservation : clear reservation"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `clear reservation;`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "\u003ca name\u003d\"saving\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nguan1"
        },
        "content": "### Saving"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nguan1"
        },
        "content": "All dishes, stock and reservations will be saved to `report.txt` automatically after the program is exited."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nguan1"
        },
        "content": "#### Exit Program: bye"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Format: `bye`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nguan1"
        },
        "content": "\u003ca name\u003d\"load\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nguan1"
        },
        "content": "### Loading (for v2.1)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Dishes, stock and reservations will be automatically loaded when the program is started."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nguan1"
        },
        "content": "\u003ca name\u003d\"command-summary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### Add"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `add dish; n/NAME; [i/INGREDIENT1, INGREDIENT2, ...]; p/PRICE;`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `add stock; i/INGREDIENT1; q/QUANTITY; p/PRICE;`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `add reservation; r/NUMBER_OF_RESERVATIONS;`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### Delete"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `delete dish; n/NAME;`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Format: `delete stock; i/INGREDIENT; q/QUANTITY;`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Format: `delete stock; i/INGREDIENT;`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `delete reservation; r/NUMBER_OF_RESERVATIONS;`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### Mark"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `mark reservation; r/NUMBER_OF_RESERVATIONS;`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### List"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `list dish;`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `list stock;`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `list reservation;`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `list served reservation;`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `list unserved reservation;`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### Search"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `search dish; k/KEYWORD;`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `search stock; k/KEYWORD;`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Format: `search reservation; {r/RESERVATION_NUMBER; | d/DATE;}`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### Sales"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Format: `sell dish; d/DISH; q/QUANTITY;`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Format: `profit`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Format: `popular`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "### Clear"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Format: `clear stock;`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `clear reservation;`"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 38,
      "gmuthu17": 50,
      "-": 32,
      "nguan1": 30,
      "SibingWu": 58
    }
  },
  {
    "path": "docs/team/ganeshmuthu.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "# Ganesh Muthu - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. [Restaurant daily report](#overview)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "2. [Summary of contributions](#summary)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + 2.1 [Code contributed](#code)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + 2.2 [Enhancements implemented](#enhancements)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + 2.3 [Developer guide](#dg)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + 2.4 [User guide](#ug)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + 2.5 [Team-based tasks](#team)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "   "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"overview\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "### 1. Restaurant daily report"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Restaurant Daily Report is a CLI app that generates a whitepaper, summarizing the internals of a restaurant. It’s aim is to provide restaurant owners a quick overview of how their restaurant is performing daily so that restaurant owners can better manage their business operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"summary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "### 2. Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"code\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### 2.1 Code contributed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "You can view my code contribution [here](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dgmuthu17)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"enhancements\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### 2.2 Enhancements implemented"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#####Add dish"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. Basic add dish functionality."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "2. Informs user if they attempt to add a dish that already exists."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + Custom message: `Dish [dish name] already exists!`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "3. Informs the user if dish name, ingredients, or price is missing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "4. Informs the user if input syntax is incorrect (such as a semicolon missing)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "5. Informs the user if inputted price was not a number."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "6. Allows flexible ordering of parameters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + add dish; n/NAME; i/[INGREDIENT 1], [INGREDIENT 2],...]; p/PRICE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + add dish; i/[INGREDIENT 1], [INGREDIENT 2],...]; p/PRICE; n/NAME;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + any other combination of parameters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "7. Custom dish added message"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + Example: `add dish; n/pizza; i/cheese, sauce, bread; p/6.00`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + Message: `Dish pizza successfully added.`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#####Delete dish"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. Basic delete menu item functionality."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "2. Informs user if they attempt to delete a menu item that does not exist."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + Custom message: `Dish [dish name] does not exist!`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "3. Informs user if they attempt to delete a menu item when menu is empty."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "4. Informs the user if item name is missing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "5. Informs the user if input syntax is incorrect (such as a semicolon missing)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "6. Custom dish deleted message"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + Example: `delete dish; n/pizza;`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + Message: `Dish pizza successfully removed!`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#####List menu item"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. Basic list menu item functionality."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "2. Informs user if there are no items to list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#####Search menu item"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. Basic search menu item functionality."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "2. Informs user if no items match the search."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + Custom message: `There are no dishes that match the keyword [keyword]!`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "3. Informs user if they attempt to search for a menu item when menu is empty."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "4. Informs the user if keyword is missing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "5. Informs the user if input syntax is incorrect (such as a semicolon missing)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#####Dish profit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. Basic dish profit functionality."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "2. Throws error if dish profit calculation is attempted for dish made of ingredients not listed in stock."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "3. Throws an error if dish profit calculation is attempted for dish made of ingredients with zero stock."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "4. Throws an error if dish profit calculation is attempted for a dish that would yield negative profit."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + When: Total cost of ingredients in dish \u003e dish price"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#####Load dish"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. Load dish input from saved file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"dg\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### 2.3 Developer guide"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. Implementation of search dish feature."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "2. Design considerations for search dish feature."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + Considered two types of execution"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + Considered two data structures for search dish"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"ug\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### 2.4 User guide"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. Add dish section"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "2. Delete dish section"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "3. List dish section"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "4. Search dish section"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "5. Respective syntax in command summary section"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"team\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### 2.5 Team tasks"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. Contributed to brainstorming of project ideas."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "2. Contributed to creation of user stories."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "3. Frequently provided input on project direction throughout process."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "4. "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 96
    }
  },
  {
    "path": "docs/team/josephlimweijie.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "# Joseph Lim Wei Jie - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 1. Restaurant Daily Report"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "`Restaurant Daily Report` is a CLI app that generates a whitepaper, summarizing the internals of a restaurant. It’s aim is to provide restaurant owners a quick overview of how their restaurant is performing daily so that restaurant owners can better manage their business operations."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 2. Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 2.1 Code contribution:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "You can view my code contribution for this project [here:](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djosephlimweijie)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 2.2 Enhancements implemented:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##### 2.2.1 Stock category:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "###### Add:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1. Basic add functionality."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2. Informs user if the user enters a name that is similar to the existing ingredients in the stock."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "3. Allows flexibility in the ordering of the parameters specified from the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + For example: `add stock; i/tomato; q/10; p/1.00;` and `add stock; i/tomato; p/1.00; q/10;` are both acceptable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "4. Customizes error messages according to the input supplied from the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    For example: "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + `add stock; i/;` will display the message: `\"The user\u0027s input must specify the ingredient\u0027s name!\"`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + `add stock; i/tomato; q/-10; p/1.00;` will display the message: `\"Please enter a positive value for the quantity to be added!\"`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "5. Displays a reminder to the user if the user input a similar ingredient name that exists in the stock. This is inform the user if he/she has made a typo that was undesired."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    For example:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + `add stock; i/ToMATo; q/10; p/1.00;` will display the following result, if tomato already exists in the stock:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        \u003cimg src\u003d \"https://user-images.githubusercontent.com/59989652/78984371-a42d6b80-7b58-11ea-8e88-d9fa8adfdec8.png\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    \u003c/p\u003e    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "###### Delete:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1. Basic delete functionality."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2. Allows flexibility in the ordering of the parameters specified from the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + For example: `delete stock; i/tomato; q/10;` and `delete stock; i/tomato;` are both acceptable."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "3. Allows the user to delete the ingredient by quantity count or remove from the stock entirely."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    For example:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + `delete stock; i/tomato;` removes tomato entirely from the stock."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + `delete stock; i/tomato; q/1;` reduces the quantity of tomatoes in the stock by 1. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "4. Customizes error messages according to the input supplied from the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    For example: "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + `delete stock; i/;` will display the message: `\"The user\u0027s input must specify the ingredient\u0027s name!\"`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + `delete stock; i/tomato; q/-10;` will display the message: `\"Please enter a positive value for the quantity to be added!\"`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "###### List:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1. Basic list functionality."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2. Lists ingredients in the stock from the highest quantity to the lowest quantity."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "###### Search:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1. Basic search functionality."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2. Takes into account case-sensitivity of the keyword supplied from the user when searching against the stock."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "###### Load:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1. Loads the stock-related data from the `report.txt` file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 2.3 Contributions to documentations:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "###### 2.3.1 User guide contribution:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "The following sections are where the **content** is contributed by me:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1. Anchoring using Table of Content at the top of the user guide."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2. Introduction"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "3. Quick Start"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "4. Add: add ingredient into stock"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "5. Delete: delete ingredient from stock"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "6. List: list stock"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "7. Search: search stock"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "8. Command Summary:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + Add format: `add stock; i/INGREDIENT; q/QUANTITY; P/PRICE;`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + Delete format: `delete stock; i/INGREDIENT; q/QUANTITY` and `delete stock; i/INGREDIENT;`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + List format: `list stock;`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + Search format: `search stock; k/keyword;` "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + Clear format: `clear stock;`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "The following sections are where the **content** is contributed by me:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##### 2.4 Developer guide contribution:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1. Anchoring using Table of Content at the top of the developer guide."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2. Design \u0026 Implementation:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    Sections:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + 1.1 [Proposed] Search stock feature"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + 1.2 [Proposed] List stock ingredients in descending quantity"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 2.5 Contributions to team-based tasks:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1. Automate testing by incorporating test cases using text-ui-test."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2. Release `Restaurant Daily Report v2.0`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 2.6 Review/Mentoring contributions: "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1. Troubleshoot failing CI-Test in issue #74. "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 2.7 Contributions beyond the project team:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 101
    }
  },
  {
    "path": "docs/team/sibingwu.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "# Wu Sibing - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "## Overview "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "Restaurant Daily Report is a CLI app that generates a whitepaper, "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "summarizing the internals of a restaurant. It’s aim is to provide "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "restaurant owners a quick overview of how their restaurant is performing "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "daily so that restaurant owners can better manage their business operations."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* **Code contributed:** [code on tP Code Dashboard](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dsibingwu\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* **Enhancements implemented:**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  1. Feature: Add a Reservation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - What it does: Allows users to input `add reservation` to add a reservation with details to the `reservations` list in the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Justification: This feature is needed for restaurant to add the newly received reservation to the list in the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Highlights: The `AddReservationCommand` class will examine if the user misses some inputs or delimiters. Adding the reservation is handled by `ReservationList` class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  2. Feature: Mark a Reservation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - What it does: Allows users to input `delete reservation` to mark a reservation as **invalid** or input `mark reservation` to mark a reservation as **served**."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Justification: This feature is needed for restaurant to update the status of a reservation when they finish serving it or the reservation is canceled."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Highlights: The `VoidReservationCommand` or `MarkReservationCommand` class will examine if the user misses some inputs or delimiters. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "          Marking the reservation is handled by `ReservationList` class. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     -    Some restriction is set to follow the common sense: a invalid reservation cannot be makred as served or invalid again; a served reservation cannot be marked as invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "       "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  3. Feature: List the Reservations"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - What it does: Allows the users to input `list reservation` to list all reservations, or input `list served reservation` to list all **served** reservations, or input `list unserved reservation` to list all **unserved** reservations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Justification: This feature is needed for restaurant to review all reservations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Highlights: When certain types of reservations are required to be listed, the `ListServedCommand` and `ListUnservedCommand` class will do a linear search among `reservations` list and check the reservation status."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  4. Feature: Search the Reservations"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - What it does: Allows the users to input `search reservation` to search for a specific reservation or all reservations in a certain day."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Justification: This feature is needed for restaurant to look at the details of a specific reservation or review all the reservations in a specific day."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Highlights: The `SearchReservationCommand` class will do a linear search among `reservations` list to find the matched reservations."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  5. Feature: Load the `Reservation` from the **\"report.txt\"** file to the `reservations` list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - What it does: The reservations in the txt file will be automatically loaded into the `reservations` list when the program is started."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Justification: This feature is needed for restaurant to view reservations added before."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Highlights: The `LoadReservation` class will be in charge of loading reservations in the txt file into the `reservations` list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  6. Feature: Clear the `reservations` list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - What it does: Allows the user to input `clear reservation` to clear all reservations."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Justification: This feature exists in case the restaurant really needs it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Highlights: The `ReservationList` class will clear the `reservations` ArrayList directly."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  7. Adding Logger to the Reservation-related section and Ui"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - What it does: It records down all the `add`, `mark` and `delete` activities which can modify the `reservations` list. A fail to set up the logger will also be recorded."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "      - Justification: The restaurant need to keep track of the log of its reservations."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* **Contributions to documentation:**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  1. Updated User Guide for all reservation-related features."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  2. Added the legend for command format of `Features` section in User Guide."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* **Contributions to the DG:**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  1. Added description for the `Search Reservation` features."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  2. Added content for Appendix A, C and D"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  3. Added reservation-related content to Appendix B and E."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* **Contributions to team-based tasks:** Project Management"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  1. Creating the milestones v1.0, v2.0, v2.1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  2. Maintaining the issue tracker: I used the [Github issues](https://github.com/AY1920S2-CS2113-T14-4/tp/issues?q\u003dis%3Aissue+is%3Aclosed+author%3ASibingWu) to allocate the upcoming work."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* **Review/mentoring contributions:** Pull Request reviewed: [#148](https://github.com/AY1920S2-CS2113-T14-4/tp/pull/148), [#149](https://github.com/AY1920S2-CS2113-T14-4/tp/pull/149)"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 61
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ReservationCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.InvalidLoadException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.ReservationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import report.LoadDish;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import report.LoadReservation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ReservationCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import exceptions.InvalidFilePathException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import exceptions.StockReadWriteException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.ReservationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import report.LoadReservation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import report.LoadStock;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import sales.Sales;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import utils.CommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import utils.LoggerUtils;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Entry point of the application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Initializes the program and takes command from the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Stock stock;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private ReservationList reservations;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private Menu menu;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private Sales sales;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Driver code for the program. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static void main(String... args) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        new Main().run(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Runs the program until the user terminates it. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void run(String[] args) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        start(args);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        runCommandUntilExit();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Sets up the required objects and shows a welcome message. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void start(String[] args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.stock \u003d new Stock();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // this.reservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.sales \u003d new Sales();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            this.menu \u003d LoadDish.getInstance(\"report.txt\").readDishes();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } catch (InvalidLoadException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            ui.showMessage(\"Error loading from file, creating new menu\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            this.menu \u003d new Menu();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            this.menu \u003d new Menu();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.reservations \u003d new ReservationList(LoadReservation.getInstance(\"report.txt\").loadFileReservations());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Fails to load in the list from the file...\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.reservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (ReservationException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.reservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.menu \u003d new Menu();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.sales \u003d new Sales();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // set up the logger"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LoggerUtils.createLogFolder(LOG_FOLDER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            Ui.setLogger();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            Reservation.setLogger();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ReservationCommand.setLogger();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ReservationList.setLogger();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.displayLoggingSetUpFailMessage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        // load data from report.txt       "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            this.reservations \u003d new ReservationList("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    LoadReservation.getInstance(\"report.txt\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .loadFileReservations());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ui.showMessage(\"Fails to load in the list from the file...\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            this.reservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (ReservationException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            this.reservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        LoadStock ls \u003d Stock.getStockLoader();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ls.loadStockData(stock);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidFilePathException | StockReadWriteException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Read user\u0027s input, parse it into readable command format and execute it. */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void runCommandUntilExit() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            System.out.println(\"Input next command:\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String userInput \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            new CommandParser().parseCommand(userInput, this.menu, "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    this.stock, this.reservations, this.sales, this.ui);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Exits the program with a goodbye message. */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }    "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 73,
      "SibingWu": 36,
      "nguan1": 27
    }
  },
  {
    "path": "src/main/java/commands/AddDishCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.DishIngredientsMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.DishNameMissingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.DishPriceMissingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.InvalidAddDishCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.InvalidPriceException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class AddDishCommand extends Menu {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Adds a dish to the menu based on the input string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string that include dish name and ingredients in no specific order"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static void addDish(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            checkFormat(input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            ArrayList\u003cString\u003e ingredients \u003d parseIngredients(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            String name \u003d parseName(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            if (Menu.getDishMap().containsKey(name)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                System.out.println(\"Dish \" + name + \" already exists!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                double price \u003d parsePrice(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                Dish d \u003d new Dish(name, ingredients, price);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                Menu.getDishMap().put(name, d);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                System.out.println(\"Dish \" + name + \" successfully added.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | InvalidAddDishCommandException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Incorrect add dish format!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            printFormat();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (InvalidPriceException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Invalid price! Price must be a number.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (DishIngredientsMissingException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Dish ingredient(s) are missing!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            printFormat();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (DishNameMissingException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Dish name is missing!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            printFormat();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (DishPriceMissingException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Dish price is missing!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            printFormat();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Parses ingredients from string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input string of ingredients"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return ArrayList of ingredients"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static ArrayList\u003cString\u003e parseIngredients(String input) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ArrayList\u003cString\u003e ingredients \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(input.indexOf(\"i/\") + 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(0, input.indexOf(\";\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String[] splitString \u003d input.split(\",\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        for (String str: splitString) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            ingredients.add(str.trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Parses name from input string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return name of dish"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static String parseName(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(input.indexOf(\"n/\") + 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(0, input.indexOf(\";\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Parse price from input string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return price of dish"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws InvalidPriceException exception for invalid price"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static double parsePrice(String input) throws InvalidPriceException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            input \u003d input.substring(input.indexOf(\"p/\") + 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            input \u003d input.substring(0, input.indexOf(\";\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            return Double.parseDouble(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            throw new InvalidPriceException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Print add dish format."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private static void printFormat() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        System.out.println(\"The correct format is: add dish; n/NAME; \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                + \"[i/INGREDIENT1, INGREDIENT2, ...]; p/PRICE;\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Check format of add dish command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws DishNameMissingException exception for missing dish name"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws DishIngredientsMissingException exception for missing ingredients"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws InvalidAddDishCommandException exception for invalid add dish format"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws DishPriceMissingException exception for missing dish price"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private static void checkFormat(String input) throws DishNameMissingException,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            DishIngredientsMissingException, InvalidAddDishCommandException, DishPriceMissingException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        if (!input.contains(\"n/\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            throw new DishNameMissingException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } else if (!input.contains(\"i/\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            throw new DishIngredientsMissingException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } else if (!input.contains(\"p/\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            throw new DishPriceMissingException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } else if (input.chars().filter(ch -\u003e ch \u003d\u003d \u0027;\u0027).count() !\u003d 3) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            throw new InvalidAddDishCommandException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 120
    }
  },
  {
    "path": "src/main/java/commands/AddReservationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.DELIMITER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_DATE_MARKER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_PERSON_MARKER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_NUM_MARKER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_CONTACT_MARKER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_COMMENT_MARKER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/* Command object for \"add reservation\" command */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class AddReservationCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int numberOfGuests;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String contact;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String comments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int reservationNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public AddReservationCommand(String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Adds a reservation into the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            parseInput(this.description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            // reservationNumber"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.reservationNumber \u003d reservations.getSize() + 1; // starting from 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assert this.reservationNumber \u003e\u003d 0 : \"Invalid Reservation Number\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            Reservation reservation \u003d new Reservation(reservationNumber, name, date, numberOfGuests, contact);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (comments !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservation.setComments(this.comments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservations.addReservation(reservation);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(String.format(\"Reservation[%d] has been added into the list\", this.reservationNumber));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please enter a valid positive integer.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please follow the date time format strictly: yyyy-MM-dd HH:mm; eg. 2000-01-01 12:00\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Try the \u0027help\u0027 command for the list of commands\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Parses the input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param description Input from the user excluding the command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws InputMissingException If there is input missing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws DelimiterMissingException If there is delimiter missing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) throws InputMissingException, DelimiterMissingException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int namePos \u003d description.indexOf(RES_PERSON_MARKER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (namePos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"name \" + RES_PERSON_MARKER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert namePos !\u003d -1 : \"Contact Name Missing\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int nameEndPos \u003d description.indexOf(DELIMITER, namePos);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (nameEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert nameEndPos !\u003d -1 : \"Semicolon Missing\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // enter no content for name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (namePos + RES_PERSON_MARKER.length() \u003d\u003d nameEndPos) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"name\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert namePos + RES_PERSON_MARKER.length() !\u003d nameEndPos : \"Contact Name Missing\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        boolean delimiterMissing;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        String[] markers \u003d {RES_PERSON_MARKER, RES_DATE_MARKER, RES_NUM_MARKER,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            RES_CONTACT_MARKER, RES_CONTACT_MARKER, RES_COMMENT_MARKER};"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        delimiterMissing \u003d hasDelimiterInBetween(namePos + RES_PERSON_MARKER.length(), nameEndPos, "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                markers, description);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (delimiterMissing) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert !delimiterMissing : \"Semicolon Missing\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.name \u003d description.substring(namePos + RES_PERSON_MARKER.length(), nameEndPos).trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int datePos \u003d description.indexOf(RES_DATE_MARKER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (datePos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"date \" + RES_DATE_MARKER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert datePos !\u003d -1 : \"Date Missing\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int dateEndPos \u003d description.indexOf(DELIMITER, datePos);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (dateEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert dateEndPos !\u003d -1 : \"Semicolon Missing\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        delimiterMissing \u003d hasDelimiterInBetween(datePos + RES_DATE_MARKER.length(), dateEndPos, "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                markers, description);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (delimiterMissing) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert !delimiterMissing : \"Semicolon Missing\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.date \u003d LocalDateTime.parse("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                description.substring(datePos + RES_DATE_MARKER.length(), dateEndPos).trim(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // numberOfGuests"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberPos \u003d description.indexOf(RES_NUM_MARKER);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"number of guests \" + RES_NUM_MARKER);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert numberPos !\u003d -1 : \"Number of Guests Missing\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberEndPos \u003d description.indexOf(DELIMITER, numberPos);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert numberEndPos !\u003d -1 : \"Semicolon Missing\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        delimiterMissing \u003d hasDelimiterInBetween(numberPos + RES_NUM_MARKER.length(), numberEndPos,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                markers, description);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (delimiterMissing) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert !delimiterMissing : \"Semicolon Missing\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.numberOfGuests \u003d Integer.parseInt(description.substring("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                numberPos + RES_NUM_MARKER.length(), numberEndPos).trim());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberOfGuests \u003c\u003d 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new NumberFormatException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert numberOfGuests \u003e 0 : \"Negative Number of Guests\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // contact"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int contactPos \u003d description.indexOf(RES_CONTACT_MARKER);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (contactPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"contact \" + RES_CONTACT_MARKER);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert contactPos !\u003d -1 : \"Contact Missing\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int contactEndPos \u003d description.indexOf(DELIMITER, contactPos);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (contactEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert contactEndPos !\u003d -1 : \"Semicolon Missing\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // enter no content for contact"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (contactPos + RES_CONTACT_MARKER.length() \u003d\u003d contactEndPos) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"contact\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert contactPos + RES_CONTACT_MARKER.length() !\u003d contactEndPos : \"Contact Missing\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        delimiterMissing \u003d hasDelimiterInBetween(contactPos + RES_CONTACT_MARKER.length(), contactEndPos,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                markers, description);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (delimiterMissing) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert !delimiterMissing : \"Semicolon Missing\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.contact \u003d description.substring("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                contactPos + RES_CONTACT_MARKER.length(), contactEndPos).trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // comments"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int commentsPos \u003d description.indexOf(RES_COMMENT_MARKER);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (commentsPos \u003d\u003d -1) { // no comments"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int commentsEndPos \u003d description.indexOf(DELIMITER, commentsPos);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (commentsEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert commentsEndPos !\u003d -1 : \"Semicolon Missing\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        delimiterMissing \u003d hasDelimiterInBetween(commentsPos + RES_COMMENT_MARKER.length(), commentsEndPos,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                markers, description);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (delimiterMissing) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert !delimiterMissing : \"Semicolon Missing\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.comments \u003d description.substring("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                commentsPos + RES_COMMENT_MARKER.length(), commentsEndPos).trim();        "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 3,
      "gmuthu17": 3,
      "SibingWu": 207
    }
  },
  {
    "path": "src/main/java/commands/AddStockCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class focuses on the \u0027add\u0027 functionality of the application"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * on the stock category."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class AddStockCommand extends StockCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The ingredient to be added into the stock. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Ingredient ingredientToAdd;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int defaultNumOfIngredientArgs \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A convenience constructor that contains information of an ingredient stored in a "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * hashMap."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not meet the required"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      format by specifying i/INGREDIENT; q/QUANTITY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      p/PRICE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public AddStockCommand(String ingredientInput) throws InvalidStockCommandException {  "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredientInfo \u003d "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parseIntoAddIngredientArgs(ingredientInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientInfo"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .entrySet()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(item -\u003e item.getKey())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int quantity \u003d ingredientInfo.get(ingredientName).first();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        double price \u003d ingredientInfo.get(ingredientName).second();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.ingredientToAdd \u003d new Ingredient(ingredientName, "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                Optional.of(quantity), Optional.of(price));               "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses the user\u0027s input into readable arguments that will be used to construct an "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Ingredient object. The arguments are then stored in a HashMap. For example: "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * \u0027 i/tomato; q/10; p/$0.50;\u0027 will store \u0027tomato\u0027 as the ingredient name, \u002710\u0027 as"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the ingredient quantity and \u0027$0.50\u0027 as the ingedient\u0027s price. Note that the "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * constructor of an Ingredient is new Ingredient(NAME, QUANTITY, PRICE)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Two checks are ENFORCED here. The first check checks if there are missing tags in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the user\u0027s input. The second check checks if there are any blanks after parsing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the various arguments."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not meet the required"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      format by specifying i/INGREDIENT; q/QUANTITY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      p/PRICE STRICTLY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parseIntoAddIngredientArgs("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String fullInputLine) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArgs \u003d fullInputLine.split(\";\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cString\u003e parsedIngredientName \u003d Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cInteger\u003e parsedQuantity \u003d Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cDouble\u003e parsedPrice \u003d Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        // First check."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkMissingTagInUserInput(fullInputLine);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (String argument : wordArgs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedArg \u003d argument.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedArg.contains(\"i/\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parsedIngredientName \u003d Optional.of(parseIngredientName(trimmedArg));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"q/\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parsedQuantity \u003d Optional.of(parseIngredientQuantity(trimmedArg));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"p/\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parsedPrice \u003d Optional.of(parseIngredientPrice(trimmedArg));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"The user\u0027s input did not meet the required format.\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" Please enter in the following format:\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"p/PRICE;`\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }     "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        // Second check."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkValidParsedIngredientArguments(parsedIngredientName, parsedQuantity, parsedPrice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredientInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        ingredientInfo.put(parsedIngredientName.get(), Pair.of(parsedQuantity.get(), parsedPrice.get()));    "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientInfo;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }    "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Checks the parsed ingredients\u0027 arguments if all information of the ingredient are "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * being tag accordingly. For example, the ingredient\u0027s name must be tagged with \u0027i/\u0027,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the ingredient\u0027s quantity must be tagged with \u0027q/\u0027 and the ingredient\u0027s price must"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * be tagged with \u0027p/\u0027."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not meet the required"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      format by specifying i/INGREDIENT; q/QUANTITY;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      p/PRICE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkMissingTagInUserInput(String fullInputLine) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArgs \u003d fullInputLine.split(\";\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (wordArgs.length \u003c defaultNumOfIngredientArgs) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String quantity \u003d \"\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String price \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasIngredientNameTag \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasQuantityTag \u003d false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasPriceTag \u003d false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (String argument : wordArgs) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedArg \u003d argument.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedArg.contains(\"i/\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                hasIngredientNameTag \u003d true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"q/\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                hasQuantityTag \u003d true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"p/\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                hasPriceTag \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (!hasIngredientNameTag \u0026\u0026 hasQuantityTag \u0026\u0026 hasPriceTag) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \u0027i/\u0027 tag\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s name.\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format:\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;`\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (hasIngredientNameTag \u0026\u0026 !hasQuantityTag \u0026\u0026 hasPriceTag) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \u0027q/\u0027 tag\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s quantity.\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format:\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;`\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (hasIngredientNameTag \u0026\u0026 hasQuantityTag \u0026\u0026 !hasPriceTag) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \u0027p/\u0027 tag\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s price.\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format:\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;`\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (!hasIngredientNameTag \u0026\u0026 !hasQuantityTag \u0026\u0026 hasPriceTag) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027i/\u0027 tag and \u0027q/\u0027 tag\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s name and quantity.\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format:\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;`\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (!hasIngredientNameTag \u0026\u0026 hasQuantityTag \u0026\u0026 !hasPriceTag) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027i/\u0027 tag and \u0027p/\u0027 tag\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s name and price.\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format:\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;`\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (hasIngredientNameTag \u0026\u0026 !hasQuantityTag \u0026\u0026 !hasPriceTag) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027q/\u0027 tag and \u0027p/\u0027 tag\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s quantity and price.\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format:\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;`\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (!hasIngredientNameTag \u0026\u0026 !hasQuantityTag \u0026\u0026 !hasPriceTag)  {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027i/\u0027, \u0027q/\u0027 tag and \u0027p/\u0027 tag\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s name, quantity and price.\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format:\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;`\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assert (hasIngredientNameTag \u0026\u0026 hasQuantityTag \u0026\u0026 hasPriceTag);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Checks the parsed ingredients\u0027 arguments if it meets the correct format."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not meet the required"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      format by specifying i/INGREDIENT; q/QUANTITY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      p/PRICE;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkValidParsedIngredientArguments(Optional\u003cString\u003e ingredientName, "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cInteger\u003e quantity, Optional\u003cDouble\u003e price) "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (ingredientName.isEmpty() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify an ingredient\u0027s name, \""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity to be added and its price!\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isPresent() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input is missing both the ingredient\u0027s \""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity to be added and the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify both the ingredient\u0027s \""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"name and the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isPresent()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify both the ingredient\u0027s name \""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"and the quantity to be added!\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isPresent() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isPresent() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isPresent()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify the quantity of the ingredient to be added!\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isPresent()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify the ingredient\u0027s name!\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assert (ingredientName.isPresent() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isPresent());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute(Stock stock) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(ingredientToAdd);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"Ingredient \" "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ingredientToAdd.getIngredientName() "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" successfully added!\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A utility function to facilitate testing of execute(). */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String printExecuteOutput(Stock stock) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(ingredientToAdd);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Ingredient \" "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ingredientToAdd.getIngredientName() "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" successfully added!\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Ingredient getIngredientInAddCommand() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.ingredientToAdd;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 263,
      "gmuthu17": 1,
      "SibingWu": 5
    }
  },
  {
    "path": "src/main/java/commands/ClearReservationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class ClearReservationCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservations.clearReservation();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        ui.showMessage(\"The reservation list has been cleared.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 17
    }
  },
  {
    "path": "src/main/java/commands/ClearStockCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class focuses on the \u0027clear\u0027 functionality of the \u0027Stock\u0027 category"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class ClearStockCommand extends StockCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute(Stock stock) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.clearStock();    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 16
    }
  },
  {
    "path": "src/main/java/commands/DeleteDishCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.DishNameMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.InvalidDeleteDishCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class DeleteDishCommand extends Menu {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Removes dish from menu."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input name of dish to remove"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static void deleteDish(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            checkFormat(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            String name \u003d AddDishCommand.parseName(input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            if (Menu.getDishMap().isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                System.out.println(\"There are no dishes to delete!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            } else if (!Menu.getDishMap().containsKey(name)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                System.out.println(\"Dish \" + name + \" does not exist! \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                Menu.getDishMap().remove(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                System.out.println(\"Dish \" + name + \" successfully removed!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (DishNameMissingException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Must include name of dish to delete!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (InvalidDeleteDishCommandException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Invalid delete dish command!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"The correct format is: delete dish; n/NAME;\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Check format for delete dish command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws DishNameMissingException exception for missing name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws InvalidDeleteDishCommandException exception for invalid delete format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static void checkFormat(String input) throws DishNameMissingException, InvalidDeleteDishCommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        if (!input.contains(\"n/\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            throw new DishNameMissingException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } else if (input.chars().filter(ch -\u003e ch \u003d\u003d \u0027;\u0027).count() !\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            throw new InvalidDeleteDishCommandException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 47
    }
  },
  {
    "path": "src/main/java/commands/DeleteStockCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class focuses on the \u0027delete\u0027 functionality of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class DeleteStockCommand extends StockCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The ingredient to be deleted within the stock. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Ingredient ingredientToDelete;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A convenience constructor that contains information of an ingredient "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * stored in a hashMap."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public DeleteStockCommand(Map\u003cString, Optional\u003cInteger\u003e\u003e ingredientInfo) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientInfo"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .entrySet()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(item -\u003e item.getKey())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cInteger\u003e quantity \u003d ingredientInfo.get(ingredientName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.ingredientToDelete \u003d new Ingredient(ingredientName, quantity, Optional.empty());               "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A convenience constructor that contains information of an ingredient "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * stored in a hashMap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not meet "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      the required format by specifying "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      i/INGREDIENT; q/QUANTITY;                                    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public DeleteStockCommand(String ingredientInput) "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Optional\u003cInteger\u003e\u003e ingredientInfo \u003d "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parseIntoDeleteIngredientArgs(ingredientInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientInfo"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .entrySet()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(item -\u003e item.getKey())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cInteger\u003e quantity \u003d ingredientInfo.get(ingredientName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.ingredientToDelete \u003d new Ingredient(ingredientName, quantity, Optional.empty());               "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses the user\u0027s input into readable arguments that will be used "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * to construct an Ingredient object. The arguments are then stored "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * in a HashMap. For example: \u0027 i/tomato; q/10;\u0027 will store \u0027tomato\u0027 "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * as the ingredient name, \u002710\u0027 as the ingredient quantity to be "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * deleted. Note that the specification of the ingredient\u0027s "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * quantity is optional."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      meet the required format by "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      specifying i/INGREDIENT; "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      q/QUANTITY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Map\u003cString, Optional\u003cInteger\u003e\u003e parseIntoDeleteIngredientArgs("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String fullInputLine) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Optional\u003cInteger\u003e\u003e ingredientInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArgs \u003d fullInputLine.split(\";\");       "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cString\u003e ingredientName \u003d Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cInteger\u003e quantity \u003d Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (String argument : wordArgs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedArg \u003d argument.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedArg.contains(\"i/\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ingredientName \u003d Optional.of(parseIngredientName(trimmedArg));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"q/\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                quantity \u003d Optional.of(parseIngredientQuantity(trimmedArg));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"There is no tag specified.\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" Please enter in the following format:\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"`delete stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_DELETED;`\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"               or\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"`delete stock; i/INGREDIENT_NAME;`.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkValidParsedIngredientArguments(ingredientName, quantity);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        ingredientInfo.put(ingredientName.get(), quantity);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientInfo;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Checks the parsed ingredients\u0027 arguments if it meets the correct format."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not meet the required"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      format by specifying i/INGREDIENT; q/QUANTITY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkValidParsedIngredientArguments(Optional\u003cString\u003e ingredientName,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cInteger\u003e quantity) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (ingredientName.isEmpty() \u0026\u0026 quantity.isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input must specify\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" an ingredient name.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isPresent()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input must specify\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" an ingredient name.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assert (ingredientName.isPresent());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute(Stock stock) {    "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(createDeleteResultMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IngredientNotFoundException infe) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(\"Ingredient \" "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + this.ingredientToDelete.getIngredientName() "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" not found and cannot be deleted!\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }       "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Creates a message to notify the user of the deletion. */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createDeleteResultMessage() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasQuantitySpecified \u003d ingredientToDelete.isQuantitySpecified();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"Ingredient \" "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientToDelete.getIngredientName()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + (hasQuantitySpecified "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            ? \" reduced by \" "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            + ingredientToDelete.getIngredientQuantity() + \"!\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            : \" deleted from the stock!\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A utility function to facilitate testing of execute(). */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String printExecuteOutput(Stock stock) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (createDeleteResultMessage());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IngredientNotFoundException infe) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (\"Ingredient \" "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientToDelete.getIngredientName() "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" not found and cannot be deleted!\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Ingredient getIngredientInDeleteCommand() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.ingredientToDelete;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 175,
      "gmuthu17": 1,
      "nguan1": 5
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguan1"
        },
        "content": "///**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguan1"
        },
        "content": "// * Represents the \u0027Exit\u0027 functionality of a command. This command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguan1"
        },
        "content": "// * serves to exit the program upon executed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguan1"
        },
        "content": "// *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguan1"
        },
        "content": "// */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//    /** Returns true if a Command is an ExitCommand. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//        return command instanceof ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//        return new CommandResult(\"Program Exited\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 1,
      "gmuthu17": 1,
      "nguan1": 18
    }
  },
  {
    "path": "src/main/java/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguan1"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguan1"
        },
        "content": "public class HelpCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public static void execute() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"These are the commands supported by the system:\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        addCommands();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        deleteCommands();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        listCommands();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        searchCommands();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        salesCommands();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        clearCommands();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        quitCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private static void addCommands() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Add Commands:\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Add Dish: add dish; n/NAME; p/PRICE; [i/INGREDIENT1, INGREDIENT2, ...];\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Add Stock: add stock; i/INGREDIENT1; q/QUANTITY; p/PRICE;\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Add Reservation: add reservation; p/CONTACT_PERSON_NAME;\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                + \" d/DATE; n/NUMBER_OF_GUESTS; c/CONTACT; [m/COMMENTS];\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private static void deleteCommands() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Delete Commands:\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Delete Dish: delete dish; n/NAME;\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Delete Stock (with quantity): delete stock; i/INGREDIENT; q/QUANTITY;\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Delete Stock (without quantity): delete stock; i/INGREDIENT;\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Void Reservation: delete reservation; r/NUMBER_OF_RESERVATION;\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"Mark Reservation as Served: mark reservation; r/NUMBER_OF_RESERVATION\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private static void listCommands() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"List Commands:\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"List Menu: list dish;\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"List Stock: list stock;\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"List Reservation: list reservation;\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"List Served Reservation: list served reservation;\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"List Unserved Reservation: list unserved reservation;\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private static void searchCommands() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Search Commands:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Search dish: search dish; k/KEYWORD;\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Search Stock: search stock; keyword\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"Search Reservation: search reservation; {r/NUMBER_OF_RESERVATION; | d/DATE;}\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private static void salesCommands() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Sales Commands:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Sell dish: sell dish; d/DISH; q/QUANTITY;\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Calculate profit: profit\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Find most popular dish: popular\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private static void clearCommands() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"Clear Commands:\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"Clear all reservations: clear reservation;\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private static void quitCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"To exit the program enter: bye\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nguan1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguan1": 56,
      "SibingWu": 14
    }
  },
  {
    "path": "src/main/java/commands/ListDishCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class ListDishCommand extends Menu {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Prints out dishes from hashmap."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static void printDishes() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        if (Menu.getDishMap().keySet().isEmpty()) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"There are no dishes to list!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            for (String name: Menu.getDishMap().keySet()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                String ingredientList \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                for (String str: Menu.getDishMap().get(name).getIngredients()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                    ingredientList +\u003d str + \", \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                ingredientList \u003d ingredientList.substring(0, ingredientList.length() - 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                double price \u003d Menu.getDishMap().get(name).getPrice();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                System.out.println(\"Name: \" + name + \"\\t Price: $\" + price + \"\\t Ingredients: \" + ingredientList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Dishes successfully listed.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 26
    }
  },
  {
    "path": "src/main/java/commands/ListReservationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Command object for \"list reservations\" command. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class ListReservationCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Lists all reservations, including served, unserved, and invalid reservations."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (reservations.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"There is no reservation currently in the list.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d reservations.getSize(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(reservations.getReservation(i).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 2,
      "SibingWu": 28,
      "nguan1": 1
    }
  },
  {
    "path": "src/main/java/commands/ListServedCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static utils.Constants.SERVED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Command object for \"list served reservations\" command. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class ListServedCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Lists all served reservations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        boolean noServed \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d reservations.getSize(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (!reservations.getReservation(i).getStatus().equals(SERVED)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(reservations.getReservation(i).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            noServed \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (noServed) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"There is no served reservation currently in the list.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 3,
      "SibingWu": 35
    }
  },
  {
    "path": "src/main/java/commands/ListStockCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class focuses on the \u0027list\u0027 functionality of the \u0027Stock\u0027 category"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class ListStockCommand extends StockCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute(Stock stock) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.listIngredient();    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 15,
      "gmuthu17": 1
    }
  },
  {
    "path": "src/main/java/commands/ListUnservedCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static utils.Constants.NOT_SERVED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Command object for \"list unserved reservations\" command. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class ListUnservedCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Lists all unserved reservations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        boolean noUnserved \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d reservations.getSize(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (!reservations.getReservation(i).getStatus().equals(NOT_SERVED)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(reservations.getReservation(i).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            noUnserved \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (noUnserved) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"There is no unserved reservation currently in the list.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 3,
      "SibingWu": 35
    }
  },
  {
    "path": "src/main/java/commands/MarkReservationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidReservationNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.ReservationStatusException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.DELIMITER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_INDEX_MARKER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.SERVED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Command object for \"mark reservation\" command. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class MarkReservationCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int reservationNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int validMaxRange;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public MarkReservationCommand(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Specifies the index number of the target reservations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Marks the reservation as done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            validMaxRange \u003d reservations.getSize();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            parseInput(this.description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            // mark the reservation as done"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservations.markReservationAsServed(reservationNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(String.format(\"Successfully mark Reservation[%d] as served.\", this.reservationNumber));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please enter a valid positive integer.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Try the \u0027help\u0027 command for the list of commands\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InvalidReservationNumberException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (ReservationStatusException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(String.format(\"Reservation[%d] is already %s. It cannot be marked as %s.\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    this.reservationNumber, e.getStatus(), SERVED));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Parses the input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param description Input from the user excluding the command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws InputMissingException If there is input missing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws DelimiterMissingException If there is delimiter missing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws InvalidReservationNumberException If there is no such reservation number in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throws InputMissingException, DelimiterMissingException, InvalidReservationNumberException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // specifies the reservation number"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberPos \u003d description.indexOf(RES_INDEX_MARKER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"reservation number \" + RES_INDEX_MARKER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert numberPos !\u003d -1 : \"Reservation Number Missing\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberEndPos \u003d description.indexOf(DELIMITER, numberPos);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert numberEndPos !\u003d -1 : \"Semicolon Missing\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.reservationNumber \u003d Integer.parseInt(description.substring(numberPos + RES_INDEX_MARKER.length(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                numberEndPos).trim());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (this.reservationNumber \u003c\u003d 0 || this.reservationNumber \u003e validMaxRange) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InvalidReservationNumberException(this.reservationNumber);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert 0 \u003c this.reservationNumber \u0026\u0026 this.reservationNumber \u003c\u003d validMaxRange : \"Invalid Reservation Number\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 2,
      "SibingWu": 87
    }
  },
  {
    "path": "src/main/java/commands/QuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguan1"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class encapsulates the \u0027exit\u0027 function of the program. When this command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * is executed, a writeToFile operation will be performed. All information on "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * menu, stock and reservations will be saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": "public class QuitCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Executes the QuitCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public static void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"The menu, stock and reservations have been saved to report.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"The program is now exiting\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguan1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 10,
      "nguan1": 9
    }
  },
  {
    "path": "src/main/java/commands/ReservationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.ReservationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public abstract class ReservationCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(ReservationCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"ReservationCommand.log\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets up the logger. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Calls once at the start of the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws IOException When logger set up failed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static void setLogger() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Locale.setDefault(Locale.UK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true); // let it append"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileHandler.setEncoding(\"UTF-8\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public abstract void execute(ReservationList reservations, Ui ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected abstract void parseInput(String description) throws ReservationException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Checks if there is another marker between the subcommand."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Checks for delimiter missing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param startPos Starting position after the original marker."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param endPos Position of the delimiter."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param markers Markers involved."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param description Raw description of the command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return True if there is another marker, False otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected boolean hasDelimiterInBetween(int startPos, int endPos, String[] markers, String description) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        String targetSubstring \u003d description.substring(startPos, endPos);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        for (String marker: markers) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (targetSubstring.contains(marker)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 2,
      "SibingWu": 61
    }
  },
  {
    "path": "src/main/java/commands/SearchDishCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.InvalidSearchDishCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.KeywordMissingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class SearchDishCommand extends Menu {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Searches menu for dish names containing keyword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string containing keyword"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return matchingDishes HashMap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static HashMap\u003cString, Dish\u003e searchDish(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap\u003cString, Dish\u003e matchingDishes \u003d new HashMap\u003cString, Dish\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            checkFormat(input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            if (Menu.getDishMap().isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                System.out.println(\"The menu is currently empty!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                String keyword \u003d parseKeyword(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                generateMatches(matchingDishes, keyword);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                if (matchingDishes.keySet().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                    System.out.println(\"There are no dishes that match the keyword \" + keyword + \"!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                    System.out.println(\"Here are the dishes that match your keyword:\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                    for (String name: matchingDishes.keySet()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                        generateIngredientList(matchingDishes, name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (KeywordMissingException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"You must include a keyword!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"The correct format is: search dish; k/KEYWORD;\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (InvalidSearchDishCommandException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Invalid search dish command!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"The correct format is: search dish; k/KEYWORD;\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return matchingDishes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Generate matching dishes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param matchingDishes hashMap of matching dishes"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param keyword keyword to search for"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private static void generateMatches(HashMap\u003cString, Dish\u003e matchingDishes, String keyword) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        for (String name: Menu.getDishMap().keySet()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            if (name.contains(keyword)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                matchingDishes.put(name, Menu.getDishMap().get(name));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Generates ingredient list for a dish, then prints dish."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param matchingDishes hashMap of dishes that match keyword"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param name name of dish"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private static void generateIngredientList(HashMap\u003cString, Dish\u003e matchingDishes, String name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String ingredientList \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        for (String str: matchingDishes.get(name).getIngredients()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            ingredientList +\u003d str + \", \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ingredientList \u003d ingredientList.substring(0, ingredientList.length() - 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        System.out.println(\"Name: \" + name + \"; Ingredients: \" + ingredientList"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                + \"; Price: $\" + matchingDishes.get(name).getPrice() + \";\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Parses keyword from input string."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static String parseKeyword(String input) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(input.indexOf(\"k/\") + 2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(0, input.indexOf(\";\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Check format for delete dish command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws KeywordMissingException exception for missing keyword"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws InvalidSearchDishCommandException exception for invalid delete format"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static void checkFormat(String input) throws KeywordMissingException, InvalidSearchDishCommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        if (!input.contains(\"k/\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            throw new KeywordMissingException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } else if (input.chars().filter(ch -\u003e ch \u003d\u003d \u0027;\u0027).count() !\u003d 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            throw new InvalidSearchDishCommandException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 98
    }
  },
  {
    "path": "src/main/java/commands/SearchReservationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidReservationNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.DELIMITER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_DATE_MARKER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_INDEX_MARKER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Command object for \"search reservation\" command. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class SearchReservationCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int reservationNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private LocalDate date; // yyyy-MM-dd"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int validMaxRange;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public SearchReservationCommand(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.reservationNumber \u003d -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Displays a list of reservations when users search by reservation number or date(yyyy-MM-dd). "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            validMaxRange \u003d reservations.getSize() - 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            parseInput(this.description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (reservationNumber !\u003d -1 \u0026\u0026 date !\u003d null) { // both reservation number and date exist"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                Reservation reservation \u003d reservations.getReservation(reservationNumber);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                if (reservation.getDate().equals(date)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    ui.showMessage(reservation.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    ui.showMessage(\"Sorry! No such reservation.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            } else if (reservationNumber !\u003d -1) { // only have reservation number"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                Reservation reservation \u003d reservations.getReservation(reservationNumber);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                ui.showMessage(reservation.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            } else if (date !\u003d null) { // only have date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                ui.showMessage(String.format(\"Here comes the reservations on the date %s:\", date));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                boolean emptyList \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d reservations.getSize(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    Reservation reservation \u003d reservations.getReservation(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    if (reservation.getDate().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                            .equals(date.toString())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                        ui.showMessage(reservation.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                        emptyList \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                if (emptyList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    ui.showMessage(\"Empty List.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please enter a valid positive reservation number.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please follow the date time format strictly: yyyy-MM-dd; eg. 2000-01-01\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Try the \u0027help\u0027 command for the list of commands\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InvalidReservationNumberException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Parses the input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param description Input from the user excluding the command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws InputMissingException If there is input missing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws DelimiterMissingException If there is delimiter missing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws InvalidReservationNumberException If there is no such reservation number in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throws InputMissingException, DelimiterMissingException, InvalidReservationNumberException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (description \u003d\u003d null || description.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(String.format(\"either reservation number %s or date %s\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    RES_INDEX_MARKER, RES_DATE_MARKER));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        boolean delimiterMissing;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        boolean inputMissing \u003d true; // to see if the command has either \"number\" input or \"date\" input"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        String[] markers \u003d {RES_INDEX_MARKER, RES_DATE_MARKER};"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // reservationNumber"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberPos \u003d description.indexOf(RES_INDEX_MARKER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberPos !\u003d -1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            inputMissing \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            int numberEndPos \u003d description.indexOf(DELIMITER, numberPos);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (numberEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assert numberEndPos !\u003d -1 : \"Missing Semicolon\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            delimiterMissing \u003d hasDelimiterInBetween(numberPos + RES_INDEX_MARKER.length(), numberEndPos,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    markers, description);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (delimiterMissing) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.reservationNumber \u003d Integer.parseInt(description.substring("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    numberPos + RES_INDEX_MARKER.length(), numberEndPos).trim());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (this.reservationNumber \u003c\u003d 0 || this.reservationNumber \u003e validMaxRange) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                throw new InvalidReservationNumberException(this.reservationNumber);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assert 0 \u003c this.reservationNumber \u0026\u0026 this.reservationNumber \u003c\u003d validMaxRange : \"Invalid Reservation Number\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }        "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // date: yyyy-MM-dd"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int datePos \u003d description.indexOf(RES_DATE_MARKER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (datePos !\u003d -1) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            inputMissing \u003d false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            int dateEndPos \u003d description.indexOf(DELIMITER, datePos);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (dateEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            delimiterMissing \u003d hasDelimiterInBetween(datePos + RES_DATE_MARKER.length(), dateEndPos,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    markers, description);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (delimiterMissing) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.date \u003d LocalDate.parse("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    description.substring(datePos + RES_DATE_MARKER.length(), dateEndPos).trim(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (inputMissing) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(String.format(\"either reservation number %s or date %s\", "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    RES_INDEX_MARKER, RES_DATE_MARKER));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 153
    }
  },
  {
    "path": "src/main/java/commands/SearchStockCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class focuses on the \u0027search\u0027 functionality "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * on the stock category."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class SearchStockCommand extends StockCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative index of \u0027k\u0027 present within the string. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int indexOfKCharacter \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative index of \u0027/\u0027 present within the string. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int indexOfSlashCharacter \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The length of \u0027k/\u0027 tag. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int keywordTagLength \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A convenience constructor that contains the keyword to be searched"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * against the ingredients in the stock."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public SearchStockCommand(String keyword) "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.keyword \u003d parseIntoSearchKeyword(keyword);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses the user input into readable keyword. For example, \u0027search stock; "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * k/tomato\u0027 will return \u0027tomato\u0027 as the keyword. The "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      meet the required format by "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      specifying \u0027k/KEYWORD\u0027."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String parseIntoSearchKeyword(String fullInputLine) "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkValidSearchKeywordArgumentsSupplied(fullInputLine);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedKeyword \u003d fullInputLine.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (trimmedKeyword.contains(\";\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedKeywordWithColon \u003d trimmedKeyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .substring(indexAfterSlash, trimmedKeyword.length() - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return trimmedKeywordWithColon; "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedKeywordWithoutColon \u003d trimmedKeyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .substring(indexAfterSlash, trimmedKeyword.length());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return trimmedKeywordWithoutColon; "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }            "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Checks the parsed ingredients\u0027 arguments if it meets the correct format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not meet the required"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      format by specifying \u0027k/KEYWORD\u0027."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkValidSearchKeywordArgumentsSupplied(String fullInputLine) "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedFullInputLine \u003d fullInputLine.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkForBlankArguments(trimmedFullInputLine);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkForKAndSlashBeforeKeyword(trimmedFullInputLine);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function to check for if the user input supplied is a blank entry."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input supplied nothing or"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      the KEYWORD from \u0027k/KEYWORD\u0027 is a blank."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkForBlankArguments(String trimmedFullInputLine) "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (trimmedFullInputLine.isBlank()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"enter an ingredient\u0027s name to be \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"searched against the stock.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (trimmedFullInputLine.length() \u003d\u003d keywordTagLength) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            checkForKAndSlashBeforeKeyword(trimmedFullInputLine);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"enter an ingredient\u0027s name to be \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"searched against the stock.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (trimmedFullInputLine.length() \u003e keywordTagLength) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedFullInputLine.substring(indexAfterSlash, "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    trimmedFullInputLine.length()).isBlank()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"enter an ingredient\u0027s name to be \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"searched against the stock.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }            "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function to check if the user input specify \u0027k/\u0027 before the keyword."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the first two characters from the user\u0027s"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      input is not \u0027k/\u0027 or when the length of"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      user\u0027s input is less than 2."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkForKAndSlashBeforeKeyword(String trimmedFullInputLine) "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (trimmedFullInputLine.length() \u003c keywordTagLength) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"specify the keyword using the format \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027k/keyword;\u0027\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (trimmedFullInputLine.length() \u003e\u003d keywordTagLength) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedFullInputLine.charAt(indexOfKCharacter) !\u003d \u0027k\u0027 "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    || trimmedFullInputLine.charAt(indexOfSlashCharacter) !\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"specify the keyword using the format \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"\u0027k/keyword;\u0027\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }    "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute(Stock stock) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.searchStock(keyword);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String getKeyword() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.keyword;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 130,
      "SibingWu": 1
    }
  },
  {
    "path": "src/main/java/commands/StockCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents a StockCommand. A StockCommand can be executed by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * consists of methods to parse user\u0027s input into acceptable format"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * that can be used by its super classes such as AddStockCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class StockCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected Stock stock;   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative index after the \u0027/\u0027 present within the string. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected final int indexAfterSlash \u003d 2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void setData(Stock stock) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.stock \u003d stock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Extract the name of the ingredient from a string. For example, "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * \u0027i/tomato\u0027 will return \u0027tomato\u0027."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */ "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected String parseIngredientName(String ingredientNameInput) "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientNameInput.trim()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .substring(indexAfterSlash, ingredientNameInput.length());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (ingredientName.isBlank()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please enter the \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"ingredient\u0027s name to be added.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Extract the quantity of the ingredient from a string. For example, "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * \u0027q/10\u0027 will return \u002710\u0027."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the quantity specified cannot"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      be parsed into an integer or the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      quantity is a negative value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */ "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected int parseIngredientQuantity(String ingredientQuantityInput) "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedInput \u003d ingredientQuantityInput.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d Integer.parseInt(trimmedInput.substring("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    indexAfterSlash, ingredientQuantityInput.length()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (quantity \u003c 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please enter a \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"positive value for the quantity to be added!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assert (quantity \u003e\u003d 0) : \"quantity is negative:\" + quantity;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return quantity;            "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please ensure that the \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity specified is an integer!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Extract the price of the ingredient from a string. For example, "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * \u0027p/0.50\u0027 will return \u00270.5\u0027. Note that the price will not strictly "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * be in 2 decimal places. This will be handled in the AddCommand."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the price specified does not"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      is not a decimal or is not a "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      positive value."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */ "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected double parseIngredientPrice(String ingredientPriceInput) "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedInput \u003d ingredientPriceInput.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double price \u003d Double.parseDouble(trimmedInput.substring("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    indexAfterSlash, ingredientPriceInput.length()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (price \u003c 0.0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please enter a\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" positive value for the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assert (price \u003e\u003d 0.0) : \"quantity is negative:\" + price;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return price;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please ensure that the \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"price specified is a decimal!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Convenience constructor for ExitCommand() without parameters."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        throw new IllegalStateException(\"This method is to be implemented by child classes\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute(Stock stock) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"This method is to be implemented by child classes\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 111,
      "gmuthu17": 1,
      "SibingWu": 1
    }
  },
  {
    "path": "src/main/java/commands/VoidReservationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidReservationNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.ReservationStatusException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.DELIMITER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_INDEX_MARKER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Command object for \"void reservation\" command. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class VoidReservationCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int reservationNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int validMaxRange;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public VoidReservationCommand(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Specifies the index number of the target reservations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Marks the reservation as invalid in the case like reservation cancellation and etc."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            validMaxRange \u003d reservations.getSize();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            parseInput(this.description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            // voids the reservation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservations.voidReservation(reservationNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(String.format(\"Successfully void Reservation[%d]\", this.reservationNumber));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please enter a valid positive integer.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Try the \u0027help\u0027 command for the list of commands\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InvalidReservationNumberException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (ReservationStatusException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(String.format(\"Reservation[%d] is already %s. You cannot void a %s reservation.\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    this.reservationNumber, e.getStatus(), e.getStatus()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Parses the input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param description Input from the user excluding the command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws InputMissingException If there is input missing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws DelimiterMissingException If there is delimiter missing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws InvalidReservationNumberException If there is no such reservation number in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throws InputMissingException, DelimiterMissingException, InvalidReservationNumberException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // specifies the reservation number"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberPos \u003d description.indexOf(RES_INDEX_MARKER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"reservation number \" + RES_INDEX_MARKER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert numberPos !\u003d -1 : \"Reservation Number Missing\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberEndPos \u003d description.indexOf(DELIMITER, numberPos);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert numberEndPos !\u003d -1 : \"Semicolon Missing\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.reservationNumber \u003d Integer.parseInt(description.substring(numberPos + RES_INDEX_MARKER.length(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                numberEndPos).trim());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (this.reservationNumber \u003c\u003d 0 || this.reservationNumber \u003e validMaxRange) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InvalidReservationNumberException(this.reservationNumber);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert 0 \u003c this.reservationNumber \u0026\u0026 this.reservationNumber \u003c\u003d validMaxRange : \"Invalid Reservation Number\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 2,
      "SibingWu": 85
    }
  },
  {
    "path": "src/main/java/dish/Dish.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class Dish {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Arraylist of all ingredients for dish."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private ArrayList\u003cString\u003e ingredients;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Name of dish."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Price of dish."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * dish.Dish constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param name name of dish"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param ingredients arraylist of ingredients in dish"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public Dish(String name, ArrayList\u003cString\u003e ingredients, double price) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Returns ingredients in dish."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return arraylist of ingredients in dish"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public ArrayList\u003cString\u003e getIngredients() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Return price of dish."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return price of dish"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguan1"
        },
        "content": "     * Return name of dish."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguan1"
        },
        "content": "     * @return name of dish"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguan1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 49,
      "nguan1": 8
    }
  },
  {
    "path": "src/main/java/dish/Profit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.EmptyStockException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.IngredientMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.NegativeProfitException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class Profit {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Dish that profit is of."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private Dish dish;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Cost of dish."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private double cost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Price of dish."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Profit of dish."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private double profit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * A profit object, which contains the profit for a specific dish."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param d dish to calculate profit for"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws NegativeProfitException exception for if profit is less than 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws IngredientMissingException exception for if dish contains ingredient not in stock"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws EmptyStockException exception for if stock of ingredient is empty"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public Profit(Dish d) throws NegativeProfitException, IngredientMissingException, EmptyStockException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        dish \u003d d;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        cost \u003d (double) Math.round(totalCost(d) * 100) / 100;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        price \u003d d.getPrice();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        if (price - cost \u003e 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            profit \u003d price - cost;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            throw new NegativeProfitException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Sums total cost of ingredient in a dish and checks for several exceptions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param d dish to sum cost of ingredients for"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return total cost of ingredients in dish"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws IngredientMissingException ingredient not listed in stock"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws EmptyStockException stock of ingredient is zero"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public double totalCost(Dish d) throws IngredientMissingException, EmptyStockException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        double totalCost \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Map\u003cString, Pair\u003cInteger, Double\u003e\u003e stock \u003d Stock.getStock();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        for (String ingredientName: d.getIngredients()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            if (stock.containsKey(ingredientName) \u0026\u0026 stock.get(ingredientName).first() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                throw new EmptyStockException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            } else if (stock.containsKey(ingredientName) \u0026\u0026 stock.get(ingredientName).first() \u003e 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                totalCost +\u003d stock.get(ingredientName).second();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                throw new IngredientMissingException(ingredientName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return totalCost;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Get dish profit is of."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return dish profit is of"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public Dish getDish() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return dish;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Get total cost of dish."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return total cost of dish"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public double getCost() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Get price of dish."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return price of dish"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Get profit of dish."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return profit of dish"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public double getProfit() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return profit;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 104
    }
  },
  {
    "path": "src/main/java/exceptions/CommandFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguan1"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguan1"
        },
        "content": "public class CommandFormatException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Command is of incorrect format\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Try the \u0027help\u0027 command for the list of commands\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguan1": 9
    }
  },
  {
    "path": "src/main/java/exceptions/DelimiterMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class DelimiterMissingException extends ReservationException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return \"Delimiter Missing.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 8
    }
  },
  {
    "path": "src/main/java/exceptions/DishIngredientsMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class DishIngredientsMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/DishNameMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class DishNameMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/DishPriceMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class DishPriceMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/EmptyStockException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class EmptyStockException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/IngredientMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class IngredientMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public IngredientMissingException(String input) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return this.input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return String.format(\"Ingredient Missing: %s is missing.\", this.input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 18
    }
  },
  {
    "path": "src/main/java/exceptions/IngredientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class IngredientNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public IngredientNotFoundException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 7,
      "SibingWu": 1
    }
  },
  {
    "path": "src/main/java/exceptions/InputMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class InputMissingException extends ReservationException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public InputMissingException(String input) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return String.format(\"Input Missing: %s is missing.\", this.input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 18
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidAddDishCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class InvalidAddDishCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidDeleteDishCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class InvalidDeleteDishCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidFilePathException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class encapsulates all errors pertaining to file path issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class InvalidFilePathException extends InvalidPathException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public InvalidFilePathException(String input, String reason) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(input, reason);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 14
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidLoadException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class InvalidLoadException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidPriceException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class InvalidPriceException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidReservationNumberException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class InvalidReservationNumberException extends ReservationException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int number;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public InvalidReservationNumberException(int number) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return String.format(\"There is no Reservation[%d] in the list.\", this.number);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 14
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidSearchDishCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class InvalidSearchDishCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidStockCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class InvalidStockCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public InvalidStockCommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 7,
      "SibingWu": 1
    }
  },
  {
    "path": "src/main/java/exceptions/KeywordMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class KeywordMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/NegativeProfitException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class NegativeProfitException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/ReservationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class ReservationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 4
    }
  },
  {
    "path": "src/main/java/exceptions/ReservationStatusException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class ReservationStatusException extends ReservationException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public ReservationStatusException(String status) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 13
    }
  },
  {
    "path": "src/main/java/exceptions/StockReadWriteException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents an exception that is thrown whenever read or write"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * operation fails."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class StockReadWriteException extends IOException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public StockReadWriteException(String msg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 15
    }
  },
  {
    "path": "src/main/java/ingredient/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/** "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * The ingredient class that is used by the Stock and the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": " * dish.Dish class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Optional\u003cInteger\u003e quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Optional\u003cDouble\u003e price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A convenience constructor to be used for the Command classes. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Ingredient(String name, Optional\u003cInteger\u003e quantity, Optional\u003cDouble\u003e price) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Returns true if the current ingredient has a specified quantity. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public boolean isQuantitySpecified() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.quantity.isPresent();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public double getIngredientPrice() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.price.orElseThrow();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public int getIngredientQuantity() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.quantity.orElseThrow();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String getIngredientName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Returns true if both ingredients have the same name. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (obj instanceof Ingredient) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Ingredient ingredient \u003d (Ingredient) obj;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return ingredient.name.equals(this.name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 56,
      "gmuthu17": 1
    }
  },
  {
    "path": "src/main/java/menu/Menu.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class Menu {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Hashmap of all dishes on menu."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private static HashMap\u003cString, Dish\u003e dishMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Constructor for Menu."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public Menu() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        dishMap \u003d new HashMap\u003cString, Dish\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Return\u0027s dishMap hashmap."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return dishmap hashmap"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static HashMap\u003cString, Dish\u003e getDishMap() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return dishMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Set dishMap for testing purposes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param dishMap hashMap"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static void setDishMap(HashMap\u003cString, Dish\u003e dishMap) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu.dishMap \u003d dishMap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 36
    }
  },
  {
    "path": "src/main/java/report/LoadDish.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.InvalidLoadException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class LoadDish {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private String fp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private Menu menu;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private static LoadDish ld;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Constructor for LoadDish."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param fp filepath"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private LoadDish(String fp) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        this.fp \u003d fp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        this.menu \u003d new Menu();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Singleton for LoadDish."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param fp filepath"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return LoadDish object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static LoadDish getInstance(String fp) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        if (ld \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            ld \u003d new LoadDish(fp);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return ld;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Main method for reading dishes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return a menu"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws InvalidLoadException exception for an invalid load command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws FileNotFoundException exception for file not found"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public Menu readDishes() throws InvalidLoadException, FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        File f \u003d new File(fp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            throw new InvalidLoadException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            String cl \u003d sc.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            if (cl.equals(\"Menu Items\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                if (sc.hasNext()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                    convertDishLines(sc);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Convert dish lines to a dishes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param sc scanner"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private void convertDishLines(Scanner sc) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        sc.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            String dish \u003d sc.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            if (!dish.isEmpty() \u0026\u0026 dish.contains(\"Name: \")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                processDishLine(dish);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Convert an input dish line to a dish in Menu."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param inputDish input dish line"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private void processDishLine(String inputDish) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String name \u003d parseName(inputDish);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ArrayList\u003cString\u003e ingredients \u003d parseIngredients(inputDish);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        double price \u003d parsePrice(inputDish);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Dish d \u003d new Dish(name, ingredients, price);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu.getDishMap().put(name, d);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Parses ingredients from input string from load file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input string of ingredients"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return ArrayList of ingredients"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static ArrayList\u003cString\u003e parseIngredients(String input) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ArrayList\u003cString\u003e ingredients \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(input.indexOf(\"Ingredients:\") + 13);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String[] splitString \u003d input.split(\",\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        for (String str: splitString) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            ingredients.add(str.trim());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Parses name from input string for load file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return name of dish"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static String parseName(String input) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(input.indexOf(\"Name:\") + 5);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(0, input.indexOf(\"Price:\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Parse price from input string for load file."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return price of dish"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static double parsePrice(String input) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(input.indexOf(\"Price: $\") + 8);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(0, input.indexOf(\"Ingredients:\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return Double.parseDouble(input);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 129
    }
  },
  {
    "path": "src/main/java/report/LoadReservation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.ReservationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Deals with loading reservations from the file. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class LoadReservation {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private List\u003cReservation\u003e fileReservations;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    // apply singleton"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private static LoadReservation loadReservation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private LoadReservation(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.fileReservations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Defines the method to access this object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Instantiates a single copy of the singleton class when it is executed for the first time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param filePath Path to the \"report.txt\" file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return This object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static LoadReservation getInstance(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (loadReservation \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            loadReservation \u003d new LoadReservation(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return loadReservation;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Loads the reservation content of the txt files into the reservation list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Creates the file if the file does not exist."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return ArrayList of reservations read from the txt file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws IOException If error occurs during creating and loading the txt file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws ReservationException If the txt file is empty at the first place."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public List\u003cReservation\u003e loadFileReservations() throws IOException, ReservationException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Scanner scanner \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (!scanner.hasNext()) { // empty list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new ReservationException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        boolean isReservation \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        List\u003cString\u003e reservationLines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            String reservationLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            // scan the file until reach the work \"Reservations\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (reservationLine.equals(\"Reservations\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                isReservation \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (!isReservation) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            // meet blank line: restart the reservationLines"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (reservationLine.equals(\"\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                saveStringToReservation(reservationLines);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservationLines.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservationLines.add(reservationLine);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (reservationLines.size() !\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            saveStringToReservation(reservationLines);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return fileReservations;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Converts the reservation string from the txt file to Reservation object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Adds the converted reservations into the ArrayList of Reservation."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param fileLines Reservation string read from the txt file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private void saveStringToReservation(List\u003cString\u003e fileLines) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (fileLines \u003d\u003d null || fileLines.size() \u003d\u003d 0 || fileLines.get(0).equals(\"\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int reservationNumber \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        String status \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        String name \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LocalDateTime date \u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberOfGuests \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        String contact \u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        String comments \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        for (String fileLine: fileLines) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            String[] split \u003d fileLine.split(\":\", 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            String startingWords \u003d split[0].trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            switch (startingWords) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            case \"Status\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                status \u003d split[1].trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            case \"Contact person\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                name \u003d split[1].trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            case \"Date\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                date \u003d LocalDateTime.parse(split[1].trim(), DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            case \"Number of guests\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                numberOfGuests \u003d Integer.parseInt(split[1].trim());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            case \"Contact details\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                contact \u003d split[1].trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            case \"Comments\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                comments \u003d split[1].trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                if (startingWords.startsWith(\"Reservation\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    reservationNumber \u003d Integer.parseInt(startingWords.substring(\"Reservation\".length() + 2, "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                            \"Reservation\".length() + 3).trim());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d new Reservation(reservationNumber, name, date, numberOfGuests, contact);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setStatus(status);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setComments(comments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileReservations.add(reservation);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 1,
      "SibingWu": 150
    }
  },
  {
    "path": "src/main/java/report/LoadStock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import exceptions.InvalidFilePathException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import exceptions.StockReadWriteException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class encapsulates the functionality of loading data related to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * the \u0027Stock\u0027 category in the report.txt file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class LoadStock {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The default file name that is to be read or written by the program. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"report.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Constructor of a Storage using the default file path. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * The relative index to start decoding for price. In \u0027PRICE:$0.11\u0027;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * index 7 is that start of the price to be parsed. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int startIndexToDecodeForPrice \u003d 7;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * The relative index to start decoding for price. In \u0027Quantity:10\u0027;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * index 9 is that start of the price to be parsed. "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int startIndexToDecodeForQuantity \u003d 9;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor of a LoadStock retrieved from Path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStorageFilePathException If the report data file does not match"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                         a .txt extension."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public LoadStock() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public LoadStock(String filePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (!isValidPath(this.path)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        throw new InvalidFilePathException(this.path.toString(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                 \"The current file does not end with a .txt\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Silently loads all data from the report.txt file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws StockReadWriteException If the current storage file cannot be"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                 loaded.  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void loadStockData(Stock stock) throws StockReadWriteException {        "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String line;                       "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            BufferedReader br \u003d new BufferedReader("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    new FileReader(this.path.toString()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                if (line.isBlank()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    String[] lineArgs \u003d line.split(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    if (line.indexOf(\u0027$\u0027) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        lines.add(line);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new StockReadWriteException("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The data under \u0027Stock\u0027 category appears to be corrupted and \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"cannot be loaded.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        decodeIngredientFromReportTextFile(lines, stock);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Decodes each line from the BufferedReader into readable ingredient arguments "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * format to be added into the Stock class."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws StockReadWriteException If the ingredient quantity or price cannot be"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                 parsed into an integer or a double respectively."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void decodeIngredientFromReportTextFile(List\u003cString\u003e lines, Stock stock) "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws StockReadWriteException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String[] lineArgs \u003d line.split(\" \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (lineArgs[0].equals(\"Current\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {            "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int priceIndexInLineArgs \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int quantityIndexInLineArgs \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                for (int i \u003d 0; i \u003c lineArgs.length; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    if (lineArgs[i].contains(\"Price:\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        priceIndexInLineArgs \u003d i;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    } else if (lineArgs[i].contains(\"Quantity:\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        quantityIndexInLineArgs \u003d i;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String ingredientName \u003d decodeIngredientName(line, "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        priceIndexInLineArgs);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                double ingredientPrice \u003d decodeIngredientPrice(line, "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        priceIndexInLineArgs);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int ingredientQuantity \u003d decodeIngredientQuantity(line, "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        quantityIndexInLineArgs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                Ingredient ingredientToAdd \u003d new Ingredient(ingredientName, "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        Optional.of(ingredientQuantity), "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        Optional.of(ingredientPrice));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                stock.addIngredient(ingredientToAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Decodes the ingredient name from the line read from the BufferedReader."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String decodeIngredientName(String line, int priceIndexInLineArgs) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] lineArgs \u003d line.split(\" \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d \"\"; "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (int j \u003d 1; j \u003c priceIndexInLineArgs; j++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ingredientName +\u003d lineArgs[j]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" \";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientName;        "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Decodes the ingredient price from the line read from the BufferedReader."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws StockReadWriteException If the ingredient price cannot be parsed"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                 into a double."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private double decodeIngredientPrice(String line, int priceIndexInLineArgs) "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws StockReadWriteException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] lineArgs \u003d line.split(\" \");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientPrice \u003d lineArgs[priceIndexInLineArgs].substring("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    startIndexToDecodeForPrice, "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    (lineArgs[priceIndexInLineArgs].length()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double parsedIngredientPrice \u003d Double.parseDouble(ingredientPrice);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return parsedIngredientPrice;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new StockReadWriteException(\"The price in report.txt cannot be \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"converted to a double.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (StringIndexOutOfBoundsException siofbe) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new StockReadWriteException(\"The price in report.txt is not\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"indented correctly.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Decodes the ingredient quantity from the line read from the BufferedReader."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws StockReadWriteException If the ingredient quantity cannot be parsed"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                 into an integer."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private int decodeIngredientQuantity(String line, int quantityIndexInLineArgs) "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws StockReadWriteException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] lineArgs \u003d line.split(\" \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientQuantity \u003d lineArgs[quantityIndexInLineArgs].substring("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    startIndexToDecodeForQuantity, "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    (lineArgs[quantityIndexInLineArgs].length()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int parsedIngredientQuantity \u003d Integer.parseInt(ingredientQuantity);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return parsedIngredientQuantity;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new StockReadWriteException(\"The quantity in report.txt cannot be\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"be converted to an integer.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (StringIndexOutOfBoundsException siofbe) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new StockReadWriteException(\"The quantity in report.txt is not\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"indented correctly.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.path.toString();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Returns true if a given file has a .txt extension. */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    } "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 213
    }
  },
  {
    "path": "src/main/java/report/ReportWriter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguan1"
        },
        "content": "public class ReportWriter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    protected Menu menu;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    protected Stock stock;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    protected ReservationList reservations;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String indent \u003d \"                                                              \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            + \"       \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A convenience constructor of ReportWriter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public ReportWriter(Stock stock, ReservationList reservations, Menu menu) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.stock \u003d stock;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.reservations \u003d reservations;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.menu \u003d menu;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Save all information to a text file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguan1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void writeToFile() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        // Written in menu.Menu \u003e Stock \u003e Reservation Order"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"report.txt\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String menuTitle \u003d String.format(\"Menu Items\" "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            fw.write(menuTitle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            HashMap\u003cString, Dish\u003e  menuItems \u003d menu.getDishMap();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            for (String name: menuItems.keySet()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String ingredientList \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                for (String str: menuItems.get(name).getIngredients()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    ingredientList +\u003d str "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            + \", \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ingredientList \u003d ingredientList.substring(0, ingredientList.length() - 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                double price \u003d menuItems.get(name).getPrice();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                String writtenString \u003d String.format(\"%d. Name: %-10s \\t Price: $%-10.2f \\t Ingredients: %-10s \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                        + ls, counter, name, price, ingredientList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                fw.write(writtenString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                counter +\u003d 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String stockTitle \u003d String.format(ls "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"Current Stock\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            fw.write(stockTitle);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            counter \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e sortedStock \u003d sortStockByDescendingQuantity(stock);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            for (Map.Entry\u003cString, Pair\u003cInteger,Double\u003e\u003e ingredient : sortedStock) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String spaceBetween \u003d indent.substring(0, indent.length() - ingredientName.length());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String writtenString \u003d String.format("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        \"*%d. %s %s Price:$%.2f Quantity:%d \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        counter, "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        ingredientName,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        spaceBetween,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        ingredient.getValue().second(), "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        ingredient.getValue().first());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                fw.write(writtenString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                counter +\u003d 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            counter \u003d 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String reserveTitle \u003d String.format(ls "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"Reservations\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            fw.write(reserveTitle);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d reservations.getSize(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                Reservation reserved \u003d reservations.getReservation(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String writtenString \u003d String.format(\"%s\" + ls, reserved.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                fw.write(writtenString);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            System.out.println(\"Invalid Path\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Sorts the stock in descending quantity before saving into report.txt. */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e sortStockByDescendingQuantity(Stock stock) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e(stock.getStock().entrySet());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Collections.sort(tempList, new Comparator\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            public int compare(Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e firstEntry, "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e secondEntry) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int firstEntryQuantity \u003d firstEntry.getValue().first();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int secondEntryQuantity \u003d secondEntry.getValue().first();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                return secondEntryQuantity - firstEntryQuantity;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }); "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return tempList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nguan1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 71,
      "gmuthu17": 10,
      "nguan1": 41,
      "SibingWu": 2
    }
  },
  {
    "path": "src/main/java/reservation/Reservation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package reservation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.LARGE_TABLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.MEDIUM_TABLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.NOT_SERVED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.SMALL_TABLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Reservation of the restaurant. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class Reservation {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int reservationNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int numberOfGuests;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String contact;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String comments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private Character tableSize;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Reservation.class.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"Reservation.log\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Defines the constructor for a Reservation."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Notes that comments for reservation are optional."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public Reservation(int reservationNumber, String name, LocalDateTime date, int numberOfGuests, String contact) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.reservationNumber \u003d reservationNumber;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.numberOfGuests \u003d numberOfGuests;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.comments \u003d \"No comments\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.status \u003d NOT_SERVED;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        setTableSize(this.numberOfGuests);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets up the logger. "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Calls once at the start of the program."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws IOException When logger set up failed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static void setLogger() throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Locale.setDefault(Locale.UK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true); // let it append"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileHandler.setEncoding(\"UTF-8\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the index number of the reservation."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Index number of the reservation"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public int getReservationNumber() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.reservationNumber;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets the contact person\u0027s name in the case that "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * the group who makes the reservation wants to change the contact person."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param name Contact person\u0027s name."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the contact person of the reservation."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Name of the contact person"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets the date in the case that "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * the group who makes the reservation wants to change the date."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param date When the reservation is. Format: yyyy-MM-dd HH:mm"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void setDate(LocalDateTime date) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the date of the reservation."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Date of the reservation."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets the number of the guests in the case that "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * the group who makes the reservation wants to change."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param numberOfGuests The number of people attending the reserved meal."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void setNumberOfGuests(int numberOfGuests) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.numberOfGuests \u003d numberOfGuests;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // whenever the guest number changes, the table size should change accordingly"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        setTableSize(this.numberOfGuests);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets the number of the guests in the case that "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * the group who makes the reservation wants to change."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param contact Contact, can be either phone number or email or etc."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void setContact(String contact) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Get the contact details."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Contact details."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getContact() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.contact;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets the miscellaneous comments, such as preference, food allergy, etc."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param comments Comments of the reservation."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void setComments(String comments) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets any comments of the reservation."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Comments of the reservation."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getComments() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.comments;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets the status of the reservation as served, not served, or invalid."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param status Status character of the reservation."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void setStatus(String status) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the status of the reservation, served, not served, or invalid."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Status of the reservation."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Assigns the table according to the number of people attending the reserved meal."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param numberOfGuests The number of people attending the meal."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private void setTableSize(int numberOfGuests) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberOfGuests \u003c\u003d 4) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.tableSize \u003d SMALL_TABLE;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } else if (numberOfGuests \u003c\u003d 8) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.tableSize \u003d MEDIUM_TABLE;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.tableSize \u003d LARGE_TABLE;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the table size."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Table size."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public Character getTableSize() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.tableSize;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return String.format(\"Reservation [%d]\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Status: %s\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Contact person: %s\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Date: %s\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Number of guests: %d\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Table size: %c\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Contact details: %s\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Comments: %s\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls, "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                this.reservationNumber, this.status, this.name, "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                this.numberOfGuests, this.tableSize, this.contact, this.comments);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 11,
      "gmuthu17": 1,
      "SibingWu": 220
    }
  },
  {
    "path": "src/main/java/reservation/ReservationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package reservation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.ReservationStatusException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static utils.Constants.INVALID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static utils.Constants.SERVED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Contains the reservation list e.g., it has operations to add/delete/list reservations in the list. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class ReservationList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(ReservationList.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"ReservationList.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private List\u003cReservation\u003e reservations;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Defines the constructor and starts with an empty list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public ReservationList() { "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Defines the constructor and starts with a given ArrayList of reservations."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Beginning list of reservations."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public ReservationList(List\u003cReservation\u003e reservations) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.reservations \u003d reservations;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets up the logger. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Calls once at the start of the program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws IOException When logger set up failed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static void setLogger() throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Locale.setDefault(Locale.UK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true); // let it append"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileHandler.setEncoding(\"UTF-8\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Adds the reservation into the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservation Reservation that needs to be added into the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void addReservation(Reservation reservation) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert reservation !\u003d null : \"Invalid Reservation!\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservations.add(reservation);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LOGGER.info(String.format(\"Add Reservation[%d] to the list.\", reservation.getReservationNumber()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Marks the reservation as served."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservationNumber The index number of the reservation."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws ReservationStatusException If the reservation is originally invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void markReservationAsServed(int reservationNumber) throws ReservationStatusException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservations.get(reservationNumber - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (reservation.getStatus().equals(INVALID)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new ReservationStatusException(INVALID);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert !reservation.getStatus().equals(INVALID) : \"Reservation Status Exception\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setStatus(SERVED);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LOGGER.info(String.format(\"Mark Reservation[%d] as Served.\", reservationNumber));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Marks the reservation as invalid, etc. the customer wants to cancel the reservation or wrong reservation"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservationNumber The index number of the reservation."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws ReservationStatusException If the reservation is originally invalid or served."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void voidReservation(int reservationNumber) throws ReservationStatusException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservations.get(reservationNumber - 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (reservation.getStatus().equals(INVALID)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new ReservationStatusException(INVALID);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (reservation.getStatus().equals(SERVED)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new ReservationStatusException(SERVED);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assert !reservation.getStatus().equals(INVALID) \u0026 !reservation.getStatus().equals(SERVED) "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                : \"Reservation Status Exception\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setStatus(INVALID);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LOGGER.info(String.format(\"Void Reservation[%d] as Invalid.\", reservationNumber));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the size of the reservation list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Size of reservation list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.reservations.size();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the reservation with the target reservation number."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservationNumber Target reservation number (starting from 1)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Reservation indexed with the target number."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public Reservation getReservation(int reservationNumber) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return reservations.get(reservationNumber - 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Clears the whole reservation list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void clearReservation() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservations.clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 3,
      "SibingWu": 137
    }
  },
  {
    "path": "src/main/java/sales/Sales.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package sales;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import dish.Profit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.CommandFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import exceptions.EmptyStockException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import exceptions.IngredientMissingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import exceptions.NegativeProfitException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Sales {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private HashMap\u003cDish,Integer\u003e soldDishes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Sales() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.soldDishes \u003d new HashMap\u003cDish,Integer\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void addSale(String command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        //Format: `d/DISH; q/QUANTITY;`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] splitString \u003d command.split(\";\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        if (splitString.length \u003c 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            new CommandFormatException().getMessage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String dishName \u003d splitString[0].substring(splitString[0].indexOf(\"d/\") + 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d Integer.parseInt(splitString[1].substring(splitString[1].indexOf(\"q/\") + 2));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Dish dish \u003d Menu.getDishMap().get(dishName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (dish \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                System.out.println(\"Dish doesn\u0027t exist\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                //System.out.print(\"dish: \" + dishName + \" quantity: \" + quantity );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                soldDishes.put(dish, quantity);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public double calculateProfit()  {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        double profit \u003d 0.0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean profitError \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Dish item: soldDishes.keySet()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int numberSold \u003d soldDishes.get(item);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double dishProfit \u003d 0.0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                dishProfit \u003d new Profit(item).getProfit() * numberSold;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } catch (NegativeProfitException | EmptyStockException | IngredientMissingException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                System.out.println(\"There has been an error in calculating profit.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                System.out.println(\"Check if profit is positive, if there is stock and \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"ingredients for this dish:\" + item);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                profitError \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            profit +\u003d dishProfit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (profitError \u003d\u003d false) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            System.out.println(\"The total profit for the day is: $\" + profit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        //Return statement is for testing purposes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return profit;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String mostPopularDish() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Dish popular \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int currentMaxCount \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Dish item: soldDishes.keySet()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (soldDishes.get(item) \u003e currentMaxCount) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                popular \u003d item;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                currentMaxCount \u003d soldDishes.get(item);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (popular \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(\"There are no dishes\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(\"The most popular dish today is: \" + popular.getName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(\"This has sales of: \" + currentMaxCount);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return popular.getName();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public HashMap\u003cDish, Integer\u003e getSalesMap() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.soldDishes;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 82,
      "nguan1": 6
    }
  },
  {
    "path": "src/main/java/stock/Stock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import report.LoadStock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map.Entry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class encapsulates all information of the ingredient"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * stock. It contains all the ingredients stored, along with "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * their respective current prices and quantities."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Stock {   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A HashMap that maps a ingredient\u0027s name to its "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * quantity and price."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Note that quantity is an Integer and price is a Double."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private static Map\u003cString, Pair\u003cInteger, Double\u003e\u003e stock \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A HashSet to keep track of duplicated ingredient names in the stock. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static Set\u003cString\u003e duplicateIngredientNameSet \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A stock decoder that loads data from the report.txt file. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static LoadStock stockLoader \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Stock() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stock \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        duplicateIngredientNameSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockLoader \u003d new LoadStock();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Adds an ingredientName to the current stock. If the ingredient"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * exists previously, update the quantity by adding the current quantity"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * to the previous quantity. Otherwise, add an entirely new entry into"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the HashMap. Note that the latest price of an ingredient specified by "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the user will override the current price of that ingredient in the stock."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Before the ingredient is added, a check will be performed to prevent "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * any duplicates in the stock. "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void addIngredient(Ingredient ingredientToAdd) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientToAdd.getIngredientName();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int quantityToAdd \u003d ingredientToAdd.getIngredientQuantity();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        double ingredientPrice \u003d ingredientToAdd.getIngredientPrice();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "              "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (stock.containsKey(ingredientName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int currQuantity \u003d stock.get(ingredientName).first();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int newQuantity \u003d currQuantity + quantityToAdd;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.replace(ingredientName, Pair.of(newQuantity, ingredientPrice));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (checkForDuplicateIngredientName(ingredientName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                printDuplicateIngredientMessage(ingredientName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.put(ingredientName, Pair.of(quantityToAdd, ingredientPrice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            duplicateIngredientNameSet.add(ingredientName.toLowerCase());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Deletes an ingredientName from the current stock. If the ingredient"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * exists previously, update the quantity by subtracting the quantity"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * supplied by the user to the current quantity. If there is no quantity"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * specified, removed the ingredientName from the HashMap. Note that the "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * quantity for an ingredient to be deleted is optional. Also, there is a "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * lower 0 bound such that any subtraction of the quantity cannot be lesser "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * than zero. An ingredient with 0 quantity however, is not deleted from the "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * hashMap."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws IngredientNotFoundException If the ingredient does not exist in the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                     stock previously."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void deleteIngredient(Ingredient ingredient) "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredient.getIngredientName();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasIngredientInStock \u003d stock.containsKey(ingredientName);       "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasQuantitySpecified \u003d ingredient.isQuantitySpecified();        "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (hasIngredientInStock \u0026\u0026 hasQuantitySpecified) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int currQuantity \u003d stock.get(ingredientName).first();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantityToDelete \u003d ingredient.getIngredientQuantity();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int newQuantity \u003d currQuantity - quantityToDelete;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            newQuantity \u003d ((newQuantity \u003c 0) ? 0 : newQuantity);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double ingredientPrice \u003d stock.get(ingredientName).second(); "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.replace(ingredientName, Pair.of(newQuantity, ingredientPrice));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (hasIngredientInStock \u0026\u0026 !hasQuantitySpecified) {    "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.remove(ingredientName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            duplicateIngredientNameSet.remove(ingredientName.toLowerCase());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new IngredientNotFoundException(\"This ingredient \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"is not in the stock currently!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Lists all current ingredients in the stock."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void listIngredient() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (stock.isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(\"There is nothing in the stock currently.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(\"Here are the ingredients in the stock currently:\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            System.out.println(\"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            printStock();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            System.out.println(\"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(\"All ingredients listed successfully!\"); "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Searches the current stock against a given keyword and lists all ingredients"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * that contains the keyword. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void searchStock(String keyword) {       "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasIngredientWithKeyword \u003d checkIngredientInStock(keyword);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (!hasIngredientWithKeyword) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(\"There is no ingredient that matches the keyword given.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            printSearchResult(keyword);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function to print the search results of ingredients within the stock that matches "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the keyword given."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void printSearchResult(String keyword) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"Here are the ingredients in the stock that matches the keyword:\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e(stock.entrySet());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int ingredientCounter \u003d 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (ingredientName.contains(keyword) || ingredientName"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .toLowerCase()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int quantity \u003d ingredient.getValue().first();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                double price \u003d ingredient.getValue().second();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                System.out.println(ingredientCounter "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \". \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"[\" "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + quantity "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"]\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"[$\" "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + String.format(\"%.2f\", price) "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"]\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" \" "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ingredientName);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ingredientCounter++;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Clears the stock completely. */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void clearStock() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.clear();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"The stock has been cleared.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function to check against stock if any of the ingredient within the stock"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * matches the keyword supplied by the user."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private boolean checkIngredientInStock(String keyword) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasIngredientWithKeyword \u003d false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e(stock.entrySet());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (ingredientName.contains(keyword) || ingredientName"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .toLowerCase()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                hasIngredientWithKeyword \u003d true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return hasIngredientWithKeyword;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function to check within the stock if there are ingredient names similar "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * to the one just added. For example, if the stock contains \u0027tomato\u0027, adding another"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * ingredient named \u0027TomATo\u0027 will return true."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private boolean checkForDuplicateIngredientName(String ingredientNameToCheck) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e(stock.entrySet()); "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasDuplicateIngredientName \u003d false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (tempList.size() \u003c 1) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return hasDuplicateIngredientName;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                if (ingredientName.toLowerCase().equals(ingredientNameToCheck.toLowerCase())) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    hasDuplicateIngredientName \u003d true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return hasDuplicateIngredientName;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function to inform user that there is an existing ingredient in the stock"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * that has the same name as the one that just added."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void printDuplicateIngredientMessage(String duplicateIngredientName) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e(stock.entrySet()); "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String outputMessage \u003d ls;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Please note that there are other similar ingredient names in the stock.\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"You are currently adding: \u0027\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + duplicateIngredientName"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u0027\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (ls"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"Here are the ingredients in the stock with similar names:\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "      "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (ingredientName.toLowerCase().equals(duplicateIngredientName.toLowerCase())) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                outputMessage +\u003d (ingredientName"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (ls"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"You may want to remove the unwanted ingredient names if it is a duplicate.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        outputMessage +\u003d (ls);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(outputMessage);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function to print the stock to help to parse the price into 2 decimal places"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * to display as dollars appropriately. Prints ingredients in descending quantity within "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the stock."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void printStock() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e(stock.entrySet());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Collections.sort(tempList, new Comparator\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            public int compare(Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e firstEntry, "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e secondEntry) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int firstEntryQuantity \u003d firstEntry.getValue().first();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int secondEntryQuantity \u003d secondEntry.getValue().first();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                return secondEntryQuantity - firstEntryQuantity;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        });      "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int ingredientCounter \u003d 1;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d ingredient.getValue().first();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double price \u003d ingredient.getValue().second();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(ingredientCounter "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \". \""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"[\" "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + quantity "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"[$\" "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + String.format(\"%.2f\", price) "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" \" "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientName);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "           "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ingredientCounter++;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static Map\u003cString, Pair\u003cInteger, Double\u003e\u003e getStock() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return stock;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static Set\u003cString\u003e getDuplicateIngredientNames() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return duplicateIngredientNameSet;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static LoadStock getStockLoader() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return stockLoader;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 314,
      "gmuthu17": 4,
      "nguan1": 10
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.LOG_FOLDER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * TextUi of the application. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Ui.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private static final String FILE_PATH \u003d LOG_FOLDER + \"Ui.log\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                                          "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"______  ______  _____ ______    ___  __  __ ______        __  _______  ______\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"||    ||||      \\\\       ||     / ||  ||  || ||    |      / || ||    ||   ||\");       "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"||    ||||       \\\\      ||    /  ||  ||  || ||    |     /  || ||    ||   ||\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"||__ /  ||___     \\\\___  ||   /___||  ||  || ||__ /     /___|| ||    ||   ||\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"||   \\\\\\\\ ||           \\\\  ||  /    ||  ||  || ||   \\\\\\\\   /    || ||    ||   ||\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"||    \\\\\\\\||____   _____\\\\ || /     ||   \\\\__/  ||    \\\\\\\\ /     Daily Report v2.0\");       "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets up the logger. "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Calls once at the start of the program."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws IOException When logger set up failed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static void setLogger() throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Locale.setDefault(Locale.UK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(FILE_PATH, true); // let it append"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        fileHandler.setEncoding(\"UTF-8\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String fullInputLine \u003d in.nextLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return fullInputLine;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /** Sends failing messages to user and records into the logger if the logging set up fails. */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void displayLoggingSetUpFailMessage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        LOGGER.info(\"Logging set up failed!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"Logging set up failed!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 43,
      "SibingWu": 37
    }
  },
  {
    "path": "src/main/java/utils/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguan1"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.AddDishCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.AddReservationCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.AddStockCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ClearReservationCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import commands.ClearStockCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.DeleteDishCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.DeleteStockCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ListDishCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ListReservationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ListServedCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ListStockCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ListUnservedCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.MarkReservationCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.QuitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.SearchDishCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.SearchReservationCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.SearchStockCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.VoidReservationCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.CommandFormatException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import report.ReportWriter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import sales.Sales;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguan1"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguan1"
        },
        "content": "     * Pass the parsed user input into readable formats to be processed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * by either a menu, stock or a reservation."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parseCommand(String command, Menu menu,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                             Stock stock, ReservationList reservations, Sales sales, Ui ui) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String[] commands \u003d command.split(\";\", 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String[] splitCommands \u003d commands[0].split(\" \", 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                new ReportWriter(stock, reservations, menu).writeToFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            new QuitCommand().execute();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else if (command.equals(\"help\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            new HelpCommand().execute();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            successfulCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else if (command.equals(\"profit\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            sales.calculateProfit();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            successfulCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else if (command.equals(\"popular\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            sales.mostPopularDish();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            successfulCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else if (commands.length \u003c 2 || splitCommands.length \u003c 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            errorCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else if (splitCommands[0].equals(\"add\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (splitCommands[1].equals(\"dish\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Add dish."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                AddDishCommand.addDish(commands[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"stock\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Add stock."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    new AddStockCommand(commands[1]).execute(stock);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                } catch (IllegalStateException | InvalidStockCommandException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    errorCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"reservation\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Add reservation."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new AddReservationCommand(commands[1]).execute(reservations, ui);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                errorCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (splitCommands[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (splitCommands[1].equals(\"dish\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Delete dish."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                DeleteDishCommand.deleteDish(commands[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"stock\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Delete stock."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    new DeleteStockCommand(commands[1]).execute(stock);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                } catch (InvalidStockCommandException | IllegalStateException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    errorCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"reservation\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Delete reservation."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new VoidReservationCommand(commands[1]).execute(reservations, ui);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                errorCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } else if (splitCommands[0].equals(\"mark\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (splitCommands[1].equals(\"reservation\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                // Mark reservation as served."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new MarkReservationCommand(commands[1]).execute(reservations, ui);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (splitCommands[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (splitCommands[1].equals(\"dish\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // List dish."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                ListDishCommand.printDishes();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"stock\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // List stock."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new ListStockCommand().execute(stock);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"reservation\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                // List all reservation."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new ListReservationCommand().execute(reservations, ui);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            } else if (splitCommands[1].equals(\"served reservation\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                // List served reservation."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new ListServedCommand().execute(reservations, ui);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            } else if (splitCommands[1].equals(\"unserved reservation\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                // List unserved reservation."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new ListUnservedCommand().execute(reservations, ui);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                errorCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (splitCommands[0].equals(\"search\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (splitCommands[1].equals(\"stock\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Search stock."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    new SearchStockCommand(commands[1]).execute(stock);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                } catch (InvalidStockCommandException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    errorCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            } else if (splitCommands[1].equals(\"reservation\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                // Search reservation"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new SearchReservationCommand(commands[1]).execute(reservations, ui);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            } else if (splitCommands[1].equals(\"dish\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                // Search dish"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                SearchDishCommand.searchDish(commands[1]);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                errorCommand();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else if (splitCommands[0].equals(\"sell\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            sales.addSale(commands[1]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            successfulCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } else if (splitCommands[0].equals(\"clear\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (splitCommands[1].equals(\"reservation\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new ClearReservationCommand().execute(reservations, ui);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"stock\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new ClearStockCommand().execute(stock);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            errorCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public static void errorCommand() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        new CommandFormatException().getMessage();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Displays an error message to the user."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nguan1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static void printErrorMessage(String message) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static void successfulCommand() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"The command has been successfully executed.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nguan1"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 64,
      "gmuthu17": 7,
      "nguan1": 63,
      "SibingWu": 44
    }
  },
  {
    "path": "src/main/java/utils/Constants.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Constants used in the program. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String SERVED \u003d \"Served\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String NOT_SERVED \u003d \"Unserved\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String INVALID \u003d \"Invalid\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final Character SMALL_TABLE \u003d \u0027S\u0027;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final Character MEDIUM_TABLE \u003d \u0027M\u0027;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final Character LARGE_TABLE \u003d \u0027L\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_ADD_COMMAND \u003d \"add reservation\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_MARK_COMMAND \u003d \"mark reservation\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_VOID_COMMAND \u003d \"delete reservation\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_LIST_COMMAND \u003d \"list reservation\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_LIST_SERVED_COMMAND \u003d \"list served reservation\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_LIST_UNSERVED_COMMAND \u003d \"list unserved reservation\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_SEARCH_COMMAND \u003d \"search reservation\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_INDEX_MARKER \u003d \"r/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_PERSON_MARKER \u003d \"p/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_DATE_MARKER \u003d \"d/\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_NUM_MARKER \u003d \"n/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_CONTACT_MARKER \u003d \"c/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_COMMENT_MARKER \u003d \"m/\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String DELIMITER \u003d \";\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String LOG_FOLDER \u003d \"logs/\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 1,
      "SibingWu": 30
    }
  },
  {
    "path": "src/main/java/utils/LoggerUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Logger related setup. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class LoggerUtils {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Creates the folder for logger."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param folderName Folder name for logger."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static void createLogFolder(String folderName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (folderName.equals(\"\")) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        File folder \u003d new File(folderName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (!folder.exists()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            folder.mkdir();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 22
    }
  },
  {
    "path": "src/main/java/utils/Pair.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Pair\u003cT, U\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final T firstVal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final U secondVal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Pair(T firstVal, U secondVal) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.firstVal \u003d firstVal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.secondVal \u003d secondVal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }        "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static \u003cT, U\u003e Pair\u003cT, U\u003e of(T firstVal, U secondVal) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new Pair\u003cT, U\u003e(firstVal, secondVal);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public T first() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.firstVal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public U second() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.secondVal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Returns true if both ingredients have the same name. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (obj instanceof Pair) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Pair\u003c?, ?\u003e p \u003d (Pair\u003c?, ?\u003e) obj;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return (p.firstVal.equals(this.firstVal) \u0026\u0026 p.secondVal.equals(this.secondVal));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "} "
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 36
    }
  },
  {
    "path": "src/test/java/commands/AddDishCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.InvalidPriceException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class AddDishCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseIngredientsTestA() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ArrayList\u003cString\u003e l1 \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        l1.add(\"cheese\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        l1.add(\"bacon\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1a \u003d \"n/bacon pizza; p/5.00; i/cheese, bacon;\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(l1, AddDishCommand.parseIngredients(d1a));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1b \u003d \"p/10.00; i/cheese, bacon; n/bacon pizza;\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(l1, AddDishCommand.parseIngredients(d1b));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseIngredientsTestB() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ArrayList\u003cString\u003e l2 \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        l2.add(\"chicken\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        l2.add(\"rice\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        l2.add(\"chili\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/12.00;\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(l2, AddDishCommand.parseIngredients(d2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseNameTestA() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; p/3.00; i/cheese, bacon;\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(\"bacon pizza\", AddDishCommand.parseName(d1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseNameTestB() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"p/6.00; i/chicken, rice, chili; n/chicken biryani;\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(\"chicken biryani\", AddDishCommand.parseName(d2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parsePriceTestA() throws InvalidPriceException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; p/3.00; i/cheese, bacon;\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(3.00, AddDishCommand.parsePrice(d1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parsePriceTestB() throws InvalidPriceException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"p/6.00; i/chicken, rice, chili; n/chicken biryani;\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(6.00, AddDishCommand.parsePrice(d2));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void addDishTestA() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void addDishTestB() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 3,
      "gmuthu17": 81
    }
  },
  {
    "path": "src/test/java/commands/AddReservationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "class AddReservationCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    ReservationList reservationList \u003d new ReservationList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void execute_normalAddReservationCommand_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new AddReservationCommand(\"p/Peter; d/2020-03-12 12:00; n/3; c/98955555;\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                .execute(reservationList, ui);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservationList.getReservation(reservationList.getSize());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Peter\", reservation.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2020-03-12 12:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")), "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservation.getDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"98955555\", reservation.getContact());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"No comments\", reservation.getComments());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\u0027S\u0027, reservation.getTableSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void execute_normalAddReservationCommandwithCommentnDifferentSequence_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new AddReservationCommand(\"p/Lisa; m/no spicy food please; d/2020-03-13 12:00; c/98889999; n/9; \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                .execute(reservationList, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservationList.getReservation(reservationList.getSize());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Lisa\", reservation.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2020-03-13 12:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservation.getDate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"98889999\", reservation.getContact());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"no spicy food please\", reservation.getComments());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\u0027L\u0027, reservation.getTableSize());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_nameMissingAddReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"d/2020-03-12 12:00; n/3; c/98887777;\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"d/2020-03-12 12:00; n/3; c/98887777;\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"name p/\", e.getInput());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Input Missing: name p/ is missing.\", e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_nameContentMissingAddReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/; d/2020-03-12 12:00; n/3; c/98887777;\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/; d/2020-03-12 12:00; n/3; c/98887777;\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"name\", e.getInput());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Input Missing: name is missing.\", e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_nameDelimiterMissingAddReservationCommand1_exceptionThrown() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David d/2020-03-12 12:00; n/3; c/98887777;\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David d/2020-03-12 12:00; n/3; c/98887777;\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_nameDelimiterMissingAddReservationCommand2_exceptionThrown() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David d/2020-03-12 12:00 n/3 c/98887777\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David d/2020-03-12 12:00 n/3 c/98887777\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_dateMissingAddReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; n/3; c/98887777;\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; n/3; c/98887777;\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"date d/\", e.getInput());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Input Missing: date d/ is missing.\", e.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_dateDelimiterMissingAddReservationCommand1_exceptionThrown() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00 n/3; c/98887777;\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00 n/3; c/98887777;\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_dateDelimiterMissingAddReservationCommand2_exceptionThrown() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00 n/3 c/98887777\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00 n/3 c/98887777\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_guestNumberMissingAddReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00; c/98887777;\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00; c/98887777;\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"number of guests n/\", e.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Input Missing: number of guests n/ is missing.\", e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_invalidGuestNumberAddReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00; n/-1; c/98887777;\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00; n/-1; c/98887777;\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please enter a valid positive integer.\"); // dummy"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_guestNumberDelimiterMissingAddReservationCommand1_exceptionThrown() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00; n/3 c/98887777;\")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00; n/3 c/98887777;\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_guestNumberDelimiterMissingAddReservationCommand2_exceptionThrown() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00; n/3 c/98887777\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00; n/3 c/98887777\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_contactMissingAddReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00; n/3;\")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00; n/3;\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"contact c/\", e.getInput());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Input Missing: contact c/ is missing.\", e.getMessage());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_contactContentMissingAddReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00; n/3; c/;\")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00; n/3; c/;\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"contact\", e.getInput());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Input Missing: contact is missing.\", e.getMessage());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_contactDelimiterMissingAddReservationCommand1_exceptionThrown() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00; n/3; c/98887777\")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00; n/3; c/98887777\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_contactDelimiterMissingAddReservationCommand2_exceptionThrown() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00; c/98887777 n/3;\")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00; c/98887777 n/3;\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_commentDelimiterMissingAddReservationCommand1_exceptionThrown() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00; n/3; c/98887777; m/no spicy food please\")"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00; n/3; c/98887777; m/no spicy food please\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_commentDelimiterMissingAddReservationCommand2_exceptionThrown() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00; c/98887777; m/no spicy food please n/3;\")"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00; c/98887777; m/no spicy food please n/3;\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 275
    }
  },
  {
    "path": "src/test/java/commands/AddStockCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class AddStockCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int defaultNumOfIngredientArgs \u003d 3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void construct_AddStockCommand_constructNormally() "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoCopy \u003d new AddStockCommand(\"i/tomato; q/1; p/0.50;\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .getIngredientInAddCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(tomato.equals(tomatoCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute_ExecuteAddStockCommand_executeNormally() "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockCopy \u003d new Stock();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToAdd \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.addIngredient(tomatoToAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        AddStockCommand addStockCommand \u003d new AddStockCommand(\"i/tomato; q/10; p/0.50\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(addStockCommand.printExecuteOutput(stock), executeAdd(stockCopy, tomatoToAdd));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientNameTagOnly() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"tomato; q/1; p/0.50;\");            "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input did not specify the \u0027i/\u0027 tag before the ingredient\u0027s name. \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"Please enter in the following format: \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \", "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());          "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingQuantityTagOnly() { "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"i/tomato; 1; p/0.50;\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input did not specify the \u0027q/\u0027 tag before the ingredient\u0027s quantity. \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"Please enter in the following format: \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \", "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());          "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingPriceTagOnly() { "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"i/tomato; q/1; 0.50;\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input did not specify the \u0027p/\u0027 tag before the ingredient\u0027s price.\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \", "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());          "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingPriceAndQuantityTag() { "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"i/tomato; 1; 0.50;\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input did not specify the \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027q/\u0027 tag and \u0027p/\u0027 tag\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s quantity and price.\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \", "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());          "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientNameAndQuantityTag() { "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"tomato; 1; p/0.50;\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input did not specify the \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027i/\u0027 tag and \u0027q/\u0027 tag\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s name and quantity.\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \", "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());          "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientNameAndPriceTag() { "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"tomato; q/1; 0.50;\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input did not specify the \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027i/\u0027 tag and \u0027p/\u0027 tag\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s name and price.\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \", "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());          "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingAllTags() { "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\" \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input did not meet the required\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" format.\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \", "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());          "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientQuantityAndPrice() { "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"i/tomato;\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input is missing both the ingredient\u0027s \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity to be added and the ingredient\u0027s price!\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientNameAndPrice() { "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"q/1;\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input must specify both the ingredient\u0027s \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"name and the ingredient\u0027s price!\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientNameAndQuantity() { "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"p/$0.50;\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input must specify both the ingredient\u0027s name \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"and the quantity to be added!\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientPriceOnly() { "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"i/tomato; q/1;\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input must specify the ingredient\u0027s price!\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientQuantityOnly() { "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"i/tomato; p/$0.50;\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input must specify the quantity of the ingredient to be added!\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientNameOnly() { "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"q/1; p/$0.50;\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input must specify the ingredient\u0027s name!\","
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void getIngredient_GetIngredientInAddCommand_getNormally() "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        AddStockCommand addStockCommand \u003d new AddStockCommand(\"i/tomato; q/1; p/0.50\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoInAddCommand \u003d addStockCommand.getIngredientInAddCommand();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(tomato, tomatoInAddCommand);       "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Utility functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "   "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIntoIngredientArgs() in AddStockCommand class."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parseIntoAddIngredientArgs("
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String fullInputLine) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "       "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArgs \u003d fullInputLine.split(\";\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cString\u003e parsedIngredientName \u003d Optional.empty();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cInteger\u003e parsedQuantity \u003d Optional.empty();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cDouble\u003e parsedPrice \u003d Optional.empty();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        // First check."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkMissingTagInUserInput(fullInputLine);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (String argument : wordArgs) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedArg \u003d argument.trim();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedArg.contains(\"i/\")) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parsedIngredientName \u003d Optional.of(parseIngredientName(trimmedArg));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"q/\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parsedQuantity \u003d Optional.of(parseIngredientQuantity(trimmedArg));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"p/\")) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parsedPrice \u003d Optional.of(parseIngredientPrice(trimmedArg));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"The user\u0027s input did not meet the required\""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" format.\""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }     "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        // Second check."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkValidParsedIngredientArguments(parsedIngredientName, parsedQuantity, parsedPrice);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredientInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        ingredientInfo.put(parsedIngredientName.get(), Pair.of(parsedQuantity.get(), parsedPrice.get()));    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientInfo;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIntoIngredientName() in AddStockCommand class."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String parseIngredientName(String ingredientNameInput) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientNameInput.trim()"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .substring(2, ingredientNameInput.length());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIntoIngredientQuantity() in AddStockCommand class."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private int parseIngredientQuantity(String ingredientQuantityInput) "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedInput \u003d ingredientQuantityInput.trim();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d Integer.parseInt(trimmedInput.substring("
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    2, ingredientQuantityInput.length()));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (quantity \u003c 0) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please enter a\""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" positive value for the quantity to be added!\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return quantity;            "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please ensure that the \""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity specified is an integer!\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }        "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIntoIngredientPrice() in AddStockCommand class."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private double parseIngredientPrice(String ingredientPriceInput) "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedInput \u003d ingredientPriceInput.trim();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double price \u003d Double.parseDouble(trimmedInput.substring("
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    3, ingredientPriceInput.length()));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (price \u003c 0.0) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please enter a\""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" positive value for the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return price;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please ensure that the \""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"price specified has a \u0027$\u0027 sign and is a decimal!\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of checkValidParsedIngredientArguments() "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * in AddStockCommand class."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkValidParsedIngredientArguments(Optional\u003cString\u003e ingredientName, "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cInteger\u003e quantity, Optional\u003cDouble\u003e price) "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (ingredientName.isEmpty() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify an ingredient\u0027s name, \""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity to be added and its price!\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isPresent() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input is missing both the ingredient\u0027s \""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity to be added and the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify both the ingredient\u0027s \""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"name and the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isPresent()) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify both the ingredient\u0027s name \""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"and the quantity to be added!\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isPresent() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isPresent() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isPresent()) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify the quantity of the ingredient to be added!\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isPresent()) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify the ingredient\u0027s name!\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    } "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation to checkMissingTagInUserInput() in"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * AddStockCommand class. "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkMissingTagInUserInput(String fullInputLine) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArgs \u003d fullInputLine.split(\";\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (wordArgs.length \u003c defaultNumOfIngredientArgs) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d \"\";"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String quantity \u003d \"\";"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String price \u003d \"\";"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasIngredientNameTag \u003d false;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasQuantityTag \u003d false;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasPriceTag \u003d false;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (String argument : wordArgs) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedArg \u003d argument.trim();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedArg.contains(\"i/\")) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                hasIngredientNameTag \u003d true;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"q/\")) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                hasQuantityTag \u003d true;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"p/\")) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                hasPriceTag \u003d true;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (!hasIngredientNameTag \u0026\u0026 hasQuantityTag \u0026\u0026 hasPriceTag) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \u0027i/\u0027 tag\""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s name.\""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \");"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (hasIngredientNameTag \u0026\u0026 !hasQuantityTag \u0026\u0026 hasPriceTag) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \u0027q/\u0027 tag\""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s quantity.\""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (hasIngredientNameTag \u0026\u0026 hasQuantityTag \u0026\u0026 !hasPriceTag) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \u0027p/\u0027 tag\""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s price.\""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (!hasIngredientNameTag \u0026\u0026 !hasQuantityTag \u0026\u0026 hasPriceTag) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027i/\u0027 tag and \u0027q/\u0027 tag\""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s name and quantity.\""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \");"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (!hasIngredientNameTag \u0026\u0026 hasQuantityTag \u0026\u0026 !hasPriceTag) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027i/\u0027 tag and \u0027p/\u0027 tag\""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s name and price.\""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \");"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (hasIngredientNameTag \u0026\u0026 !hasQuantityTag \u0026\u0026 !hasPriceTag) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027q/\u0027 tag and \u0027p/\u0027 tag\""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s quantity and price.\""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \");"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (!hasIngredientNameTag \u0026\u0026 !hasQuantityTag \u0026\u0026 !hasPriceTag)  {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input did not specify the \""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027i/\u0027, \u0027q/\u0027 tag and \u0027p/\u0027 tag\""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" before the ingredient\u0027s name, quantity and price.\""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`add stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_ADDED; p/PRICE;` \");"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assert (hasIngredientNameTag \u0026\u0026 hasQuantityTag \u0026\u0026 hasPriceTag);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function similar to execute() in AddStockCommand class."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * This method returns a string instead of void."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String executeAdd(Stock stock, Ingredient ingredientToAdd) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(ingredientToAdd);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Ingredient \" "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ingredientToAdd.getIngredientName() "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" successfully added!\");"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "              "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 478,
      "SibingWu": 7
    }
  },
  {
    "path": "src/test/java/commands/ClearReservationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "class ClearReservationCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    ReservationList reservationList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public ClearReservationCommandTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservationList \u003d new ReservationList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new AddReservationCommand(\"p/Peter; d/2020-03-12 12:00; n/3; c/98955555;\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                .execute(reservationList, ui);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new AddReservationCommand(\"p/Mary; d/2020-03-11 12:00; n/8; c/99998888;\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                .execute(reservationList, ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void execute_normalInput_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(reservationList.getSize(), 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new ClearReservationCommand().execute(reservationList, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(reservationList.getSize(), 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 28
    }
  },
  {
    "path": "src/test/java/commands/ClearStockCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class ClearStockCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_ClearStockCommand_clearStockCompletely() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToAdd \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient potatoToAdd \u003d new Ingredient(\"potato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient riceToAdd \u003d new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(tomatoToAdd);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(potatoToAdd);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(riceToAdd);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.clearStock();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(stock.getStock().isEmpty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_ClearStockCOmmand_clearStockMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToAdd \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient potatoToAdd \u003d new Ingredient(\"potato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient riceToAdd \u003d new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(tomatoToAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(potatoToAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(riceToAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"The stock has been cleared.\", executeClear(stock));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Utility functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function that has the same implementation as clearStock() in the Stock class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * This method returns a string instead of void."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String executeClear(Stock stock) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.getStock().clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d \"The stock has been cleared.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 57
    }
  },
  {
    "path": "src/test/java/commands/DeleteDishCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class DeleteDishCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void deleteDishTestA() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        DeleteDishCommand.deleteDish(\"n/bacon pizza;\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(Menu.getDishMap().containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void deleteDishTestB() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        DeleteDishCommand.deleteDish(\"n/bacon pizza;\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(Menu.getDishMap().containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        DeleteDishCommand.deleteDish(\"n/chicken biryani;\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(Menu.getDishMap().containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 39
    }
  },
  {
    "path": "src/test/java/commands/DeleteStockCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class DeleteStockCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test when the user input is in the correct format of \u0027i/INGREDIENT; q/QUANTITY;\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * with quantity specified."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void construct_DeleteStockCommandWithQuantity_constructNormally() "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToDelete \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.empty());  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoCopy \u003d new DeleteStockCommand(\"i/tomato; q/1;\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .getIngredientInDeleteCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(tomatoToDelete.equals(tomatoCopy)); "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test when the user input is in the correct format of \u0027i/INGREDIENT;\u0027 without quantity"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * specified."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void construct_DeleteStockCommandWithoutQuantity_constructNormally() "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.empty());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoCopyTwo \u003d new DeleteStockCommand(\"i/tomato;\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .getIngredientInDeleteCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(tomato.equals(tomatoCopyTwo));      "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test execution of deleteStockCommand when quantity is specified."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute_ExecuteDeleteStockCommandWithQuantity_executeNormally() "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException, IngredientNotFoundException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockCopy \u003d new Stock();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToAdd \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToDelete \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.empty());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.addIngredient(tomatoToAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.deleteIngredient(tomatoToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        DeleteStockCommand deleteStockCommand \u003d new DeleteStockCommand(\"i/tomato; q/1\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(deleteStockCommand.printExecuteOutput(stockCopy),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                executeDelete(stockCopy, tomatoToDelete));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test execution of deleteStockCommand when quantity is not specified."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void excute_ExecuteDeleteStockCommandWithoutQuantity_executeNormally() "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException, IngredientNotFoundException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockCopy \u003d new Stock();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToAdd \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToDelete \u003d new Ingredient(\"tomato\", Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.addIngredient(tomatoToAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.deleteIngredient(tomatoToDelete);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        DeleteStockCommand deleteStockCommand \u003d new DeleteStockCommand(\"i/tomato;\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(deleteStockCommand.printExecuteOutput(stock),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                executeDelete(stockCopy, tomatoToDelete));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void excute_ExecuteDeleteStockCommand_ingredientNotFoundInStock() "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockCopy \u003d new Stock();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToDelete \u003d new Ingredient(\"tomato\", Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        DeleteStockCommand deleteStockCommand \u003d new DeleteStockCommand(\"i/tomato;\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stockCopy.deleteIngredient(tomatoToDelete);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IngredientNotFoundException infe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(deleteStockCommand.printExecuteOutput(stock),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    executeDelete(stockCopy, tomatoToDelete));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoDeleteIngredientsArgsWithQuantity_parseNormally() "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Optional\u003cInteger\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parseIntoDeleteIngredientArgs(\"i/tomato; q/1;\"); "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String parsedIngredientName \u003d parsedIngredientInfo"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .entrySet()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(item -\u003e item.getKey())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int parsedIngredientQuantity \u003d parsedIngredientInfo.get(\"tomato\").get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"tomato\", parsedIngredientName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(1, parsedIngredientQuantity);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }   "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoDeleteIngredientsArgsWithoutQuantity_parseNormally() "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Optional\u003cInteger\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parseIntoDeleteIngredientArgs(\"i/tomato;\"); "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String parsedIngredientName \u003d parsedIngredientInfo"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .entrySet()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(item -\u003e item.getKey())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"tomato\", parsedIngredientName);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int parsedIngredientQuantity \u003d parsedIngredientInfo.get(\"tomato\").get();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoDeleteIngredientsArgs_missingIngredientNameOnly() "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Optional\u003cInteger\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoDeleteIngredientArgs(\"q/$0.50;\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }         "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoDeleteIngredientsArgs_missingIngredientNameAndQuantity() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Optional\u003cInteger\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoDeleteIngredientArgs(\"\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"There is no tag specified.\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`delete stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_DELETED;` \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"               or\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`delete stock; i/INGREDIENT_NAME;`.\", isce.getMessage());           "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoDeleteIngredientsArgs_missingIngredientTag() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Optional\u003cInteger\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoDeleteIngredientArgs(\"tomato\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"There is no tag specified.\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`delete stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_DELETED;` \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"               or\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`delete stock; i/INGREDIENT_NAME;`.\", isce.getMessage());           "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "      "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoDeleteIngredientsArgs_missingQuantityTag() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Optional\u003cInteger\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoDeleteIngredientArgs(\"i/tomato; 10\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"There is no tag specified.\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`delete stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_DELETED;` \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"               or\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"`delete stock; i/INGREDIENT_NAME;`.\", isce.getMessage());           "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void getIngredient_GetIngredientInDeleteCommand_getNormally() "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.empty());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        DeleteStockCommand deleteStockCommand \u003d new DeleteStockCommand(\"i/tomato; q/1;\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoInDeleteCommand \u003d deleteStockCommand.getIngredientInDeleteCommand();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(tomato, tomatoInDeleteCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Utility functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIntoIngredientArgs() in DeleteStockCommand"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * class. This method returns a string instead of void."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Map\u003cString, Optional\u003cInteger\u003e\u003e parseIntoDeleteIngredientArgs("
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String fullInputLine) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Optional\u003cInteger\u003e\u003e ingredientInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArgs \u003d fullInputLine.split(\";\");       "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cString\u003e ingredientName \u003d Optional.empty();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cInteger\u003e quantity \u003d Optional.empty();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (String argument : wordArgs) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedArg \u003d argument.trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedArg.contains(\"i/\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ingredientName \u003d Optional.of(parseIngredientName(trimmedArg));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"q/\")) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                quantity \u003d Optional.of(parseIngredientQuantity(trimmedArg));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"There is no tag specified.\""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" Please enter in the following format: \""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"`delete stock; i/INGREDIENT_NAME; q/QUANTITY_TO_BE_DELETED;` \""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"               or\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"`delete stock; i/INGREDIENT_NAME;`.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkValidParsedIngredientArguments(ingredientName, quantity);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        ingredientInfo.put(ingredientName.get(), quantity);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientInfo;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIngredientName() in DeleteStockCommand"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * class. This method returns a string instead of void."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String parseIngredientName(String ingredientNameInput) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientNameInput.trim()"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .substring(2, ingredientNameInput.length());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIngredientQuantity() in DeleteStockCommand"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * class. This method returns a string instead of void."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private int parseIngredientQuantity(String ingredientQuantityInput) "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedInput \u003d ingredientQuantityInput.trim();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d Integer.parseInt(trimmedInput.substring("
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    2, ingredientQuantityInput.length()));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (quantity \u003c 0) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please enter a\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" positive value for the quantity to be added!\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return quantity;            "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please ensure that the \""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity specified is an integer!\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }        "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of checkValidParsedArguments() in DeleteStockCommand"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * class. This method returns a string instead of void."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkValidParsedIngredientArguments(Optional\u003cString\u003e ingredientName,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cInteger\u003e quantity) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (ingredientName.isEmpty() \u0026\u0026 quantity.isEmpty()) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input must specify\""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" an ingredient name.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isPresent()) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input must specify\""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" an ingredient name.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns a string representation of output when DeleteStockCommand is executed. "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * The implementation is similar to execute() in DeleteStockCommand class."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * This method returns a string instead of void."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String executeDelete(Stock stock, Ingredient ingredientToDelete) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (createDeleteResultMessage(ingredientToDelete));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IngredientNotFoundException e) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (\"Ingredient \" "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientToDelete.getIngredientName() "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" not found and cannot be deleted!\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function to return a string representation. The implementation is"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * similar to createDeleteResultMessage() in DeleteStockCommand class."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * This method returns a string instead of void."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createDeleteResultMessage(Ingredient ingredientToDelete) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasQuantitySpecified \u003d ingredientToDelete.isQuantitySpecified();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"Ingredient \" "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientToDelete.getIngredientName()"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + (hasQuantitySpecified "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            ? \" reduced by \" "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            + ingredientToDelete.getIngredientQuantity() + \"!\""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            : \" deleted from the stock!\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 348,
      "SibingWu": 8
    }
  },
  {
    "path": "src/test/java/commands/ListStockCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class ListStockCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute_executeListCommand_executeNormally() "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToAdd \u003d "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToAddTwo \u003d "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.of(10), Optional.of(0.50));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToDelete \u003d "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.of(1), Optional.empty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient rice \u003d "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient riceToDelete \u003d "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"rice\", Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient potato \u003d "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"potato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient vegetable \u003d "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"vegetable\", Optional.of(5), Optional.of(0.20));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient toxicGreens \u003d "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"toxic greens\", Optional.of(3), Optional.of(10.00));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(tomatoToAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(tomatoToAddTwo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.deleteIngredient(tomatoToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(rice);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.deleteIngredient(riceToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(potato);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(vegetable);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(toxicGreens);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createListIngredientOutputCopy(), executeList(stock));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns a string representation once a listCommand is executed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String executeList(Stock stock) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d printlistIngredientToString(stock);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"All ingredients listed successfully!\");             "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Utility functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation to printStock() in the Stock class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * This method returns a string instead of void."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String printStock(Stock stock) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new ArrayList\u003c\u003e(Stock.getStock().entrySet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Collections.sort(tempList, "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Comparator\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                public int compare(Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e firstEntry, "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e secondEntry) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    int firstEntryQuantity \u003d firstEntry.getValue().first();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    int secondEntryQuantity \u003d secondEntry.getValue().first();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    return secondEntryQuantity - firstEntryQuantity;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            });      "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int ingredientCounter \u003d 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d ingredient.getValue().first();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double price \u003d ingredient.getValue().second();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (ls "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientCounter "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \". \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"[\" "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + quantity "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"[$\" "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + String.format(\"%.2f\", price) "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" \" "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "           "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ingredientCounter++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation to listIngredient() in the stock class."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * This method returns a string instead of void."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String printlistIngredientToString(Stock stock) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (Stock.getStock().isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (\"There is nothing in the stock currently.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (\"Here are the ingredients in the stock currently:\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d printStock(stock) "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (ls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createListIngredientOutputCopy() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Here are the ingredients in the stock currently:\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"1. [10][$0.50] tomato\" "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [5][$0.20] vegetable\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"3. [3][$10.00] toxic greens\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"4. [1][$0.50] potato\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (ls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"All ingredients listed successfully!\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 162,
      "SibingWu": 1
    }
  },
  {
    "path": "src/test/java/commands/MarkReservationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidReservationNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "class MarkReservationCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    ReservationList reservationList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public MarkReservationCommandTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservationList \u003d new ReservationList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new AddReservationCommand(\"p/Peter; d/2020-03-12 12:00; n/3; c/98955555;\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                .execute(reservationList, ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void execute_normalMarkReservationCommand_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservationList.getReservation(reservationList.getSize());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Unserved\", reservation.getStatus());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new MarkReservationCommand(\"r/1;\").execute(reservationList, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Served\", reservation.getStatus());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_inputMissingMarkReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new MarkReservationCommand(\"\").parseInput(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"reservation number r/\", e.getInput());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Input Missing: reservation number r/ is missing.\", e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InvalidReservationNumberException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_delimiterMissingMarkReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new MarkReservationCommand(\"r/1\").parseInput(\"r/1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InvalidReservationNumberException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_invalidReservationNumberMarkReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new MarkReservationCommand(\"r/-1;\").parseInput(\"r/-1;\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InvalidReservationNumberException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"There is no Reservation[-1] in the list.\", e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 76
    }
  },
  {
    "path": "src/test/java/commands/SearchDishCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class SearchDishCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d3 \u003d \"i/chicken, pasta, sauce; n/pasta with chicken; p/7.00;\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d3);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d4 \u003d \"i/flatbread, bacon, cheese; p/3.00; n/bacon flatbread;\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d4);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void searchDishTestA() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap\u003cString, Dish\u003e matchingA \u003d SearchDishCommand.searchDish(\"k/chicken;\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingA.containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingA.containsKey(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void searchDishTestB() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap\u003cString, Dish\u003e matchingA \u003d SearchDishCommand.searchDish(\"k/bacon;\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingA.containsKey(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingA.containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap\u003cString, Dish\u003e matchingB \u003d SearchDishCommand.searchDish(\"k/bac;\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingB.containsKey(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingB.containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingB.containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingB.containsKey(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void searchDishTestC() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap\u003cString, Dish\u003e matchingA \u003d SearchDishCommand.searchDish(\"k/cheese;\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void searchDishTestD() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap\u003cString, Dish\u003e matchingA \u003d SearchDishCommand.searchDish(\"k/pizza;\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingA.containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 70
    }
  },
  {
    "path": "src/test/java/commands/SearchStockCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class SearchStockCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative index of \u0027k\u0027 present within the string. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int indexOfKCharacter \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative index of \u0027/\u0027 present within the string. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int indexOfSlashCharacter \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative index after the \u0027/\u0027 present within the string. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int indexAfterSlash \u003d 2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The length of \u0027k/\u0027 tag. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int keywordTagLength \u003d 2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void construct_SearchStockCommand_constructNormally() "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String keywordSupplied \u003d \"tomato\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String keywordInCommand \u003d new SearchStockCommand(\" k/tomato;\").getKeyword();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(keywordSupplied.equals(keywordInCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIntoSearchKeyword_parseNormally() "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String keywordSupplied \u003d \"vegetable\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String parsedKeyword \u003d parseIntoSearchKeyword(\" k/vegetable;\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(keywordSupplied.equals(parsedKeyword));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    } "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void check_checkValidSearchKeywordArgumentsSupplied_noExceptionThrown() "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            checkValidSearchKeywordArgumentsSupplied(\"k/vegetable;\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void check_checkForBlankArguments_blankKeywordSupplied() "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            new SearchStockCommand(\" \").getKeyword();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(isce.getMessage(), "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"Please enter an ingredient\u0027s name to be searched against the stock.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void check_checkForBlankArguments_blankKeywordAfterSlashCharacter() "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            new SearchStockCommand(\" k/   \").getKeyword();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(isce.getMessage(), "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"Please enter an ingredient\u0027s name to be searched against the stock.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void check_checkForKAndSlashCharacter_kAndSlashCharacterNotAtTheStart() "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            new SearchStockCommand(\" toma/kto\").getKeyword();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(isce.getMessage(), "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"Please specify the keyword using the format \u0027k/keyword;\u0027\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void check_checkForKAndSlashCharacter_kAndSlashCharacterAtTheEnd() "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            new SearchStockCommand(\"   tomatok/\").getKeyword();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(isce.getMessage(), "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"Please specify the keyword using the format \u0027k/keyword;\u0027\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void check_checkForKAndSlashCharacter_kAndSlashCharacterUnspecificed() "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            new SearchStockCommand(\"   tomato\").getKeyword();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(isce.getMessage(), "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"Please specify the keyword using the format \u0027k/keyword;\u0027\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void check_checkCorrectKeywordTagUsed_usePriceTagInstead()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            new SearchStockCommand(\" p/rice\").getKeyword();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(isce.getMessage(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"Please specify the keyword using the format \u0027k/keyword;\u0027\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute_executeSearchCommand_executeNormally() "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient vegetable \u003d "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"vegetable\", Optional.of(10), Optional.of(0.50));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient salt \u003d "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"salt\", Optional.of(1), Optional.of(0.30));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient rice \u003d "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient flour \u003d "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"flour\", Optional.of(10), Optional.of(0.30));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient potato \u003d "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"potato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(tomato);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(vegetable);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(salt);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(flour);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(rice);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(potato);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createSearchStockOutputCopy(), executeSearch(stock, \"potato\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createSearchStockOutputCopyTwo(), executeSearch(stock, \"to\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createSearchStockOutputCopyThree(), executeSearch(stock, \"t\"));       "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }   "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Utility functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "   "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation to searchStock() in the Stock class."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * This method returns a string instead of void."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String executeSearch(Stock stock, String keyword) {  "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasIngredientWithKeyword \u003d checkIngredientInStock(keyword, stock);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (!hasIngredientWithKeyword) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (\"There is no ingredient that matches the keyword given.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d printSearchResult(stock, keyword);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation to printSearchResult() in the Stock class."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * This method returns a string instead of void."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String printSearchResult(Stock stock, String keyword) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d (\"Here are the ingredients in the stock that matches the keyword:\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                stock.getStock().entrySet());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int ingredientCounter \u003d 1;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (ingredientName.contains(keyword) || ingredientName"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .toLowerCase()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int quantity \u003d ingredient.getValue().first();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                double price \u003d ingredient.getValue().second();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                outputMessage +\u003d (ls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ingredientCounter "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \". \""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"[\" "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + quantity "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"]\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"[$\" "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + String.format(\"%.2f\", price) "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"]\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" \" "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ingredientName);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ingredientCounter++;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (ls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation to checkIngredientInStock()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * in the Stock class. This method returns a string instead of void."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private boolean checkIngredientInStock(String keyword, Stock stock) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasIngredientWithKeyword \u003d false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                stock.getStock().entrySet());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (ingredientName.contains(keyword) || ingredientName"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .toLowerCase()"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                hasIngredientWithKeyword \u003d true;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return hasIngredientWithKeyword;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "       "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIntoSearchKeyword()"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * in SearchStockCommand class. This method returns a string instead of void.                                      "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String parseIntoSearchKeyword(String fullInputLine) "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkValidSearchKeywordArgumentsSupplied(fullInputLine);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedKeyword \u003d fullInputLine.trim();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (trimmedKeyword.contains(\";\")) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedKeywordWithColon \u003d trimmedKeyword"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .substring(indexAfterSlash, trimmedKeyword.length() - 1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return trimmedKeywordWithColon; "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedKeywordWithoutColon \u003d trimmedKeyword"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .substring(indexAfterSlash, trimmedKeyword.length());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return trimmedKeywordWithoutColon; "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }            "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of checkValidSearchKeywordArgumentsSupplied()"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * in SearchStockCommand class.                                 "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkValidSearchKeywordArgumentsSupplied(String fullInputLine) "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedFullInputLine \u003d fullInputLine.trim();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkForBlankArguments(trimmedFullInputLine);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkForKAndSlashBeforeKeyword(trimmedFullInputLine);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of checkForBlankArguments() in SearchStockCommand"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * class. "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkForBlankArguments(String trimmedFullInputLine) "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (trimmedFullInputLine.isBlank()) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please \""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"enter an ingredient\u0027s name to be \""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"searched against the stock.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (trimmedFullInputLine.length() \u003d\u003d keywordTagLength) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            checkForKAndSlashBeforeKeyword(trimmedFullInputLine);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please \""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"enter an ingredient\u0027s name to be \""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"searched against the stock.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (trimmedFullInputLine.length() \u003e keywordTagLength) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedFullInputLine.substring(indexAfterSlash, "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    trimmedFullInputLine.length()).isBlank()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please \""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"enter an ingredient\u0027s name to be \""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"searched against the stock.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }            "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of checkForKAndSlashBeforeKeyword() in "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * SearchStockCommand class."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkForKAndSlashBeforeKeyword(String trimmedFullInputLine) "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (trimmedFullInputLine.length() \u003c keywordTagLength) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please \""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"specify the keyword using the format \""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027k/keyword;\u0027\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (trimmedFullInputLine.charAt(indexOfKCharacter) !\u003d \u0027k\u0027 "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \u0026\u0026 trimmedFullInputLine.charAt(indexOfSlashCharacter) !\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please \""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"specify the keyword using the format \""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"\u0027k/keyword;\u0027\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createSearchStockOutputCopy() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Here are the ingredients in the stock that matches the keyword:\""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"1. [1][$0.50] potato\""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls); "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d ls;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createSearchStockOutputCopyTwo() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Here are the ingredients in the stock that matches the keyword:\""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"1. [1][$0.50] potato\""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [1][$0.50] tomato\""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls); "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d ls;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createSearchStockOutputCopyThree() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Here are the ingredients in the stock that matches the keyword:\""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"1. [1][$0.30] salt\""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [1][$0.50] potato\""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"3. [1][$0.50] tomato\""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"4. [10][$0.50] vegetable\""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls); "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d ls;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 386,
      "SibingWu": 2
    }
  },
  {
    "path": "src/test/java/commands/StockCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class StockCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute_executeStockCommand_throwsException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stockCommand.execute();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IllegalStateException ise) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"This method is to be implemented by child classes\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    ise.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientName_parseNormally() throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"tomato\", stockCommand.parseIngredientName(\"i/tomato\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(stockCommand.parseIngredientName(\"i/tomato\").equals(\"potato\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientName_blankIngredientNameSupplied() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stockCommand.parseIngredientName(\"q/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please enter the ingredient\u0027s name to be added.\", isce.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientQuantity_parseNormally() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(10, stockCommand.parseIngredientQuantity(\"q/10\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\", "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please enter a positive value for the quantity to be added!\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientQuantity_quantityIsTypeDouble() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int parsedInvalidQuantity \u003d stockCommand.parseIngredientQuantity(\"q/10.0\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientQuantity_blankIngredientQuantitySupplied() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stockCommand.parseIngredientQuantity(\"q/\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\", "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientQuantity_quantityIsNotInteger() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int parsedInvalidQuantityTwo \u003d stockCommand.parseIngredientQuantity(\"q/LOL\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\", "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientQuantity_quantityIsNegative() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int parsedInvalidQuantityThree \u003d stockCommand.parseIngredientQuantity(\"q/-10\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\", "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please enter a positive value for the quantity to be added!\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientPrice_parseNormally() "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(0.5, stockCommand.parseIngredientPrice(\"p/0.50\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified is a decimal!\", "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please enter a positive value for the ingredient\u0027s price!\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientPrice_blankIngredientPriceSupplied() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stockCommand.parseIngredientPrice(\"p/\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified is a decimal!\", "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientPrice_RandomUserInputSupplied() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stockCommand.parseIngredientName(\"p/$$$$$\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified is a decimal!\", "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientPrice_priceIsIntger() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double parsedInvalidPrice \u003d stockCommand.parseIngredientPrice(\"p/10\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified is a decimal!\", "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please enter a positive value for the ingredient\u0027s price!\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientPrice_priceIsDouble() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double parsedInvalidPriceTwo \u003d stockCommand.parseIngredientPrice(\"p/LOL\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified is a decimal!\", "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified is a decimal!\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientPrice_priceIsNegative() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double parsedInvalidPriceFour \u003d stockCommand.parseIngredientPrice(\"p/-10.0\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified is a decimal!\", "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please enter a positive value for the ingredient\u0027s price!\", "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 194,
      "SibingWu": 1
    }
  },
  {
    "path": "src/test/java/commands/VoidReservationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidReservationNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "class VoidReservationCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    ReservationList reservationList; "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public VoidReservationCommandTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservationList \u003d new ReservationList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new AddReservationCommand(\"p/Peter; d/2020-03-12 12:00; n/3; c/98955555;\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                .execute(reservationList, ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void execute_normalVoidReservationCommand_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new VoidReservationCommand(\"r/1;\").execute(reservationList, ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservationList.getReservation(reservationList.getSize());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Invalid\", reservation.getStatus());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_inputMissingVoidReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new VoidReservationCommand(\"\").parseInput(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"reservation number r/\", e.getInput());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Input Missing: reservation number r/ is missing.\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InvalidReservationNumberException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_delimiterMissingVoidReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new VoidReservationCommand(\"r/1\").parseInput(\"r/1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InvalidReservationNumberException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_invalidReservationNumberVoidReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new VoidReservationCommand(\"r/-1;\").parseInput(\"r/-1;\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InvalidReservationNumberException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"There is no Reservation[-1] in the list.\", e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 74
    }
  },
  {
    "path": "src/test/java/dish/LoadDishTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.InvalidLoadException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import report.LoadDish;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class LoadDishTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseIngredientsA() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ArrayList\u003cString\u003e ingredients \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ingredients.add(\"cheese\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ingredients.add(\"sauce\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String input \u003d \"1. Name: pizza      \\t Price: $3.00       \\t Ingredients: cheese, sauce \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(ingredients, LoadDish.parseIngredients(input));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseIngredientsB() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ArrayList\u003cString\u003e ingredients \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ingredients.add(\"chicken\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ingredients.add(\"salsa\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ingredients.add(\"sour cream\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ingredients.add(\"eggs\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String input \u003d \"2. Name: taco       \\t Price: $4.50       \\t Ingredients: chicken, salsa, sour cream, eggs \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(ingredients, LoadDish.parseIngredients(input));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseNameA() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String input \u003d \"1. Name: pizza      \\t Price: $3.00       \\t Ingredients: cheese, sauce \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String name \u003d \"pizza\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(name, LoadDish.parseName(input));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseNameB() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String input \u003d \"2. Name: taco       \\t Price: $4.50       \\t Ingredients: chicken, salsa, sour cream, eggs \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String name \u003d \"taco\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(name, LoadDish.parseName(input));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parsePriceA() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String input \u003d \"1. Name: pizza      \\t Price: $3.00       \\t Ingredients: cheese, sauce \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        double price \u003d 3.00;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(price, LoadDish.parsePrice(input));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parsePriceB() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String input \u003d \"2. Name: taco       \\t Price: $4.50       \\t Ingredients: chicken, salsa, sour cream, eggs \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        double price \u003d 4.50;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(price, LoadDish.parsePrice(input));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseFileTestA() throws InvalidLoadException, FileNotFoundException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String name \u003d \"pizza\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        double price \u003d 3.00;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ArrayList\u003cString\u003e ingredients \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ingredients.add(\"cheese\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ingredients.add(\"sauce\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap dishMapA \u003d new HashMap\u003cString, Dish\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        dishMapA.put(\"pizza\", new Dish(name, ingredients, price));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String fp \u003d \"/Users/ganeshmuthu/Documents/cs2113/tp/sampleReportA.txt\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        LoadDish ld \u003d LoadDish.getInstance(fp);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        m.setDishMap(dishMapA);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(m.getDishMap(), ld.readDishes().getDishMap());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 84
    }
  },
  {
    "path": "src/test/java/ingredient/IngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class IngredientTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void print_IngredientToString_toStringIsIngredientName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"tomato\", "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.empty(), Optional.empty()).toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"potato\", "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"potato\", Optional.of(0), Optional.empty()).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"rice\", "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"rice\", Optional.of(1), Optional.of(1.0)).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_IsQuantitySpecified_TrueWhenQuantitySpecified() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.of(1), Optional.empty()).isQuantitySpecified());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.empty(), Optional.empty()).isQuantitySpecified());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns true if both ingredients have the same name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_Equals_TrueIfIngredientsHaveSameName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoA \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.empty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoACopy \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.empty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoB \u003d new Ingredient(\"tomato\", Optional.of(2), Optional.empty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(tomatoA.equals(tomatoACopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(tomatoA.equals(tomatoB));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void getQuantity_GetIngredientQuantity_QuantityOfIngredient() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient rice \u003d new Ingredient(\"rice\", Optional.empty(), Optional.of(0.5));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(1, tomato.getIngredientQuantity());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            rice.getIngredientQuantity();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NoSuchElementException nsoe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"No value present\", nsoe.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void getPrice_GetIngredientPrice_PriceOfIngredient() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient rice \u003d new Ingredient(\"rice\", Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(0.50, tomato.getIngredientPrice());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            rice.getIngredientPrice();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NoSuchElementException nsoe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"No value present\", nsoe.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void getName_GetIngredientNameNameOfIngredient() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient rice \u003d new Ingredient(\"rice\", Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"tomato\", tomato.getIngredientName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(rice.getIngredientName().equals(\"banana\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 80
    }
  },
  {
    "path": "src/test/java/profit/ProfitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package profit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import commands.AddDishCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Profit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.EmptyStockException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.IngredientMissingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.NegativeProfitException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class ProfitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void stockA() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Stock stockA \u003d new Stock();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"cheese\", Optional.of(1), Optional.of(0.30)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"bacon\", Optional.of(1), Optional.of(0.90)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"chicken\", Optional.of(1), Optional.of(1.00)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"chili\", Optional.of(1), Optional.of(0.20)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"pasta\", Optional.of(1), Optional.of(0.40)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"sauce\", Optional.of(1), Optional.of(0.20)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"flatbread\", Optional.of(1), Optional.of(0.30)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void stockB() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Stock stockB \u003d new Stock();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"cheese\", Optional.of(1), Optional.of(3.00)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"bacon\", Optional.of(1), Optional.of(2.00)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"chicken\", Optional.of(1), Optional.of(6.00)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(3.00)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"chili\", Optional.of(1), Optional.of(2.00)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"pasta\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"sauce\", Optional.of(1), Optional.of(0.60)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"flatbread\", Optional.of(1), Optional.of(0.30)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void stockC() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Stock stockC \u003d new Stock();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockC.addIngredient(new Ingredient(\"cheese\", Optional.of(0), Optional.of(3.00)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockC.addIngredient(new Ingredient(\"bacon\", Optional.of(5), Optional.of(2.00)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void profitTestA() throws NegativeProfitException, EmptyStockException, IngredientMissingException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Profit p1 \u003d new Profit(Menu.getDishMap().get(\"bacon pizza\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(1.20, p1.getCost());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(3.80, p1.getProfit());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Profit p2 \u003d new Profit(Menu.getDishMap().get(\"chicken biryani\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(1.70, p2.getCost());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(8.30, p2.getProfit());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d3 \u003d \"i/chicken, pasta, sauce; n/pasta with chicken; p/7.00;\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Profit p3 \u003d new Profit(Menu.getDishMap().get(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(1.60, p3.getCost());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(5.40, p3.getProfit());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d4 \u003d \"i/flatbread, bacon, cheese; p/3.00; n/bacon flatbread;\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d4);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Profit p4 \u003d new Profit(Menu.getDishMap().get(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(1.50, p4.getCost());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(1.50, p4.getProfit());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void profitTestB() throws NegativeProfitException, EmptyStockException, IngredientMissingException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            Profit p1 \u003d new Profit(Menu.getDishMap().get(\"bacon pizza\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (NegativeProfitException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Profit is \u003c\u003d 0\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            Profit p2 \u003d new Profit(Menu.getDishMap().get(\"chicken biryani\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (NegativeProfitException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Profit is \u003c\u003d 0\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d3 \u003d \"i/chicken, pasta, sauce; n/pasta with chicken; p/7.00;\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d3);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            Profit p3 \u003d new Profit(Menu.getDishMap().get(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (NegativeProfitException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Profit is \u003c\u003d 0\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d4 \u003d \"i/flatbread, bacon, cheese; p/3.00; n/bacon flatbread;\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d4);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            Profit p4 \u003d new Profit(Menu.getDishMap().get(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (NegativeProfitException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Profit is \u003c\u003d 0\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void profitTestC() throws NegativeProfitException, EmptyStockException, IngredientMissingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockC();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            Profit p1 \u003d new Profit(Menu.getDishMap().get(\"bacon pizza\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (EmptyStockException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Stock for an ingredient is empty\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void profitTestD() throws NegativeProfitException, EmptyStockException, IngredientMissingException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockC();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d4 \u003d \"i/flatbread, bacon, cheese; p/3.00; n/bacon flatbread;\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d4);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            Profit p1 \u003d new Profit(Menu.getDishMap().get(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (IngredientMissingException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Stock doesn\u0027t contain at least one ingredient\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 139
    }
  },
  {
    "path": "src/test/java/reservation/ReservationListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package reservation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.ReservationStatusException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "class ReservationListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    ReservationList reservationList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public ReservationListTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservationList \u003d new ReservationList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservationList.addReservation(new Reservation(1, \"Lisa\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                LocalDateTime.parse(\"2020-03-15 12:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                3, \"12345678\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void addReservation_normalInput_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservationList.getReservation(1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(1, reservation.getReservationNumber());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Lisa\", reservation.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2020-03-15 12:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservation.getDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\u0027S\u0027, reservation.getTableSize());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"12345678\", reservation.getContact());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"No comments\", reservation.getComments());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Unserved\", reservation.getStatus());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void markReservationAsServed_normalInput_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservationList.markReservationAsServed(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            Reservation reservation \u003d reservationList.getReservation(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Served\", reservation.getStatus());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (ReservationStatusException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void markReservationAsServed_invalidReservation_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservationList.voidReservation(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservationList.markReservationAsServed(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (ReservationStatusException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Invalid\", e.getStatus());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void voidReservation_normalInput_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservationList.voidReservation(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            Reservation reservation \u003d reservationList.getReservation(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Invalid\", reservation.getStatus());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (ReservationStatusException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void voidReservation_invalidReservation_exceptionThrown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservationList.voidReservation(1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservationList.voidReservation(1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (ReservationStatusException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Invalid\", e.getStatus());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void voidReservation_servedReservation_exceptionThrown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservationList.markReservationAsServed(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservationList.voidReservation(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (ReservationStatusException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Served\", e.getStatus());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void getSize_normalInput_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(1, reservationList.getSize());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 98
    }
  },
  {
    "path": "src/test/java/reservation/ReservationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package reservation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "class ReservationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void testGetterandSetter_normalInput_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d new Reservation(2, \"Lisa\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                LocalDateTime.parse(\"2020-03-15 12:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                3, \"12345678\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(2, reservation.getReservationNumber());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Lisa\", reservation.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setName(\"Peter\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Peter\", reservation.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2020-03-15 12:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")), "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservation.getDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setDate(LocalDateTime.parse(\"2020-03-15 13:00\", "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2020-03-15 13:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservation.getDate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\u0027S\u0027, reservation.getTableSize());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setNumberOfGuests(8);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\u0027M\u0027, reservation.getTableSize());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"12345678\", reservation.getContact());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setContact(\"11111111\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"11111111\", reservation.getContact());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"No comments\", reservation.getComments());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setComments(\"no spicy food please\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"no spicy food please\", reservation.getComments());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Unserved\", reservation.getStatus());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setStatus(\"Served\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Served\", reservation.getStatus());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Reservation [2]\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Status: Served\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Contact person: Peter\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Date: 2020-03-15 13:00\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Number of guests: 8\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Table size: M\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Contact details: 11111111\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Comments: no spicy food please\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + ls, reservation.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 66
    }
  },
  {
    "path": "src/test/java/sales/SalesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguan1"
        },
        "content": "package sales;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import commands.AddDishCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.EmptyStockException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.IngredientMissingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.NegativeProfitException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguan1"
        },
        "content": "public class SalesTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    final Menu menu \u003d new Menu();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void stockA() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Stock stockA \u003d new Stock();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"cheese\", Optional.of(1), Optional.of(0.30)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"bacon\", Optional.of(1), Optional.of(0.90)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"chicken\", Optional.of(1), Optional.of(1.00)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"chili\", Optional.of(1), Optional.of(0.20)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"pasta\", Optional.of(1), Optional.of(0.40)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"sauce\", Optional.of(1), Optional.of(0.20)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"flatbread\", Optional.of(1), Optional.of(0.30)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void testAddSale1() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d3 \u003d \"n/pasta; i/spaghetti, bacon; p/10.00;\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d2 \u003d \"n/bacon; i/bacon; p/3.00;\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Sales s \u003d new Sales();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String s1 \u003d \"d/bacon pizza; q/5;\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String s2 \u003d \"d/bacon; q/10\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String s3 \u003d \"d/pasta; q/20\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(s1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(s2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(s3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertNotNull(s.getSalesMap());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.getSalesMap().get(Menu.getDishMap().get(\"bacon pizza\")).equals(5));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.getSalesMap().get(Menu.getDishMap().get(\"bacon\")).equals(10));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.getSalesMap().get(Menu.getDishMap().get(\"pasta\")).equals(20));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void testAddSale2() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d2 \u003d \"n/bacon; i/bacon; p/3.00;\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Sales s \u003d new Sales();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String s1 \u003d \"d/bacon pizza; q/5;\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String s2 \u003d \"d/bacon; q/10\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String s3 \u003d \"d/pasta; q/20\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(s1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(s2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(s3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertNotNull(s.getSalesMap());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.getSalesMap().get(Menu.getDishMap().get(\"bacon pizza\")).equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.getSalesMap().get(Menu.getDishMap().get(\"bacon\")).equals(10));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertNull(s.getSalesMap().get(Menu.getDishMap().get(\"pasta\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void testTotalProfit() throws NegativeProfitException, EmptyStockException, IngredientMissingException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d3 \u003d \"i/chicken, pasta, sauce; n/pasta with chicken; p/7.00;\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d4 \u003d \"i/flatbread, bacon, cheese; p/3.00; n/bacon flatbread;\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d4);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Sales s \u003d new Sales();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/bacon pizza; q/15;\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/chicken biryani; q/12;\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/bacon flatbread; q/5;\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/pasta with chicken; q/20;\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.calculateProfit() \u003d\u003d 272.1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void testPopularDishAndProfit() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d3 \u003d \"i/chicken, pasta, sauce; n/pasta with chicken; p/7.00;\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d3);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d4 \u003d \"i/flatbread, bacon, cheese; p/3.00; n/bacon flatbread;\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d4);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Sales s \u003d new Sales();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/bacon pizza; q/15;\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/chicken biryani; q/12;\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/bacon flatbread; q/5;\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/pasta with chicken; q/20;\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.calculateProfit() \u003d\u003d 272.1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.mostPopularDish().equals(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void testNoDish() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Sales s \u003d new Sales();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.calculateProfit() \u003d\u003d 0.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.getSalesMap().isEmpty());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertNull(s.mostPopularDish());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nguan1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguan1": 134
    }
  },
  {
    "path": "src/test/java/stock/StockTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map.Entry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class StockTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test that the ingredient saves the new price supplied whenever the user inputs it."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void addIngredient_AddIngredientWithQuantitySupplied_addNormally() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockA \u003d new Stock(); "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.40)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"tomato\", Optional.of(2), Optional.of(0.50)));     "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(stockA.getStock().get(\"tomato\").second().equals(0.40));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test that the ingredient\u0027s quantity is added up."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void addIngredient_AddIngredientWithQuantitySupplied_sumQuantity() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockB \u003d new Stock();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.40)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"tomato\", Optional.of(2), Optional.of(0.50))); "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(stockB.getStock().get(\"tomato\").first().equals(3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(stockB.getStock().get(\"tomato\").first().equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test against the stock by adding an ingredient of similar name that exists w"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * within the stock."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void addIngredient_AddIngredientOfSimilarName_DuplicateIngredientName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockC \u003d new Stock();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockC.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockC.addIngredient(new Ingredient(\"RiCe\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockC.addIngredient(new Ingredient(\"RICE\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockC.addIngredient(new Ingredient(\"tomato\", Optional.of(2), Optional.of(0.50))); "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createAddStockOutputCopyOne(), printDuplicateIngredientMessage(\"RiCe\", stockC));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test against the stockCopy. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void testAdd_CompareAgainstStockCopy_TrueIfSameContent() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockD \u003d new Stock();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        final Map\u003cString, Pair\u003cInteger, Double\u003e\u003e stockCopy \u003d createStockCopy();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockD.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockD.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockD.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(stockD.getStock().keySet(), (stockCopy.keySet()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test for the case where user provides a quantity to be deleted."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void deleteIngredient_DeleteIngredientWithQuantity_deleteNormally() "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockE \u003d new Stock();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockE.addIngredient(new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockE.deleteIngredient(new Ingredient(\"tomato\", Optional.of(1), Optional.empty()));        "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(0, stockE.getStock().get(\"tomato\").first());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test for the case where user did not provide a quantity to be deleted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void deleteIngredient_DeleteIngredientWithoutQuantity_deleteNormally() "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockF \u003d new Stock();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockF.addIngredient(new Ingredient(\"banana\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockF.deleteIngredient(new Ingredient(\"banana\", Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(stockF.getStock().containsKey(\"banana\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void testDelete_CompareAgainstStockCopy_TrueIfSameContent() "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockG \u003d new Stock();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockG.addIngredient(new Ingredient(\"banana\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockG.deleteIngredient(new Ingredient(\"banana\", Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "       "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(stockG.getStock().containsKey(\"banana\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        final Map\u003cString, Pair\u003cInteger, Double\u003e\u003e stockCopy \u003d createStockCopy();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockG.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockG.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockG.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(stockG.getStock().keySet(), (stockCopy.keySet()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void deleteIngredient_DeleteIngredientNotInStock_deleteNormally() "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"banana\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.deleteIngredient(new Ingredient(\"banana\", Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(stock.getStock().containsKey(\"banana\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.deleteIngredient(new Ingredient(\"milo\", Optional.of(1), Optional.of(0.3)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IngredientNotFoundException infe) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"This ingredient is not in the stock currently!\", infe.getMessage());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_equalMap_bothMapsAreEqual() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        final Stock stockCopyH \u003d new Stock();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopyH.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopyH.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopyH.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(areEqualMap(stock.getStock(), stockCopyH.getStock()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void listStock_listIngredientInDescendingQuantity_listNormally() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createListStockOutputCopyOne(), printlistIngredientToString(stock));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void listStock_ListIngredientInDescendingQuantity_noIngredientFound() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createListStockOutputCopyTwo(), printlistIngredientToString(stock));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void searchStock_searchIngredientInStock_ingredientIsFoundOutput() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createSearchStockOutputCopyOne(), executeSearch(stock, \"tomato\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void searchStock_searchIngredientInStock_ingredientNotFoundOutput() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createSearchStockOutputCopyTwo(), executeSearch(stock, \"apple\"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void searchStock_searchIngredientInStock_testCaseSensitivity() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createSearchStockOutputCopyOne(), executeSearch(stock, \"TOMATO\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void print_printStockWhenIngredientQuantityIsZero_SerialIndexUnchanged() "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.deleteIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.empty()));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String stockCopyOutput \u003d \"1. [10][$1.00] chicken\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [1][$0.50] rice\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"3. [0][$0.50] tomato\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(printStockOutput(stock), stockCopyOutput);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void print_printStockWhenIngredientRemoved_SerialIndexReorder() "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.deleteIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.empty()));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String stockCopyOutput \u003d \"1. [10][$1.00] chicken\""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [1][$0.50] rice\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"3. [0][$0.50] tomato\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(printStockOutput(stock), stockCopyOutput);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.deleteIngredient(new Ingredient(\"tomato\", Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String newStockCopyOutput \u003d \"1. [10][$1.00] chicken\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [1][$0.50] rice\""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(printStockOutput(stock), newStockCopyOutput);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Utility functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createAddStockOutputCopyOne() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d ls"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"Please note that there are other similar ingredient names in the stock.\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d \"You are currently adding: \u0027RiCe\u0027\""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d \"Here are the ingredients in the stock with similar names:\""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"rice\""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"RiCe\""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"RICE\""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d \"You may want to remove the unwanted ingredient names if it is a duplicate.\""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createListStockOutputCopyOne() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Here are the ingredients in the stock currently:\""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"1. [10][$1.00] chicken\""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [3][$0.50] tomato\""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"3. [1][$0.50] rice\""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls); "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d ls;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createListStockOutputCopyTwo() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"There is nothing in the stock currently.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createSearchStockOutputCopyOne() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Here are the ingredients in the stock that matches the keyword:\""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"1. [3][$0.50] tomato\""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls); "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createSearchStockOutputCopyTwo() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"There is no ingredient that matches the keyword given.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns a string representation of output when a search function is executed."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String executeSearch(Stock stock, String keyword) {  "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasIngredientWithKeyword \u003d checkIngredientInStock(keyword, stock);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (!hasIngredientWithKeyword) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (\"There is no ingredient that matches the keyword given.\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d printSearchResult(stock, keyword);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns a string representation of the search results of ingredients within the stock that matches "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the keyword given."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String printSearchResult(Stock stock, String keyword) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d (\"Here are the ingredients in the stock that matches the keyword:\""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                stock.getStock().entrySet());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int ingredientCounter \u003d 1;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (ingredientName.contains(keyword) || ingredientName"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .toLowerCase()"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int quantity \u003d ingredient.getValue().first();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                double price \u003d ingredient.getValue().second();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                outputMessage +\u003d (ls"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ingredientCounter "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \". \""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"[\" "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + quantity "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"]\""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"[$\" "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + String.format(\"%.2f\", price) "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"]\""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" \" "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ingredientName);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ingredientCounter++;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d ls;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function to check against stock if any of the ingredient within the stock"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * matches the keyword supplied by the user."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private boolean checkIngredientInStock(String keyword, Stock stock) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasIngredientWithKeyword \u003d false;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                stock.getStock().entrySet());"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (ingredientName.contains(keyword) || ingredientName"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .toLowerCase()"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                hasIngredientWithKeyword \u003d true;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return hasIngredientWithKeyword;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function to similar implementation to printDuplicateIngredientMessage() in"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Stock class."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private boolean checkForDuplicateIngredientName(String ingredientNameToCheck, Stock stock) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e(stock.getStock().entrySet()); "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasDuplicateIngredientName \u003d false;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (tempList.size() \u003c 1) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return hasDuplicateIngredientName;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                if (ingredientName.toLowerCase().equals(ingredientNameToCheck.toLowerCase())) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    hasDuplicateIngredientName \u003d true;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return hasDuplicateIngredientName;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation to printDuplicateIngredientMessage() in Stock"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * class."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String printDuplicateIngredientMessage(String duplicateIngredientName, Stock stock) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e(stock.getStock().entrySet()); "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d ls;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Please note that there are other similar ingredient names in the stock.\""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"You are currently adding: \u0027\""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + duplicateIngredientName"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u0027\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (ls"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"Here are the ingredients in the stock with similar names:\""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "      "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (ingredientName.toLowerCase().equals(duplicateIngredientName.toLowerCase())) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                outputMessage +\u003d (ingredientName"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (ls"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"You may want to remove the unwanted ingredient names if it is a duplicate.\");"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (ls);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Map\u003cString, Pair\u003cInteger, Double\u003e\u003e createStockCopy() {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Pair\u003cInteger, Double\u003e\u003e stockCopy \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.put(\"tomato\", Pair.of(1, 0.40));"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.put(\"tomato\", Pair.of(2, 0.50));"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.put(\"rice\", Pair.of(1, 0.50));"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.put(\"chicken\", Pair.of(10, 1.00));"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return stockCopy;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns a string representation of the list of ingredients in the stock."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String printStockOutput(Stock stock) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int ingredientCounter \u003d 1;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e(stock.getStock().entrySet());"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Collections.sort(tempList, new Comparator\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e() {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            public int compare(Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e firstEntry, "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e secondEntry) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int firstEntryQuantity \u003d firstEntry.getValue().first();"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int secondEntryQuantity \u003d secondEntry.getValue().first();"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                return secondEntryQuantity - firstEntryQuantity;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }); "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Map.Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d ingredient.getValue().first();"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double price \u003d ingredient.getValue().second();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            output +\u003d (ingredientCounter "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \". \""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"[\" "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + quantity "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"[$\" "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + String.format(\"%.2f\", price) "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" \" "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientName"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "           "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ingredientCounter++;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns true if both maps are the same through deep scanning of its internal hashMap values."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private boolean areEqualMap(Map\u003cString, Pair\u003cInteger, Double\u003e\u003e firstMap, "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e secondMap) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (firstMap.size() !\u003d secondMap.size()) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return firstMap.entrySet().stream()"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "          .allMatch(e -\u003e e.getValue().equals(secondMap.get(e.getKey())));"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A String representation of printing the stock as to when user input \u0027list stock\u0027."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String printlistIngredientToString(Stock stock) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (stock.getStock().isEmpty()) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (\"There is nothing in the stock currently.\");"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (\"Here are the ingredients in the stock currently:\""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d printStockOutput(stock);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d ls;"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 570,
      "SibingWu": 1
    }
  },
  {
    "path": "src/test/java/utils/PairTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class PairTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_pairOfMethod_constructNormally() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cInteger, Double\u003e firstPair \u003d Pair.of(1, 0.5);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cInteger, Double\u003e secondPair \u003d Pair.of(1, 0.5);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(firstPair.first(), secondPair.first());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(firstPair.second(), secondPair.second());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cString, String\u003e thirdPair \u003d Pair.of(\"rice\", \"banana\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cString, String\u003e fourthPair \u003d Pair.of(\"rice\", \"chicken\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(thirdPair.first(), fourthPair.first());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(thirdPair.second().equals(fourthPair.second()));        "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_equals_TrueIfBothPairsHaveSameFirstAndSecondValue() {       "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cInteger, Double\u003e firstPair \u003d Pair.of(1, 0.5);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cInteger, Double\u003e secondPair \u003d Pair.of(1, 0.5);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(firstPair.equals(secondPair));        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_equals_TrueIfBothPairsHaveSameTypings() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cInteger, Double\u003e firstPair \u003d Pair.of(1, 0.5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cInteger, Double\u003e secondPair \u003d Pair.of(1, 0.5);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cString, String\u003e thirdPair \u003d Pair.of(\"rice\", \"banana\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cString, String\u003e fourthPair \u003d Pair.of(\"rice\", \"chicken\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(thirdPair.equals(fourthPair));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(firstPair.equals(thirdPair));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(secondPair.equals(fourthPair));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 46
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "random"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "keyword"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add dish"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add reservation"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete dish"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete reservation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add delete"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1111"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2222"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add delete list search"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search dish"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search reservation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "add dish; n/pizza; i/cheese, sauce; p/7.00;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "list dish;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "add dish; n/rice; i/rice, salt; p/12.00;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "delete dish; n/pizza;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "list dish;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10; p/0.40;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; p/0.40; q/10; i/tomato;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; p/0.40; q/10;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10; p/0.50;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; q/10;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; p/0.50;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; q/10; p/0.50;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; p/0.50;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/LOL; p/0.50;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10; p/0.5;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/-10; p/0.50;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10; p/-0.50;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10; p/LOL;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; tomato; q/10; p/0.50;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; 10; p/0.50;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10; 0.50;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/rice; q/11; p/0.40;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/salt; q/20; p/0.20;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/vege; q/10; p/0.40;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/greenie; q/0; p/0.40;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/toxic greens; q/1; p/0.40;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/curry; q/0; p/$0.40;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; curry; q/0; p/0.40;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/curry; 0; p/0.40;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/curry; q/0; 0.40;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; curry; 0; p/0.40;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/curry; 0; 0.40;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; curry; 0; 0.40;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/CuRrY; q/10; p/1.40;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/pepper; q/10; p/1.00;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/PePPer; q/10; p/1.00;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/PEPPER; q/10; p/1.00;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/; q/10; p/1.00;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/water; q/; p/1.00;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/water; q/10; p/;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/water; q/10; p/$$$$;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list stock"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list stock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; i/tomato; q/1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; q/1; i/tomato;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; i/tomato; q/9;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list stock"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list stock;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; green"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; i/tomato;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; q/10;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; i/tomato; q/LOL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; i/tomato; q/-10;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; tomato; q/1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; i/tomato; 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list stock;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock;      "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; tomato"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; rice"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; o"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; k/tomato;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; k/tomato"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; k/GReeNie;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; k/toxic greens;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; toxic greensk/;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; k/   "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; k/"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; k  "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; q/e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; /e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "list reservation;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "list served reservation;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "list unserved reservation;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/Peter; d/2020-03-12 12:00; n/3; c/98955555;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/Mary; d/2020-03-11 12:00; n/8; c/99998888;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/David; d/2020-03-12 12:00; n/9; c/98887777;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/Lisa; m/no spicy food please; d/2020-03-13 12:00; n/3; c/98889999;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/David d/2020-03-12 12:00; n/3; c/98887777;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/David; d/2020-03-12 12:00; c/98887777;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/David; d/2020-03-1 12:00; n/3; c/98887777;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/David; d/2020-03-10 12:00; n/0; c/98887777;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/; d/2020-03-12 12:00    ; n/1; c/;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/Peter; d/2020-03-12 12:00    ; n/1; c/;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list reservation"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "list reservation;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete reservation; r/0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/1.0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/1.2;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/1"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/-1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/5;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list reservation"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "list reservation;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "search reservation; r/1.3;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "search reservation; r/1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "search reservation; r/1; d/2020-03-13;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "search reservation; d/2020-03-12"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "search reservation; d/2020-03-12;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "search reservation; r/5;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "search reservation;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "mark reservation; r/2.3;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "mark reservation; r/5;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "mark reservation; r/-1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "mark reservation; r/4;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "mark reservation; r/0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "mark reservation; r/1;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/4;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "list served reservation"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "list served reservation;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "list unserved reservation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "list unserved reservation;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "list reservation"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "list reservation;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nguan1"
        },
        "content": "sell dish; d/rice; q/5;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nguan1"
        },
        "content": "profit"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nguan1"
        },
        "content": "popular"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "clear reservation"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "clear reservation;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "clear stock"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "clear stock;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 94,
      "gmuthu17": 5,
      "SibingWu": 47,
      "nguan1": 3
    }
  },
  {
    "path": "text-ui-test/report.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Menu Items"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. Name: rice       \t Price: $12.00      \t Ingredients: rice, salt "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Current Stock"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. pepper \t $1.00 10 "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "2. CuRrY \t $1.40 10 "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "3. toxic greens \t $0.40 1 "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "4. salt \t $0.20 20 "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "5. greenie \t $0.40 0 "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "6. PEPPER \t $1.00 10 "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "7. vege \t $0.40 10 "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "8. PePPer \t $1.00 10 "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "9. rice \t $0.40 11 "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Reservations"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 18
    }
  }
]
