[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    mainClassName \u003d \"Main\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 11,
      "-": 39
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Doe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguan1"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Sloe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguan1"
        },
        "content": "bye"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "hello"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 1,
      "-": 8,
      "nguan1": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [1. Design \u0026 Implementation](#design-implementation)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [1.1. [Proposed] Search stock feature](#search-stock)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [1.2. [Proposed] List stock in descending quantities](#list-stock)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [2. Product Scope](#product-scope)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [3. User Stories](#user-stories)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [4. Non-Functional Requirements](#nonfunctional-requirement)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [5. Glossary](#glossary)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"design-implementation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 1. Design \u0026 Implementation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"search-stock\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 1.1 [Proposed] Search stock feature"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 1.1.1 Proposed implementation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "In the restaurant daily report, users can search against the stock category by supplying a keyword."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Given below is an example usage scenario and how the search mechanism behaves at each step."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Step 1. The user launches the application for the first time. An empty `stock` will be initialized."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Step 2. The user executes `add stock; i/tomato; q/10; p/$0.40;` command to add a tomato ingredient into the `stock`. Further, the user may add more ingredients into the current `stock`. Suppose the user executes `add stock; i/potato; q/5; p/$0.40;` and `add stock; i/rice; q/3; p/$0.40;` as well."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Step 3. The user can now search against the current `stock` to see if an ingredient is stored in the `stock`. The user now executes `search stock; tomato`, which will display the following result in the image. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/77285807-d9d6f580-6d0c-11ea-8716-b4cb55877662.PNG\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "The following sequence diagram shows how the search operation works:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/77437099-36c2d080-6e1f-11ea-8241-9000a65e3bb6.png\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 1.1.2 Design Considerations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##### Aspect: How search stock executes"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 1 (current choice)**: List all ingredients that contains the keyword supplied."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Pros: Easy to implement."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Cons: All ingredients containing the keyword will be listed. This means that even if the keyword doesn\u0027t make sense, such as supplying \"to\", both potato and tomato will be listed since it contains \"to\"."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 2**: The user supplies the exact ingredient name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Pros: The ingredient that matches exactly with the keyword supplied will be listed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Cons: The user have to input the ingredient name correctly each time he/she uses the search stock feature."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##### Aspect: Data structure to support the search stock feature."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 1 (current choice)**: Use a `List` to store all possible ingredient names that contain the keyword supplied."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Pros: Easy to understand."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Cons: The `List` is derived by converting the existing stock (which is a `HashMap`) into an ArrayList. In order to print out the ingredient\u0027s name, quantity and price, methods such as `getKey()` and `getValue()` have to be used."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 2**: Use the existing `HashMap` data structure employed by the `stock` object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Pros: We do not need to create a new `List` to display the relevant results."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Cons: Iterating a HashMap can be done by converting it to an EntrySet or by using an iterator. These, compared to `List`, is much less straightforward."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"list-stock\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 1.2 [Proposed] List stock ingredients in descending quantity"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 1.2.1 Proposed implementation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "In the restaurant daily report, users can view all the ingredients presently in the stock by supplying the input `list stock`. The ingredients will be ordered in descending quantities, that is, the ingredient that has the highest quantity will be listed first and vice versa."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Given below is an example usage scenario and how the listing mechanism behaves at each step."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Step 1. The user launches the application for the first time. An empty `stock` will be initialized."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Step 2. The user executes `add stock; i/tomato; q/10; p/$0.40;` command to add a tomato ingredient into the `stock`. Further, the user may add more ingredients into the current `stock`. Suppose the user executes `add stock; i/potato; q/0; p/$0.40;` and `add stock; i/rice; q/55; p/$0.40;` as well."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Step 3. The user can now view the current `stock` to see what ingredients are there in the stock. The user now executes `list stock`, which will display the following result in the image. In this case, `rice` has the highest quantity of `55`, which is listed first as compared to `potato`, which has the lowest quantity of `0`. This can be seen from the image below."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/77300028-5cb97980-6d28-11ea-9a27-7d118de3431f.PNG\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "The following class diagram shows how the listing operation works:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/77317533-54703700-6d46-11ea-8fa7-1085ce028f55.png\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* 1. When the user first runs the application, the Main object is initialized. The Main object then initializes the ui and the stock object in its `start()` method. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* 2. Through its `runCommandUntilExit()` method, it then instructs the ui object to scan and read for user input. A CommandParser object is then initialized to parse this user input into a command."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* 3. The CommandParser object detects `list stock` as the user input, in which it will then create a ListStockCommand object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* 4. The ListStockCommand object is then executed via its `execute(stock)` method, which takes in the stock object initialized previously and instruct it to list all ingredients through its `listIngredient()` method."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* 5. Within  the `listIngredient()` method, a temporary `List` data structure is used to convert from the `HashMap` in the stock object. The list is then sorted by supplying a `new Comparator` that compares the ingredient\u0027s quantity. Afterwards, the sorted list is then printed to be displayed to the user."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "#### 1.2.2 Design Considerations"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##### Aspect: How listing stock executes"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 1 (current choice)**: List all ingredients in the stock in descending quantities."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Pros: The user is able to tell which ingredients are the least/most quickly. This can help to facilitate quicker decision making in terms of what ingredients to re-stock."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Cons: The current ingredients are listed in a specific ordering. A change in the ordering requirement would mean that a change in the implementation of the `comparator`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 2**: List all ingredients in the stock without any ordering."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Pros: Easy to implement."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Cons: Hard to identity which ingredients that require re-stocking quickly."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##### Aspect: Data structure to support the search stock feature."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 1 (current choice)**: Use a `List` to store all possible ingredient names."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Pros: Easy to understand."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Cons: The `List` is derived by converting the existing stock (which is a `HashMap`) into an ArrayList. In order to print out the ingredient\u0027s name, quantity and price, methods such as `getKey()` and `getValue()` have to be used."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Alternative 2**: Use the existing `HashMap` data structure employed by the `stock` object."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Pros: We do not need to create a new `List` to display the relevant results."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "+ Cons: Iterating a HashMap can be done by converting it to an EntrySet or by using an iterator. Sorting it, however, as compared to `List`, is much less straightforward."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"product-scope\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nguan1"
        },
        "content": "### 1.3 [Proposed] Generate profit for the day"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nguan1"
        },
        "content": "#### 1.3.1 Proposed Implementation"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nguan1"
        },
        "content": "In the restaurant daily report, the user can input the amount of items sold each day and a total profit will be generated, when the user inputs `profit`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Below is an example usage scenario for the user."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Step 1. The user opens the program and an empty `sales` is initalized."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Step 2. The user can add sold items by inputting `sell dish; d/DISH; q/QUANTITY`. An example would be `sell dish; d/pasta; q/15;`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nguan1"
        },
        "content": "The user can input as many sales as they like as long as the dish exists in the menu."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Step 3. The user can generate the profit by inputting `profit`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 2. Product Scope"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the target user profile}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"user-stories\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 3. User Stories"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"nonfunctional-requirement\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 4. Non-Functional Requirements"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"glossary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 5. Instructions for Manual Testing"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 118,
      "-": 30,
      "nguan1": 11
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* [1. Introduction](#introduction)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* [2. Quick Start](#quick-start)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* [3. Features](#features)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + [3.1. Add:](#add) `add`"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + [3.2. Delete:](#delete) `delete`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    + [3.3. List:](#list) `list`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.4. Search:](#search) `search`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [4. Command Summary](#command-summary)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"introduction\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Restaurant Daily Report is a CLI app that generates a whitepaper, "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "summarizing the internals of a restaurant. It’s aim is to provide "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "restaurant owners a quick overview of how their restaurant is performing "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "daily so that restaurant owners can better manage their business operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "As such, the daily report will include these categories:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Menu: Information on all menu items"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Reservation: Information on number of reservations a day"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Stock: Information on all food items/quantities/prices"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"quick-start\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2. Download the latest version of `Restaurant Report` from [here](https://github.com/AY1920S2-CS2113-T14-4/tp)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Add menu items, ingredients and reservations."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* words in UPPERCASE: parameters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* parameters in [ ]: optional parameters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* parameters in { | }: at least one of them"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"add\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "### Add"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Add menu items, ingredients, and reservations."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### Add menu item: add dish"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `add dish; n/NAME; [i/INGREDIENT1, INGREDIENT2, ...];`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Example: `add dish; n/bacon pizza; i/cheese, bacon;`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### Add ingredient into stock: add stock"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `add stock; i/INGREDIENT1; q/QUANTITY; p/PRICE;`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Example: `add stock; i/tomato; q/10; p/$0.50;`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### Add reservation into list: add reservation "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `add reservation; p/CONTACT_PERSON_NAME; d/DATE; n/NUMBER_OF_GUESTS; c/CONTACT; [m/COMMENTS];`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Example: `add reservation; p/Peter; d/2020-03-12 12:00; n/3; c/98955555;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "*The `DATE` must be in **yyyy-mm-dd HH:mm** format. The `NUMBER_OF_GUESTS` must be an integer.*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"delete\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "### Delete"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Delete menu items, ingredients and reservations."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### Delete menu item: delete dish"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `delete dish; n/NAME;`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Example: `delete dish; n/bacon pizza;`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### Delete stock of ingredient: delete stock"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Format: `delete stock; i/INGREDIENT; q/QUANTITY;` or"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Format: `delete stock; i/INGREDIENT;`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Example: `delete stock; i/tomato; q/1;`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "#### Mark reservation as invalid: delete reservation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `delete reservation; r/NUMBER_OF_RESERVATION;`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Example: `delete reservation; r/12;`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "#### Mark reservation as served: mark reservation"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `mark reservation; r/NUMBER_OF_RESERVATION;`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Example: `mark reservation; r/4;`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "\u003ca name\u003d\"list\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "### List"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "List items in the menu, stock and reservations."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* List menu : `list dish`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* List stock : `list stock`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* List all reservation : `list reservation`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* List served reservation: `list served reservation`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* List unserved reservation: `list unserved reservation`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"search\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### Search"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Search items in the menu, stock and reservations."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Search stock : `search stock; KEYWORD`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Search reservation: `search reservation; {r/RESERVATION_NUMBER; | d/DATE;}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  * Example: `search reservation; r/1;`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  * Example: `search reservation; d/2020-02-02;`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "  * Example: `search reservation; r/0; d/2020-02-02;`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"command-summary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nguan1"
        },
        "content": "### Sales"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nguan1"
        },
        "content": "Add daily sales and calculate profit"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nguan1"
        },
        "content": "#### Sell item : sell item"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Format: `sell dish; d/DISH; q/QUANTITY;`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Example: `sell dish; d/pasta; q/10;`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nguan1"
        },
        "content": "#### Generate Profit : calculate profit"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Format: `profit`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nguan1"
        },
        "content": "#### Find most popular dish : popular"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nguan1"
        },
        "content": "* Format: `popular`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `add dish; n/NAME; [i/INGREDIENT1, INGREDIENT2, ...];`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `add stock; i/INGREDIENT1; q/QUANTITY; p/PRICE;`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `add reservation; r/NUMBER_OF_RESERVATIONS;`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `delete dish; n/NAME;`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Format: `delete stock; i/INGREDIENT; q/QUANTITY;`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Format: `delete stock; i/INGREDIENT;`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "* Format: `delete reservation; r/NUMBER_OF_RESERVATIONS;`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `mark reservation; r/NUMBER_OF_RESERVATIONS`;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `list dish`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `list stock`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `list reservation`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `list served reservation`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "* Format: `list unserved reservation`"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 16,
      "gmuthu17": 52,
      "-": 28,
      "SibingWu": 22,
      "nguan1": 13
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import sales.Sales;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import utils.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Entry point of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Initializes the program and takes command from the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Stock stock;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private ReservationList reservations;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private Menu menu;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private Sales sales;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Driver code for the program. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static void main(String... args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        new Main().run(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Runs the program until the user terminates it. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void run(String[] args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        start(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        runCommandUntilExit();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Sets up the required objects and shows a welcome message. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void start(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.stock \u003d new Stock();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.menu \u003d new Menu();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.reservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.sales \u003d new Sales();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Read user\u0027s input, parse it into readable command format and execute it. */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void runCommandUntilExit() {                     "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            System.out.println(\"Input next command:\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String userInput \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new CommandParser().parseCommand(userInput,this.menu,this.stock,this.reservations,this.sales, this.ui);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Exits the program with a goodbye message. */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 45,
      "nguan1": 13,
      "SibingWu": 1
    }
  },
  {
    "path": "src/main/java/Sales/Sales.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguan1"
        },
        "content": "package sales;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import dish.Profit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.EmptyStockException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.IngredientMissingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.NegativeProfitException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguan1"
        },
        "content": "public class Sales {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private HashMap\u003cDish,Integer\u003e soldDishes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public Sales() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.soldDishes \u003d new HashMap\u003cDish,Integer\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void addSale(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        //Format: `d/DISH; q/QUANTITY;`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String[] splitString \u003d command.split(\";\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String dishName \u003d splitString[0].substring(splitString[0].indexOf(\"d/\") + 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        int quantity \u003d Integer.parseInt(splitString[1].substring(splitString[1].indexOf(\"q/\") + 2));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Dish dish \u003d Menu.getDishMap().get(dishName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        if (dish \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            System.out.println(\"Dish doesn\u0027t exist\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            //System.out.print(\"dish: \" + dishName + \" quantity: \" + quantity );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            soldDishes.put(dish,quantity);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public double calculateProfit()  {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        double profit \u003d 0.0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        boolean profitError \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        for (Dish item: soldDishes.keySet()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            int numberSold \u003d soldDishes.get(item);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            double dishProfit \u003d 0.0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                dishProfit \u003d new Profit(item).getProfit() * numberSold;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            } catch (NegativeProfitException | EmptyStockException | IngredientMissingException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                System.out.println(\"There has been an error in calculating profit.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                System.out.println(\"Check if profit is positive, if there is stock and \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                        + \"ingredients for this dish:\" + item);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                profitError \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            profit +\u003d dishProfit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        if (profitError \u003d\u003d false) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            System.out.println(\"The total profit for the day is: \" + profit);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        //Return statement is for testing purposes"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        return profit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public String mostPopularDish() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Dish popular \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        int currentMaxCount \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        for (Dish item: soldDishes.keySet()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            if (soldDishes.get(item) \u003e currentMaxCount) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                popular \u003d item;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                currentMaxCount \u003d soldDishes.get(item);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        if (popular \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            System.out.println(\"There are no dishes\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            System.out.println(\"The most popular dish today is: \" + popular.getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            System.out.println(\"This has sales of: \" + currentMaxCount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        return popular.getName();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public HashMap\u003cDish, Integer\u003e getSalesMap() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        return this.soldDishes;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nguan1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguan1": 83
    }
  },
  {
    "path": "src/main/java/commands/AddDishCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class AddDishCommand extends Menu {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Adds a dish to the menu based on the input string."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string that include dish name and ingredients in no specific order"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static void addDish(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ArrayList\u003cString\u003e ingredients \u003d parseIngredients(input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String name \u003d parseName(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Double price \u003d parsePrice(input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Dish d \u003d new Dish(name, ingredients, price);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu.getDishMap().put(name, d);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Parses ingredients from string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input string of ingredients"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return ArrayList of ingredients"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static ArrayList\u003cString\u003e parseIngredients(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ArrayList\u003cString\u003e ingredients \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(input.indexOf(\"i/\") + 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(0, input.indexOf(\";\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String[] splitString \u003d input.split(\",\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        for (String str: splitString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            ingredients.add(str.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Parses name from input string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return name of dish"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static String parseName(String input) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(input.indexOf(\"n/\") + 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(0, input.indexOf(\";\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Parse price from input string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return price of dish"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static double parsePrice(String input) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(input.indexOf(\"p/\") + 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        input \u003d input.substring(0, input.indexOf(\";\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return Double.parseDouble(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 59
    }
  },
  {
    "path": "src/main/java/commands/AddReservationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.DELIMITER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_DATE_MARKER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_PERSON_MARKER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_NUM_MARKER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_CONTACT_MARKER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_COMMENT_MARKER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/* Command object for \"add reservation\" command */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class AddReservationCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int numberOfGuests;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String contact;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String comments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int reservationNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public AddReservationCommand(String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Adds a reservation into the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            parseInput(this.description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            // reservationNumber"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.reservationNumber \u003d reservations.getSize();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            Reservation reservation \u003d new Reservation(reservationNumber, name, date, numberOfGuests, contact);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (comments !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservation.setComments(this.comments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservations.addReservation(reservation);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(String.format(\"Reservation[%d] has been added into the list\", this.reservationNumber));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please enter a valid positive integer.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please follow the date time format strictly: yyyy-MM-dd HH:mm; eg. 2000-01-01 12:00\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Parses the input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param description Input from the user excluding the command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws InputMissingException If there is input missing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws DelimiterMissingException If there is delimiter missing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) throws InputMissingException, DelimiterMissingException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        boolean delimiterMissing;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        String[] markers \u003d {RES_PERSON_MARKER, RES_DATE_MARKER, RES_NUM_MARKER,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            RES_CONTACT_MARKER, RES_CONTACT_MARKER, RES_COMMENT_MARKER};"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int namePos \u003d description.indexOf(RES_PERSON_MARKER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (namePos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"name \" + RES_PERSON_MARKER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int nameEndPos \u003d description.indexOf(DELIMITER, namePos);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (nameEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        delimiterMissing \u003d hasDelimiterInBetween(namePos + RES_PERSON_MARKER.length(), nameEndPos, "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                markers, description);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (delimiterMissing) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.name \u003d description.substring(namePos + RES_PERSON_MARKER.length(), nameEndPos).trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int datePos \u003d description.indexOf(RES_DATE_MARKER);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (datePos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"date \" + RES_DATE_MARKER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int dateEndPos \u003d description.indexOf(DELIMITER, datePos);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (dateEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        delimiterMissing \u003d hasDelimiterInBetween(datePos + RES_DATE_MARKER.length(), dateEndPos, "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                markers, description);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (delimiterMissing) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.date \u003d LocalDateTime.parse("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                description.substring(datePos + RES_DATE_MARKER.length(), dateEndPos).trim(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // numberOfGuests"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberPos \u003d description.indexOf(RES_NUM_MARKER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"number of guests \" + RES_NUM_MARKER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberEndPos \u003d description.indexOf(DELIMITER, numberPos);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        delimiterMissing \u003d hasDelimiterInBetween(numberPos + RES_NUM_MARKER.length(), numberEndPos,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                markers, description);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (delimiterMissing) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.numberOfGuests \u003d Integer.parseInt(description.substring("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                numberPos + RES_NUM_MARKER.length(), numberEndPos).trim());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberOfGuests \u003c\u003d 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new NumberFormatException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // contact"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int contactPos \u003d description.indexOf(RES_CONTACT_MARKER);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (contactPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"contact \" + RES_CONTACT_MARKER);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int contactEndPos \u003d description.indexOf(DELIMITER, contactPos);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (contactEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        delimiterMissing \u003d hasDelimiterInBetween(contactPos + RES_CONTACT_MARKER.length(), contactEndPos,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                markers, description);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (delimiterMissing) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.contact \u003d description.substring("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                contactPos + RES_CONTACT_MARKER.length(), contactEndPos).trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // comments"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int commentsPos \u003d description.indexOf(RES_COMMENT_MARKER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (commentsPos \u003d\u003d -1) { // no comments"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int commentsEndPos \u003d description.indexOf(DELIMITER, commentsPos);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (commentsEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        delimiterMissing \u003d hasDelimiterInBetween(commentsPos + RES_COMMENT_MARKER.length(), commentsEndPos,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                markers, description);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (delimiterMissing) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.comments \u003d description.substring("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                commentsPos + RES_COMMENT_MARKER.length(), commentsEndPos).trim();        "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 3,
      "gmuthu17": 3,
      "SibingWu": 172
    }
  },
  {
    "path": "src/main/java/commands/AddStockCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class focuses on the \u0027add\u0027 functionality of the application"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * on the stock category."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class AddStockCommand extends StockCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The ingredient to be added into the stock. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Ingredient ingredientToAdd;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A convenience constructor that contains information of an ingredient stored in a "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * hashMap."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not meet the required"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      format by specifying i/INGREDIENT; q/QUANTITY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      p/PRICE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public AddStockCommand(String ingredientInput) throws InvalidStockCommandException {  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredientInfo \u003d "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parseIntoAddIngredientArgs(ingredientInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientInfo"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .entrySet()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(item -\u003e item.getKey())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int quantity \u003d ingredientInfo.get(ingredientName).first();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        double price \u003d ingredientInfo.get(ingredientName).second();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.ingredientToAdd \u003d new Ingredient(ingredientName, "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                Optional.of(quantity), Optional.of(price));               "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses the user\u0027s input into readable arguments that will be used to construct an "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Ingredient object. The arguments are then stored in a HashMap. For example: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * \u0027 i/tomato; q/10; p/$0.50;\u0027 will store \u0027tomato\u0027 as the ingredient name, \u002710\u0027 as"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the ingredient quantity and \u0027$0.50\u0027 as the ingedient\u0027s price. Note that the "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * constructor of an Ingredient is new Ingredient(NAME, QUANTITY, PRICE)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not meet the required"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      format by specifying i/INGREDIENT; q/QUANTITY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      p/PRICE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parseIntoAddIngredientArgs("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String fullInputLine) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredientInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArgs \u003d fullInputLine.split(\";\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cString\u003e ingredientName \u003d Optional.empty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cInteger\u003e quantity \u003d Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cDouble\u003e price \u003d Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (String argument : wordArgs) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedArg \u003d argument.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedArg.contains(\"i/\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ingredientName \u003d Optional.of(parseIngredientName(trimmedArg));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"q/\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                quantity \u003d Optional.of(parseIngredientQuantity(trimmedArg));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"p/\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                price \u003d Optional.of(parseIngredientPrice(trimmedArg));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"The user\u0027s input given cannot\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" be parsed into ingredient arguments.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkValidParsedIngredientArguments(ingredientName, quantity, price);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        ingredientInfo.put(ingredientName.get(), Pair.of(quantity.get(), price.get()));    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientInfo;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Checks the parsed ingredients\u0027 arguments if it meets the correct format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not meet the required"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      format by specifying i/INGREDIENT; q/QUANTITY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      p/PRICE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkValidParsedIngredientArguments(Optional\u003cString\u003e ingredientName, "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cInteger\u003e quantity, Optional\u003cDouble\u003e price) "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (ingredientName.isEmpty() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify an ingredient\u0027s name, \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity to be added and its price!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isPresent() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input is missing both the ingredient\u0027s \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity to be added and the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify both the ingredient\u0027s \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"name and the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify both the ingredient\u0027s name \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"and the quantity to be added!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isPresent() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isPresent() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isPresent()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify the quantity of the ingredient to be added!\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isPresent()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify the ingredient\u0027s name!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assert (ingredientName.isPresent() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isPresent());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute(Stock stock) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(ingredientToAdd);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"Ingredient \" "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ingredientToAdd.getIngredientName() "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" successfully added!\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A utility function to facilitate testing of execute(). */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String printExecuteOutput(Stock stock) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(ingredientToAdd);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Ingredient \" "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ingredientToAdd.getIngredientName() "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" successfully added!\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Ingredient getIngredientInAddCommand() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.ingredientToAdd;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 147,
      "gmuthu17": 1,
      "SibingWu": 5
    }
  },
  {
    "path": "src/main/java/commands/DeleteDishCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class DeleteDishCommand extends Menu {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Removes dish from menu."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param name name of dish to remove"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static void deleteDish(String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu.getDishMap().remove(name);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 15
    }
  },
  {
    "path": "src/main/java/commands/DeleteStockCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.IngredientNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class focuses on the \u0027delete\u0027 functionality of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class DeleteStockCommand extends StockCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Ingredient ingredientToDelete;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A convenience constructor that contains information of an ingredient "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * stored in a hashMap."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public DeleteStockCommand(Map\u003cString, Optional\u003cInteger\u003e\u003e ingredientInfo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientInfo"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .entrySet()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(item -\u003e item.getKey())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cInteger\u003e quantity \u003d ingredientInfo.get(ingredientName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.ingredientToDelete \u003d new Ingredient(ingredientName, quantity, Optional.empty());               "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A convenience constructor that contains information of an ingredient "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * stored in a hashMap."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not meet "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      the required format by specifying "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      i/INGREDIENT; q/QUANTITY;                                    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public DeleteStockCommand(String ingredientInput) "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Optional\u003cInteger\u003e\u003e ingredientInfo \u003d "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parseIntoDeleteIngredientArgs(ingredientInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientInfo"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .entrySet()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(item -\u003e item.getKey())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cInteger\u003e quantity \u003d ingredientInfo.get(ingredientName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.ingredientToDelete \u003d new Ingredient(ingredientName, quantity, Optional.empty());               "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses the user\u0027s input into readable arguments that will be used "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * to construct an Ingredient object. The arguments are then stored "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * in a HashMap. For example: \u0027 i/tomato; q/10;\u0027 will store \u0027tomato\u0027 "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * as the ingredient name, \u002710\u0027 as the ingredient quantity to be "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * deleted. Note that the specification of the ingredient\u0027s "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * quantity is optional."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      meet the required format by "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      specifying i/INGREDIENT; "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      q/QUANTITY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Map\u003cString, Optional\u003cInteger\u003e\u003e parseIntoDeleteIngredientArgs("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String fullInputLine) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Optional\u003cInteger\u003e\u003e ingredientInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArgs \u003d fullInputLine.split(\";\");       "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cString\u003e ingredientName \u003d Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cInteger\u003e quantity \u003d Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (String argument : wordArgs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedArg \u003d argument.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedArg.contains(\"i/\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ingredientName \u003d Optional.of(parseIngredientName(trimmedArg));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"q/\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                quantity \u003d Optional.of(parseIngredientQuantity(trimmedArg));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"The user\u0027s input given cannot\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" be parsed into ingredient arguments.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkValidParsedIngredientArguments(ingredientName, quantity);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        ingredientInfo.put(ingredientName.get(), quantity);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientInfo;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Checks the parsed ingredients\u0027 arguments if it meets the correct format."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the user\u0027s input does not meet the required"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      format by specifying i/INGREDIENT; q/QUANTITY;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkValidParsedIngredientArguments(Optional\u003cString\u003e ingredientName,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cInteger\u003e quantity) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (ingredientName.isEmpty() \u0026\u0026 quantity.isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input must specify\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" an ingredient name.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input must specify\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" an ingredient name.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assert (ingredientName.isPresent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute(Stock stock) {    "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IngredientNotFoundException infe) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(\"Ingredient \" "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + this.ingredientToDelete.getIngredientName() "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" not found and cannot be deleted!\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(createDeleteResultMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Creates a message to notify the user of the deletion. */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createDeleteResultMessage() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasQuantitySpecified \u003d ingredientToDelete.isQuantitySpecified();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"Ingredient \" "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientToDelete.getIngredientName()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + (hasQuantitySpecified "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            ? \" reduced by \" "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            + ingredientToDelete.getIngredientQuantity() + \"!\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            : \" deleted from the stock!\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A utility function to facilitate testing of execute(). */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String printExecuteOutput(Stock stock) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IngredientNotFoundException infe) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (\"Ingredient \" "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientToDelete.getIngredientName() "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" not found and cannot be deleted!\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (createDeleteResultMessage());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Ingredient getIngredientInDeleteCommand() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.ingredientToDelete;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 170,
      "gmuthu17": 1,
      "SibingWu": 1
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguan1"
        },
        "content": "///**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguan1"
        },
        "content": "// * Represents the \u0027Exit\u0027 functionality of a command. This command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguan1"
        },
        "content": "// * serves to exit the program upon executed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguan1"
        },
        "content": "// *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguan1"
        },
        "content": "// */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//    /** Returns true if a Command is an ExitCommand. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//        return command instanceof ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//        return new CommandResult(\"Program Exited\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguan1"
        },
        "content": "//"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 1,
      "gmuthu17": 1,
      "nguan1": 18
    }
  },
  {
    "path": "src/main/java/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguan1"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguan1"
        },
        "content": "public class HelpCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public static void execute() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"These are the commands supported by the system:\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        addCommands();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        deleteCommands();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        listCommands();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        searchCommands();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private static void addCommands() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Add Commands:\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Add Dish: add dish; n/NAME; p/PRICE; [i/INGREDIENT1, INGREDIENT2, ...];\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Add Stock: add stock; i/INGREDIENT1; q/QUANTITY; p/PRICE;\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Add Reservation: add reservation; p/CONTACT_PERSON_NAME;\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                + \" d/DATE; n/NUMBER_OF_GUESTS; c/CONTACT; [m/COMMENTS];\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private static void deleteCommands() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Delete Commands:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Delete Dish: delete dish; n/NAME;\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Delete Stock (with quantity): delete stock; i/INGREDIENT; q/QUANTITY;\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Delete Stock (without quantity): delete stock; i/INGREDIENT;\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Void Reservation: delete reservation; r/NUMBER_OF_RESERVATION;\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"Mark Reservation as Served: mark reservation; r/NUMBER_OF_RESERVATION\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private static void listCommands() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"List Commands:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"List Menu: list dish\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"List Stock: list stock\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"List Reservation: list reservation\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"List Served Reservation: list served reservation\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"List Unserved Reservation: list unserved reservation\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    private static void searchCommands() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Search Commands:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Search Stock: search stock; keyword\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        System.out.println(\"Search Reservation: search reservation; {r/NUMBER_OF_RESERVATION; | d/DATE;}\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguan1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguan1": 43,
      "SibingWu": 4
    }
  },
  {
    "path": "src/main/java/commands/ListDishCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class ListDishCommand extends Menu {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Prints out dishes from hashmap."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static void printDishes() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        for (String name: Menu.getDishMap().keySet()) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            String ingredientList \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            for (String str: Menu.getDishMap().get(name).getIngredients()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                ingredientList +\u003d str + \", \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            ingredientList \u003d ingredientList.substring(0, ingredientList.length() - 2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Name: \" + name + \"; Ingredients: \" + ingredientList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 20
    }
  },
  {
    "path": "src/main/java/commands/ListReservationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Command object for \"list reservations\" command. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class ListReservationCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Lists all reservations, including served, unserved, and invalid reservations."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        for (int i \u003d 0; i \u003c reservations.getSize(); i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(reservations.getReservation(i).toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 2,
      "SibingWu": 23,
      "nguan1": 1
    }
  },
  {
    "path": "src/main/java/commands/ListServedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static utils.Constants.SERVED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Command object for \"list served reservations\" command. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class ListServedCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Lists all served reservations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        for (int i \u003d 0; i \u003c reservations.getSize(); i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (!reservations.getReservation(i).getStatus().equals(SERVED)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(reservations.getReservation(i).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 3,
      "SibingWu": 28
    }
  },
  {
    "path": "src/main/java/commands/ListStockCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class focuses on the \u0027list\u0027 functionality of the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class ListStockCommand extends StockCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute(Stock stock) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.listIngredient();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"All ingredients listed successfully!\");     "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 15,
      "gmuthu17": 1
    }
  },
  {
    "path": "src/main/java/commands/ListUnservedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static utils.Constants.NOT_SERVED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Command object for \"list unserved reservations\" command. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class ListUnservedCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Lists all unserved reservations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        for (int i \u003d 0; i \u003c reservations.getSize(); i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (!reservations.getReservation(i).getStatus().equals(NOT_SERVED)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(reservations.getReservation(i).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 3,
      "SibingWu": 28
    }
  },
  {
    "path": "src/main/java/commands/MarkReservationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static utils.Constants.DELIMITER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static utils.Constants.RES_INDEX_MARKER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Command object for \"mark reservation\" command. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class MarkReservationCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int reservationNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int validMaxRange;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public MarkReservationCommand(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Specifies the index number of the target reservations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Marks the reservation as done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            validMaxRange \u003d reservations.getSize() - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            parseInput(this.description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            // mark the reservation as done"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservations.markReservationAsServed(reservationNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(String.format(\"Successfully mark Reservation[%d] as served\", this.reservationNumber));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please enter a valid positive integer.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Parses the input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param description Input from the user excluding the command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws InputMissingException If there is input missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws DelimiterMissingException If there is delimiter missing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) throws InputMissingException, DelimiterMissingException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // specifies the reservation number"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberPos \u003d description.indexOf(RES_INDEX_MARKER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"reservation number \" + RES_INDEX_MARKER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberEndPos \u003d description.indexOf(DELIMITER, numberPos);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.reservationNumber \u003d Integer.parseInt(description.substring(numberPos + RES_INDEX_MARKER.length(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                numberEndPos + 1).trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (this.reservationNumber \u003c 0 || this.reservationNumber \u003e validMaxRange) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new NumberFormatException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4,
      "SibingWu": 69
    }
  },
  {
    "path": "src/main/java/commands/QuitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguan1"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class encapsulates the \u0027exit\u0027 function of the program. When this command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * is executed, a writeToFile operation will be performed. All information on "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * menu, stock and reservations will be saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": "public class QuitCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Executes the QuitCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public static void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"The menu, stock and reservations have been saved to report.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"The program is now exiting\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguan1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 10,
      "nguan1": 9
    }
  },
  {
    "path": "src/main/java/commands/ReservationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.ReservationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public abstract class ReservationCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public abstract void execute(ReservationList reservations, Ui ui);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected abstract void parseInput(String description) throws ReservationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Checks if there is another marker between the subcommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Checks for delimiter missing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param startPos Starting position after the original marker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param endPos Position of the delimiter."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param markers Markers involved."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param description Raw description of the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return True if there is another marker, False otherwise."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected boolean hasDelimiterInBetween(int startPos, int endPos, String[] markers, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        String targetSubstring \u003d description.substring(startPos, endPos);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        for (String marker: markers) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (targetSubstring.contains(marker)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 2,
      "SibingWu": 29
    }
  },
  {
    "path": "src/main/java/commands/SearchDishCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class SearchDishCommand extends Menu {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Searches menu for dish names containing keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param keyword keyword to search for"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static HashMap\u003cString, Dish\u003e searchDish(String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap\u003cString, Dish\u003e matchingDishes \u003d new HashMap\u003cString, Dish\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        for (String name: Menu.getDishMap().keySet()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            if (name.contains(keyword)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                matchingDishes.put(name, Menu.getDishMap().get(name));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return matchingDishes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 24
    }
  },
  {
    "path": "src/main/java/commands/SearchReservationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.DELIMITER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_DATE_MARKER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.RES_INDEX_MARKER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Command object for \"search reservation\" command. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class SearchReservationCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int reservationNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private LocalDate date; // yyyy-MM-dd"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int validMaxRange;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public SearchReservationCommand(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.reservationNumber \u003d -1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Displays a list of reservations when users search by reservation number or date(yyyy-MM-dd). "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            validMaxRange \u003d reservations.getSize() - 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            parseInput(this.description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (reservationNumber !\u003d -1 \u0026\u0026 date !\u003d null) { // both reservation number and date exist"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                Reservation reservation \u003d reservations.getReservation(reservationNumber);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                if (reservation.getDate().equals(date)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    ui.showMessage(reservation.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    ui.showMessage(\"Sorry! No such reservation.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            } else if (reservationNumber !\u003d -1) { // only have reservation number"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                Reservation reservation \u003d reservations.getReservation(reservationNumber);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                ui.showMessage(reservation.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            } else if (date !\u003d null) { // only have date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                System.out.println(String.format(\"Here comes the reservations on the date %s:\", date));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                boolean emptyList \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                for (int i \u003d 0; i \u003c reservations.getSize(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    Reservation reservation \u003d reservations.getReservation(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    if (reservation.getDate().equals(date)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                        ui.showMessage(reservation.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                        emptyList \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                if (emptyList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    ui.showMessage(\"Empty List.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please enter a valid non-positive reservation number.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please follow the date time format strictly: yyyy-MM-dd; eg. 2000-01-01\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Parses the input."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param description Input from the user excluding the command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws InputMissingException If there is input missing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws DelimiterMissingException If there is delimiter missing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) throws InputMissingException, DelimiterMissingException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        boolean delimiterMissing;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        boolean inputMissing \u003d true; // to see if the command has either \"number\" input or \"date\" input"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        String[] markers \u003d {RES_INDEX_MARKER, RES_DATE_MARKER};"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // reservationNumber"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberPos \u003d description.indexOf(RES_INDEX_MARKER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberPos !\u003d -1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            inputMissing \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            int numberEndPos \u003d description.indexOf(DELIMITER, numberPos);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (numberEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            delimiterMissing \u003d hasDelimiterInBetween(numberPos + RES_INDEX_MARKER.length(), numberEndPos,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    markers, description);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (delimiterMissing) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.reservationNumber \u003d Integer.parseInt(description.substring("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    numberEndPos + RES_INDEX_MARKER.length(), numberEndPos).trim());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (this.reservationNumber \u003c 0 || this.reservationNumber \u003e validMaxRange) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }        "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // date: yyyy-MM-dd"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int datePos \u003d description.indexOf(RES_DATE_MARKER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (datePos !\u003d -1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            inputMissing \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            int dateEndPos \u003d description.indexOf(DELIMITER, datePos);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (dateEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            delimiterMissing \u003d hasDelimiterInBetween(datePos + RES_DATE_MARKER.length(), dateEndPos,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    markers, description);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (delimiterMissing) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.date \u003d LocalDate.parse("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    description.substring(datePos + RES_DATE_MARKER.length(), dateEndPos).trim(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (inputMissing) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(String.format(\"either reservation number %s or date %s\", "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    RES_INDEX_MARKER, RES_DATE_MARKER));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 138
    }
  },
  {
    "path": "src/main/java/commands/SearchStockCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class focuses on the \u0027search\u0027 functionality "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * on the stock category."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class SearchStockCommand extends StockCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public SearchStockCommand(String keyword) "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (keyword.isBlank()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"enter an ingredient\u0027s name to be \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"searched against the stock.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            this.keyword \u003d keyword.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute(Stock stock) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.searchStock(keyword);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String getKeyword() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.keyword;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 34,
      "SibingWu": 1
    }
  },
  {
    "path": "src/main/java/commands/StockCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents a StockCommand. A StockCommand can be executed by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * consists of methods to parse user\u0027s input into acceptable format"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * that can be used by its super classes such as AddStockCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class StockCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected Stock stock;   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative index after the \u0027/\u0027 present within the string. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected final int indexAfterSlash \u003d 2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative index after the \u0027$\u0027 present within the string. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected final int indexAfterDollarSign \u003d 3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void setData(Stock stock) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.stock \u003d stock;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Extract the name of the ingredient from a string. For example, "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * \u0027i/tomato\u0027 will return \u0027tomato\u0027."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */ "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected String parseIngredientName(String ingredientNameInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientNameInput.trim()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .substring(indexAfterSlash, ingredientNameInput.length());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Extract the quantity of the ingredient from a string. For example, "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * \u0027q/10\u0027 will return \u002710\u0027."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the quantity specified cannot"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      be parsed into an integer or the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      quantity is a negative value."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */ "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected int parseIngredientQuantity(String ingredientQuantityInput) "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedInput \u003d ingredientQuantityInput.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d Integer.parseInt(trimmedInput.substring("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    indexAfterSlash, ingredientQuantityInput.length()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (quantity \u003c 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please enter a \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"positive value for the quantity to be added!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assert (quantity \u003e\u003d 0) : \"quantity is negative:\" + quantity;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return quantity;            "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please ensure that the \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity specified is an integer!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }        "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Extract the price of the ingredient from a string. For example, "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * \u0027p/$0.50\u0027 will return \u00270.5\u0027. Note that the price will not strictly "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * be in 2 decimal places. This will be handled in the AddCommand."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStockCommandException If the price specified does not"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      have a \u0027$\u0027 sign, is not a "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                      decimal or is not a positive value."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */ "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected double parseIngredientPrice(String ingredientPriceInput) "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedInput \u003d ingredientPriceInput.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double price \u003d Double.parseDouble(trimmedInput.substring("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    indexAfterDollarSign, ingredientPriceInput.length()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (price \u003c 0.0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please enter a\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" positive value for the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assert (price \u003e\u003d 0.0) : \"quantity is negative:\" + price;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return price;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please ensure that the \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"price specified has a \u0027$\u0027 sign and is a decimal!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Convenience constructor for ExitCommand() without parameters."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        throw new IllegalStateException(\"This method is to be implemented by child classes\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute(Stock stock) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"This method is to be implemented by child classes\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 106,
      "gmuthu17": 1,
      "SibingWu": 1
    }
  },
  {
    "path": "src/main/java/commands/VoidReservationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static utils.Constants.DELIMITER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static utils.Constants.RES_INDEX_MARKER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Command object for \"void reservation\" command. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class VoidReservationCommand extends ReservationCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int reservationNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int validMaxRange;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public VoidReservationCommand(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Specifies the index number of the target reservations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Marks the reservation as invalid in the case like reservation cancellation and etc."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Existing reservation list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param ui Interaction with users."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute(ReservationList reservations, Ui ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            validMaxRange \u003d reservations.getSize() - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            parseInput(this.description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            // voids the reservation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            reservations.voidReservation(reservationNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(String.format(\"Successfully void Reservation[%d]\", this.reservationNumber));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(\"Please enter a valid positive integer.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Parses the input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param description Input from the user excluding the command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws InputMissingException If there is input missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @throws DelimiterMissingException If there is delimiter missing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    protected void parseInput(String description) throws InputMissingException, DelimiterMissingException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // specifies the reservation number"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberPos \u003d description.indexOf(RES_INDEX_MARKER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new InputMissingException(\"reservation number \" + RES_INDEX_MARKER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        int numberEndPos \u003d description.indexOf(DELIMITER, numberPos);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberEndPos \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new DelimiterMissingException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.reservationNumber \u003d Integer.parseInt(description.substring(numberPos + RES_INDEX_MARKER.length(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                numberEndPos).trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (this.reservationNumber \u003c 0 || this.reservationNumber \u003e validMaxRange) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            throw new NumberFormatException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4,
      "SibingWu": 69
    }
  },
  {
    "path": "src/main/java/dish/Dish.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class Dish {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Arraylist of all ingredients for dish."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private ArrayList\u003cString\u003e ingredients;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Name of dish."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Price of dish."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * dish.Dish constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param name name of dish"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param ingredients arraylist of ingredients in dish"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public Dish(String name, ArrayList\u003cString\u003e ingredients, double price) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Returns ingredients in dish."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return arraylist of ingredients in dish"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public ArrayList\u003cString\u003e getIngredients() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Return price of dish."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return price of dish"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguan1"
        },
        "content": "     * Return name of dish."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguan1"
        },
        "content": "     * @return name of dish"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguan1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 49,
      "nguan1": 8
    }
  },
  {
    "path": "src/main/java/dish/Profit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.EmptyStockException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.IngredientMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.NegativeProfitException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class Profit {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Dish that profit is of."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private Dish dish;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Cost of dish."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private double cost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Price of dish."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Profit of dish."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private double profit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * A profit object, which contains the profit for a specific dish."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param d dish to calculate profit for"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws NegativeProfitException exception for if profit is less than 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws IngredientMissingException exception for if dish contains ingredient not in stock"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws EmptyStockException exception for if stock of ingredient is empty"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public Profit(Dish d) throws NegativeProfitException, IngredientMissingException, EmptyStockException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        dish \u003d d;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        cost \u003d (double) Math.round(totalCost(d) * 100) / 100;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        price \u003d d.getPrice();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        if (price - cost \u003e 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            profit \u003d price - cost;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            throw new NegativeProfitException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Sums total cost of ingredient in a dish and checks for several exceptions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @param d dish to sum cost of ingredients for"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return total cost of ingredients in dish"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws IngredientMissingException ingredient not listed in stock"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @throws EmptyStockException stock of ingredient is zero"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public double totalCost(Dish d) throws IngredientMissingException, EmptyStockException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        double totalCost \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Map\u003cString, Pair\u003cInteger, Double\u003e\u003e stock \u003d Stock.getStock();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        for (String ingredientName: d.getIngredients()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            if (stock.containsKey(ingredientName) \u0026\u0026 stock.get(ingredientName).first() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                throw new EmptyStockException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            } else if (stock.containsKey(ingredientName) \u0026\u0026 stock.get(ingredientName).first() \u003e 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                totalCost +\u003d stock.get(ingredientName).second();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                throw new IngredientMissingException(ingredientName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return totalCost;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Get dish profit is of."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return dish profit is of"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public Dish getDish() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return dish;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Get total cost of dish."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return total cost of dish"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public double getCost() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Get price of dish."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return price of dish"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Get profit of dish."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return profit of dish"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public double getProfit() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return profit;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 104
    }
  },
  {
    "path": "src/main/java/exceptions/DelimiterMissingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class DelimiterMissingException extends ReservationException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return \"Delimiter Missing.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 8
    }
  },
  {
    "path": "src/main/java/exceptions/EmptyStockException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class EmptyStockException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/IngredientMissingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class IngredientMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public IngredientMissingException(String input) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return this.input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return String.format(\"Ingredient Missing: %s is missing.\", this.input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 18
    }
  },
  {
    "path": "src/main/java/exceptions/InputMissingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class InputMissingException extends ReservationException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public InputMissingException(String input) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return String.format(\"Input Missing: %s is missing.\", this.input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 18
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidStockCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class InvalidStockCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public InvalidStockCommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 7,
      "SibingWu": 1
    }
  },
  {
    "path": "src/main/java/exceptions/NegativeProfitException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class NegativeProfitException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/exceptions/ReservationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class ReservationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 4
    }
  },
  {
    "path": "src/main/java/ingredient/Ingredient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/** "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * The ingredient class that is used by the Stock and the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": " * dish.Dish class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Optional\u003cInteger\u003e quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Optional\u003cDouble\u003e price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A convenience constructor to be used for the Command classes. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Ingredient(String name, Optional\u003cInteger\u003e quantity, Optional\u003cDouble\u003e price) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Returns true if the current ingredient has a specified quantity. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public boolean isQuantitySpecified() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.quantity.isPresent();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public double getIngredientPrice() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.price.orElseThrow();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public int getIngredientQuantity() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.quantity.orElseThrow();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String getIngredientName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Returns true if both ingredients have the same name. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (obj instanceof Ingredient) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Ingredient ingredient \u003d (Ingredient) obj;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return ingredient.name.equals(this.name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 56,
      "gmuthu17": 1
    }
  },
  {
    "path": "src/main/java/ingredient/IngredientNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class IngredientNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public IngredientNotFoundException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 8
    }
  },
  {
    "path": "src/main/java/menu/Menu.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class Menu {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Hashmap of all dishes on menu."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private static HashMap\u003cString, Dish\u003e dishMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Constructor for Menu."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public Menu() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        dishMap \u003d new HashMap\u003cString, Dish\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * Return\u0027s dishMap hashmap."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     * @return dishmap hashmap"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static HashMap\u003cString, Dish\u003e getDishMap() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return dishMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 28
    }
  },
  {
    "path": "src/main/java/report/ReportWriter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguan1"
        },
        "content": "public class ReportWriter {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    protected Menu menu;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    protected Stock stock;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    protected ReservationList reservations;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A convenience constructor of ReportWriter."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public ReportWriter(Stock stock, ReservationList reservations, Menu menu) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.stock \u003d stock;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.reservations \u003d reservations;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        this.menu \u003d menu;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Save all information to a text file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguan1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void writeToFile() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        // Written in menu.Menu \u003e Stock \u003e Reservation Order"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"./report.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String menuTitle \u003d String.format(\"Menu Items\" "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            fw.write(menuTitle);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            HashMap\u003cString, Dish\u003e  menuItems \u003d menu.getDishMap();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            for (String name: menuItems.keySet()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String ingredientList \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                for (String str: menuItems.get(name).getIngredients()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    ingredientList +\u003d str "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            + \", \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ingredientList \u003d ingredientList.substring(0, ingredientList.length() - 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String writtenString \u003d String.format(\"%d. %s \\t %s \" "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls, counter, name, ingredientList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                fw.write(writtenString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                counter +\u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String stockTitle \u003d String.format(ls "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"Current Stock\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            fw.write(stockTitle);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            counter \u003d 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            for (Map.Entry\u003cString, Pair\u003cInteger,Double\u003e\u003e ingredient : stock.getStock().entrySet()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String writtenString \u003d String.format("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        \"%d. %s \\t $%.2f %d \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ls,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        counter, "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        ingredient.getKey(), "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        ingredient.getValue().second(), "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        ingredient.getValue().first());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                fw.write(writtenString);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                counter +\u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            counter \u003d 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String reserveTitle \u003d String.format(ls "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"Reservations\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            fw.write(reserveTitle);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            for (int i \u003d 0; i \u003c reservations.getSize(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                Reservation reserved \u003d reservations.getReservation(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String writtenString \u003d String.format(\"%s\" + ls, reserved.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                fw.write(writtenString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            System.out.println(\"Invalid Path\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nguan1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 42,
      "gmuthu17": 8,
      "nguan1": 43
    }
  },
  {
    "path": "src/main/java/reservation/Reservation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package reservation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.NOT_SERVED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.SMALL_TABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.MEDIUM_TABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static utils.Constants.LARGE_TABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Reservation of the restaurant. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class Reservation {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int reservationNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private int numberOfGuests;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String contact;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String comments;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private Character tableSize;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Defines the constructor for a Reservation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Notes that comments for reservation are optional."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public Reservation(int reservationNumber, String name, LocalDateTime date, int numberOfGuests, String contact) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.reservationNumber \u003d reservationNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.numberOfGuests \u003d numberOfGuests;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.comments \u003d \"No comments\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.status \u003d NOT_SERVED;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        setTableSize(this.numberOfGuests);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the index number of the reservation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Index number of the reservation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public int getReservationNumber() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.reservationNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets the contact person\u0027s name in the case that "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * the group who makes the reservation wants to change the contact person."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param name Contact person\u0027s name."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the contact person of the reservation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Name of the contact person"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets the date in the case that "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * the group who makes the reservation wants to change the date."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param date When the reservation is. Format: yyyy-MM-dd HH:mm"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void setDate(LocalDateTime date) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the date of the reservation."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Date of the reservation."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets the number of the guests in the case that "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * the group who makes the reservation wants to change."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param numberOfGuests The number of people attending the reserved meal."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void setNumberOfGuests(int numberOfGuests) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.numberOfGuests \u003d numberOfGuests;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        // whenever the guest number changes, the table size should change accordingly"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        setTableSize(this.numberOfGuests);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets the number of the guests in the case that "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * the group who makes the reservation wants to change."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param contact Contact, can be either phone number or email or etc."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void setContact(String contact) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Get the contact details."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Contact details."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getContact() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.contact;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets the miscellaneous comments, such as preference, food allergy, etc."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param comments Comments of the reservation."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void setComments(String comments) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets any comments of the reservation."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Comments of the reservation."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getComments() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.comments;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Sets the status of the reservation as served, not served, or invalid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param status Status character of the reservation."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void setStatus(String status) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the status of the reservation, served, not served, or invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Status of the reservation."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Assigns the table according to the number of people attending the reserved meal."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param numberOfGuests The number of people attending the meal."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    private void setTableSize(int numberOfGuests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        if (numberOfGuests \u003c\u003d 4) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.tableSize \u003d SMALL_TABLE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } else if (numberOfGuests \u003c\u003d 8) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.tableSize \u003d MEDIUM_TABLE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            this.tableSize \u003d LARGE_TABLE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the table size."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Table size."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public Character getTableSize() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.tableSize;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return String.format(\"Reservation [%d]\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                + \"Status: %s\" "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"contact person: %s\" "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"date: %s\" "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"number of guests: %d\" "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"table size: %c\" "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"contact details: %s\" "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"comments: %s\" "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls, "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                this.reservationNumber, this.status, this.name, "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                this.numberOfGuests, this.tableSize, this.contact, this.comments);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 17,
      "gmuthu17": 1,
      "SibingWu": 185
    }
  },
  {
    "path": "src/main/java/reservation/ReservationList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package reservation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static utils.Constants.INVALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static utils.Constants.SERVED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Contains the reservation list e.g., it has operations to add/delete/list reservations in the list. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class ReservationList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    List\u003cReservation\u003e reservations;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Defines the constructor and starts with an empty list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public ReservationList() { "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Defines the constructor and starts with a given ArrayList of reservations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservations Beginning list of reservations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public ReservationList(List\u003cReservation\u003e reservations) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        this.reservations \u003d reservations;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Adds the reservation into the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservation Reservation that needs to be added into the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void addReservation(Reservation reservation) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservations.add(reservation);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Marks the reservation as served."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservationNumber The index number of the reservation."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void markReservationAsServed(int reservationNumber) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservations.get(reservationNumber).setStatus(SERVED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Marks the reservation as invalid, etc. the customer wants to cancel the reservation or wrong reservation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservationNumber The index number of the reservation."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void voidReservation(int reservationNumber) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservations.get(reservationNumber).setStatus(INVALID);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the size of the reservation list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Size of reservation list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        return this.reservations.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * Gets the reservation with the target reservation number."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @param reservationNumber Target reservation number."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     * @return Reservation indexed with the target number."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public Reservation getReservation(int reservationNumber) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return reservations.get(reservationNumber);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 4,
      "SibingWu": 70
    }
  },
  {
    "path": "src/main/java/stock/Stock.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.IngredientNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class encapsulates all information of the ingredient"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * stock. It contains all the ingredients stored, along with "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * their respective current prices and quantities."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Stock {   "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A HashMap that maps a ingredient\u0027s name to its "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * quantity and price."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Note that quantity is an Integer and price is a Double."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    private static Map\u003cString, Pair\u003cInteger, Double\u003e\u003e stock \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Stock() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stock \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Adds an ingredientName to the current stock. If the ingredient"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * exists previously, update the quantity by adding the current quantity"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * to the previous quantity. Otherwise, add an entirely new entry into"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the HashMap. Note that the latest price of an ingredient specified by "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the user will override the current price of that ingredient in the stock."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void addIngredient(Ingredient ingredientToAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientToAdd.getIngredientName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int quantityToAdd \u003d ingredientToAdd.getIngredientQuantity();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        double ingredientPrice \u003d ingredientToAdd.getIngredientPrice();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (stock.containsKey(ingredientName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int currQuantity \u003d stock.get(ingredientName).first();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int newQuantity \u003d currQuantity + quantityToAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.replace(ingredientName, Pair.of(newQuantity, ingredientPrice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.put(ingredientName, Pair.of(quantityToAdd, ingredientPrice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Deletes an ingredientName from the current stock. If the ingredient"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * exists previously, update the quantity by subtracting the quantity"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * supplied by the user to the current quantity. If there is no quantity"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * specified, removed the ingredientName from the HashMap. Note that the "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * quantity for an ingredient to be deleted is optional. Also, there is a "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * lower 0 bound such that any subtraction of the quantity"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * cannot be lesser than zero. An ingredient with 0 quantity however, is not"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * deleted from the hashMap."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void deleteIngredient(Ingredient ingredient) "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredient.getIngredientName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasIngredientInStock \u003d stock.containsKey(ingredientName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasQuantitySpecified \u003d ingredient.isQuantitySpecified();        "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (hasIngredientInStock \u0026\u0026 hasQuantitySpecified) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int currQuantity \u003d stock.get(ingredientName).first();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantityToDelete \u003d ingredient.getIngredientQuantity();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int newQuantity \u003d currQuantity - quantityToDelete;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            newQuantity \u003d ((newQuantity \u003c 0) ? 0 : newQuantity);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double ingredientPrice \u003d stock.get(ingredientName).second(); "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.replace(ingredientName, Pair.of(newQuantity, ingredientPrice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (hasIngredientInStock \u0026\u0026 !hasQuantitySpecified) {    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.remove(ingredientName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new IngredientNotFoundException(\"This ingredient \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"is not in the stock currently!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Lists all current ingredients in the stock."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void listIngredient() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"Here are the ingredients in the stock currently:\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        printStock();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");       "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Search the current stock against a given keyword and lists all ingredients"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * that contains the keyword."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void searchStock(String keyword) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"Here are the ingredients in the stock that matches the keyword:\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e(stock.entrySet());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int ingredientCounter \u003d 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (ingredientName.contains(keyword)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int quantity \u003d ingredient.getValue().first();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                double price \u003d ingredient.getValue().second();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                System.out.println(ingredientCounter "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \". \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"[\" "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + quantity "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"]\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"[$\" "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + String.format(\"%.2f\", price) "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"]\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" \" "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ingredientName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "           "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ingredientCounter++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\"); "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function to print the stock to help to parse the price into 2 decimal places"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * to display as dollars appropriately. Prints ingredients in descending quantity within "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the stock."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void printStock() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d new ArrayList\u003c\u003e(stock.entrySet());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Collections.sort(tempList, new Comparator\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            public int compare(Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e firstEntry, "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e secondEntry) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int firstEntryQuantity \u003d firstEntry.getValue().first();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int secondEntryQuantity \u003d secondEntry.getValue().first();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                return secondEntryQuantity - firstEntryQuantity;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        });      "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int ingredientCounter \u003d 1;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d ingredient.getValue().first();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double price \u003d ingredient.getValue().second();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(ingredientCounter "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \". \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"[\" "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + quantity "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"[$\" "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + String.format(\"%.2f\", price) "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" \" "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientName);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "           "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ingredientCounter++;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public static Map\u003cString, Pair\u003cInteger, Double\u003e\u003e getStock() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        return stock;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 185,
      "gmuthu17": 4
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * TextUi of the application. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                                          "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"______  ______  _____ ______    ___  __  __ ______        __  _______  ______\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"||    ||||      \\\\       ||     / ||  ||  || ||    |      / || ||    ||   ||\");       "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"||    ||||       \\\\      ||    /  ||  ||  || ||    |     /  || ||    ||   ||\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"||__ /  ||___     \\\\___  ||   /___||  ||  || ||__ /     /___|| ||    ||   ||\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"||   \\\\\\\\ ||           \\\\  ||  /    ||  ||  || ||   \\\\\\\\   /    || ||    ||   ||\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"||    \\\\\\\\||____   _____\\\\ || /     ||   \\\\__/  ||    \\\\\\\\ /     Daily Report v2.0\");       "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String fullInputLine \u003d in.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return fullInputLine;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 43
    }
  },
  {
    "path": "src/main/java/utils/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguan1"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.AddDishCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.AddStockCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.AddReservationCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.DeleteDishCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.DeleteStockCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.MarkReservationCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.VoidReservationCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ListDishCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ListStockCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ListReservationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ListServedCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.ListUnservedCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.SearchStockCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.SearchReservationCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import commands.QuitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import report.ReportWriter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import sales.Sales;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguan1"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguan1"
        },
        "content": "     * Pass the parsed user input into readable formats to be processed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * by either a menu, stock or a reservation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parseCommand(String command, Menu menu,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                             Stock stock, ReservationList reservations, Sales sales, Ui ui) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                new ReportWriter(stock, reservations, menu).writeToFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            new QuitCommand().execute();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String[] commands \u003d command.split(\";\", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] splitCommands \u003d commands[0].split(\" \", 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (splitCommands[0].equals(\"add\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (splitCommands[1].equals(\"dish\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Add dish."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                AddDishCommand.addDish(commands[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                successfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"stock\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Add stock."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    new AddStockCommand(commands[1]).execute(stock);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                    successfulCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                } catch (IllegalStateException | InvalidStockCommandException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    errorCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"reservation\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Add reservation."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new AddReservationCommand(commands[1]).execute(reservations, ui);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                successfulCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                errorCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (splitCommands[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (splitCommands[1].equals(\"dish\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Delete dish."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                String newcomm \u003d commands[1].substring(3, commands[1].length() - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                DeleteDishCommand.deleteDish(newcomm);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                successfulCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"stock\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Delete stock."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    new DeleteStockCommand(commands[1]).execute(stock);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                    successfulCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                } catch (InvalidStockCommandException | IllegalStateException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    errorCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"reservation\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Delete reservation."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new VoidReservationCommand(commands[1]).execute(reservations, ui);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                successfulCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                errorCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } else if (splitCommands[0].equals(\"mark\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            if (splitCommands[1].equals(\"reservation\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                // Mark reservation as served."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new MarkReservationCommand(commands[1]).execute(reservations, ui);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (splitCommands[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (splitCommands[1].equals(\"dish\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // List dish."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "                ListDishCommand.printDishes();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                successfulCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"stock\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // List stock."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new ListStockCommand().execute(stock);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                successfulCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (splitCommands[1].equals(\"reservation\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                // List all reservation."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new ListReservationCommand().execute(reservations, ui);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                successfulCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            } else if (splitCommands[1].equals(\"served reservation\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                // List served reservation."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new ListServedCommand().execute(reservations, ui);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                successfulCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            } else if (splitCommands[1].equals(\"unserved reservation\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                // List unserved reservation."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new ListUnservedCommand().execute(reservations, ui);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                successfulCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nguan1"
        },
        "content": "                errorCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (splitCommands[0].equals(\"search\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (splitCommands[1].equals(\"stock\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Search stock."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    new SearchStockCommand(commands[1]).execute(stock);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    successfulCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                } catch (InvalidStockCommandException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    errorCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            } else if (splitCommands[1].equals(\"reservation\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                new SearchReservationCommand(commands[1]).execute(reservations, ui);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                errorCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else if (splitCommands[0].equals(\"help\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            new HelpCommand().execute();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else if (splitCommands[0].equals(\"sell\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            sales.addSale(commands[1]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else if (splitCommands[0].equals(\"profit\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            sales.calculateProfit();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else if (splitCommands[0].equals(\"popular\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            sales.mostPopularDish();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nguan1"
        },
        "content": "            errorCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public static void errorCommand() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        System.out.println(\"Incorrect command\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Displays an error message to the user."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nguan1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static void printErrorMessage(String message) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static void successfulCommand() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"The command has been successfully executed.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nguan1"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 70,
      "gmuthu17": 6,
      "nguan1": 61,
      "SibingWu": 39
    }
  },
  {
    "path": "src/main/java/utils/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "/** Constants used in the program. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String SERVED \u003d \"Served\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String NOT_SERVED \u003d \"Unserved\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String INVALID \u003d \"Invalid\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final Character SMALL_TABLE \u003d \u0027S\u0027;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final Character MEDIUM_TABLE \u003d \u0027M\u0027;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final Character LARGE_TABLE \u003d \u0027L\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_ADD_COMMAND \u003d \"add reservation\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_MARK_COMMAND \u003d \"mark reservation\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_VOID_COMMAND \u003d \"delete reservation\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_LIST_COMMAND \u003d \"list reservation\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_LIST_SERVED_COMMAND \u003d \"list served reservation\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_LIST_UNSERVED_COMMAND \u003d \"list unserved reservation\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_SEARCH_COMMAND \u003d \"search reservation\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_INDEX_MARKER \u003d \"r/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_PERSON_MARKER \u003d \"p/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_DATE_MARKER \u003d \"d/\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_NUM_MARKER \u003d \"n/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_CONTACT_MARKER \u003d \"c/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String RES_COMMENT_MARKER \u003d \"m/\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public static final String DELIMITER \u003d \";\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 1,
      "SibingWu": 28
    }
  },
  {
    "path": "src/main/java/utils/Pair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Pair\u003cT, U\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final T firstVal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final U secondVal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Pair(T firstVal, U secondVal) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.firstVal \u003d firstVal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.secondVal \u003d secondVal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }        "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static \u003cT, U\u003e Pair\u003cT, U\u003e of(T firstVal, U secondVal) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new Pair\u003cT, U\u003e(firstVal, secondVal);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public T first() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.firstVal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public U second() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.secondVal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Returns true if both ingredients have the same name. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (obj instanceof Pair) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Pair\u003c?, ?\u003e p \u003d (Pair\u003c?, ?\u003e) obj;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return (p.firstVal.equals(this.firstVal) \u0026\u0026 p.secondVal.equals(this.secondVal));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "} "
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 36
    }
  },
  {
    "path": "src/test/java/commands/AddDishCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class AddDishCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseIngredientsTestA() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ArrayList\u003cString\u003e l1 \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        l1.add(\"cheese\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        l1.add(\"bacon\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1a \u003d \"n/bacon pizza; p/5.00; i/cheese, bacon;\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(l1, AddDishCommand.parseIngredients(d1a));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1b \u003d \"p/10.00; i/cheese, bacon; n/bacon pizza;\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(l1, AddDishCommand.parseIngredients(d1b));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseIngredientsTestB() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        ArrayList\u003cString\u003e l2 \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        l2.add(\"chicken\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        l2.add(\"rice\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        l2.add(\"chili\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/12.00;\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(l2, AddDishCommand.parseIngredients(d2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseNameTestA() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; p/3.00; i/cheese, bacon;\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(\"bacon pizza\", AddDishCommand.parseName(d1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parseNameTestB() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"p/6.00; i/chicken, rice, chili; n/chicken biryani;\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(\"chicken biryani\", AddDishCommand.parseName(d2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parsePriceTestA() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; p/3.00; i/cheese, bacon;\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(3.00, AddDishCommand.parsePrice(d1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void parsePriceTestB() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"p/6.00; i/chicken, rice, chili; n/chicken biryani;\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(6.00, AddDishCommand.parsePrice(d2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void addDishTestA() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void addDishTestB() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 3,
      "gmuthu17": 80
    }
  },
  {
    "path": "src/test/java/commands/AddReservationCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "class AddReservationCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    ReservationList reservationList \u003d new ReservationList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void execute_normalAddReservationCommand_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new AddReservationCommand(\"p/Peter; d/2020-03-12 12:00; n/3; c/98955555;\").execute(reservationList, ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservationList.getReservation(reservationList.getSize() - 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Peter\", reservation.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2020-03-12 12:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")), "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservation.getDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"98955555\", reservation.getContact());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"No comments\", reservation.getComments());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\u0027S\u0027, reservation.getTableSize());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void execute_normalAddReservationCommandwithCommentnDifferentSequence_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new AddReservationCommand(\"p/Lisa; m/no spicy food please; d/2020-03-13 12:00; n/9; c/98889999;\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                .execute(reservationList, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservationList.getReservation(reservationList.getSize() - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Lisa\", reservation.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2020-03-13 12:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservation.getDate());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"98889999\", reservation.getContact());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"no spicy food please\", reservation.getComments());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\u0027L\u0027, reservation.getTableSize());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_inputMissingAddReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David; d/2020-03-12 12:00; c/98887777;\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David; d/2020-03-12 12:00; c/98887777;\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"number of guests n/\", e.getInput());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Input Missing: number of guests n/ is missing.\", e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_delimiterMissingAddReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new AddReservationCommand(\"p/David d/2020-03-12 12:00; n/3; c/98887777;\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                    .parseInput(\"p/David d/2020-03-12 12:00; n/3; c/98887777;\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 72
    }
  },
  {
    "path": "src/test/java/commands/AddStockCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class AddStockCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void construct_AddStockCommand_constructNormally() "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoCopy \u003d new AddStockCommand(\"i/tomato; q/1; p/$0.50;\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .getIngredientInAddCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(tomato.equals(tomatoCopy));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute_ExecuteAddStockCommand_executeNormally() "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockCopy \u003d new Stock();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToAdd \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.addIngredient(tomatoToAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        AddStockCommand addStockCommand \u003d new AddStockCommand(\"i/tomato; q/10; p/$0.50\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(addStockCommand.printExecuteOutput(stock), executeAdd(stockCopy, tomatoToAdd));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientTag() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"tomato; q/1; p/$0.50;\");            "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input given cannot be parsed into ingredient arguments.\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());          "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingQuantityTag() { "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"i/tomato; 1; p/$0.50;\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input given cannot be parsed into ingredient arguments.\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());          "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingPriceTag() { "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"i/tomato; q/1; $0.50;\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input given cannot be parsed into ingredient arguments.\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());          "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingAllTags() { "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input given cannot be parsed into ingredient arguments.\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientQuantityAndPrice() { "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"i/tomato;\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input is missing both the ingredient\u0027s \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity to be added and the ingredient\u0027s price!\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientNameAndPrice() { "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"q/1;\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input must specify both the ingredient\u0027s \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"name and the ingredient\u0027s price!\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientNameAndQuantity() { "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"p/$0.50;\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input must specify both the ingredient\u0027s name \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"and the quantity to be added!\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientPriceOnly() { "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"i/tomato; q/1;\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input must specify the ingredient\u0027s price!\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientQuantityOnly() { "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"i/tomato; p/$0.50;\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input must specify the quantity of the ingredient to be added!\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoAddIngredientsArgs_missingIngredientNameOnly() { "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoAddIngredientArgs(\"q/1; p/$0.50;\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input must specify the ingredient\u0027s name!\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void getIngredient_GetIngredientInAddCommand_getNormally() "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        AddStockCommand addStockCommand \u003d new AddStockCommand(\"i/tomato; q/1; p/$0.50\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoInAddCommand \u003d addStockCommand.getIngredientInAddCommand();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(tomato, tomatoInAddCommand);       "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Utility functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "   "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIntoIngredientArgs() in AddStockCommand."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Map\u003cString, Pair\u003cInteger, Double\u003e\u003e parseIntoAddIngredientArgs("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String fullInputLine) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredientInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArgs \u003d fullInputLine.split(\";\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cString\u003e ingredientName \u003d Optional.empty();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cInteger\u003e quantity \u003d Optional.empty();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cDouble\u003e price \u003d Optional.empty();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (String argument : wordArgs) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedArg \u003d argument.trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedArg.contains(\"i/\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ingredientName \u003d Optional.of(parseIngredientName(trimmedArg));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"q/\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                quantity \u003d Optional.of(parseIngredientQuantity(trimmedArg));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"p/\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                price \u003d Optional.of(parseIngredientPrice(trimmedArg));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"The user\u0027s input given cannot\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" be parsed into ingredient arguments.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkValidParsedIngredientArguments(ingredientName, quantity, price);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        ingredientInfo.put(ingredientName.get(), Pair.of(quantity.get(), price.get()));    "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientInfo;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }   "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIntoIngredientName() in AddStockCommand."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String parseIngredientName(String ingredientNameInput) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientNameInput.trim()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .substring(2, ingredientNameInput.length());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIntoIngredientQuantity() in AddStockCommand."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private int parseIngredientQuantity(String ingredientQuantityInput) "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedInput \u003d ingredientQuantityInput.trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d Integer.parseInt(trimmedInput.substring("
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    2, ingredientQuantityInput.length()));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (quantity \u003c 0) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please enter a\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" positive value for the quantity to be added!\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return quantity;            "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please ensure that the \""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity specified is an integer!\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }        "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIntoIngredientPrice() in AddStockCommand."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private double parseIngredientPrice(String ingredientPriceInput) "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedInput \u003d ingredientPriceInput.trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double price \u003d Double.parseDouble(trimmedInput.substring("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    3, ingredientPriceInput.length()));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (price \u003c 0.0) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please enter a\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" positive value for the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return price;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please ensure that the \""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"price specified has a \u0027$\u0027 sign and is a decimal!\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of checkValidParsedIngredientArguments() "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * in AddStockCommand."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkValidParsedIngredientArguments(Optional\u003cString\u003e ingredientName, "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cInteger\u003e quantity, Optional\u003cDouble\u003e price) "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (ingredientName.isEmpty() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify an ingredient\u0027s name, \""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity to be added and its price!\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isPresent() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input is missing both the ingredient\u0027s \""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity to be added and the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify both the ingredient\u0027s \""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"name and the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isPresent()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify both the ingredient\u0027s name \""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"and the quantity to be added!\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isPresent() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isEmpty()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify the ingredient\u0027s price!\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isPresent() \u0026\u0026 quantity.isEmpty() \u0026\u0026 price.isPresent()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify the quantity of the ingredient to be added!\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isPresent() \u0026\u0026 price.isPresent()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException("
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"The user\u0027s input must specify the ingredient\u0027s name!\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns a string representation of output when AddStockCommand is executed."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String executeAdd(Stock stock, Ingredient ingredientToAdd) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(ingredientToAdd);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Ingredient \" "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ingredientToAdd.getIngredientName() "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" successfully added!\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 301,
      "SibingWu": 7
    }
  },
  {
    "path": "src/test/java/commands/DeleteDishCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class DeleteDishCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void deleteDishTestA() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        DeleteDishCommand.deleteDish(\"bacon pizza\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(Menu.getDishMap().containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void deleteDishTestB() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(Menu.getDishMap().containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        DeleteDishCommand.deleteDish(\"bacon pizza\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(Menu.getDishMap().containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        DeleteDishCommand.deleteDish(\"chicken biryani\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(Menu.getDishMap().containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 39
    }
  },
  {
    "path": "src/test/java/commands/DeleteStockCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ingredient.IngredientNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class DeleteStockCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test when the user input is in the correct format of \u0027i/INGREDIENT; q/QUANTITY;\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * with quantity specified."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void construct_DeleteStockCommandWithQuantity_constructNormally() "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToDelete \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.empty());  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoCopy \u003d new DeleteStockCommand(\"i/tomato; q/1;\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .getIngredientInDeleteCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(tomatoToDelete.equals(tomatoCopy)); "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test when the user input is in the correct format of \u0027i/INGREDIENT;\u0027 without quantity"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * specified."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void construct_DeleteStockCommandWithoutQuantity_constructNormally() "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.empty());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoCopyTwo \u003d new DeleteStockCommand(\"i/tomato;\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .getIngredientInDeleteCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(tomato.equals(tomatoCopyTwo));      "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test execution of deleteStockCommand when quantity is specified."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public void execute_ExecuteDeleteStockCommandWithQuantity_executeNormally() "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException, IngredientNotFoundException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockCopy \u003d new Stock();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToAdd \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToDelete \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.empty());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.addIngredient(tomatoToAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.deleteIngredient(tomatoToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        DeleteStockCommand deleteStockCommand \u003d new DeleteStockCommand(\"i/tomato; q/1\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(deleteStockCommand.printExecuteOutput(stockCopy),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                executeDelete(stockCopy, tomatoToDelete));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test execution of deleteStockCommand when quantity is not specified."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void excute_ExecuteDeleteStockCommandWithoutQuantity_executeNormally() "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException, IngredientNotFoundException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockCopy \u003d new Stock();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToAdd \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToDelete \u003d new Ingredient(\"tomato\", Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.addIngredient(tomatoToAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.deleteIngredient(tomatoToDelete);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        DeleteStockCommand deleteStockCommand \u003d new DeleteStockCommand(\"i/tomato;\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(deleteStockCommand.printExecuteOutput(stock),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                executeDelete(stockCopy, tomatoToDelete));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void excute_ExecuteDeleteStockCommand_ingredientNotFoundInStock() "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockCopy \u003d new Stock();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToDelete \u003d new Ingredient(\"tomato\", Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        DeleteStockCommand deleteStockCommand \u003d new DeleteStockCommand(\"i/tomato;\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stockCopy.deleteIngredient(tomatoToDelete);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IngredientNotFoundException infe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(deleteStockCommand.printExecuteOutput(stock),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    executeDelete(stockCopy, tomatoToDelete));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoDeleteIngredientsArgsWithQuantity_parseNormally() "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Optional\u003cInteger\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parseIntoDeleteIngredientArgs(\"i/tomato; q/1;\"); "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String parsedIngredientName \u003d parsedIngredientInfo"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .entrySet()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(item -\u003e item.getKey())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int parsedIngredientQuantity \u003d parsedIngredientInfo.get(\"tomato\").get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"tomato\", parsedIngredientName);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(1, parsedIngredientQuantity);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }   "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoDeleteIngredientsArgsWithoutQuantity_parseNormally() "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Optional\u003cInteger\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parseIntoDeleteIngredientArgs(\"i/tomato;\"); "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String parsedIngredientName \u003d parsedIngredientInfo"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .entrySet()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(item -\u003e item.getKey())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"tomato\", parsedIngredientName);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int parsedIngredientQuantity \u003d parsedIngredientInfo.get(\"tomato\").get();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoDeleteIngredientsArgs_missingIngredientNameOnly() "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Optional\u003cInteger\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoDeleteIngredientArgs(\"q/$0.50;\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }         "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoDeleteIngredientsArgs_missingIngredientNameAndQuantity() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Optional\u003cInteger\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoDeleteIngredientArgs(\"\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input given cannot be parsed into ingredient arguments.\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoDeleteIngredientsArgs_missingIngredientTag() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Optional\u003cInteger\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoDeleteIngredientArgs(\"tomato\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input given cannot be parsed into ingredient arguments.\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "      "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_ParseUserInputIntoDeleteIngredientsArgs_missingQuantityTag() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Optional\u003cInteger\u003e\u003e parsedIngredientInfo \u003d "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parseIntoDeleteIngredientArgs(\"i/tomato; 10\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"The user\u0027s input given cannot be parsed into ingredient arguments.\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());           "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void getIngredient_GetIngredientInDeleteCommand_getNormally() "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.empty());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        DeleteStockCommand deleteStockCommand \u003d new DeleteStockCommand(\"i/tomato; q/1;\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoInDeleteCommand \u003d deleteStockCommand.getIngredientInDeleteCommand();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(tomato, tomatoInDeleteCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Utility functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */  "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIntoIngredientArgs() in DeleteStockCommand."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Map\u003cString, Optional\u003cInteger\u003e\u003e parseIntoDeleteIngredientArgs("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String fullInputLine) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Optional\u003cInteger\u003e\u003e ingredientInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArgs \u003d fullInputLine.split(\";\");       "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cString\u003e ingredientName \u003d Optional.empty();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cInteger\u003e quantity \u003d Optional.empty();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (String argument : wordArgs) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String trimmedArg \u003d argument.trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (trimmedArg.contains(\"i/\")) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ingredientName \u003d Optional.of(parseIngredientName(trimmedArg));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else if (trimmedArg.contains(\"q/\")) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                quantity \u003d Optional.of(parseIngredientQuantity(trimmedArg));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"The user\u0027s input given cannot\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" be parsed into ingredient arguments.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        checkValidParsedIngredientArguments(ingredientName, quantity);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        ingredientInfo.put(ingredientName.get(), quantity);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientInfo;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIngredientName() in DeleteStockCommand."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String parseIngredientName(String ingredientNameInput) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String ingredientName \u003d ingredientNameInput.trim()"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .substring(2, ingredientNameInput.length());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of parseIngredientQuantity() in DeleteStockCommand."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private int parseIngredientQuantity(String ingredientQuantityInput) "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String trimmedInput \u003d ingredientQuantityInput.trim();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d Integer.parseInt(trimmedInput.substring("
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    2, ingredientQuantityInput.length()));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (quantity \u003c 0) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidStockCommandException(\"Please enter a\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" positive value for the quantity to be added!\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return quantity;            "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"Please ensure that the \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"quantity specified is an integer!\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }        "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function of similar implementation of checkValidParsedArguments() in DeleteStockCommand."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void checkValidParsedIngredientArguments(Optional\u003cString\u003e ingredientName,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cInteger\u003e quantity) throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (ingredientName.isEmpty() \u0026\u0026 quantity.isEmpty()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input must specify\""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" an ingredient name.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (ingredientName.isEmpty() \u0026\u0026 quantity.isPresent()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStockCommandException(\"The user\u0027s input must specify\""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" an ingredient name.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns a string representation of output when DeleteStockCommand is executed."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String executeDelete(Stock stock, Ingredient ingredientToDelete) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IngredientNotFoundException e) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (\"Ingredient \" "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientToDelete.getIngredientName() "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" not found and cannot be deleted!\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (createDeleteResultMessage(ingredientToDelete));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A utility function to return a string representation. The implementation is"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * similar to createDeleteResultMessage() in DeleteStockCommand."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createDeleteResultMessage(Ingredient ingredientToDelete) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasQuantitySpecified \u003d ingredientToDelete.isQuantitySpecified();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"Ingredient \" "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientToDelete.getIngredientName()"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + (hasQuantitySpecified "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            ? \" reduced by \" "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            + ingredientToDelete.getIngredientQuantity() + \"!\""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            : \" deleted from the stock!\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 312,
      "SibingWu": 8
    }
  },
  {
    "path": "src/test/java/commands/ListStockCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.IngredientNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class ListStockCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute_executeListCommand_executeNormally() "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToAdd \u003d "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToAddTwo \u003d "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.of(10), Optional.of(0.50));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoToDelete \u003d "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.of(1), Optional.empty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient rice \u003d "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient riceToDelete \u003d "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"rice\", Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient potato \u003d "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"potato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient vegetable \u003d "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"vegetable\", Optional.of(5), Optional.of(0.20));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient toxicGreens \u003d "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"toxic greens\", Optional.of(3), Optional.of(10.00));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(tomatoToAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(tomatoToAddTwo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.deleteIngredient(tomatoToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(rice);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.deleteIngredient(riceToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(potato);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(vegetable);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(toxicGreens);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createListIngredientOutputCopy(), executeList(stock));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns a string representation once a listCommand is executed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String executeList(Stock stock) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d printlistIngredientToString(stock);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"All ingredients listed successfully!\");             "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Utility functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createListIngredientOutputCopy() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Here are the ingredients in the stock currently:\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"1. [10][$0.50] tomato\" "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [5][$0.20] vegetable\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"3. [3][$10.00] toxic greens\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"4. [1][$0.50] potato\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"All ingredients listed successfully!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A String representation of printing the ingredients in the stock. This "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * method has the same implementation of printStock() in the Stock class,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * except that it returns a String instead of void."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String printStock(Stock stock) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e tempList \u003d "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new ArrayList\u003c\u003e(stock.getStock().entrySet());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Collections.sort(tempList, "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Comparator\u003cEntry\u003cString, Pair\u003cInteger, Double\u003e\u003e\u003e() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                public int compare(Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e firstEntry, "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e secondEntry) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    int firstEntryQuantity \u003d firstEntry.getValue().first();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    int secondEntryQuantity \u003d secondEntry.getValue().first();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    return secondEntryQuantity - firstEntryQuantity;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            });      "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int ingredientCounter \u003d 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : tempList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d ingredient.getValue().first();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double price \u003d ingredient.getValue().second();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            outputMessage +\u003d (ls "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientCounter "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \". \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"[\" "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + quantity "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"[$\" "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + String.format(\"%.2f\", price) "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" \" "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientName);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "           "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ingredientCounter++;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A String representation of printing the stock as to when user input \u0027list stock\u0027."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String printlistIngredientToString(Stock stock) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Here are the ingredients in the stock currently:\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d printStock(stock) "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 164
    }
  },
  {
    "path": "src/test/java/commands/SearchDishCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Dish;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class SearchDishCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d3 \u003d \"i/chicken, pasta, sauce; n/pasta with chicken; p/7.00;\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d3);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d4 \u003d \"i/flatbread, bacon, cheese; p/3.00; n/bacon flatbread;\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d4);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void searchDishTestA() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap\u003cString, Dish\u003e matchingA \u003d SearchDishCommand.searchDish(\"chicken\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingA.containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingA.containsKey(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void searchDishTestB() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap\u003cString, Dish\u003e matchingA \u003d SearchDishCommand.searchDish(\"bacon\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingA.containsKey(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingA.containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap\u003cString, Dish\u003e matchingB \u003d SearchDishCommand.searchDish(\"bac\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingB.containsKey(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingB.containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingB.containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingB.containsKey(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void searchDishTestC() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap\u003cString, Dish\u003e matchingA \u003d SearchDishCommand.searchDish(\"cheese\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void searchDishTestD() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        HashMap\u003cString, Dish\u003e matchingA \u003d SearchDishCommand.searchDish(\"pizza\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertTrue(matchingA.containsKey(\"bacon pizza\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"chicken biryani\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertFalse(matchingA.containsKey(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 70
    }
  },
  {
    "path": "src/test/java/commands/SearchStockCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.IngredientNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class SearchStockCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void construct_SearchStockCommand_constructNormally() "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String keywordSupplied \u003d \"tomato\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String keywordInCommand \u003d new SearchStockCommand(\" tomato\").getKeyword();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(keywordSupplied.equals(keywordInCommand));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void construct_SearchStockCommand_blankKeywordSupplied() "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            new SearchStockCommand(\" \").getKeyword();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(isce.getMessage(), "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    \"Please enter an ingredient\u0027s name to be searched against the stock.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }   "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute_executeSearchCommand_executeNormally() "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient vegetable \u003d "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"vegetable\", Optional.of(10), Optional.of(0.50));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient salt \u003d "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"salt\", Optional.of(1), Optional.of(0.30));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient rice \u003d "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient flour \u003d "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"flour\", Optional.of(10), Optional.of(0.30));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient potato \u003d "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"potato\", Optional.of(1), Optional.of(0.50));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(tomato);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(vegetable);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(salt);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(flour);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(rice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(potato);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createSearchStockOutputCopy(), executeSearch(stock, \"potato\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createSearchStockOutputCopyTwo(), executeSearch(stock, \"to\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(createSearchStockOutputCopyThree(), executeSearch(stock, \"t\"));       "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Utility functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns a string representation once a StockCommand is executed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String executeSearch(Stock stock, String keyword) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d printSearchStockToString(stock, keyword);           "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A String representation of printing the ingredients in the stock that contains"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * a supplied keyword. This method has the same implementation of searchStock() in "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the Stock class, except that this returns a string instead of void."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String printStock(Stock stock, String keyword) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int ingredientCounter \u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Map.Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : stock.getStock().entrySet()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (ingredientName.contains(keyword)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                int quantity \u003d ingredient.getValue().first();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                double price \u003d ingredient.getValue().second();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                outputMessage +\u003d (ls "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ingredientCounter "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \". \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"[\" "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + quantity "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"]\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"[$\" "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + String.format(\"%.2f\", price) "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \"]\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + \" \" "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        + ingredientName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }           "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ingredientCounter++;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createSearchStockOutputCopy() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Here are the ingredients in the stock that matches the keyword:\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"1. [1][$0.50] potato\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls); "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createSearchStockOutputCopyTwo() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Here are the ingredients in the stock that matches the keyword:\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"1. [1][$0.50] potato\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [1][$0.50] tomato\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls); "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String createSearchStockOutputCopyThree() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Here are the ingredients in the stock that matches the keyword:\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"1. [1][$0.30] salt\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [1][$0.50] potato\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"3. [1][$0.50] tomato\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"4. [10][$0.50] vegetable\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls); "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * A String representation of printing the stock as to when user input \u0027search stock\u0027."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String printSearchStockToString(Stock stock, String keyword) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"Here are the ingredients in the stock that matches the keyword:\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d printStock(stock, keyword) "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        outputMessage +\u003d (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 200,
      "SibingWu": 1
    }
  },
  {
    "path": "src/test/java/commands/StockCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InvalidStockCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class StockCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void execute_executeStockCommand_throwsException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stockCommand.execute();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IllegalStateException ise) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"This method is to be implemented by child classes\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    ise.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientName_parseNormally() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"tomato\", stockCommand.parseIngredientName(\"i/tomato\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(stockCommand.parseIngredientName(\"i/tomato\").equals(\"potato\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientQuantity_parseNormally() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(10, stockCommand.parseIngredientQuantity(\"q/10\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\", "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please enter a positive value for the quantity to be added!\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientQuantity_quantityIsTypeDouble() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int parsedInvalidQuantity \u003d stockCommand.parseIngredientQuantity(\"q/10.0\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientQuantity_quantityIsNotInteger() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int parsedInvalidQuantityTwo \u003d stockCommand.parseIngredientQuantity(\"q/LOL\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\", "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientQuantity_quantityIsNegative() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int parsedInvalidQuantityThree \u003d stockCommand.parseIngredientQuantity(\"q/-10\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the quantity specified is an integer!\", "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please enter a positive value for the quantity to be added!\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientPrice_parseNormally() "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidStockCommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(0.5, stockCommand.parseIngredientPrice(\"p/$0.50\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified has a \u0027$\u0027 sign and is a decimal!\", "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please enter a positive value for the ingredient\u0027s price!\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientPrice_priceIsIntger() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double parsedInvalidPrice \u003d stockCommand.parseIngredientPrice(\"p/$10\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified has a \u0027$\u0027 sign and is a decimal!\", "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please enter a positive value for the ingredient\u0027s price!\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientPrice_priceIsDouble() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double parsedInvalidPriceTwo \u003d stockCommand.parseIngredientPrice(\"p/LOL\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified has a \u0027$\u0027 sign and is a decimal!\", "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified has a \u0027$\u0027 sign and is a decimal!\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientPrice_priceMissingDollarSign() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double parsedInvalidPriceThree \u003d stockCommand.parseIngredientPrice(\"p/10.0\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified has a \u0027$\u0027 sign and is a decimal!\", "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified has a \u0027$\u0027 sign and is a decimal!\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void parse_parseIngredientPrice_priceIsNegative() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StockCommand stockCommand \u003d new StockCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double parsedInvalidPriceFour \u003d stockCommand.parseIngredientPrice(\"p/$-10.0\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please ensure that the price specified has a \u0027$\u0027 sign and is a decimal!\", "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    nfe.getMessage());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStockCommandException isce) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"Please enter a positive value for the ingredient\u0027s price!\", "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    isce.getMessage());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 167,
      "SibingWu": 1
    }
  },
  {
    "path": "src/test/java/commands/VoidReservationCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.DelimiterMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import exceptions.InputMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.Reservation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import reservation.ReservationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "class VoidReservationCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    ReservationList reservationList; "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public VoidReservationCommandTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservationList \u003d new ReservationList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new AddReservationCommand(\"p/Peter; d/2020-03-12 12:00; n/3; c/98955555;\").execute(reservationList, ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void execute_normalVoidReservationCommand_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        new VoidReservationCommand(\"r/0;\").execute(reservationList, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservationList.getReservation(reservationList.getSize() - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Invalid\", reservation.getStatus());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_inputMissingVoidReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new VoidReservationCommand(\"\").parseInput(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"reservation number r/\", e.getInput());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Input Missing: reservation number r/ is missing.\", e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void parseInput_delimiterMissingVoidReservationCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            new VoidReservationCommand(\"r/0\").parseInput(\"r/0\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (InputMissingException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        } catch (DelimiterMissingException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "            assertEquals(\"Delimiter Missing.\", e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 54
    }
  },
  {
    "path": "src/test/java/ingredient/IngredientTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class IngredientTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void print_IngredientToString_toStringIsIngredientName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"tomato\", "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.empty(), Optional.empty()).toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"potato\", "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"potato\", Optional.of(0), Optional.empty()).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"rice\", "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"rice\", Optional.of(1), Optional.of(1.0)).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_IsQuantitySpecified_TrueWhenQuantitySpecified() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.of(1), Optional.empty()).isQuantitySpecified());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                new Ingredient(\"tomato\", Optional.empty(), Optional.empty()).isQuantitySpecified());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns true if both ingredients have the same name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_Equals_TrueIfIngredientsHaveSameName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoA \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.empty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoACopy \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.empty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomatoB \u003d new Ingredient(\"tomato\", Optional.of(2), Optional.empty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(tomatoA.equals(tomatoACopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(tomatoA.equals(tomatoB));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void getQuantity_GetIngredientQuantity_QuantityOfIngredient() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient rice \u003d new Ingredient(\"rice\", Optional.empty(), Optional.of(0.5));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(1, tomato.getIngredientQuantity());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            rice.getIngredientQuantity();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NoSuchElementException nsoe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"No value present\", nsoe.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void getPrice_GetIngredientPrice_PriceOfIngredient() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient rice \u003d new Ingredient(\"rice\", Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(0.50, tomato.getIngredientPrice());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            rice.getIngredientPrice();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (NoSuchElementException nsoe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"No value present\", nsoe.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void getName_GetIngredientNameNameOfIngredient() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient tomato \u003d new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Ingredient rice \u003d new Ingredient(\"rice\", Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(\"tomato\", tomato.getIngredientName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(rice.getIngredientName().equals(\"banana\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 80
    }
  },
  {
    "path": "src/test/java/profit/ProfitTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "package profit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import commands.AddDishCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import dish.Profit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.EmptyStockException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.IngredientMissingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import exceptions.NegativeProfitException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "public class ProfitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void stockA() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Stock stockA \u003d new Stock();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"cheese\", Optional.of(1), Optional.of(0.30)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"bacon\", Optional.of(1), Optional.of(0.90)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"chicken\", Optional.of(1), Optional.of(1.00)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"chili\", Optional.of(1), Optional.of(0.20)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"pasta\", Optional.of(1), Optional.of(0.40)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"sauce\", Optional.of(1), Optional.of(0.20)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"flatbread\", Optional.of(1), Optional.of(0.30)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void stockB() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Stock stockB \u003d new Stock();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"cheese\", Optional.of(1), Optional.of(3.00)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"bacon\", Optional.of(1), Optional.of(2.00)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"chicken\", Optional.of(1), Optional.of(6.00)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(3.00)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"chili\", Optional.of(1), Optional.of(2.00)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"pasta\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"sauce\", Optional.of(1), Optional.of(0.60)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"flatbread\", Optional.of(1), Optional.of(0.30)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void stockC() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Stock stockC \u003d new Stock();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockC.addIngredient(new Ingredient(\"cheese\", Optional.of(0), Optional.of(3.00)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockC.addIngredient(new Ingredient(\"bacon\", Optional.of(5), Optional.of(2.00)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void profitTestA() throws NegativeProfitException, EmptyStockException, IngredientMissingException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockA();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Profit p1 \u003d new Profit(Menu.getDishMap().get(\"bacon pizza\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(1.20, p1.getCost());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(3.80, p1.getProfit());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Profit p2 \u003d new Profit(Menu.getDishMap().get(\"chicken biryani\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(1.70, p2.getCost());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(8.30, p2.getProfit());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d3 \u003d \"i/chicken, pasta, sauce; n/pasta with chicken; p/7.00;\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Profit p3 \u003d new Profit(Menu.getDishMap().get(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(1.60, p3.getCost());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(5.40, p3.getProfit());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d4 \u003d \"i/flatbread, bacon, cheese; p/3.00; n/bacon flatbread;\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d4);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Profit p4 \u003d new Profit(Menu.getDishMap().get(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(1.50, p4.getCost());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        assertEquals(1.50, p4.getProfit());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void profitTestB() throws NegativeProfitException, EmptyStockException, IngredientMissingException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockB();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            Profit p1 \u003d new Profit(Menu.getDishMap().get(\"bacon pizza\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (NegativeProfitException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Profit is \u003c\u003d 0\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            Profit p2 \u003d new Profit(Menu.getDishMap().get(\"chicken biryani\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (NegativeProfitException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Profit is \u003c\u003d 0\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d3 \u003d \"i/chicken, pasta, sauce; n/pasta with chicken; p/7.00;\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d3);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            Profit p3 \u003d new Profit(Menu.getDishMap().get(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (NegativeProfitException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Profit is \u003c\u003d 0\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d4 \u003d \"i/flatbread, bacon, cheese; p/3.00; n/bacon flatbread;\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d4);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            Profit p4 \u003d new Profit(Menu.getDishMap().get(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (NegativeProfitException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Profit is \u003c\u003d 0\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void profitTestC() throws NegativeProfitException, EmptyStockException, IngredientMissingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockC();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            Profit p1 \u003d new Profit(Menu.getDishMap().get(\"bacon pizza\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (EmptyStockException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Stock for an ingredient is empty\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    public void profitTestD() throws NegativeProfitException, EmptyStockException, IngredientMissingException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        stockC();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        Menu m \u003d new Menu();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        String d4 \u003d \"i/flatbread, bacon, cheese; p/3.00; n/bacon flatbread;\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        AddDishCommand.addDish(d4);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            Profit p1 \u003d new Profit(Menu.getDishMap().get(\"bacon flatbread\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        } catch (IngredientMissingException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "            System.out.println(\"Stock doesn\u0027t contain at least one ingredient\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 139
    }
  },
  {
    "path": "src/test/java/reservation/ReservationListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package reservation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "class ReservationListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    ReservationList reservationList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    public ReservationListTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservationList \u003d new ReservationList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservationList.addReservation(new Reservation(0, \"Lisa\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                LocalDateTime.parse(\"2020-03-15 12:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                3, \"12345678\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void addReservation_normalInput_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservationList.getReservation(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(0, reservation.getReservationNumber());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Lisa\", reservation.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2020-03-15 12:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservation.getDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\u0027S\u0027, reservation.getTableSize());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"12345678\", reservation.getContact());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"No comments\", reservation.getComments());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Unserved\", reservation.getStatus());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void markReservationAsServed_normalInput_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservationList.markReservationAsServed(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservationList.getReservation(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Served\", reservation.getStatus());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void voidReservation_normalInput_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservationList.voidReservation(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d reservationList.getReservation(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Invalid\", reservation.getStatus());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void getSize_normalInput_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(1, reservationList.getSize());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 52
    }
  },
  {
    "path": "src/test/java/reservation/ReservationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "package reservation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SibingWu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "class ReservationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    void testGetterandSetter_normalInput_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        Reservation reservation \u003d new Reservation(2, \"Lisa\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                LocalDateTime.parse(\"2020-03-15 12:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                3, \"12345678\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(2, reservation.getReservationNumber());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Lisa\", reservation.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setName(\"Peter\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Peter\", reservation.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2020-03-15 12:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")), "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservation.getDate());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setDate(LocalDateTime.parse(\"2020-03-15 13:00\", "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2020-03-15 13:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "                reservation.getDate());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\u0027S\u0027, reservation.getTableSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setNumberOfGuests(8);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\u0027M\u0027, reservation.getTableSize());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"12345678\", reservation.getContact());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setContact(\"11111111\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"11111111\", reservation.getContact());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"No comments\", reservation.getComments());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setComments(\"no spicy food please\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"no spicy food please\", reservation.getComments());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Unserved\", reservation.getStatus());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        reservation.setStatus(\"Served\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "        assertEquals(\"Served\", reservation.getStatus());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SibingWu": 47
    }
  },
  {
    "path": "src/test/java/sales/SalesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nguan1"
        },
        "content": "package sales;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import commands.AddDishCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.EmptyStockException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.IngredientMissingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import exceptions.NegativeProfitException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import menu.Menu;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nguan1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nguan1"
        },
        "content": "public class SalesTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    final Menu menu \u003d new Menu();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void stockA() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Stock stockA \u003d new Stock();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"cheese\", Optional.of(1), Optional.of(0.30)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"bacon\", Optional.of(1), Optional.of(0.90)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"chicken\", Optional.of(1), Optional.of(1.00)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"chili\", Optional.of(1), Optional.of(0.20)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"pasta\", Optional.of(1), Optional.of(0.40)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"sauce\", Optional.of(1), Optional.of(0.20)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"flatbread\", Optional.of(1), Optional.of(0.30)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void testAddSale1() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d3 \u003d \"n/pasta; i/spaghetti, bacon; p/10.00;\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d2 \u003d \"n/bacon; i/bacon; p/3.00;\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Sales s \u003d new Sales();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String s1 \u003d \"d/bacon pizza; q/5;\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String s2 \u003d \"d/bacon; q/10\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String s3 \u003d \"d/pasta; q/20\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(s1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(s2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(s3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertNotNull(s.getSalesMap());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.getSalesMap().get(Menu.getDishMap().get(\"bacon pizza\")).equals(5));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.getSalesMap().get(Menu.getDishMap().get(\"bacon\")).equals(10));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.getSalesMap().get(Menu.getDishMap().get(\"pasta\")).equals(20));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void testAddSale2() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d2 \u003d \"n/bacon; i/bacon; p/3.00;\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Sales s \u003d new Sales();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String s1 \u003d \"d/bacon pizza; q/5;\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String s2 \u003d \"d/bacon; q/10\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String s3 \u003d \"d/pasta; q/20\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(s1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(s2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(s3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertNotNull(s.getSalesMap());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.getSalesMap().get(Menu.getDishMap().get(\"bacon pizza\")).equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.getSalesMap().get(Menu.getDishMap().get(\"bacon\")).equals(10));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertNull(s.getSalesMap().get(Menu.getDishMap().get(\"pasta\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void testTotalProfit() throws NegativeProfitException, EmptyStockException, IngredientMissingException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d3 \u003d \"i/chicken, pasta, sauce; n/pasta with chicken; p/7.00;\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d4 \u003d \"i/flatbread, bacon, cheese; p/3.00; n/bacon flatbread;\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d4);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Sales s \u003d new Sales();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/bacon pizza; q/15;\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/chicken biryani; q/12;\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/bacon flatbread; q/5;\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/pasta with chicken; q/20;\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.calculateProfit() \u003d\u003d 272.1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void testPopularDishAndProfit() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        stockA();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d1 \u003d \"n/bacon pizza; i/cheese, bacon; p/5.00;\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d2 \u003d \"i/chicken, rice, chili; n/chicken biryani; p/10.00;\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d3 \u003d \"i/chicken, pasta, sauce; n/pasta with chicken; p/7.00;\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d3);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        String d4 \u003d \"i/flatbread, bacon, cheese; p/3.00; n/bacon flatbread;\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        AddDishCommand.addDish(d4);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Sales s \u003d new Sales();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/bacon pizza; q/15;\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/chicken biryani; q/12;\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/bacon flatbread; q/5;\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        s.addSale(\"d/pasta with chicken; q/20;\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.calculateProfit() \u003d\u003d 272.1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.mostPopularDish().equals(\"pasta with chicken\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nguan1"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    public void testNoDish() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        Sales s \u003d new Sales();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.calculateProfit() \u003d\u003d 0.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertTrue(s.getSalesMap().isEmpty());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nguan1"
        },
        "content": "        assertNull(s.mostPopularDish());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nguan1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nguan1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nguan1": 134
    }
  },
  {
    "path": "src/test/java/stock/StockTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ingredient.IngredientNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import stock.Stock;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import utils.Pair;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class StockTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String ls \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test that the ingredient saves the new price supplied whenever the user inputs it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void addIngredient_AddIngredientWithQuantitySupplied_addNormally() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockA \u003d new Stock(); "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.40)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockA.addIngredient(new Ingredient(\"tomato\", Optional.of(2), Optional.of(0.50)));     "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(stockA.getStock().get(\"tomato\").second().equals(0.40));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test that the ingredient\u0027s quantity is added up."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void addIngredient_AddIngredientWithQuantitySupplied_sumQuantity() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockB \u003d new Stock();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.40)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockB.addIngredient(new Ingredient(\"tomato\", Optional.of(2), Optional.of(0.50))); "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(stockB.getStock().get(\"tomato\").first().equals(3));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(stockB.getStock().get(\"tomato\").first().equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test against the stockCopy. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void testAdd_CompareAgainstStockCopy_TrueIfSameContent() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockC \u003d new Stock();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        final Map\u003cString, Pair\u003cInteger, Double\u003e\u003e stockCopy \u003d createStockCopy();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockC.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockC.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockC.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(stockC.getStock().keySet(), (stockCopy.keySet()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test for the case where user provides a quantity to be deleted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void deleteIngredient_DeleteIngredientWithQuantity_deleteNormally() "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockD \u003d new Stock();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockD.addIngredient(new Ingredient(\"tomato\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockD.deleteIngredient(new Ingredient(\"tomato\", Optional.of(1), Optional.empty()));        "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(0, stockD.getStock().get(\"tomato\").first());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Test for the case where user did not provide a quantity to be deleted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void deleteIngredient_DeleteIngredientWithoutQuantity_deleteNormally() "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockE \u003d new Stock();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockE.addIngredient(new Ingredient(\"banana\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockE.deleteIngredient(new Ingredient(\"banana\", Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(stockE.getStock().containsKey(\"banana\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void testDelete_CompareAgainstStockCopy_TrueIfSameContent() "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stockF \u003d new Stock();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockF.addIngredient(new Ingredient(\"banana\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockF.deleteIngredient(new Ingredient(\"banana\", Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(stockF.getStock().containsKey(\"banana\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        final Map\u003cString, Pair\u003cInteger, Double\u003e\u003e stockCopy \u003d createStockCopy();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockF.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockF.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockF.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(stockF.getStock().keySet(), (stockCopy.keySet()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void deleteIngredient_DeleteIngredientNotInStock_deleteNormally() "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"banana\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.deleteIngredient(new Ingredient(\"banana\", Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(stock.getStock().containsKey(\"banana\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            stock.deleteIngredient(new Ingredient(\"milo\", Optional.of(1), Optional.of(0.3)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IngredientNotFoundException infe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            assertEquals(\"This ingredient is not in the stock currently!\", infe.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void list_ListIngredient_ListInSameOrder() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        final Stock stockCopyB \u003d new Stock();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopyB.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopyB.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopyB.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(areEqualMap(stock.getStock(), stockCopyB.getStock()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void print_printStockWhenIngredientQuantityIsZero_SerialIndexUnchanged() "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.deleteIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.empty()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String stockCopyOutput \u003d \"1. [10][$1.00] chicken\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [0][$0.50] tomato\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"3. [1][$0.50] rice\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(printStockOutput(stock), stockCopyOutput);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void print_printStockWhenIngredientRemoved_SerialIndexReorder() "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws IngredientNotFoundException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Stock stock \u003d new Stock();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.of(0.50)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"rice\", Optional.of(1), Optional.of(0.50)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.addIngredient(new Ingredient(\"chicken\", Optional.of(10), Optional.of(1.00)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.deleteIngredient(new Ingredient(\"tomato\", Optional.of(3), Optional.empty()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String stockCopyOutput \u003d \"1. [10][$1.00] chicken\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [0][$0.50] tomato\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"3. [1][$0.50] rice\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(printStockOutput(stock), stockCopyOutput);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stock.deleteIngredient(new Ingredient(\"tomato\", Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String newStockCopyOutput \u003d \"1. [10][$1.00] chicken\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"2. [1][$0.50] rice\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ls;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(printStockOutput(stock), newStockCopyOutput);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Utility functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Map\u003cString, Pair\u003cInteger, Double\u003e\u003e createStockCopy() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, Pair\u003cInteger, Double\u003e\u003e stockCopy \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.put(\"tomato\", Pair.of(1, 0.40));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.put(\"tomato\", Pair.of(2, 0.50));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.put(\"rice\", Pair.of(1, 0.50));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        stockCopy.put(\"chicken\", Pair.of(10, 1.00));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return stockCopy;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns a string representation of the list of ingredients in the stock."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String printStockOutput(Stock stock) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int ingredientCounter \u003d 1;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Map.Entry\u003cString, Pair\u003cInteger, Double\u003e\u003e ingredient : stock.getStock().entrySet()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String ingredientName \u003d ingredient.getKey();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            int quantity \u003d ingredient.getValue().first();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            double price \u003d ingredient.getValue().second();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            output +\u003d (ingredientCounter "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \". \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"[\" "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + quantity "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"[$\" "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + String.format(\"%.2f\", price) "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + \" \" "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ingredientName"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    + ls);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "           "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ingredientCounter++;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Returns true if both maps are the same through deep scanning of its internal hashMap values."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private boolean areEqualMap(Map\u003cString, Pair\u003cInteger, Double\u003e\u003e firstMap, "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, Pair\u003cInteger, Double\u003e\u003e secondMap) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (firstMap.size() !\u003d secondMap.size()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return firstMap.entrySet().stream()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "          .allMatch(e -\u003e e.getValue().equals(secondMap.get(e.getKey())));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }      "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 237
    }
  },
  {
    "path": "src/test/java/utils/PairTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "class PairTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_pairOfMethod_constructNormally() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cInteger, Double\u003e firstPair \u003d Pair.of(1, 0.5);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cInteger, Double\u003e secondPair \u003d Pair.of(1, 0.5);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(firstPair.first(), secondPair.first());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(firstPair.second(), secondPair.second());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cString, String\u003e thirdPair \u003d Pair.of(\"rice\", \"banana\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cString, String\u003e fourthPair \u003d Pair.of(\"rice\", \"chicken\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertEquals(thirdPair.first(), fourthPair.first());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(thirdPair.second().equals(fourthPair.second()));        "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_equals_TrueIfBothPairsHaveSameFirstAndSecondValue() {       "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cInteger, Double\u003e firstPair \u003d Pair.of(1, 0.5);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cInteger, Double\u003e secondPair \u003d Pair.of(1, 0.5);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertTrue(firstPair.equals(secondPair));        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Test "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void test_equals_TrueIfBothPairsHaveSameTypings() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cInteger, Double\u003e firstPair \u003d Pair.of(1, 0.5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cInteger, Double\u003e secondPair \u003d Pair.of(1, 0.5);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cString, String\u003e thirdPair \u003d Pair.of(\"rice\", \"banana\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Pair\u003cString, String\u003e fourthPair \u003d Pair.of(\"rice\", \"chicken\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(thirdPair.equals(fourthPair));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(firstPair.equals(thirdPair));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        assertFalse(secondPair.equals(fourthPair));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 46
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "add dish; n/pizza; i/cheese, sauce; p/7.00;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "list dish"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "add dish; n/rice; i/rice, salt; p/12.00;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "delete dish; n/pizza;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "list dish"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10; p/$0.40;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; p/$0.40; q/10; i/tomato;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; p/$0.40; q/10;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10; p/$0.50;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; q/10;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; p/$0.50;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; q/10; p/$0.50;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; p/$0.50;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/LOL; p/$0.50;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10; p/0.5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/-10; p/$0.50;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10; p/$-0.50;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10; p/LOL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; tomato; q/10; p/$0.50;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; 10; p/$0.50;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/tomato; q/10; 0.50;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/rice; q/11; p/$0.40;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/vege; q/10; p/$0.40;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/greenie; q/0; p/$0.40;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "add stock; i/toxic greens; q/1; p/$0.40;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list stock"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; i/tomato; q/1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; q/1; i/tomato;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; i/tomato; q/9;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list stock"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; i/tomato;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; q/10;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; i/tomato; q/LOL;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; i/tomato; q/-10;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete stock; tomato; q/1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list stock"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock;      "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; tomato"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; rice"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "search stock; o"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/Peter; d/2020-03-12 12:00; n/3; c/98955555;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/Mary; d/2020-03-11 12:00; n/8; c/99998888;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/David; d/2020-03-12 12:00; n/9; c/98887777;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/Lisa; m/no spicy food please; d/2020-03-13 12:00; n/3; c/98889999;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/David d/2020-03-12 12:00; n/3; c/98887777;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/David; d/2020-03-12 12:00; c/98887777;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/David; d/2020-03-1 12:00; n/3; c/98887777;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "add reservation; p/David; d/2020-03-10 12:00; n/0; c/98887777;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list reservation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete reservation; r/0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/0"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/-1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete reservation; r/1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete reservation; r/2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SibingWu"
        },
        "content": "delete reservation; r/4;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list reservation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 45,
      "gmuthu17": 5,
      "SibingWu": 12
    }
  },
  {
    "path": "text-ui-test/report.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Menu Items"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. rice \t rice, salt "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Current Stock"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "1. toxic greens \t $0.40 1 "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "2. greenie \t $0.40 0 "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "3. vege \t $0.40 10 "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "4. rice \t $0.40 11 "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Reservations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Reservation [0]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Status: Invalid"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "contact person: Peter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "date: 2020-03-12 12:00"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "number of guests: 3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "table size: S"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "contact details: 98955555"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "comments: No comments"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Reservation [1]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Status: Invalid"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "contact person: Mary"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "date: 2020-03-11 12:00"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "number of guests: 8"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "table size: M"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "contact details: 99998888"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "comments: No comments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Reservation [2]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Status: Invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "contact person: David"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "date: 2020-03-12 12:00"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "number of guests: 9"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "table size: L"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "contact details: 98887777"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "comments: No comments"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Reservation [3]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "Status: Unserved"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "contact person: Lisa"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "date: 2020-03-13 12:00"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "number of guests: 3"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "table size: S"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "contact details: 98889999"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": "comments: no spicy food please"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gmuthu17"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gmuthu17": 49
    }
  }
]
