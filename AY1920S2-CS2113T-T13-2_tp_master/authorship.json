[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.2.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "group \u0027seedu.nuke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    //config the jar to Mavern library"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    implementation \u0027org.fusesource.jansi:jansi:1.18\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    implementation \u0027com.alibaba:fastjson:1.2.12\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    mainClassName \u003d \"seedu.nuke.Nuke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    archiveBaseName \u003d \"nuke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    archiveVersion \u003d \"1.0\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 2,
      "A11riseforme": 7,
      "-": 35
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/50083580?s\u003d400\u0026u\u003d361572b20fcd6750428a1553c5388e5125b8ac13\u0026v\u003d4) | Wang Qin | [Github](https://github.com/wangqinNick) | [Portfolio](docs/team/wangqin.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yang Chenglong | [Github](https://github.com/A11riseforme) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hao Yun | [Github](https://github.com/HAOYUN49) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![](https://winaero.com/blog/wp-content/uploads/2019/09/Chrome-Incognito-Mode-Icon-256.png) | Clement Cheng | [iceclementi](https://github.com/iceclementi) | [Portfolio](docs/team/iceclementi.md)"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 1,
      "A11riseforme": 1,
      "iceclementi": 1,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/Nuke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.ui.TextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.util.Message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class Nuke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Root root;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private CommandResult commandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private ModuleManager moduleManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private HashMap\u003cString, String\u003e modulesMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * constructor of nuke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @throws FileNotFoundException if file cannot be found when loading jason file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public Nuke() throws FileNotFoundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        root \u003d new Root();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        modulesMap \u003d ModuleLoader.load(\"moduleList.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        storageManager \u003d new StorageManager(\"data.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        moduleManager \u003d new ModuleManager(root, modulesMap);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        moduleManager.setModuleList(storageManager.load());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Command.setCurrentDirectory(root);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * ScreenShot entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param args arguments passed to the programme."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws FileNotFoundException exception is thrown if the file is not found."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        new Nuke().run();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * run method for Nuke class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        welcomeUser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        storageManager.save(moduleManager.getModuleList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        //exit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Method to print the welcome message to the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void welcomeUser() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.clearScreen();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.displayLogo();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.showWelcomeMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Method to print the exit message to the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ui.showSystemMessage(Message.DIVIDER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Method to run the command from the user\u0027s input until bye command is received."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String userCommandText \u003d ui.getInput();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Command command \u003d new Parser().parseCommand(userCommandText, moduleManager);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            CommandResult result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ui.showResult(result);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } while (!ExitCommand.isExit());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * initialize the taskManager system, execute command and save the list to the file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param command the parsed Command object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return commandResult that contains the execute output information"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult executeCommand(Command command) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //load from current screen shot"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        //readScreenShot();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // supplies the data the command will operate on."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // if there is no file to load or the file is empty, setData will initialize a new taskManager system"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //update the module manager as well as the data manager"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        setCommandData(command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //take the screen shot"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        //takeScreenShot();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //add screen shot"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        //addScreenShotToScreenShotList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // Execute according to the command itself"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        execute(command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // save the taskManager to a file"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //moduleManager.getStorager().save(taskManager);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //StorageFile.saveJson(taskManager);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void execute(Command command) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void setCommandData(Command command) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        command.setData(moduleManager);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ModuleManager getModuleManager() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return moduleManager;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult getCommandResult() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 31,
      "wangqinNick": 51,
      "A11riseforme": 39,
      "iceclementi": 6,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ChangeDirectoryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_MODULE_CHANGE_SUCCESSFUL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_ROOT_CHANGE_SUCCESSFUL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ChangeDirectoryCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cd\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Directory directoryToChange;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ChangeDirectoryCommand(Directory toChange) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.directoryToChange \u003d toChange;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //context switch"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        setCurrentDirectory(this.directoryToChange);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (directoryToChange instanceof Root) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_ROOT_CHANGE_SUCCESSFUL);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(MESSAGE_MODULE_CHANGE_SUCCESSFUL);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 27
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static String COMMAND_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected ModuleManager moduleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected static Directory currentDirectory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return this.COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * initialize some attributes of the command if needed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleManager current module manager that manages all modules."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setData(ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.moduleManager \u003d moduleManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static Directory getCurrentDirectory() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return currentDirectory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void setCurrentDirectory(Directory currentModule) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Command.currentDirectory \u003d currentModule;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 4,
      "wangqinNick": 26,
      "A11riseforme": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " *construct the feedback to user String."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final boolean isShowTasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private final ArrayList\u003cString\u003e shownList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * construct a command result that only have one feedback."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param feedbackToUser execution feedback that should be shown to the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isShowTasks \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        shownList \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * construct a command result that have feedback and lists of information that needs to be printed out."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param feedbackToUser the string of the result which will be printed to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param isShowTasks if the command is to show tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param shownList the list of tasks to be shown to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isShowTasks, ArrayList\u003cString\u003e shownList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isShowTasks \u003d isShowTasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.shownList \u003d shownList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isShowTasks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isShowTasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ArrayList\u003cString\u003e getShownList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return shownList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 14,
      "wangqinNick": 12,
      "A11riseforme": 6,
      "iceclementi": 14
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EXIT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ExitCommand extends TaskCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exit the program.\\n    Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static boolean isExit; // To check if user requests to exit the program"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eExit Command\u003c/b\u003e to exit the \u003cb\u003eNuke\u003c/b\u003e program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the user has requested to exit the program (after confirmation if necessary)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if an exit is requested, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isExit; // Returns true if command is exit command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "wangqinNick": 18,
      "iceclementi": 16
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.ui.Ui.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_HELP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return new CommandResult(MESSAGE_HELP, true, commands);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 6,
      "wangqinNick": 13
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/IncorrectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eInvalid Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e that is determined to be invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private final String feedbackToUSer; // Message to be shown to the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public IncorrectCommand(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUSer \u003d message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getFeedbackToUSer() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return feedbackToUSer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eInvalid Command\u003c/b\u003e to show the \u003ccode\u003emessage\u003c/code\u003e to the user due to an \u003ci\u003einvalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * command\u003c/i\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(feedbackToUSer);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 9,
      "iceclementi": 21
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * module level command inherits Command class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class ModuleCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 8,
      "A11riseforme": 1
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * task level command inherits ModuleCommand class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class TaskCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected TaskManager taskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    //public String commandWord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public TaskCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public TaskCommand(int targetIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Extracts the the target person in the last shown list from the given arguments."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected Task getTargetTask() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return taskManager.getAllTasks().get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 35,
      "A11riseforme": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE_ADD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.messageAddModuleSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd Module Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to add a \u003cb\u003eModule\u003c/b\u003e into the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Module"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern[] REGEX_FORMATS \u003d {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003cidentifier\u003e^\\\\s*([^-]+))\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003cinvalid\u003e-.+)\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eAdd Module Command\u003c/b\u003e to add a \u003cb\u003eModule\u003c/b\u003e into the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            moduleManager.add(moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Module addedModule \u003d moduleManager.getLastAddedModule();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(messageAddModuleSuccess(addedModule.getModuleCode(), addedModule.getTitle()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE_ADD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (ModuleNotProvidedException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_PROVIDED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 6,
      "A11riseforme": 6,
      "iceclementi": 41
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddTagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TAG_ADDED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-tag\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" task description\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Pattern[] REGEX_FORMATS \u003d {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Pattern.compile(\"([a][d][d])\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Pattern.compile(\"(\\\\s)(\\\\-)\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Pattern.compile(\"([t][a][g])\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private final String info;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public AddTagCommand(String info) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.info \u003d info;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Task task \u003d (Task)Command.getCurrentDirectory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        task.setTag(info);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(MESSAGE_TAG_ADDED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 32
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.TaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TASK_ADDED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class AddTaskCommand extends TaskCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" task description \" + \": Add a task to the module.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private final Task taskToAdd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.taskToAdd \u003d task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Module module \u003d (Module)Command.getCurrentDirectory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        moduleManager.addTaskToModule(module.getTaskManager(), taskToAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        //dataManager.addTask(taskToAdd);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(MESSAGE_TASK_ADDED);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 27,
      "A11riseforme": 1
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/deletecommand/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 15
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/deletecommand/DeleteModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.EXACT_FLAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.messageDeleteModuleSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"delm \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern[] REGEX_FORMATS \u003d {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003cidentifier\u003e^\\\\s*([^-]+))\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003cexact\u003e(?:\" + EXACT_FLAG + \")?)\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003cinvalid\u003e(?:-(?:[^e].*|[e]\\\\S+)))\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eDelete Module Command\u003c/b\u003e to delete a \u003cb\u003eModule\u003c/b\u003e with the \u003ccode\u003emodule code\u003c/code\u003e from the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Module deletedModule \u003d moduleManager.delete(moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    messageDeleteModuleSuccess(deletedModule.getModuleCode(), deletedModule.getTitle()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "wangqinNick": 8,
      "A11riseforme": 2,
      "iceclementi": 36
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/deletecommand/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.TaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TASK_REMOVED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DeleteTaskCommand extends TaskCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" task description \" + \": Add a task to the module.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DeleteTaskCommand(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Module currentModule \u003d (Module) Command.getCurrentDirectory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Task taskToDelete \u003d currentModule.getTaskManager().findTask(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        currentModule.getTaskManager().delete(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //add the task to the data manager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        moduleManager.removeTask(currentModule.getTaskManager(), taskToDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(MESSAGE_TASK_REMOVED);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 29,
      "A11riseforme": 1
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/EditDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.editcommand.EditTaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.format.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * edit the deadline of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class EditDeadlineCommand extends EditTaskCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editDeadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    //public static final String MESSAGE_USAGE_1 \u003d COMMAND_WORD + \"task description \" + \": Edit the deadline of a"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    // task.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    //public static final String MESSAGE_USAGE_2 \u003d \"      Example: \" + COMMAND_WORD + \" read a book\" + \"YYYY-MM-DD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    // hh:mm:ss\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DONE \u003d \"  Nice! I\u0027ve marked this task as done:  %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DateTime deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * set the new deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param toEdit full command args string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditDeadlineCommand(Task toEdit, DateTime deadline) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(toEdit);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // todo find the target task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final Task toEdit \u003d getTargetTask();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // todo set the description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        toEdit.setDeadline(deadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE, toEdit.getDescription()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 29,
      "A11riseforme": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/EditTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.TaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * edit-type command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class EditTaskCommand extends TaskCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected String taskDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * set the deadline of a task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param taskDescription full command args string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditTaskCommand(String taskDescription) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditTaskCommand(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 26,
      "A11riseforme": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/listcommand/ListAllTasksDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASK_IN_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TASK_SUCCESSFULLY_LIST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * sort all tasks of all modules according to deadline of task and print it out to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ListAllTasksDeadlineCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private ArrayList\u003cString\u003e deadlines;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lst\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //get the large task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        if (moduleManager.countAllTasks() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_NO_TASK_IN_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assert moduleManager.countAllTasks() !\u003d EMPTY : \"make sure there are some tasks in the list\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        deadlines \u003d moduleManager.checkDeadline();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_TASK_SUCCESSFULLY_LIST, moduleManager.countAllTasks()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                true, deadlines);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 11,
      "wangqinNick": 16,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/listcommand/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ls\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 13
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/listcommand/ListModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.ALL_FLAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.EXACT_FLAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_MODULES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ListModuleCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lsm\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern[] REGEX_FORMATS \u003d {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003cidentifier\u003e^\\\\s*([^-]+)?)\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003call\u003e(?:\" + ALL_FLAG + \")?)\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003cexact\u003e(?:\" + EXACT_FLAG + \")?)\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003cinvalid\u003e(?:-(?:[^ae].*|[ae]\\\\S+)))\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cString\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (Module module: moduleManager.getModuleList()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // modules.add(module.getModuleCode() + \" \" + module.getTitle() + \" \" + module.getDescription());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            modules.add(module.getModuleCode() + \" \" + module.getTitle());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_MODULES, true, modules);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 8,
      "wangqinNick": 6,
      "iceclementi": 18
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/listcommand/ListModuleTasksDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_GO_INTO_MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASK_IN_LIST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TASK_SUCCESSFULLY_LIST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * sort all tasks of one module according to deadline of task and print it out to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ListModuleTasksDeadlineCommand extends ListCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lstm\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private ArrayList\u003cString\u003e deadlines;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructor method for CheckModuleTaskDeadlineCommand class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotFoundException exception is thrown if the specified module is not found."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ListModuleTasksDeadlineCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Module module \u003d (Module) Command.getCurrentDirectory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if ((module !\u003d null)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (module.countTasks() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return new CommandResult(MESSAGE_NO_TASK_IN_LIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            assert module.countTasks() !\u003d EMPTY : \"make sure the list is not empty\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            deadlines \u003d module.checkDeadline();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_TASK_SUCCESSFULLY_LIST, module.countTasks()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                    true, deadlines);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_GO_INTO_MODULE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 5,
      "wangqinNick": 46
    }
  },
  {
    "path": "src/main/java/seedu/nuke/common/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String YES_ICON \u003d \"[Y]\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String NO_ICON \u003d \"[N]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/DataManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * the manager that manages all tasks of all modules deals with operations in task-level."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DataManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private ArrayList\u003cTask\u003e allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor for DataManager class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleManager the ModuleManager object for the module."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public DataManager(ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (Module module: moduleManager.getModuleList()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            allTasks.addAll(module.getTaskManager().getAllTasks());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setAllTasks(ArrayList\u003cTask\u003e allTasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks \u003d allTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * sort all tasks of all modules in ascending order of deadlines."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void sortAllTasks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Collections.sort(allTasks, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String t1Deadline \u003d t1.getDeadline() \u003d\u003d null ? \"\" : t1.getDeadline().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String t2Deadline \u003d t2.getDeadline() \u003d\u003d null ? \"\" : t2.getDeadline().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return t1Deadline.compareToIgnoreCase(t2Deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public int countAllTasks() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return allTasks.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * return an orders lists of all tasks of all modules."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of String which represents the ordered list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ArrayList\u003cString\u003e checkDeadline() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cString\u003e deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        sortAllTasks();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (Task task: allTasks) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            deadlines.add(String.format(\"%-30s\", task.getDescription()) + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                    + String.format(\"%-8s\", task.getModuleCode()) + \"   deadline: \" + task.getDeadline());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return deadlines;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void addTask(Task toAdd) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks.add(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void removeTask(Task toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks.remove(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 40,
      "wangqinNick": 24,
      "A11riseforme": 12
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ModuleLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.util.DummyModule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * This class is to load all the modules that NUS offer, scraping from the nusmods,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * when users are trying to enrol into modules, the module code must"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * appear in the list of the list which load method return, or else fail."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class ModuleLoader {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * load data from a jason file that contains all information about all NUS existing modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param dataFileName name of the jason file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return a HashMapof String to String, which is a map that map all modules with its information"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @throws FileNotFoundException when cannot find the jason file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static HashMap\u003cString, String\u003e load(String dataFileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        List\u003cDummyModule\u003e moduleList \u003d JSON.parseArray(jsonStr, DummyModule.class);// extractModules(jsonStr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d convertToHashMap(moduleList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static HashMap\u003cString, String\u003e convertToHashMap(List\u003cDummyModule\u003e moduleList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        for (DummyModule i : moduleList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            modulesMap.put(i.getModuleCode(), i.getTitle());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String loadJsonStringFromFile(String dataFileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String encoding \u003d \"utf8\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        File file \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        Long fileLength \u003d file.length();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        byte[] fileContent \u003d new byte[fileLength.intValue()];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            FileInputStream in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            in.read(fileContent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            //System.out.println(\"Retrieving the module list from nusmods...\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return openFile(\"https://api.nusmods.com/v2/2019-2020/moduleList.json\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new String(fileContent, encoding);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            System.err.println(\"The OS does not support \" + encoding);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String openFile(String filePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        int httpResult; // the status from the server response"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            URL url \u003d new URL(filePath); // create URL"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            URLConnection urlConn \u003d url.openConnection(); // try to connect and get the status code"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            urlConn.connect();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            HttpURLConnection httpConn \u003d (HttpURLConnection) urlConn;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            httpResult \u003d httpConn.getResponseCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            if (httpResult !\u003d HttpURLConnection.HTTP_OK) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                System.out.print(\"cannot connect!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                int fileSize \u003d urlConn.getContentLength(); // get the length of the data"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                InputStreamReader isReader \u003d new InputStreamReader(urlConn.getInputStream(), \"UTF-8\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(isReader);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String line; // to save the content of every line"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                line \u003d reader.readLine(); // read the first line"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                while (line !\u003d null) { // if line is empty, means finish reading"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    buffer.append(line); // append to the buffer"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    buffer.append(\" \"); // add new line"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    line \u003d reader.readLine(); // read the next line"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                //System.out.print(buffer.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                content \u003d buffer.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 5,
      "wangqinNick": 1,
      "A11riseforme": 101
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ModuleManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * a manager that manages all modules."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * have an arraylist that contains all modules"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * deals with operations that are related to modules"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleManager implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static Root root;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static ArrayList\u003cModule\u003e moduleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private ArrayList\u003cString\u003e moduleCodes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private ArrayList\u003cTask\u003e allTasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private HashMap\u003cString, String\u003e modulesMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ModuleManager(Root root, HashMap\u003cString, String\u003e modulesMap) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.modulesMap \u003d modulesMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.root \u003d root;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * This mothod is to restore the list of modules when loading from the json data file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleList an ArrayList of Module objects parsed from the json string in the data file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setModuleList(ArrayList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.moduleCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        for (Module module: moduleList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            moduleCodes.add(module.getModuleCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            for (Task task: module.getTaskManager().getAllTasks()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                allTasks.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assert moduleList.size() \u003d\u003d moduleCodes.size() : \"moduleList size does not equal to moduleCodes size, check!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * method to return all the modules."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return all modules"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ArrayList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * return total number of tasks in all modules."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public int countAllTasks() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return allTasks.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Checks if the list contains an equivalent task as the given description."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleCode the module code to check if provided by NUS currently"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return true if NUS is providing the module currently"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static boolean contains(String moduleCode) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        for (Module p : moduleList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            if (p.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Add a module to the module List."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleCode the module code of the module to add"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void add(String moduleCode) throws DuplicateModuleException, ModuleNotProvidedException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //check duplicate"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        if (moduleCodes.contains(moduleCode)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } else if (!modulesMap.containsKey(moduleCode)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            throw new ModuleNotProvidedException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Module toAdd \u003d new Module(root, moduleCode, modulesMap.get(moduleCode), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            moduleList.add(toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            moduleCodes.add(moduleCode);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * return an orders lists of all tasks of all modules."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of String which represents the ordered list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public ArrayList\u003cString\u003e checkDeadline() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ArrayList\u003cString\u003e deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        sortAllTasks();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        for (Task task: allTasks) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            deadlines.add(String.format(\"%-30s\", task.getDescription()) + \" \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    + String.format(\"%-8s\", task.getModuleCode()) + \"   deadline: \" + task.getDeadline());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return deadlines;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * sort all tasks of all modules in ascending order of deadlines."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void sortAllTasks() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        Collections.sort(allTasks, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String t1Deadline \u003d t1.getDeadline() \u003d\u003d null ? \"\" : t1.getDeadline().toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String t2Deadline \u003d t2.getDeadline() \u003d\u003d null ? \"\" : t2.getDeadline().toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return t1Deadline.compareToIgnoreCase(t2Deadline);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        });"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Clears all tasks in list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        moduleList.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Module getLastAddedModule() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleList.get(moduleList.size() - 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Remove a module to the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete the task to remove"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotFoundException if the to-remove module does not exist"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void delete(Module toDelete) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        boolean isModuleFoundAndDeleted \u003d moduleList.remove(toDelete);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!isModuleFoundAndDeleted) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            throw new ModuleNotFoundException(\"\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * Deletes a \u003cb\u003eModule\u003c/b\u003e with \u003ccode\u003emodule code\u003c/code\u003e in the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode    The module code of the \u003cb\u003eModule\u003c/b\u003e to be deleted"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * If the module with the specified module code is not found in the \u003cb\u003eModule List\u003c/b\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Module delete(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (getModuleWithCode(moduleCode) !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Module toDelete \u003d getModuleWithCode(moduleCode);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            allTasks.removeIf(task -\u003e task.getModuleCode().toUpperCase().equals(moduleCode));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            moduleList.removeIf(module -\u003e module.getModuleCode().equalsIgnoreCase(moduleCode));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return toDelete;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            throw new ModuleNotFoundException(\"\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleList.iterator();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * get the index of new-to-add task."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the next-to-add task index"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public int getNextTaskIndex() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleList.size();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void addTaskToModule(TaskManager taskManager, Task taskToAdd) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        taskManager.addTask(taskToAdd);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        allTasks.add(taskToAdd);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void removeTask(TaskManager taskManager, Task taskToDelete) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        taskManager.removeTask(taskToDelete);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        allTasks.remove(taskToDelete);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public class DuplicateModuleException extends DuplicateDataException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * get a module object according to moduleCode."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param moduleCode the moduleCode of the module"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @return a module object that has the moduleCode"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static Module getModuleWithCode(String moduleCode) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        for (Module module: moduleList"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "             ) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                assert module.getModuleCode().equals(moduleCode);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static Root getRoot() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return root;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 19,
      "wangqinNick": 90,
      "A11riseforme": 97,
      "iceclementi": 14
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ScreenShot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ScreenShot {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String moduleListInJsonStr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ScreenShot(String moduleListInJsonStr) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.moduleListInJsonStr \u003d moduleListInJsonStr;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getModuleListInJsonStr() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return moduleListInJsonStr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setModuleListInJsonStr(String moduleListInJsonStr) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.moduleListInJsonStr \u003d moduleListInJsonStr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 22
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ScreenShotManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * a screen shot manager that manages all scree shots and deals with operations such as save screen shots and undo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ScreenShotManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static ArrayList\u003cScreenShot\u003e screenShotList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static int pointer \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ScreenShotManager() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cScreenShot\u003e getScreenShotList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return ScreenShotManager.screenShotList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void setScreenShotList(ArrayList\u003cScreenShot\u003e screenShotList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ScreenShotManager.screenShotList \u003d screenShotList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static int getCurrentPointer() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return ScreenShotManager.pointer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * return a scree shot with certain index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @return a screen shot"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ScreenShot getCurrentScreenShot() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (getCurrentPointer() \u003c 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return screenShotList.get(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return screenShotList.get(getCurrentPointer());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void setCurrentPointer(int pointer) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ScreenShotManager.pointer \u003d pointer;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void movePointerForward() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ScreenShotManager.pointer++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * change to another screen shot."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void movePointerBackWard() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (ScreenShotManager.pointer \u003e 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            ScreenShotManager.pointer--;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void saveNewScreenShot(ScreenShot toAdd) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        movePointerForward();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        screenShotList.add(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void cutTailNodes() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        screenShotList \u003d (ArrayList\u003cScreenShot\u003e) screenShotList.subList(0, pointer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * save the screen shot."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ScreenShot takeNewScreenShot(ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        String jsonStrModuleList \u003d StorageManager.saveModuleToString(moduleManager.getModuleList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new ScreenShot(jsonStrModuleList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * set module manager data according to screen shot manager data."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cModule\u003e readFromScreenShot(String jsonStr) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return (ArrayList\u003cModule\u003e) JSON.parseArray(jsonStr, Module.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 12,
      "wangqinNick": 70
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String dataFileName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor with name of the data file as argument."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param dataFileName the name of the file in which the data is stored."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public StorageManager(String dataFileName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.dataFileName \u003d dataFileName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * load from json data file and return an ArrayList of Module objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of Module objects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public ArrayList\u003cModule\u003e load() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            ArrayList\u003cModule\u003e moduleList \u003d (ArrayList\u003cModule\u003e) JSON.parseArray(jsonStr, Module.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return moduleList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            System.out.println(\"error when reading from \" + dataFileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            ArrayList\u003cModule\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return moduleList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String loadJsonStringFromFile(String dataFileName) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String encoding \u003d \"utf8\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        File file \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        Long fileLength \u003d file.length();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        byte[] fileContent \u003d new byte[fileLength.intValue()];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        FileInputStream in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        in.read(fileContent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new String(fileContent, encoding);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            System.err.println(\"The OS does not support \" + encoding);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Save the current ArrayList of Module objects into json file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleList an ArrayList of Module objects"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void save(ArrayList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String jsonStr \u003d JSON.toJSONString(moduleList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            FileWriter fw \u003d new FileWriter(dataFileName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            fw.write(jsonStr);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            fw.flush();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            System.out.println(\"something wrong when writing to \" + dataFileName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static String saveModuleToString(ArrayList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return JSON.toJSONString(moduleList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 4,
      "A11riseforme": 74
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * every module has a task manager to manage tasks within module."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    ArrayList\u003cTask\u003e allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs empty task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setAllTasks(ArrayList\u003cTask\u003e allTasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.allTasks \u003d allTasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * todo add check same function"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * todo handle toRemove does not exist exception"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Checks if the list contains an equivalent task as the given description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param toCheck the task to-check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return true if the task exists"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void addTask(Task toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks.add(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void removeTask(Task toRemove) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks.remove(toRemove);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Try to delete a task within a module and return the deleted task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param parameter the description of the task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return the deleted task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Task delete(String parameter) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Task task : allTasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (task.getModuleCode().equals(parameter)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                allTasks.remove(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the task list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * clears all tasks from the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * call by clear function"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        allTasks.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * return total number of tasks in the task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public int countTotalTasks() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return allTasks.size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * compare this task with other task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param other target task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return true if tasks are equal"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                || (other instanceof TaskManager // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                \u0026\u0026 this.allTasks.equals(((TaskManager) other).allTasks));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Checks if the list contains an equivalent task as the given description."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param description the module code to check if provided by NUS currently"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return true if NUS is providing the module currently"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean contains(String description) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Task t : allTasks) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (t.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * find a task given the description of the task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return a task of the given description or null if not found"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Task findTask(String description) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Task t : allTasks) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (t.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 8,
      "wangqinNick": 93,
      "A11riseforme": 20
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Directory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Directory father;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Directory son;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory(Directory father) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.father \u003d father;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory getFather() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return father;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setFather(Directory father) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.father \u003d father;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory getSon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return son;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setSon(Directory son) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.son \u003d son;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 29
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Module.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Module extends Directory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Module() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Module(Root root) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(root);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * initialize a module with module code, title, and description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param root the root"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleCode the module code of the module"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param title the title of the module"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param description the description of the module"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Module(Root root, String moduleCode, String title, String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(root);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setTaskManager(TaskManager taskManager) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.taskManager \u003d taskManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public TaskManager getTaskManager() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return this.taskManager;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public int countTasks() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return taskManager.countTotalTasks();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * The method to check the deadline of the tasks in a module."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of String representing the deadline of tasks in order."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ArrayList\u003cString\u003e checkDeadline() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cString\u003e deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskManager.getAllTasks();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Collections.sort(tasks, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String t1Deadline \u003d t1.getDeadline() \u003d\u003d null ? \"\" : t1.getDeadline().toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String t2Deadline \u003d t2.getDeadline() \u003d\u003d null ? \"\" : t2.getDeadline().toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return t1Deadline.compareToIgnoreCase(t2Deadline);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            String deadline \u003d task.getDeadline() \u003d\u003d null ? \"\" : task.getDeadline().toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            deadlines.add(String.format(\"%-30s\", task.getDescription()) + \"   Deadline: \" + task.getDeadline());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return deadlines;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean isSameModule(Module module) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.moduleCode.equals(module.moduleCode.toUpperCase());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 19,
      "wangqinNick": 20,
      "A11riseforme": 58,
      "iceclementi": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Root.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Root extends Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Root() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Stuff.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Stuff {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Stuff father;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Stuff son;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Stuff(Stuff father) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.father \u003d father;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Stuff getFather() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return father;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setFather(Stuff father) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.father \u003d father;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Stuff getSon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return son;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setSon(Stuff son) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.son \u003d son;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 26
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.format.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.common.Constants.NO_ICON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.common.Constants.YES_ICON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Task extends Directory implements Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected DateTime deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected ArrayList\u003cString\u003e files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    protected String moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private ArrayList\u003cString\u003e tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * constructor for the simplest task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleCode the module code of the module which the task belongs to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Task(Module module, String description, String moduleCode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(module);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.files \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.deadline \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.priority \u003d -1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.tag \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * constructor for the simplest task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param dateTime the deadline of the task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param priority the priority of the task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Task(Module module, String description, DateTime dateTime, int priority) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(module);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.files \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.deadline \u003d dateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Task(Module module) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(module);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setFiles(ArrayList\u003cString\u003e files) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.files \u003d files;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * moduleCode getter method."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return the module code of the module which the task belongs to"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * description getter method."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return the description of the task"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * deadline getter method."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return the deadline of the task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime getDeadline() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * deadline setter method."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param deadline the deadline of the task"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setDeadline(DateTime deadline) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * priority getter method."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return the priority of the task"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * return an icon representing the status of the task."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return a String of the icon."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return (isDone ? YES_ICON : NO_ICON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * files getter method."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of String representing the files which the task is associated with"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public ArrayList\u003cString\u003e getFiles() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return files;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * override the toString method for printing the task as a string."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return a string of the tasks information"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        StringBuilder printOut \u003d new StringBuilder(getStatusIcon() + \" \" + getDescription() + \" by \" + getDeadline());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        for (String file : files) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            printOut.append(\" \").append(file);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return printOut.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void addFile(String filePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        files.add(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setTag(String info) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.tag.add(info);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void removeTag() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.tag \u003d null;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (this.tag !\u003d null) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return tag.toString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 4,
      "wangqinNick": 42,
      "A11riseforme": 127,
      "iceclementi": 9
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/DataNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class DataNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 3,
      "iceclementi": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/DuplicateDataException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class DuplicateDataException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 3,
      "iceclementi": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/FileNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class FileNotFoundException extends NotFoundException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public FileNotFoundException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/InvalidFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class InvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 3,
      "iceclementi": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class InvalidIndexException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/ModuleNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleNotFoundException extends NotFoundException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ModuleNotFoundException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/ModuleNotProvidedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class ModuleNotProvidedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/NotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class NotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public NotFoundException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/NukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * The parent exception class that handles the general exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * @author A11riseforme"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class NukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public NukeException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor with one argument as the error message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param errorMsg the message to be shown when exception is raised."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public NukeException(String errorMsg) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 26
    }
  },
  {
    "path": "src/main/java/seedu/nuke/format/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.format;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDate Time\u003c/h3\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eDate Time\u003c/b\u003e contains both \u003ci\u003edate\u003c/i\u003e and \u003ci\u003etime\u003c/i\u003e information. This is used to hold the \u003ci\u003edatetime\u003c/i\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * information of the task\u0027s deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d \"\u003cdate dd/mm/yyyy\u003e \u003ctime hh:mma\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"dd/MM/yyyy\"; // Date format to be displayed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String TIME_FORMAT \u003d \"hh:mma\"; // Time format to be displayed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String DATE_SORT_FORMAT \u003d \"yyyyMMdd\"; // Date format for sorting"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String TIME_SORT_FORMAT \u003d \"HHmm\"; // Time format for sorting"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value DATE_FORMAT}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003etime\u003c/code\u003e as a string with the format {@value TIME_FORMAT}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003etime\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(TIME_FORMAT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value DATE_SORT_FORMAT}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * This format is primarily used for sorting tasks by date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDateInSortFormat() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(DATE_SORT_FORMAT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value TIME_SORT_FORMAT}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * This format is primarily used for sorting tasks by time."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getTimeInSortFormat() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(TIME_SORT_FORMAT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is the same as the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is the same as the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isOn(LocalDate date) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isEqual(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is before the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is before the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isBefore(LocalDate date) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isBefore(date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is after the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is after the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isAfter(LocalDate date) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isAfter(date);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003etime\u003c/code\u003e attribute is \u003cb\u003enot\u003c/b\u003e \u003ccode\u003eNULL\u003c/code\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003etime\u003c/code\u003e is not \u003ccode\u003eNULL\u003c/code\u003e, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean hasTime() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e is the same as the current day\u0027s \u003ci\u003edate\u003c/i\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003ccode\u003edate\u003c/code\u003e is the same as the current day\u0027s \u003ci\u003edate\u003c/i\u003e, and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isToday() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e is the same as the next day\u0027s \u003ci\u003edate\u003c/i\u003e."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003ccode\u003edate\u003c/code\u003e is the same as the next day\u0027s \u003ci\u003edate\u003c/i\u003e, and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isTomorrow() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.minusDays(1).isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the current \u003ci\u003edate\u003c/i\u003e and \u003ci\u003etime\u003c/i\u003e have passed the \u003ccode\u003edate\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e i.e. The \u003cb\u003eDate Time\u003c/b\u003e has expired."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003cb\u003eDate Time\u003c/b\u003e has expired, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isDue() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return LocalDate.now().isAfter(date)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                || (hasTime() \u0026\u0026 isToday() \u0026\u0026 LocalTime.now().isAfter(time));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the \u003ccode\u003edate\u003c/code\u003e into a string format."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String dateToString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isToday()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return \"today\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (isTomorrow()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return \"tomorrow\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getDate();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the \u003ccode\u003etime\u003c/code\u003e into a string format."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * If \u003ccode\u003etime\u003c/code\u003e is \u003ccode\u003eNULL\u003c/code\u003e, an empty string is returned instead."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003etime\u003c/code\u003e in a string format."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String timeToString() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return hasTime() ? getTime() : \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts \u003cb\u003eDate Time\u003c/b\u003e into its string representation, containing its \u003ccode\u003edate\u003c/code\u003e and"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003etime\u003c/code\u003e information."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The string representation of \u003cb\u003eDate Time\u003c/b\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String toShow \u003d dateToString() + \" \" + timeToString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (isDue()) ? toShow + \" [OVER!!]\" : toShow;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "A11riseforme": 2,
      "iceclementi": 171
    }
  },
  {
    "path": "src/main/java/seedu/nuke/format/DateTimeFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.format;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDate Time Format\u003c/h3\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * The \u003cb\u003eDate Time Format\u003c/b\u003e formats and converts strings into various \u003ci\u003edatetime\u003c/i\u003e objects, specifically"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ccode\u003eDateTime\u003c/code\u003e, \u003ccode\u003eLocalDate\u003c/code\u003e and \u003ccode\u003eLocalTime\u003c/code\u003e objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DateTimeFormat {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* An exhaustive list of date formats accepted by the Nuke program */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String[] ALL_DATE_FORMATS \u003d {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        \"dd-MM-yyyy\", \"dd/MM[/yyyy]\", \"d/MM[/yyyy]\", \"dd/M[/yyyy]\", \"d/M[/yyyy]\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"dd/MM[/yy]\", \"d/MM[/yy]\", \"dd/M[/yy]\", \"d/M[/yy]\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"dd-MM[-yyyy]\", \"d-MM[-yyyy]\", \"dd-M[-yyyy]\", \"d-M[-yyyy]\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"dd-MM[-yy]\", \"d-MM[-yy]\", \"dd-M[-yy]\", \"d-M[-yy]\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"ddMMyyyy\", \"ddMMyy\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* An exhaustive list of time formats accepted by the Nuke program */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String[] ALL_TIME_FORMATS \u003d {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        \"H:mm\", \"h:mma\", \"H:mma\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"h.mma\", \"H.mma\", \"H.mm\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"hmma\", \"Hmma\", \"Hmm\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"ha\", \"Ha\", \"H\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int CURRENT_YEAR \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003edatetime\u003c/code\u003e string into a \u003ccode\u003eDateTime\u003c/code\u003e object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ci\u003etime\u003c/i\u003e attribute must be present in the string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e The \u003ci\u003edate\u003c/i\u003e attribute is \u003cu\u003eoptional\u003c/u\u003e and is set to the current date if absent."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e The attributes must be in accepted formats for successful conversion."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param datetime The string to be converted into its corresponding \u003ccode\u003eDateTime\u003c/code\u003e object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eDateTime\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateTimeException If more than 2 attributes are present in the string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateException     If the \u003ci\u003edate\u003c/i\u003e attribute in the string is invalid"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidTimeException     If the \u003ci\u003etime\u003c/i\u003e attribute in the string is invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static DateTime stringToDateTime(String datetime)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidDateTimeException, InvalidDateException, InvalidTimeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] dateTimeData \u003d datetime.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (dateTimeData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String time \u003d dateTimeData[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DateTime(date, stringToTime(time));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (dateTimeData.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String date \u003d dateTimeData[0].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String time \u003d dateTimeData[1].trim().toUpperCase();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DateTime(stringToDate(date), stringToTime(time));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003edate\u003c/code\u003e string into a \u003ccode\u003eLocalDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ccode\u003edate\u003c/code\u003e string must be in either an accepted \u003ci\u003edate\u003c/i\u003e format or an accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ci\u003edate specifier\u003c/i\u003e \u003ci\u003e\u003csmall\u003e(See Below)\u003c/small\u003e\u003c/i\u003e."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eAccepted Date Specifiers\u003c/b\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003etoday\u003c/i\u003e or \u003ci\u003etdy\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003eyesterday\u003c/i\u003e or \u003ci\u003eyst\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003etomorrow\u003c/i\u003e or \u003ci\u003etmr\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The string to be converted into its corresponding \u003ccode\u003eLocalDate\u003c/code\u003e object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eLocalDate\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateException If the \u003ccode\u003edate\u003c/code\u003e string is an invalid \u003ci\u003edate\u003c/i\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static LocalDate stringToDate(String date) throws InvalidDateException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Checks if matches date specifiers first, before checking if matches date formats"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (date.toLowerCase()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"today\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tdy\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"yesterday\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"yst\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now().minusDays(1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tomorrow\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tmr\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (String formatPattern : ALL_DATE_FORMATS) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    DateTimeFormatter format \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            .appendPattern(formatPattern)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            .parseDefaulting(ChronoField.YEAR_OF_ERA, CURRENT_YEAR)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            .toFormatter();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return LocalDate.parse(date, format);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    // Ignore invalid formats"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Throws exception if fails to parse all date formats"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003etime\u003c/code\u003e string into a \u003ccode\u003eLocalTime\u003c/code\u003e object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ccode\u003etime\u003c/code\u003e string must be in either an accepted \u003ci\u003etime\u003c/i\u003e format or \u003ccode\u003eNULL\u003c/code\u003e."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e In the case of a \u003ccode\u003eNULL\u003c/code\u003e \u003ccode\u003etime\u003c/code\u003e string, \u003ccode\u003eNULL\u003c/code\u003e will be returned instead."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param time The string to be converted into its corresponding \u003ccode\u003eLocalTime\u003c/code\u003e object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eLocalTime\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidTimeException If the \u003ccode\u003edate\u003c/code\u003e string is an invalid \u003ci\u003etime\u003c/i\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static LocalTime stringToTime(String time) throws InvalidTimeException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String format : ALL_TIME_FORMATS) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return LocalTime.parse(time, DateTimeFormatter.ofPattern(format));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Ignore invalid formats"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Throws exception if fails to parse all time formats"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new InvalidTimeException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Signals that the \u003ci\u003edatetime\u003c/i\u003e string given is in an invalid format."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static class InvalidDateTimeException extends InvalidFormatException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Signals that the \u003ci\u003edate\u003c/i\u003e string given is in an invalid format."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static class InvalidDateException extends InvalidFormatException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Signals that the \u003ci\u003etime\u003c/i\u003e string given is in an invalid format."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static class InvalidTimeException extends InvalidFormatException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 3,
      "A11riseforme": 15,
      "iceclementi": 150
    }
  },
  {
    "path": "src/main/java/seedu/nuke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.ChangeDirectoryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.addcommand.AddTagCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.listcommand.ListAllTasksDeadlineCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.listcommand.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.listcommand.ListModuleTasksDeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.editcommand.EditDeadlineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddModuleCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddTaskCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.deletecommand.DeleteModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.deletecommand.DeleteTaskCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.listcommand.ListModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.format.DateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.format.DateTimeFormat;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_GO_INTO_MODULE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_MISSING_PARAMETERS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003cparameters\u003e.*)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String WHITESPACES \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String PARAMETER_SPLITTER \u003d \" \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final int COMMAND_PARAMETER_MAXIMUM_LIMIT \u003d 2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final int COMMAND_WORD_INDEX \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final int PARAMETER_WORD_INDEX \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MODULE_CODE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String TASK_DESCRIPTION_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String PRIORITY_PREFIX \u003d \"-p\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String DEADLINE_PREFIX \u003d \"-d\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String ALL_FLAG \u003d \"-a\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String EXACT_FLAG \u003d \"-e\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses the input string read by the \u003cb\u003eUI\u003c/b\u003e and converts the string into a specific \u003cb\u003eCommand\u003c/b\u003e, which is"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * to be executed by the \u003cb\u003eNuke\u003c/b\u003e program."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The user input has to start with a certain keyword (i.e. \u003ci\u003ecommand word\u003c/i\u003e), otherwise an"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ci\u003eInvalid Command Exception\u003c/i\u003e will be thrown."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input The user input read by the \u003cb\u003eUI.java\u003c/b\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003ecorresponding\u003c/b\u003e command to be executed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see seedu.nuke.ui.Ui"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Command parseCommand(String input, ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parameters \u003d matcher.group(\"parameters\").trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //todo check if in module"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new AddTagCommand(parameters);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case EditDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareEditDeadlineCommand(parameters);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case ChangeDirectoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareChangeDirectoryCommand(parameters, moduleManager);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareAddModuleCommand(parameters);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareDeleteModuleCommand(parameters);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareListCommand(parameters);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case ListAllTasksDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new ListAllTasksDeadlineCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareAddTaskCommand(parameters);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareDeleteCommand(parameters);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareListCommand(String parameters) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (parameters.trim().matches(ALL_FLAG)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new ListAllTasksDeadlineCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } else if (Command.getCurrentDirectory() instanceof Root) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareListModuleCommand(parameters);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } else if (Command.getCurrentDirectory() instanceof Module) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new ListModuleTasksDeadlineCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new ListAllTasksDeadlineCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareEditDeadlineCommand(String parameters) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Task taskToEdit;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        DateTime deadline;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        String[] temp \u003d parameters.split(\"-d\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Module dir \u003d (Module) Command.getCurrentDirectory();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        String moduleCode \u003d dir.getModuleCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        taskToEdit \u003d new Task(ModuleManager.getModuleWithCode(moduleCode), temp[0].trim(), moduleCode);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            deadline \u003d DateTimeFormat.stringToDateTime(temp[1].trim());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new EditDeadlineCommand(taskToEdit, deadline);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateException | DateTimeFormat.InvalidTimeException"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                | DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(\"Invalid datetime format!\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareDeleteCommand(String parameters) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (Command.getCurrentDirectory() instanceof Root) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (ModuleManager.contains(parameters)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return new DeleteModuleCommand(parameters);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } else if (Command.getCurrentDirectory() instanceof Module) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (((Module) Command.getCurrentDirectory()).getTaskManager().contains(parameters)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return new DeleteTaskCommand(parameters);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //should never reach"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareChangeDirectoryCommand(String parameters, ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (parameters.equals(\"..\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new ChangeDirectoryCommand((ModuleManager.getRoot()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (moduleManager.getModuleWithCode(parameters) !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new ChangeDirectoryCommand(moduleManager.getModuleWithCode(parameters));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return new IncorrectCommand(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareAddTaskCommand(String parameters) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //todo"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //add a very simple task (for testing)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Module module \u003d (Module) Command.getCurrentDirectory();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (module !\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            String moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new AddTaskCommand(new Task(ModuleManager.getModuleWithCode(moduleCode), parameters, moduleCode));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_GO_INTO_MODULE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Splits user input into command word and rest of parameters (if any)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param input the input from the user"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return array of String contains command and parameter"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String[] getCommandAndParameter(String input) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] separatedInput \u003d input.split(WHITESPACES, COMMAND_PARAMETER_MAXIMUM_LIMIT);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        String commandWord \u003d separatedInput[COMMAND_WORD_INDEX].toLowerCase();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String parameters \u003d (separatedInput.length \u003d\u003d COMMAND_PARAMETER_MAXIMUM_LIMIT)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                ? separatedInput[PARAMETER_WORD_INDEX].trim() : \"\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new String[]{commandWord, parameters};"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareAddModuleCommand(String parameters) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        final Pattern[] addModuleFormat \u003d AddModuleCommand.REGEX_FORMATS;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        final int invalidParameterFormatsIndex \u003d addModuleFormat.length - 1;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Matcher[] matchers \u003d new Matcher[addModuleFormat.length];"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        if (isMissingCompulsoryParameters(addModuleFormat, matchers, parameters)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_MISSING_PARAMETERS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        if (matchers[invalidParameterFormatsIndex].find()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matchers[0].group(\"identifier\").trim();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new AddModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareDeleteModuleCommand(String parameters) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        final Pattern[] deleteModuleFormat \u003d DeleteModuleCommand.REGEX_FORMATS;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        final int invalidParameterFormatsIndex \u003d deleteModuleFormat.length - 1;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Matcher[] matchers \u003d new Matcher[deleteModuleFormat.length];"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        if (isMissingCompulsoryParameters(deleteModuleFormat, matchers, parameters)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_MISSING_PARAMETERS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        if (matchers[invalidParameterFormatsIndex].find()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matchers[0].group(\"identifier\").trim();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        /* To add later after updating my code - iceclementi"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String exactFlag \u003d matchers[1].group(\"exact\").trim();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isExact \u003d !exactFlag.isEmpty();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new DeleteModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Prepare a Command of the listModule type."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param parameters -a: list all tasks -CS1231 list tasks from specific module"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return command"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareListModuleCommand(String parameters) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        final Pattern[] listModuleFormat \u003d ListModuleCommand.REGEX_FORMATS;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        final int invalidParameterFormatsIndex \u003d listModuleFormat.length - 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Matcher[] matchers \u003d new Matcher[listModuleFormat.length];"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        if (isMissingCompulsoryParameters(listModuleFormat, matchers, parameters)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_MISSING_PARAMETERS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        if (matchers[invalidParameterFormatsIndex].find()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        /* To add later after updating my code - iceclementi"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleKeyword \u003d matchers[0].group(\"identifier\").trim();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String allFlag \u003d matchers[1].group(\"all\").trim();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String exactFlag \u003d matchers[2].group(\"exact\").trim();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isExact \u003d !exactFlag.isEmpty();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new ListModuleCommand();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Checks if there is more than \u003cb\u003eone\u003c/b\u003e parameter in the input."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters The parameter(s) provided in the input"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if there is more than one parameter in the input, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean hasMultipleParameters(String parameters) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return parameters.contains(PARAMETER_SPLITTER);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isMissingCompulsoryParameters(Pattern[] formats, Matcher[] matchers, String parameters) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Match patterns"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int i \u003d 0; i \u003c formats.length; ++i) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            matchers[i] \u003d formats[i].matcher(parameters);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Check if matches with each pattern except last pattern which checks for invalid parameters"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int i \u003d 0; i \u003c formats.length - 1; ++i) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!matchers[i].find()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 32,
      "wangqinNick": 130,
      "A11riseforme": 19,
      "iceclementi": 108
    }
  },
  {
    "path": "src/main/java/seedu/nuke/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public interface Tag {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setTag(String info);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void removeTag();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTag();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 7,
      "A11riseforme": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Assignment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Assignment {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Lab.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Lab {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Lecture.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Lecture {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Tutorial.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Tutorial {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 2,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/ui/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.Ansi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.BLUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.GREEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.BLACK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.MAGENTA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.RED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.fusesource.jansi.Ansi.ansi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.DIVIDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EXIT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_LOGO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_WELCOME_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_WELCOME_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_MESSAGE \u003d BLUE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_RESPONSE \u003d GREEN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_DIVIDER \u003d BLACK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_LOGO \u003d MAGENTA;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_ALERT \u003d RED;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * display welcome message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void showWelcomeMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_WELCOME_1).reset());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_WELCOME_2).reset());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * display the exit message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static void showExitMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        System.out.println(ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_EXIT).reset());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * clear the screen."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void clearScreen() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.println(ansi().eraseScreen());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * display the logo."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void displayLogo() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ansi().reset();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.print(ansi().bold().fg(SYSTEM_COLOR_LOGO).a(MESSAGE_LOGO).reset());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * print a divider."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.println(ansi().bold().fg(SYSTEM_COLOR_DIVIDER).a(DIVIDER).reset());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 9,
      "wangqinNick": 52,
      "A11riseforme": 21
    }
  },
  {
    "path": "src/main/java/seedu/nuke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddModuleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddTaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.ChangeDirectoryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.listcommand.ListAllTasksDeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.listcommand.ListModuleTasksDeadlineCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.deletecommand.DeleteModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.deletecommand.DeleteTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.editcommand.EditDeadlineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.listcommand.ListModuleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final ArrayList\u003cString\u003e commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructs the \u003ccode\u003eUI\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out \u003d new PrintStream(System.out);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(AddModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(AddTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        commands.add(ChangeDirectoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        commands.add(ListAllTasksDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        commands.add(ListModuleTasksDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(DeleteModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(DeleteTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(EditDeadlineCommand.MESSAGE_DONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(ListModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //commands.add(UndoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(ExitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Reads the user input from the command line."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The input given by the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows the result message after the command given by the user input is executed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Also, shows the \u003cb\u003eTask List\u003c/b\u003e or \u003ci\u003eSearch List\u003c/i\u003e if indicated in \u003ccode\u003eresult\u003c/code\u003e."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param result The result after executing a command given by the user input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showResult(CommandResult result) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out.println(result.getFeedbackToUser().replace(\"\\n\", LS));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (result.isShowTasks()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            printShownList(result.getShownList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows a message to the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param message Message to be shown"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showSystemMessage(String message) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out.println(message.replace(\"\\n\", LS));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * print the Strings in an ArrayList to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param shownList an ArrayList of Strings to be shown to the user"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void printShownList(ArrayList\u003cString\u003e shownList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        final String divider \u003d String.format(\"%s%s%s\", \"+\", \"-\".repeat(100), \"+\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (String str : shownList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(str);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        System.out.println(divider + \"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 32,
      "wangqinNick": 6,
      "A11riseforme": 9,
      "iceclementi": 50
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/DummyModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * This class is solely for loading bunch of modules from a json file"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * and to be converted into objects of DummyModules, for users to enrol into."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class DummyModule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 28
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/ExceptionMessage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ExceptionMessage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE_ADD \u003d \"ALERT! The module already existed.\\n\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"ALERT! Module is not found.\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_PROVIDED \u003d \"ALERT! The module is not provided by NUS currently.\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_MODULE_CODE \u003d \"ALERT! Module code is missing.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EXCESS_PARAMETERS \u003d \"ALERT! Too many parameters.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INPUT_LENGTH_EXCEEDED \u003d \"ALERT! Enter less than 100 characters.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUT \u003d \"ALERT! Enter a command.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"ALERT! Unrecognised command.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 3,
      "iceclementi": 16
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_LOGO \u003d \"      ___          ___          ___          ___     \\n\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"     /__/\\\\        /__/\\\\        /__/|        /  /\\\\    \\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"     \\\\  \\\\:\\\\       \\\\  \\\\:\\\\      |  |:|       /  /:/_   \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"      \\\\  \\\\:\\\\       \\\\  \\\\:\\\\     |  |:|      /  /:/ /\\\\  \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"  _____\\\\__\\\\:\\\\  ___  \\\\  \\\\:\\\\  __|  |:|     /  /:/ /:/_ \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \" /__/::::::::\\\\/__/\\\\  \\\\__\\\\:\\\\/__/\\\\_|:|____/__/:/ /:/ /\\\\\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \" \\\\  \\\\:\\\\~~\\\\~~\\\\/\\\\  \\\\:\\\\ /  /:/\\\\  \\\\:\\\\/:::::/\\\\  \\\\:\\\\/:/ /:/\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"  \\\\  \\\\:\\\\  ~~~  \\\\  \\\\:\\\\  /:/  \\\\  \\\\::/~~~~  \\\\  \\\\::/ /:/ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"   \\\\  \\\\:\\\\       \\\\  \\\\:\\\\/:/    \\\\  \\\\:\\\\       \\\\  \\\\:\\\\/:/  \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"    \\\\  \\\\:\\\\       \\\\  \\\\::/      \\\\  \\\\:\\\\       \\\\  \\\\::/   \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"     \\\\__\\\\/        \\\\__\\\\/        \\\\__\\\\/        \\\\__\\\\/    \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_WELCOME_1 \u003d \"Welcome to NUKE\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_WELCOME_2 \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_NO_TASK_IN_LIST \u003d \"There is no task in the list!\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_TASK_SUCCESSFULLY_LIST \u003d \"There are (is) %d task(s) in the list!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETERS \u003d \"Invalid parameters found!\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETERS \u003d \"Alert! Some parameters are missing.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String DIVIDER \u003d \"-\".repeat(80);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_SHOW_MODULES \u003d \"Here are ALL your modules.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_TASK_ADDED \u003d \"Task added!\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_TASK_REMOVED \u003d \"Task removed!\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_MODULE_CHANGE_SUCCESSFUL \u003d \"Module change succeeded\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_ROOT_CHANGE_SUCCESSFUL \u003d \"ROOT change succeeded\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_GO_INTO_MODULE \u003d \"please go inside a Module!\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_HELP \u003d \"Here are valid commands and corresponding format:\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TAG_ADDED \u003d \"Tag added!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static String messageAddModuleSuccess(String moduleCode, String title) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! Module %s %s has been added.\\n\", moduleCode, title);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static String messageDeleteModuleSuccess(String moduleCode, String title) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! Module %s %s has been deleted.\\n\", moduleCode, title);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESSFUL \u003d \"Successfully undo!\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 8,
      "wangqinNick": 9,
      "A11riseforme": 17,
      "iceclementi": 13
    }
  },
  {
    "path": "src/test/java/seedu/nuke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/nuke/commandtest/ListAllDeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.commandtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Nuke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.listcommand.ListAllTasksDeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASK_IN_LIST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * Junit test class to test ListAllTasksDeadlineCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class ListAllDeadlineTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testTasksCounting() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Nuke nuke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            nuke \u003d new Nuke();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            command \u003d new ListAllTasksDeadlineCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        nuke.executeCommand(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        if (nuke.getCommandResult().isShowTasks()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            assertEquals(nuke.getModuleManager().countAllTasks(), nuke.getCommandResult().getShownList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            assertEquals(0, nuke.getModuleManager().countAllTasks());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Nuke nuke;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            nuke \u003d new Nuke();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        nuke.executeCommand(new Parser().parseCommand(\"ls\", nuke.getModuleManager()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        if (nuke.getModuleManager().countAllTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            assertEquals(true, nuke.getCommandResult().isShowTasks());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            //assertEquals(MESSAGE_NO_TASK_IN_LIST, new ListAllTasksDeadlineCommand().execute().getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 50,
      "A11riseforme": 4
    }
  },
  {
    "path": "src/test/java/seedu/nuke/commandtest/ListModuleDeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.commandtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Nuke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.listcommand.ListModuleTasksDeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * Junit test class to test ListModuleTasksDeadlineCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class ListModuleDeadlineTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private Nuke nuke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * constructor of this class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ListModuleDeadlineTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            nuke \u003d new Nuke();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            command \u003d new ListModuleTasksDeadlineCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testTasksCounting() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(0, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(0, 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 42
    }
  },
  {
    "path": "src/test/java/seedu/nuke/format/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.format;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    DateTimeTest() throws DateTimeFormat.InvalidTimeException, DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    DateTime dateTime \u003d new DateTime(DateTimeFormat.stringToDate(\"08082020\"), DateTimeFormat.stringToTime(\"4:38PM\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"08/08/2020\", dateTime.getDate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"04:38PM\", dateTime.getTime());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getDateInSortFormat() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"20200808\", dateTime.getDateInSortFormat());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getTimeInSortFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"1638\", dateTime.getTimeInSortFormat());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isOn_onDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"8/8\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isOn(toCompare));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isOn_notOnDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"12-09-20\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isOn(toCompare));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isBefore_beforeDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"09/09\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isBefore(toCompare));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isBefore_notBeforeDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"3/6/1997\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isBefore(toCompare));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isAfter_afterDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"3/6/1997\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isAfter(toCompare));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isAfter_notAfterDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"09/09\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isAfter(toCompare));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime today \u003d new DateTime(LocalDate.now(), LocalTime.now());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"today \" + today.getTime() + \" [OVER!!]\", today.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime tomorrow \u003d new DateTime(LocalDate.now().plusDays(1), LocalTime.now());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"tomorrow \" + tomorrow.getTime(), tomorrow.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime yesterday \u003d new DateTime(LocalDate.now().minusDays(1), LocalTime.now());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(yesterday.getDate() + \" \" + yesterday.getTime() + \" [OVER!!]\", yesterday.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime weekAfter \u003d new DateTime(LocalDate.now().plusWeeks(1), LocalTime.now());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(weekAfter.getDate() + \" \" + weekAfter.getTime(), weekAfter.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime weekBefore \u003d new DateTime(LocalDate.now().minusWeeks(1), LocalTime.now());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(weekBefore.getDate() + \" \" + weekBefore.getTime() + \" [OVER!!]\", weekBefore.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 11,
      "iceclementi": 82
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lsm"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addm CS3235"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addm CS1111"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lst"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "cd CS3235"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lstm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 1,
      "-": 18
    }
  }
]
