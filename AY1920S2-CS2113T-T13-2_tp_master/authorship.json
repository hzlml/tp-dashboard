[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "group \u0027seedu.nuke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    //config the jar to Mavern library"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    implementation \u0027org.fusesource.jansi:jansi:1.18\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    implementation \u0027com.alibaba:fastjson:1.2.12\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    mainClassName \u003d \"seedu.nuke.Nuke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    archiveBaseName \u003d \"nuke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 2,
      "A11riseforme": 5,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/50083580?s\u003d400\u0026u\u003d361572b20fcd6750428a1553c5388e5125b8ac13\u0026v\u003d4) | Wang Qin | [Github](https://github.com/wangqinNick) | [Portfolio](docs/team/wangqin.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yang Chenglong | [Github](https://github.com/A11riseforme) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hao Yun | [Github](https://github.com/HAOYUN49) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![](https://winaero.com/blog/wp-content/uploads/2019/09/Chrome-Incognito-Mode-Icon-256.png) | Clement Cheng | [iceclementi](https://github.com/iceclementi) | [Portfolio](docs/team/iceclementi.md)"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 1,
      "A11riseforme": 1,
      "iceclementi": 1,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/Nuke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.DataManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ScreenShot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ScreenShotManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.ui.TextUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class Nuke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private CommandResult commandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private ModuleManager moduleManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private DataManager dataManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private HashMap\u003cString, String\u003e modulesMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ScreenShotManager screenShotManager; //?public"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private ScreenShot currentScreenShot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * constructor of nuke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @throws FileNotFoundException if file cannot be found when loading jason file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public Nuke() throws FileNotFoundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        modulesMap  \u003d ModuleLoader.load(\"moduleList.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        moduleManager \u003d new ModuleManager(modulesMap);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        dataManager \u003d new DataManager(moduleManager);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        screenShotManager \u003d new ScreenShotManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        currentScreenShot \u003d new ScreenShot(moduleManager, dataManager);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        screenShotManager.getScreenShotList().add(currentScreenShot);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * ScreenShot entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param args arguments passed to the programme."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws FileNotFoundException exception is thrown if the file is not found."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        new Nuke().run();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * run method for Nuke class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        welcomeUser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Method to print the welcome message to the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void welcomeUser() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.clearScreen();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.displayLogo();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.showWelcomeMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Method to print the exit message to the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.showExitMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Method to run the command from the user\u0027s input until bye command is received."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String userCommandText \u003d ui.getInput();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Command command \u003d new Parser().parseCommand(userCommandText, moduleManager);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            CommandResult result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ui.showResult(result);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } while (!ExitCommand.isExit());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * initialize the taskManager system, execute command and save the list to the file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param command the parsed Command object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return commandResult that contains the execute output information"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private CommandResult executeCommand(Command command) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            //load from current screen shot"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            readScreenShot();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            // supplies the data the command will operate on."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            // if there is no file to load or the file is empty, setData will initialize a new taskManager system"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            //update the module manager as well as the data manager"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            setCommandData(command);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            //take the screen shot"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            takeScreenShot();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            //add screen shot"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            addScreenShotToScreenShotList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            // Execute according to the command itself"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            execute(command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            // save the taskManager to a file"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            //moduleManager.getStorager().save(taskManager);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            //StorageFile.saveJson(taskManager);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            // the out layer exception handler"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            ui.showSystemMessage(e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private void execute(Command command) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private void addScreenShotToScreenShotList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        screenShotManager.getScreenShotList().add(currentScreenShot);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private void setCommandData(Command command) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        command.setData(moduleManager, dataManager, screenShotManager);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private void takeScreenShot() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        currentScreenShot.takeScreenShot(moduleManager, dataManager);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private void readScreenShot() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        dataManager.setAllTasks(screenShotManager.getCurrentScreenShot().getDataManager().getAllTasks());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        moduleManager.setModules(screenShotManager.getCurrentScreenShot().getModuleManager().getModuleList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 24,
      "wangqinNick": 73,
      "A11riseforme": 32,
      "iceclementi": 6,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/AddModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE_ADD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.messageAddModuleSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd Module Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to add a \u003cb\u003eModule\u003c/b\u003e into the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Module"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addm\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eAdd Module Command\u003c/b\u003e to add a \u003cb\u003eModule\u003c/b\u003e into the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            moduleManager.add(moduleCode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Module addedModule \u003d moduleManager.getLastAddedModule();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(messageAddModuleSuccess(addedModule.getModuleCode(), addedModule.getTitle()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE_ADD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (ModuleNotProvidedException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_PROVIDED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 3,
      "A11riseforme": 6,
      "iceclementi": 37
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TASK_ADDED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class AddTaskCommand extends TaskCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" task description \" + \": Add a task to the module.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private final Task taskToAdd;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.taskToAdd \u003d task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //add the task to the module\u0027s task manager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        currentModule.getTaskManager().addTask(taskToAdd);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        dataManager.addTask(taskToAdd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(MESSAGE_TASK_ADDED);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 26
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ChangeModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_MODULE_CHANGE_SUCCESSFUL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ChangeModuleCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cd\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Module moduleToChange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ChangeModuleCommand(Module destinatedModule) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.moduleToChange \u003d destinatedModule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //context switch"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        setCurrentModule(this.moduleToChange);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(MESSAGE_MODULE_CHANGE_SUCCESSFUL);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 22
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/CheckAllTasksDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.DataManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASK_IN_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TASK_SUCCESSFULLY_LIST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * sort all tasks of all modules according to deadline of task and print it out to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class CheckAllTasksDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private ArrayList\u003cString\u003e deadlines;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lst\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //get the large task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (dataManager.countAllTasks() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_NO_TASK_IN_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        //assert dataManager.countAllTasks() !\u003d EMPTY : \"make sure there are some tasks in the list\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        deadlines \u003d dataManager.checkDeadline();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_TASK_SUCCESSFULLY_LIST, dataManager.countAllTasks()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                true, deadlines);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 14,
      "wangqinNick": 15,
      "A11riseforme": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/CheckModuleTasksDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASK_IN_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TASK_SUCCESSFULLY_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * sort all tasks of one module according to deadline of task and print it out to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class CheckModuleTasksDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lstm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private ArrayList\u003cString\u003e deadlines;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor method for CheckModuleTaskDeadlineCommand class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws ModuleNotFoundException exception is thrown if the specified module is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CheckModuleTasksDeadlineCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        if (currentModule.countTasks() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(MESSAGE_NO_TASK_IN_LIST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assert currentModule.countTasks() !\u003d EMPTY : \"make sure the list is not empty\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        deadlines \u003d currentModule.checkDeadline();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_TASK_SUCCESSFULLY_LIST, currentModule.countTasks()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                true, deadlines);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 33,
      "A11riseforme": 8
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.DataManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ScreenShotManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static String COMMAND_WORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected ModuleManager moduleManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected DataManager dataManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected ScreenShotManager screenShotManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected static Module currentModule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return this.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * initialize some attributes of the command if needed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleManager current module manager that manages all modules."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param dataManager current data managers that manage all tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param screenShotManager screen shot manager that manages all screen shots."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setData(ModuleManager moduleManager, DataManager dataManager, ScreenShotManager screenShotManager) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.moduleManager \u003d moduleManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.dataManager \u003d dataManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.screenShotManager \u003d screenShotManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static Module getCurrentModule() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return currentModule;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void setCurrentModule(Module currentModule) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Command.currentModule \u003d currentModule;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 6,
      "wangqinNick": 29,
      "A11riseforme": 5
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " *construct the feedback to user String."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final boolean isShowTasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private final ArrayList\u003cString\u003e shownList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * construct a command result that only have one feedback."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param feedbackToUser execution feedback that should be shown to the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isShowTasks \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        shownList \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * construct a command result that have feedback and lists of information that needs to be printed out."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param feedbackToUser the string of the result which will be printed to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param isShowTasks if the command is to show tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param shownList the list of tasks to be shown to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isShowTasks, ArrayList\u003cString\u003e shownList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isShowTasks \u003d isShowTasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.shownList \u003d shownList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isShowTasks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isShowTasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ArrayList\u003cString\u003e getShownList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return shownList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 14,
      "wangqinNick": 12,
      "A11riseforme": 6,
      "iceclementi": 14
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/DeleteModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.messageDeleteModuleSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delm\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"delm \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eDelete Module Command\u003c/b\u003e to delete a \u003cb\u003eModule\u003c/b\u003e with the \u003ccode\u003emodule code\u003c/code\u003e from the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Module deletedModule \u003d moduleManager.delete(moduleCode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    messageDeleteModuleSuccess(deletedModule.getModuleCode(), deletedModule.getTitle()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 4,
      "A11riseforme": 2,
      "iceclementi": 30
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TASK_REMOVED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DeleteTaskCommand extends TaskCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delt\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" task description \" + \": Add a task to the module.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private final Task taskToDelete;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DeleteTaskCommand(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.taskToDelete \u003d task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //add the task to the module\u0027s task manager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        currentModule.getTaskManager().removeTask(taskToDelete);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //add the task to the data manager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        dataManager.removeTask(taskToDelete);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(MESSAGE_TASK_REMOVED);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 26
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/EditDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.format.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.format.DateTimeFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * edit the deadline of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class EditDeadlineCommand extends EditTaskCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editDeadline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    //public static final String MESSAGE_USAGE_1 \u003d COMMAND_WORD + \"task description \" + \": Edit the deadline of a"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    // task.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    //public static final String MESSAGE_USAGE_2 \u003d \"      Example: \" + COMMAND_WORD + \" read a book\" + \"YYYY-MM-DD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    // hh:mm:ss\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DONE \u003d \"  Nice! I\u0027ve marked this task as done:  %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DateTime deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * set the new deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param toEdit full command args string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditDeadlineCommand(Task toEdit, DateTime deadline) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(toEdit);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // todo find the target task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final Task toEdit \u003d getTargetTask();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // todo set the description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        toEdit.setDeadline(deadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE, toEdit.getDescription()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 31,
      "A11riseforme": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/EditTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * edit-type command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class EditTaskCommand extends TaskCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected String taskDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * set the deadline of a task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param taskDescription full command args string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditTaskCommand(String taskDescription) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditTaskCommand(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 24,
      "A11riseforme": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_FAREWELL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ExitCommand extends TaskCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exit the program.\\n    Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static boolean isExit; // To check if user requests to exit the program"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eExit Command\u003c/b\u003e to exit the \u003cb\u003eNuke\u003c/b\u003e program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(MESSAGE_FAREWELL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the user has requested to exit the program (after confirmation if necessary)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if an exit is requested, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isExit; // Returns true if command is exit command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 21,
      "iceclementi": 17
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                AddModuleCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                        + \"\\n\" + DeleteModuleCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                        + \"\\n\" + ListModuleCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                        + \"\\n\" + CheckAllTasksDeadlineCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                        + \"\\n\" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                        + \"\\n\" + ExitCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 20
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/IncorrectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eInvalid Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e that is determined to be invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private final String feedbackToUSer; // Message to be shown to the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public IncorrectCommand(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUSer \u003d message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getFeedbackToUSer() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return feedbackToUSer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eInvalid Command\u003c/b\u003e to show the \u003ccode\u003emessage\u003c/code\u003e to the user due to an \u003ci\u003einvalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * command\u003c/i\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(feedbackToUSer);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 9,
      "iceclementi": 21
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ListModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_MODULES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ListModuleCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lsm\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cString\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (Module module: moduleManager.getModuleList()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            modules.add(module.getModuleCode() + \" \" + module.getTitle() + \" \" + module.getDescription());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_MODULES, true, modules);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 9,
      "wangqinNick": 4,
      "iceclementi": 8
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * module level command inherits Command class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class ModuleCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 8,
      "A11riseforme": 1
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * task level command inherits ModuleCommand class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class TaskCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected TaskManager taskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    //public String commandWord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public TaskCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public TaskCommand(int targetIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Extracts the the target person in the last shown list from the given arguments."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected Task getTargetTask() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return taskManager.getTaskList().get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 36,
      "A11riseforme": 1
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.ScreenShot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.ScreenShotManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_UNDO_SUCCESSFUL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"un\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private ScreenShot targetScreenShot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public UndoCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //change to the screen one step before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        targetScreenShot \u003d screenShotManager.unDo();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(MESSAGE_UNDO_SUCCESSFUL);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 22
    }
  },
  {
    "path": "src/main/java/seedu/nuke/common/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String YES_ICON \u003d \"[Y]\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String NO_ICON \u003d \"[N]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/DataManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * the manager that manages all tasks of all modules deals with operations in task-level."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DataManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private ArrayList\u003cTask\u003e allTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor for DataManager class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleManager the ModuleManager object for the module."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public DataManager(ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (Module module: moduleManager.getModuleList()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            allTasks.addAll(module.getTaskManager().getTaskList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setAllTasks(ArrayList\u003cTask\u003e allTasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks \u003d allTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * sort all tasks of all modules in ascending order of deadlines."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void sortAllTasks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Collections.sort(allTasks, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String t1Deadline \u003d t1.getDeadline() \u003d\u003d null ? \"\" : t1.getDeadline().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String t2Deadline \u003d t2.getDeadline() \u003d\u003d null ? \"\" : t2.getDeadline().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return t1Deadline.compareToIgnoreCase(t2Deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public int countAllTasks() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return allTasks.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * return an orders lists of all tasks of all modules."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of String which represents the ordered list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ArrayList\u003cString\u003e checkDeadline() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cString\u003e deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        sortAllTasks();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (Task task: allTasks) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            deadlines.add(task.getDescription() + \" \" + task.getModuleCode() + \"  deadline: \" + task.getDeadline());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return deadlines;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void addTask(Task toAdd) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks.add(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void removeTask(Task toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks.remove(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 42,
      "wangqinNick": 22,
      "A11riseforme": 11
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ModuleLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.NotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.module.DummyModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * This class is to load all the modules that NUS offer, scraping from the nusmods,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * when users are trying to enrol into modules, the module code must"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * appear in the list of the list which load method return, or else fail."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class ModuleLoader {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * load data from a jason file that contains all information about all NUS existing modules."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param dataFileName name of the jason file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return a HashMapof String to String, which is a map that map all modules with its information"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @throws FileNotFoundException when cannot find the jason file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static HashMap\u003cString, String\u003e load(String dataFileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        List\u003cDummyModule\u003e moduleList \u003d JSON.parseArray(jsonStr, DummyModule.class);// extractModules(jsonStr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d convertToHashMap(moduleList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static HashMap\u003cString, String\u003e convertToHashMap(List\u003cDummyModule\u003e moduleList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        for (DummyModule i : moduleList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            modulesMap.put(i.getModuleCode(), i.getTitle());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String loadJsonStringFromFile(String dataFileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String encoding \u003d \"utf8\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        File file \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        Long fileLength \u003d file.length();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        byte[] fileContent \u003d new byte[fileLength.intValue()];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            FileInputStream in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            in.read(fileContent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            //System.out.println(\"Retrieving the module list from nusmods...\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return openFile(\"https://api.nusmods.com/v2/2019-2020/moduleList.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new String(fileContent, encoding);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            System.err.println(\"The OS does not support \" + encoding);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String openFile(String filePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        int httpResult; // the status from the server response"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            URL url \u003d new URL(filePath); // create URL"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            URLConnection urlConn \u003d url.openConnection(); // try to connect and get the status code"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            urlConn.connect();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            HttpURLConnection httpConn \u003d (HttpURLConnection) urlConn;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            httpResult \u003d httpConn.getResponseCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            if (httpResult !\u003d HttpURLConnection.HTTP_OK) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                System.out.print(\"cannot connect!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                int fileSize \u003d urlConn.getContentLength(); // get the length of the data"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                InputStreamReader isReader \u003d new InputStreamReader(urlConn.getInputStream(), \"UTF-8\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(isReader);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String line; // to save the content of every line"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                line \u003d reader.readLine(); // read the first line"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                while (line !\u003d null) { // if line is empty, means finish reading"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    buffer.append(line); // append to the buffer"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    buffer.append(\" \"); // add new line"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    line \u003d reader.readLine(); // read the next line"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                //System.out.print(buffer.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                content \u003d buffer.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 5,
      "A11riseforme": 106
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ModuleManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * a manager that manages all modules."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * have an arraylist that contains all modules"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * deals with operations that are related to modules"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleManager implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private HashMap\u003cString, String\u003e modulesMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public ModuleManager(HashMap\u003cString, String\u003e modulesMap) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.modulesMap \u003d modulesMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setModules(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * method to return all the modules."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return all modules"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ArrayList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    //public Module getAModule(String moduleCode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Checks if the list contains an equivalent task as the given description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleCode the module code to check if provided by NUS currently"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return true if NUS is providing the module currently"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean contains(String moduleCode) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Module p : modules) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            if (p.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Add a module to the module List."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleCode the module code of the module to add"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void add(String moduleCode) throws DuplicateModuleException, ModuleNotProvidedException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //check duplicate"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (modules.contains(moduleCode)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } else if (!modulesMap.containsKey(moduleCode)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            throw new ModuleNotProvidedException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            Module toAdd \u003d new Module(moduleCode, modulesMap.get(moduleCode), null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            modules.add(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Clears all tasks in list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        modules.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Module getLastAddedModule() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return modules.get(modules.size() - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Remove a module to the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete the task to remove"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotFoundException if the to-remove module does not exist"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void delete(Module toDelete) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isModuleFoundAndDeleted \u003d modules.remove(toDelete);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!isModuleFoundAndDeleted) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            throw new ModuleNotFoundException(\"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * Deletes a \u003cb\u003eModule\u003c/b\u003e with \u003ccode\u003emodule code\u003c/code\u003e in the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode    The module code of the \u003cb\u003eModule\u003c/b\u003e to be deleted"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * If the module with the specified module code is not found in the \u003cb\u003eModule List\u003c/b\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Module delete(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (module.getModuleCode().toUpperCase().equals(moduleCode)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                modules.remove(module);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        throw new ModuleNotFoundException(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return modules.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * get the index of new-to-add task."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the next-to-add task index"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public int getNextTaskIndex() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return modules.size();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public class DuplicateModuleException extends DuplicateDataException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * get a module object according to moduleCode."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param moduleCode the moduleCode of the module"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @return a module object that has the moduleCode"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Module getModuleWithCode(String moduleCode) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Module module: modules"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "             ) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                assert module.getModuleCode().equals(moduleCode);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 21,
      "wangqinNick": 82,
      "A11riseforme": 20,
      "iceclementi": 20
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ScreenShot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.DataManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ScreenShot {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private ModuleManager moduleManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private DataManager dataManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ScreenShot(ModuleManager moduleManager, DataManager dataManager) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.moduleManager \u003d moduleManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.dataManager \u003d dataManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ModuleManager getModuleManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return moduleManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setModuleManager(ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.moduleManager \u003d moduleManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public DataManager getDataManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return dataManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setDataManager(DataManager dataManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.dataManager \u003d dataManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void takeScreenShot(ModuleManager moduleManager, DataManager dataManager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.moduleManager \u003d moduleManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.dataManager \u003d dataManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 37
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ScreenShotManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ScreenShotManager {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private List\u003cScreenShot\u003e screenShotList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private int currentPointer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ScreenShotManager() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        screenShotList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        currentPointer \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ScreenShotManager(List\u003cScreenShot\u003e screenShotList, int currentPointer) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.screenShotList \u003d screenShotList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.currentPointer \u003d currentPointer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public List\u003cScreenShot\u003e getScreenShotList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return screenShotList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setScreenShotList(List\u003cScreenShot\u003e screenShotList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.screenShotList \u003d screenShotList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public int getCurrentPointer() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return currentPointer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setCurrentPointer(int currentPointer) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.currentPointer \u003d currentPointer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ScreenShot unDo() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        currentPointer \u003d currentPointer - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return screenShotList.get(currentPointer - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ScreenShot getCurrentScreenShot() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return screenShotList.get(currentPointer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "wangqinNick": 42
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String dataFileName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor with name of the data file as argument."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param dataFileName the name of the file in which the data is stored."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public StorageManager(String dataFileName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.dataFileName \u003d dataFileName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 14
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * every module has a task manager to manage tasks within module."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    ArrayList\u003cTask\u003e allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs empty task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * todo add check same function"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * todo handle toRemove does not exist exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Checks if the list contains an equivalent task as the given description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param toCheck the task to-check"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return true if the task exists"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void addTask(Task toAdd) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks.add(toAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void removeTask(Task toRemove) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks.remove(toRemove);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the task list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * clears all tasks from the task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * call by clear function"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        allTasks.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * return total number of tasks in the task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public int countTotalTasks() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return allTasks.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * compare this task with other task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param other target task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return true if tasks are equal"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                || (other instanceof TaskManager // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                \u0026\u0026 this.allTasks.equals(((TaskManager) other).allTasks));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 8,
      "wangqinNick": 60,
      "A11riseforme": 3
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/DataNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class DataNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 3,
      "iceclementi": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/DuplicateDataException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class DuplicateDataException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 3,
      "iceclementi": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/FileNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class FileNotFoundException extends NotFoundException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public FileNotFoundException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/InvalidFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class InvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 3,
      "iceclementi": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class InvalidIndexException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/ModuleNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleNotFoundException extends NotFoundException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ModuleNotFoundException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/ModuleNotProvidedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class ModuleNotProvidedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/NotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class NotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public NotFoundException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/NukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * The parent exception class that handles the general exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * @author A11riseforme"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class NukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public NukeException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor with one argument as the error message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param errorMsg the message to be shown when exception is raised."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public NukeException(String errorMsg) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 26
    }
  },
  {
    "path": "src/main/java/seedu/nuke/format/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.format;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDate Time\u003c/h3\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eDate Time\u003c/b\u003e contains both \u003ci\u003edate\u003c/i\u003e and \u003ci\u003etime\u003c/i\u003e information. This is used to hold the \u003ci\u003edatetime\u003c/i\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * information of the task\u0027s deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d \"\u003cdate dd/mm/yyyy\u003e \u003ctime hh:mma\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"dd/MM/yyyy\"; // Date format to be displayed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String TIME_FORMAT \u003d \"hh:mma\"; // Time format to be displayed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String DATE_SORT_FORMAT \u003d \"yyyyMMdd\"; // Date format for sorting"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String TIME_SORT_FORMAT \u003d \"HHmm\"; // Time format for sorting"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value DATE_FORMAT}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003etime\u003c/code\u003e as a string with the format {@value TIME_FORMAT}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003etime\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(TIME_FORMAT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value DATE_SORT_FORMAT}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * This format is primarily used for sorting tasks by date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDateInSortFormat() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(DATE_SORT_FORMAT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value TIME_SORT_FORMAT}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * This format is primarily used for sorting tasks by time."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getTimeInSortFormat() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(TIME_SORT_FORMAT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is the same as the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is the same as the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isOn(LocalDate date) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isEqual(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is before the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is before the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isBefore(LocalDate date) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isBefore(date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is after the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is after the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isAfter(LocalDate date) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isAfter(date);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003etime\u003c/code\u003e attribute is \u003cb\u003enot\u003c/b\u003e \u003ccode\u003eNULL\u003c/code\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003etime\u003c/code\u003e is not \u003ccode\u003eNULL\u003c/code\u003e, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean hasTime() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e is the same as the current day\u0027s \u003ci\u003edate\u003c/i\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003ccode\u003edate\u003c/code\u003e is the same as the current day\u0027s \u003ci\u003edate\u003c/i\u003e, and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isToday() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e is the same as the next day\u0027s \u003ci\u003edate\u003c/i\u003e."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003ccode\u003edate\u003c/code\u003e is the same as the next day\u0027s \u003ci\u003edate\u003c/i\u003e, and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isTomorrow() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.minusDays(1).isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the current \u003ci\u003edate\u003c/i\u003e and \u003ci\u003etime\u003c/i\u003e have passed the \u003ccode\u003edate\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e i.e. The \u003cb\u003eDate Time\u003c/b\u003e has expired."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003cb\u003eDate Time\u003c/b\u003e has expired, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isDue() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return LocalDate.now().isAfter(date)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                || (hasTime() \u0026\u0026 isToday() \u0026\u0026 LocalTime.now().isAfter(time));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the \u003ccode\u003edate\u003c/code\u003e into a string format."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String dateToString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isToday()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return \"today\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (isTomorrow()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return \"tomorrow\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getDate();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the \u003ccode\u003etime\u003c/code\u003e into a string format."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * If \u003ccode\u003etime\u003c/code\u003e is \u003ccode\u003eNULL\u003c/code\u003e, an empty string is returned instead."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003etime\u003c/code\u003e in a string format."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String timeToString() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return hasTime() ? getTime() : \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts \u003cb\u003eDate Time\u003c/b\u003e into its string representation, containing its \u003ccode\u003edate\u003c/code\u003e and"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003etime\u003c/code\u003e information."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The string representation of \u003cb\u003eDate Time\u003c/b\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String toShow \u003d dateToString() + \" \" + timeToString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (isDue()) ? toShow + \" [OVER!!]\" : toShow;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "A11riseforme": 2,
      "iceclementi": 171
    }
  },
  {
    "path": "src/main/java/seedu/nuke/format/DateTimeFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.format;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDate Time Format\u003c/h3\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * The \u003cb\u003eDate Time Format\u003c/b\u003e formats and converts strings into various \u003ci\u003edatetime\u003c/i\u003e objects, specifically"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ccode\u003eDateTime\u003c/code\u003e, \u003ccode\u003eLocalDate\u003c/code\u003e and \u003ccode\u003eLocalTime\u003c/code\u003e objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DateTimeFormat {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* An exhaustive list of date formats accepted by the Nuke program */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String[] ALL_DATE_FORMATS \u003d {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        \"dd-MM-yyyy\", \"dd/MM[/yyyy]\", \"d/MM[/yyyy]\", \"dd/M[/yyyy]\", \"d/M[/yyyy]\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"dd/MM[/yy]\", \"d/MM[/yy]\", \"dd/M[/yy]\", \"d/M[/yy]\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"dd-MM[-yyyy]\", \"d-MM[-yyyy]\", \"dd-M[-yyyy]\", \"d-M[-yyyy]\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"dd-MM[-yy]\", \"d-MM[-yy]\", \"dd-M[-yy]\", \"d-M[-yy]\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"ddMMyyyy\", \"ddMMyy\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* An exhaustive list of time formats accepted by the Nuke program */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String[] ALL_TIME_FORMATS \u003d {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        \"H:mm\", \"h:mma\", \"H:mma\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"h.mma\", \"H.mma\", \"H.mm\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"hmma\", \"Hmma\", \"Hmm\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"ha\", \"Ha\", \"H\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int CURRENT_YEAR \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003edatetime\u003c/code\u003e string into a \u003ccode\u003eDateTime\u003c/code\u003e object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ci\u003etime\u003c/i\u003e attribute must be present in the string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e The \u003ci\u003edate\u003c/i\u003e attribute is \u003cu\u003eoptional\u003c/u\u003e and is set to the current date if absent."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e The attributes must be in accepted formats for successful conversion."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param datetime The string to be converted into its corresponding \u003ccode\u003eDateTime\u003c/code\u003e object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eDateTime\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateTimeException If more than 2 attributes are present in the string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateException     If the \u003ci\u003edate\u003c/i\u003e attribute in the string is invalid"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidTimeException     If the \u003ci\u003etime\u003c/i\u003e attribute in the string is invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static DateTime stringToDateTime(String datetime)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidDateTimeException, InvalidDateException, InvalidTimeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] dateTimeData \u003d datetime.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (dateTimeData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String time \u003d dateTimeData[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DateTime(date, stringToTime(time));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (dateTimeData.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String date \u003d dateTimeData[0].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String time \u003d dateTimeData[1].trim().toUpperCase();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DateTime(stringToDate(date), stringToTime(time));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003edate\u003c/code\u003e string into a \u003ccode\u003eLocalDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ccode\u003edate\u003c/code\u003e string must be in either an accepted \u003ci\u003edate\u003c/i\u003e format or an accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ci\u003edate specifier\u003c/i\u003e \u003ci\u003e\u003csmall\u003e(See Below)\u003c/small\u003e\u003c/i\u003e."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eAccepted Date Specifiers\u003c/b\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003etoday\u003c/i\u003e or \u003ci\u003etdy\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003eyesterday\u003c/i\u003e or \u003ci\u003eyst\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003etomorrow\u003c/i\u003e or \u003ci\u003etmr\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The string to be converted into its corresponding \u003ccode\u003eLocalDate\u003c/code\u003e object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eLocalDate\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateException If the \u003ccode\u003edate\u003c/code\u003e string is an invalid \u003ci\u003edate\u003c/i\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static LocalDate stringToDate(String date) throws InvalidDateException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Checks if matches date specifiers first, before checking if matches date formats"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (date.toLowerCase()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"today\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tdy\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"yesterday\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"yst\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now().minusDays(1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tomorrow\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tmr\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (String formatPattern : ALL_DATE_FORMATS) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    DateTimeFormatter format \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            .appendPattern(formatPattern)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            .parseDefaulting(ChronoField.YEAR_OF_ERA, CURRENT_YEAR)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            .toFormatter();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return LocalDate.parse(date, format);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    // Ignore invalid formats"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Throws exception if fails to parse all date formats"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003etime\u003c/code\u003e string into a \u003ccode\u003eLocalTime\u003c/code\u003e object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ccode\u003etime\u003c/code\u003e string must be in either an accepted \u003ci\u003etime\u003c/i\u003e format or \u003ccode\u003eNULL\u003c/code\u003e."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e In the case of a \u003ccode\u003eNULL\u003c/code\u003e \u003ccode\u003etime\u003c/code\u003e string, \u003ccode\u003eNULL\u003c/code\u003e will be returned instead."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param time The string to be converted into its corresponding \u003ccode\u003eLocalTime\u003c/code\u003e object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eLocalTime\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidTimeException If the \u003ccode\u003edate\u003c/code\u003e string is an invalid \u003ci\u003etime\u003c/i\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static LocalTime stringToTime(String time) throws InvalidTimeException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String format : ALL_TIME_FORMATS) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return LocalTime.parse(time, DateTimeFormatter.ofPattern(format));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Ignore invalid formats"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Throws exception if fails to parse all time formats"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new InvalidTimeException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Signals that the \u003ci\u003edatetime\u003c/i\u003e string given is in an invalid format."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static class InvalidDateTimeException extends InvalidFormatException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Signals that the \u003ci\u003edate\u003c/i\u003e string given is in an invalid format."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static class InvalidDateException extends InvalidFormatException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Signals that the \u003ci\u003etime\u003c/i\u003e string given is in an invalid format."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static class InvalidTimeException extends InvalidFormatException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 3,
      "A11riseforme": 15,
      "iceclementi": 150
    }
  },
  {
    "path": "src/main/java/seedu/nuke/module/DummyModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * This class is solely for loading bunch of modules from a json file"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * and to be converted into objects of DummyModules, for users to enrol into."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class DummyModule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 29
    }
  },
  {
    "path": "src/main/java/seedu/nuke/module/Module.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.ui.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * initialize a module with module code, title, and description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleCode the module code of the module"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param title the title of the module"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param description the description of the module"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public Module(String moduleCode, String title, String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public TaskManager getTaskManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return this.taskManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public int countTasks() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return taskManager.countTotalTasks();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * The method to check the deadline of the tasks in a module."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of String representing the deadline of tasks in order."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ArrayList\u003cString\u003e checkDeadline() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cString\u003e deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskManager.getTaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Collections.sort(tasks, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String t1Deadline \u003d t1.getDeadline() \u003d\u003d null ? \"\" : t1.getDeadline().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String t2Deadline \u003d t2.getDeadline() \u003d\u003d null ? \"\" : t2.getDeadline().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return t1Deadline.compareToIgnoreCase(t2Deadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            String deadline \u003d task.getDeadline() \u003d\u003d null ? \"\" : task.getDeadline().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            deadlines.add(\"Task: \" + task.getDescription() + \"  Deadline: \" + deadline);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return deadlines;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean isSameModule(Module module) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.moduleCode.equals(module.moduleCode.toUpperCase());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 20,
      "wangqinNick": 9,
      "A11riseforme": 44,
      "iceclementi": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.AddModuleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.AddTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.ChangeModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.CheckAllTasksDeadlineCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.CheckModuleTasksDeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.DeleteModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.DeleteTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.EditDeadlineCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.ListModuleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.format.DateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.format.DateTimeFormat;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_PARAMETER_SPLITTER \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String PARAMETER_SPLITTER \u003d \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final int COMMAND_PARAMETER_MAXIMUM_LIMIT \u003d 2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final int COMMAND_WORD_INDEX \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final int PARAMETER_WORD_INDEX \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final int MAX_INPUT_LENGTH \u003d 100; // Maximum length of user input accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses the input string read by the \u003cb\u003eUI\u003c/b\u003e and converts the string into a specific \u003cb\u003eCommand\u003c/b\u003e, which is"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * to be executed by the \u003cb\u003eNuke\u003c/b\u003e program."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The user input has to start with a certain keyword (i.e. \u003ci\u003ecommand word\u003c/i\u003e), otherwise an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ci\u003eInvalid Command Exception\u003c/i\u003e will be thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input The user input read by the \u003cb\u003eUI.java\u003c/b\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003ecorresponding\u003c/b\u003e command to be executed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see seedu.nuke.ui.Ui"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Command parseCommand(String input, ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        String commandWord \u003d getCommandAndParameter(input)[COMMAND_WORD_INDEX];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        String parameters \u003d getCommandAndParameter(input)[PARAMETER_WORD_INDEX];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case EditDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareEditDeadlineCommand(parameters);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case ChangeModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareChangeModuleCommand(parameters, moduleManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareAddModuleCommand(parameters);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareDeleteModuleCommand(parameters);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case ListModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new ListModuleCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        case CheckAllTasksDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CheckAllTasksDeadlineCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        case CheckModuleTasksDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CheckModuleTasksDeadlineCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareAddTaskCommand(parameters);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return prepareDeleteTaskCommand(parameters);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareEditDeadlineCommand(String parameters) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        Task taskToEdit;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        DateTime deadline \u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        String [] temp \u003d parameters.split(\"-d\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        taskToEdit \u003d new Task(temp[0], Command.getCurrentModule().getModuleCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            deadline \u003d DateTimeFormat.stringToDateTime(temp[1]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (DateTimeFormat.InvalidTimeException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new EditDeadlineCommand(taskToEdit, deadline);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareDeleteTaskCommand(String parameters) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareChangeModuleCommand(String parameters, ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (moduleManager.getModuleWithCode(parameters) !\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new ChangeModuleCommand(moduleManager.getModuleWithCode(parameters));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareAddTaskCommand(String parameters) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //todo"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //add a very simple task (for testing)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (Command.getCurrentModule() !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new AddTaskCommand(new Task(parameters, Command.getCurrentModule().getModuleCode()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new IncorrectCommand(\"please go inside a Module!\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Splits user input into command word and rest of parameters (if any)."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param input the input from the user"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return array of String contains command and parameter"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private String[] getCommandAndParameter(String input) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        String[] separatedInput \u003d input.split(COMMAND_PARAMETER_SPLITTER, COMMAND_PARAMETER_MAXIMUM_LIMIT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        String commandWord \u003d separatedInput[COMMAND_WORD_INDEX].toLowerCase();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String parameters \u003d (separatedInput.length \u003d\u003d COMMAND_PARAMETER_MAXIMUM_LIMIT)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                ? separatedInput[PARAMETER_WORD_INDEX].trim() : \"\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new String[]{commandWord, parameters};"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareAddModuleCommand(String parameters) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        String moduleCode \u003d parameters;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (hasMultipleParameters(parameters)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new AddModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command prepareDeleteModuleCommand(String parameters) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        String moduleCode \u003d parameters;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (hasMultipleParameters(parameters)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new DeleteModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Checks if there is more than \u003cb\u003eone\u003c/b\u003e parameter in the input."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters The parameter(s) provided in the input"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if there is more than one parameter in the input, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean hasMultipleParameters(String parameters) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return parameters.contains(PARAMETER_SPLITTER);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 9,
      "wangqinNick": 114,
      "A11riseforme": 29,
      "iceclementi": 41
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Assignment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Assignment {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Lab.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Lab {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Lecture.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Lecture {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.format.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.common.Constants.NO_ICON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.common.Constants.YES_ICON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected DateTime deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected ArrayList\u003cString\u003e files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    protected String moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * constructor for the simplest task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleCode the module code of the module which the task belongs to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public Task(String description, String moduleCode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.files \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.deadline \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.priority \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * constructor for the simplest task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param dateTime the deadline of the task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param priority the priority of the task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Task(String description, DateTime dateTime, int priority) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.files \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.deadline \u003d dateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * moduleCode getter method."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return the module code of the module which the task belongs to"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * description getter method."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return the description of the task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * deadline getter method."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return the deadline of the task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime getDeadline() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * deadline setter method."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param deadline the deadline of the task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setDeadline(DateTime deadline) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * priority getter method."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return the priority of the task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * return an icon representing the status of the task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return a String of the icon."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return (isDone ? YES_ICON : NO_ICON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * files getter method."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of String representing the files which the task is associated with"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public ArrayList\u003cString\u003e getFiles() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return files;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * override the toString method for printing the task as a string."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return a string of the tasks information"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        StringBuilder printOut \u003d new StringBuilder(getStatusIcon() + \" \" + getDescription() + \" by \" + getDeadline());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        for (String file : files) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            printOut.append(\" \").append(file);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return printOut.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void addFile(String filePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        files.add(filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 6,
      "wangqinNick": 11,
      "A11riseforme": 102,
      "iceclementi": 10
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Tutorial.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Tutorial {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 2,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/ui/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.Ansi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.BLUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.GREEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.BLACK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.MAGENTA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.RED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.fusesource.jansi.Ansi.ansi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.DIVIDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EXIT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_LOGO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_WELCOME_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_WELCOME_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_MESSAGE \u003d BLUE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_RESPONSE \u003d GREEN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_DIVIDER \u003d BLACK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_LOGO \u003d MAGENTA;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_ALERT \u003d RED;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * display welcome message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void showWelcomeMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_WELCOME_1).reset());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_WELCOME_2).reset());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * display the exit message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static void showExitMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        System.out.println(ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_EXIT).reset());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * clear the screen."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void clearScreen() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.println(ansi().eraseScreen());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * display the logo."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void displayLogo() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ansi().reset();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.print(ansi().bold().fg(SYSTEM_COLOR_LOGO).a(MESSAGE_LOGO).reset());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * print a divider."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.println(ansi().bold().fg(SYSTEM_COLOR_DIVIDER).a(DIVIDER).reset());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 9,
      "wangqinNick": 52,
      "A11riseforme": 21
    }
  },
  {
    "path": "src/main/java/seedu/nuke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructs the \u003ccode\u003eUI\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out \u003d new PrintStream(System.out);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Reads the user input from the command line."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The input given by the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows the result message after the command given by the user input is executed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Also, shows the \u003cb\u003eTask List\u003c/b\u003e or \u003ci\u003eSearch List\u003c/i\u003e if indicated in \u003ccode\u003eresult\u003c/code\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param result The result after executing a command given by the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showResult(CommandResult result) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out.println(result.getFeedbackToUser().replace(\"\\n\", LS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (result.isShowTasks()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            printShownList(result.getShownList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows a message to the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param message Message to be shown"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showSystemMessage(String message) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out.println(message.replace(\"\\n\", LS));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * print the Strings in an ArrayList to the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param shownList an ArrayList of Strings to be shown to the user"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void printShownList(ArrayList\u003cString\u003e shownList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        final String divider \u003d String.format(\"%s%s%s\\n\", \"+\", \"-\".repeat(100), \"+\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (String str : shownList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(str);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 11,
      "A11riseforme": 11,
      "iceclementi": 52
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/ExceptionMessage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ExceptionMessage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE_ADD \u003d \"ALERT! The module already existed.\\n\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"ALERT! Module is not found.\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_PROVIDED \u003d \"ALERT! The module is not provided by NUS currently.\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_MODULE_CODE \u003d \"ALERT! Module code is missing.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EXCESS_PARAMETERS \u003d \"ALERT! Too many parameters.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INPUT_LENGTH_EXCEEDED \u003d \"ALERT! Enter less than 100 characters.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUT \u003d \"ALERT! Enter a command.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"ALERT! Unrecognised command.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 3,
      "iceclementi": 16
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE_ADD \u003d \"ALERT! The module already existed\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Alert! Module is not found\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_LOGO \u003d \"      ___          ___          ___          ___     \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"     /__/\\\\        /__/\\\\        /__/|        /  /\\\\    \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"     \\\\  \\\\:\\\\       \\\\  \\\\:\\\\      |  |:|       /  /:/_   \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"      \\\\  \\\\:\\\\       \\\\  \\\\:\\\\     |  |:|      /  /:/ /\\\\  \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"  _____\\\\__\\\\:\\\\  ___  \\\\  \\\\:\\\\  __|  |:|     /  /:/ /:/_ \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \" /__/::::::::\\\\/__/\\\\  \\\\__\\\\:\\\\/__/\\\\_|:|____/__/:/ /:/ /\\\\\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \" \\\\  \\\\:\\\\~~\\\\~~\\\\/\\\\  \\\\:\\\\ /  /:/\\\\  \\\\:\\\\/:::::/\\\\  \\\\:\\\\/:/ /:/\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"  \\\\  \\\\:\\\\  ~~~  \\\\  \\\\:\\\\  /:/  \\\\  \\\\::/~~~~  \\\\  \\\\::/ /:/ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"   \\\\  \\\\:\\\\       \\\\  \\\\:\\\\/:/    \\\\  \\\\:\\\\       \\\\  \\\\:\\\\/:/  \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"    \\\\  \\\\:\\\\       \\\\  \\\\::/      \\\\  \\\\:\\\\       \\\\  \\\\::/   \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"     \\\\__\\\\/        \\\\__\\\\/        \\\\__\\\\/        \\\\__\\\\/    \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_WELCOME_1 \u003d \"Welcome to NUKE\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_WELCOME_2 \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FAREWELL \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_NO_TASK_IN_LIST \u003d \"There is no task in the list!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_TASK_SUCCESSFULLY_LIST \u003d \"There are (is) %d task(s) in the list!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you soon.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String DIVIDER \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            \"---------------------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_SHOW_MODULES \u003d \"Here are ALL your modules.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_TASK_ADDED \u003d \"Task added!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_TASK_REMOVED \u003d \"Task removed!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_MODULE_CHANGE_SUCCESSFUL \u003d \"Module change succeeded\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static String messageAddModuleSuccess(String moduleCode, String title) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! Module %s %s has been added.\\n\", moduleCode, title);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static String messageDeleteModuleSuccess(String moduleCode, String title) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! Module %s %s has been deleted.\\n\", moduleCode, title);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESSFUL \u003d \"Successfully undo!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 13,
      "A11riseforme": 22,
      "iceclementi": 7
    }
  },
  {
    "path": "src/test/java/seedu/nuke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/nuke/format/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.format;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    DateTimeTest() throws DateTimeFormat.InvalidTimeException, DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    DateTime dateTime \u003d new DateTime(DateTimeFormat.stringToDate(\"08082020\"), DateTimeFormat.stringToTime(\"4:38PM\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"08/08/2020\", dateTime.getDate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"04:38PM\", dateTime.getTime());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getDateInSortFormat() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"20200808\", dateTime.getDateInSortFormat());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getTimeInSortFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"1638\", dateTime.getTimeInSortFormat());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isOn_onDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"8/8\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isOn(toCompare));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isOn_notOnDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"12-09-20\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isOn(toCompare));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isBefore_beforeDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"09/09\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isBefore(toCompare));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isBefore_notBeforeDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"3/6/1997\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isBefore(toCompare));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isAfter_afterDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"3/6/1997\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isAfter(toCompare));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isAfter_notAfterDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"09/09\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isAfter(toCompare));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime today \u003d new DateTime(LocalDate.now(), LocalTime.now());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"today \" + today.getTime() + \" [OVER!!]\", today.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime tomorrow \u003d new DateTime(LocalDate.now().plusDays(1), LocalTime.now());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"tomorrow \" + tomorrow.getTime(), tomorrow.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime yesterday \u003d new DateTime(LocalDate.now().minusDays(1), LocalTime.now());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(yesterday.getDate() + \" \" + yesterday.getTime() + \" [OVER!!]\", yesterday.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime weekAfter \u003d new DateTime(LocalDate.now().plusWeeks(1), LocalTime.now());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(weekAfter.getDate() + \" \" + weekAfter.getTime(), weekAfter.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime weekBefore \u003d new DateTime(LocalDate.now().minusWeeks(1), LocalTime.now());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(weekBefore.getDate() + \" \" + weekBefore.getTime() + \" [OVER!!]\", weekBefore.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 11,
      "iceclementi": 82
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addm CS1010"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 2,
      "-": 1
    }
  }
]
