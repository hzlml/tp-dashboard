[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.2.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "group \u0027seedu.nuke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    //config the jar to Mavern library"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    implementation \u0027org.fusesource.jansi:jansi:1.18\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    implementation \u0027com.alibaba:fastjson:1.2.12\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    mainClassName \u003d \"seedu.nuke.Nuke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    archiveBaseName \u003d \"nuke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    archiveVersion \u003d \"2.0\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 2,
      "A11riseforme": 7,
      "iceclementi": 1,
      "-": 35
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/50083580?s\u003d400\u0026u\u003d361572b20fcd6750428a1553c5388e5125b8ac13\u0026v\u003d4) | Wang Qin | [Github](https://github.com/wangqinNick) | [Portfolio](docs/team/wangqin.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yang Chenglong | [Github](https://github.com/A11riseforme) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hao Yun | [Github](https://github.com/HAOYUN49) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![](https://winaero.com/blog/wp-content/uploads/2019/09/Chrome-Incognito-Mode-Icon-256.png) | Clement Cheng | [iceclementi](https://github.com/iceclementi) | [Portfolio](docs/team/iceclementi.md)"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 1,
      "A11riseforme": 1,
      "iceclementi": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cstyle type\u003d\"text/css\"\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ".image-right {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  display: block;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  margin-left: 10px;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  margin-right: auto;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  float: right;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ".image-left {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  display: block;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  margin-left: auto;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  margin-right: 10px;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  margin-bottom: 10px;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  float: left;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ".step {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  width: 45px;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# **Nuke Developer Guide** \u003csmall\u003ev1.5\u003c/small\u003e  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "By: `CS2113T-T13-2`      Since: `Feb 2020`    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003csmall\u003e[Go to Webpage](https://ay1920s2-cs2113t-t13-2.github.io/tp/DeveloperGuide.html)\u003c/small\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Table of Contents**  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbig style\u003d\"color: green\"\u003e**Introduction** [\u0026#10149;](#introduction)  \u003c/big\u003e  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Purpose [\u0026#10149;](#purpose)   "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Scope [\u0026#10149;](#scope)   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Design Goals [\u0026#10149;](#design-goals)   "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Definitions [\u0026#10149;](#definitions)   "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbig style\u003d\"color: green\"\u003e **Setting Up** [\u0026#10149;](#setting-up)  \u003c/big\u003e  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbig style\u003d\"color: green\"\u003e  **Design** [\u0026#10149;](#design)  \u003c/big\u003e  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbig style\u003d\"color: green\"\u003e **Implementation** [\u0026#10149;](#implementation)  \u003c/big\u003e  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 1. Add Feature [\u0026#10149;](#1-add-feature)   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 2. Delete Feature [\u0026#10149;](#2-delete-feature)   "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbig style\u003d\"color: green\"\u003e **Appendix** [\u0026#10149;](#appendix)  \u003c/big\u003e  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; User Stories [\u0026#10149;](#user-stories)   "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Non-Functional Requirements [\u0026#10149;](#non-functional-requirements)   "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Glossary [\u0026#10149;](#glossary)   "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Manual Testing [\u0026#10149;](#manual-testing)    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Introduction**  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Purpose**  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cspan style\u003d\"text-align: justify; display: block\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This document describes the structure and software design decisions for the \u003cb\u003eNuke\u003c/b\u003e application. The \u003cb\u003eNuke\u003c/b\u003e application is a simple yet powerful task management application that is dedicated to providing \u003cb\u003eNUS students\u003c/b\u003e a more efficient way to organise their \u003ci\u003emodules\u003c/i\u003e and \u003ci\u003etasks\u003c/i\u003e.  "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/span\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Scope**  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cspan style\u003d\"text-align: justify; display: block\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This document will cover the structure and software design decisions for the implementation of \u003cb\u003eNuke\u003c/b\u003e. The intended audience for this document are developers, designers and software testers of \u003cb\u003eNuke\u003c/b\u003e \u003ci\u003eor\u003c/i\u003e other similar task management application."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/span\u003e  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Design Goals**  "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To be done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Definitions**  "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To be done."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Setting Up**  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Refer to the guide [here](#) to set up.  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Design**  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Implementation**  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This section will describe the significant details of how certain features in \u003cb\u003eNuke\u003c/b\u003e are being implemented.  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### 1. Add Feature"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### Overview"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The **add** feature adds modules, categories, tasks and tags into the Module, Category and Task List respectively."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### 1.1. Add module feature"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The add module feature enable the user to add modules into the Module List."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "When the user first requests to execute the `addm` command(*assuming the command format given is valid*) to add a module by providing its name, the application will parse the input after `addm`  command word as the module code. From here, there are **three** possible outcomes:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. The module specified by the user is not provided by NUS -- No module will added."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "2. The module specified by the user is already added -- No module will be added."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "3. The module specified by the user is provided by NUS and have not been added -- Module will be added."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### Feature Implementation"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "This feature is facilitated by the `AddModuleCommand` class which add the modules specified by the user. It overrides the `execute()` method which extends from the abstract `AddCommand` class which extends from the abstract `Command` class.   The `execute()` method\u0027s role is to execute the adding module operation and do necessary checks ."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The `AddCommand` will first try to call the static method `add` in `ModuleManager`  class, which will try to add the module specified by the user, exception will thrown according the following rules:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. `DuplicateModuleException` will be thrown if the module specified by the user is contained in the `ArrayList` named `moduleList` in `ModuleManager` class."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "2. `ModuleNotProvidedException` will be thrown if the module code specified by the user is not contained in the `HashMap` named `modulesMap` in `ModuleManager` class."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Below are the class-diagram for the involved classes:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200326014336120](images/Add_Module_Command_Class_Diagram.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003cspan style\u003d\"color: green\"\u003e\u003csmall\u003e\u003ci\u003eFigure \u003cb\u003eAdd Module Command Class Diagram\u003c/b\u003e\u003c/i\u003e\u003c/small\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### Example Usage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The addition of modules will be illustrated as follows."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "James is a user and wants to add the module with the module code of \"CS3235\". Assume that he has the current modules:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " NO |  MODULE CODE   |                                 MODULE TITLE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 1  |     CS1231     |                             Discrete Structures"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 2  |     CS2100     |                            Computer Organisation"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 3  |     CS2113     |              Software Engineering \u0026 Object-Oriented Programming"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Total modules: 3"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. James will simply enter the command `addm cs3235`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   After the input is parsed as an **add module task** and executed, the `AddModuleCommand#execute()` will call `ModuleManager#add()` to add the module cs3235. In the `ModuleManager#add()` method, it will call `ModuleManager#contains()` to check if the module cs3235 exists in the `ArrayList` named `moduleList` , then it will check if the module code \"cs3235\" is a key in the `HashMap` named `modulesMap`, after all, it will instantiate an `Module` object with the module code \"CS3235\" and respective title \"Computer Security\", then add the object into the `moduleList`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "2. James receive the following feedback:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   root :"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   addm cs3235"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   SUCCESS!! Module CS3235 Computer Security has been added."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   root :"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   lsm"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   Here are what you are looking for..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   +--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    NO |  MODULE CODE   |                                 MODULE TITLE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   +--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    1  |     CS1231     |                             Discrete Structures"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    2  |     CS2100     |                            Computer Organisation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    3  |     CS2113     |              Software Engineering \u0026 Object-Oriented Programming"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    4  |     CS3235     |                              Computer Security"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   +--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   Total modules: 4"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   +--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Below is a *sequence diagram* to illustrate the above example scenario.  "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\t// To do Sequence diagram here"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### 1.2. Add Category and Task Features"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Since add category and add task feature are implemented in a similar pattern, they can be explained together."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The add category/task enable the user to add category/task/tag into Category/Task/Tag List.(One to one correspondence, which means the user can only add category to Category List, task to Task List)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "When the user first request to execute the **add** command*(assuming the command format given is valid)* to add a category/task by providing its name, the application will parse the input after `addm` /`addc` command word as the name for category/task. From here, there are **three** possible outcomes:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. The specified upper parent directory does not exist. -- No category/task will be added."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "2. The name of the specified category/task already exist. -- No category/task will be added."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "3. The specified upper parent directory exist and the name of the specified category/task does not exist. -- The specified category/task will be added."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### Feature Implementation"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "This feature is facilitated by the `AddCategoryCommand` and `AddTaskCommand` class which add the corresponding category or task respectively."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The above-stated two classes overrides the `execute()` method which extends from the abstract `AddCommand` class which extends from the abstract `Command` class. The `execute()` method\u0027s role is to execute the adding category/task operation and do necessary checks."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The `AddCategoryCommand` and `AddTaskCommand` will first call the `getParentDirectory()` method to get the parent directory, then it will instantiate a `Category`/`Task` object and try to call `add` method in their respective parent directory class to add the new object, exception will be thrown according to the following rules:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. `ModuleNotFoundException` will be thrown if the specified module code does not exists in the `ArrayList` of Module when adding a new category or task."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "2. `CategoryNotFoundException` will be thrown if the specified category name does not exists in the `ArrayList` of Category in `CategoryManager` in `Module` when adding a new task."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "3. `IncorrectDirectoryLevelException` will be thrown if the user is performing the`addc`/`addt` command in the wrong directory without specifying their full parent directories.(For example, when user trying to execute `addc` in a `Root`/`Task` directory, or trying to execute `addt`  in a `Root`/`Module` directory)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "4. `DuplicateTaskException`/`DuplicateCategoryException` will be thrown if the name of the category/task already exist in the current directory."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Below are the class-diagram for the involved classes:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "to-do: add the class-diagram"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### Example Usage"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The addition process for *category* and *task* are similar. In this example, the addition process for *category* will be illustrated as a series of steps."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "James is a user and wants to add a *category* named  \"misc\" under the *module* cs3235. Assume that he has the current Module List and current Category List in the module cs3235:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root :"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lsm"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Here are what you are looking for..."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " NO |  MODULE CODE   |                                 MODULE TITLE                       "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 1  |     CS1231     |                             Discrete Structures                    "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 2  |     CS2100     |                            Computer Organisation                   "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 3  |     CS2113     |              Software Engineering \u0026 Object-Oriented Programming    "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 4  |     CS3235     |                              Computer Security                     "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Total modules: 4"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root :"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lsc -m cs3235"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Here are what you are looking for..."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " NO |     MODULE     |                                CATEGORY                                | PTY"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 1  |     CS3235     |                               Assignment                               |  4"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 2  |     CS3235     |                                  Lab                                   |  3"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 3  |     CS3235     |                                Lecture                                 |  1"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 4  |     CS3235     |                                Tutorial                                |  2"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Total categories: 5"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. James has two choices:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   1. enter `cd cs3235` to enter the module directory then enter `addc misc` to add the category."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   2. enter `addc misc -m cs3235` to add the category at the root directory."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   Suppose James use the first method, after the second input, the input is parsed as an **add task** command and executed, the `AddCategoryCommand#execute()` will call ``AddCategoryCommand#getParentDirectory()` to get the current parent directory, then it will instantiate an `Category` object with the name \"misc\". After which `CategoryManager#add()` will be called to add the new object. In the `CategoryManager#add()` method, it will call `CategoryManager#contains()` method to check if the current parent directory contains the category with name \"misc\", finally add the object into the `ArrayList` of `categoryList`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "2. James receive the following feedback:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   root :"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   addc misc"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   SUCCESS!! Category misc is created."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Below is a *sequence diagram* to illustrate the above example scenario.  "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "to-do: add the sequence diagram"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### 2. Delete Feature  "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Overview  "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **delete** feature deletes *modules*, *categories* and *tasks* from the Module, Category and Task List respectively.   "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "When the user first requests to execute the **delete** command to delete a directory by providing its name, the application will first filter for directories with matching names. From here, there are **three** possible outcomes:  "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "1. There are **no** matches --  Nothing is deleted."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "2. There is **one** match -- A prompt will be given to the user to confirm the deletion."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "3. There are **multiple** matches -- The list of matches will be shown to the user, and the user chooses which ones to delete. A further prompt will be given to confirm the deletion(s)."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Feature Implementation  "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Delete Command Class Diagram](images/Delete_Command_Class_Diagram.png)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cspan style\u003d\"color: green\"\u003e\u003csmall\u003e\u003ci\u003eFigure \u003cb\u003eDelete Command Class Diagram\u003c/b\u003e\u003c/i\u003e\u003c/small\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The `DeleteModuleCommand`, `DeleteCategoryCommand` and `DeleteTaskCommand` classes in the application facilitates this **delete** feature. They are in charge of deleting *modules*, *categories* and *tasks* respectively. \u003cbr\u003e  "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "As shown in the figure above, those three classes each extends from the abstract `DeleteCommand` class.  They also [override](#) the `DeleteCommand` class\u0027s `executeInitialDelete()` method, which role is to prepare the necessary messages or prompts for the user depending on the number of filtered matches. \u003cbr\u003e  "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The `DeleteCommand` class in turn extends the `FilterCommand` abstract class. The `FilterCommandClass` contains the following vital methods for filtering:  "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `createFilteredModuleList()` -- Creates an `ArrayList` of the filtered *modules*.  "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `createFilteredCategoryist()` -- Creates an `ArrayList` of the filtered *categories*.  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `createFilteredTaskList()` -- Creates an `ArrayList`of the filtered *tasks*.  "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lastly, the `FilterCommand` class extends the abstract `Command` class that contains the `execute()` method to execute the actual **delete** command.  "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Prompt Command Class Diagram](images/Prompt_Class_Diagram.png)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cspan style\u003d\"color: green\"\u003e\u003csmall\u003e\u003ci\u003eFigure \u003cb\u003ePrompt Command Class Diagram\u003c/b\u003e\u003c/i\u003e\u003c/small\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Other than the commands, two prompts are involved.   "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The prompt to request for the list number(s) of the item(s) to delete from the filtered list is managed by the `ListNumberPrompt` class. The prompt to request to confirm the deletion is managed by the `DeleteConfirmationPrompt` class.  "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage  "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The deletion process for *modules*, *categories* and *tasks* are similar. In this example, the deletion process for *tasks* will be illustrated as a series of steps.  \u003cbr\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "James is a user and wants to delete some of his *tasks* with *description* \"work\". Assume that he has the current Task List:  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " NO |  MODULE  |       CATEGORY       |          TASK          |           DEADLINE           | PTY "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 1  |  CS1231  |      Assignment      |       group work       |      28/03/2020 06:00PM      | 20  "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 2  |  CS1231  |       Tutorial       |       Tutorial 6       | 24/03/2020 11:59PM [OVER!!]  |  6  "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 3  |  CS2100  |       Lecture        |     watch webcast      |            -NIL-             |  1  "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 4  |  CS2113  |      Bigger Lab      |      Big Lab Work      |        today 06:00PM         |  7  "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 5  |  CS2113  |       Tutorial       | tutorial worksheet 10  |        today 12:00PM         |  5  "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Total tasks: 5"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Step 1](images/Number_1.png){: .image-left .step }   "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "James will first enter the command to delete *tasks*:  "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t`delt work -a`  "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\tAfter the input is parsed as a **delete task** command and executed, the `DeleteTaskCommand#execute()` will call `FilterCommand#createFilteredTaskList()` to create the filtered list of *tasks* containing the *description* \"work\". `DeleteTaskCommand#execute()` will then call its own method `DeleteTaskCommand#executeInitialDelete(filteredList)` to prepare the prompt to request James to enter the list number of the *tasks* he would like to delete.  "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Step 2](images/Number_2.png){: .image-left .step }    "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "James receives the following prompt:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```  "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Multiple matching tasks found."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " NO |  MODULE  |       CATEGORY       |          TASK          |           DEADLINE           | PTY "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 1  |  CS1231  |      Assignment      |       group work       |      28/03/2020 06:00PM      | 20  "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 2  |  CS2113  |      Bigger Lab      |      Big Lab Work      |        today 06:00PM         |  7  "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 3  |  CS2113  |       Tutorial       | tutorial worksheet 10  |        today 12:00PM         |  5  "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Total tasks: 3"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Enter the list number(s) of the tasks to delete."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "He proceeds to enter list numbers `2 3` as he has already completed both *tasks*.  "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "After the list numbers are parsed, it will call `ListNumberPrompt#execute()`, which will prepare the prompt for the delete confirmation, and then calls `ListNumberPrompt#executePromptConfirmation()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Step 3](images/Number_3.png){: .image-left .step}   "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "James receives another prompt:  "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```  "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Confirm delete these tasks?"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "tutorial worksheet 10"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Big Lab Work"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "He enters `y` to confirm the deletion."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`DeleteConfirmationPrompt#execute()` will be called, which then calls `DeleteConfirmationPrompt#executeMultipleDelete(filteredList)` to delete James\u0027 selected *tasks* from his Task List."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Step 4](images/Number_4.png){: .image-left .step}  "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "James receives the final message:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "SUCCESS!! Task(s) have been deleted."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Deletion process ends.  "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Below is a *sequence diagram* to illustrate the above example scenario.  "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Delete Command Sequence Diagram](images/Delete_Command_Sequence_Diagram.png)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cspan style\u003d\"color: green\"\u003e\u003csmall\u003e\u003ci\u003eFigure \u003cb\u003eDelete Command Sequence Diagram\u003c/b\u003e\u003c/i\u003e\u003c/small\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### 3. ..."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do implementaitons for other features"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Appendix**  "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **User Stories**  "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can...|"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|---|---|---|---|"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |new user |see usage instructions |learn about existing features and how can I use them |"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |add modules\\tasks |I can have track on tasks of different modules |"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |delete modules\\tasks |remove modules and tasks I do not need to keep on track anymore |"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |edit modules\\tasks |I can correct or change some attributes"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |constansly check the deadline of tasks in ascending order |I can get tasks done on time |"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |receive a reminder of urgent tasks |I know which tasks should be done first |"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |sort my tasks in terms of certain criteria |I can view my tasks of highest priorites |"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |add tags to tasks |I can filter and view tasks with respect to certain tags|"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* *` |student |receive a reminder of expired tasks |I know I passed the deadline |"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Non-Functional Requirements**  "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To be done."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Glossary**  "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To be done."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Manual Testing**  "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To be done."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 16,
      "A11riseforme": 176,
      "iceclementi": 207,
      "-": 23
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{Give product intro here}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 1,
      "-": 7
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# **Nuke User Guide** \u003csmall\u003ev1.5\u003c/small\u003e  "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# Table of Contents  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Introduction** [\u0026#10149;](#introduction)  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **General Usage** [\u0026#10149;](#general-usage)  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Nuke Structure** [\u0026#10149;](#nuke-structure)  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Command Format** [\u0026#10149;](#command-format)  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Command Prefixes** [\u0026#10149;](#command-prefixes)  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Features** [\u0026#10149;](#features)  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; **1. Add** [\u0026#10149;](#1-add)  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; a. Add a Module into your Module List [\u0026#10149;](#a-add-a-module-into-your-module-list)    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b. Add a Category into your Category List [\u0026#10149;](#b-add-a-category-into-your-category-list)    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; c. Add a Task into your Task List [\u0026#10149;](#c-add-a-task-into-your-task-list)    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; **2. List** [\u0026#10149;](#2-list)  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; a. List your Modules [\u0026#10149;](#a-list-your-modules)     "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b. List your Categories [\u0026#10149;](#b-list-your-categories)    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; c. List your Tasks [\u0026#10149;](#c-list-your-tasks)    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; **3. Delete** [\u0026#10149;](#3-delete)  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; a. Delete Modules from your Module List [\u0026#10149;](#a-delete-modules-from-your-module-list)    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b. Delete Categories from your Category List [\u0026#10149;](#b-delete-categories-from-your-category-list)    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; c. Delete Tasks from your Task List [\u0026#10149;](#c-delete-tasks-from-your-task-list)    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; **4. Edit** [\u0026#10149;](#4-edit)  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; a. Edit a Module in your Module List [\u0026#10149;](#a-edit-a-module-in-your-module-list)    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b. Edit a Category in your Category List [\u0026#10149;](#b-edit-a-category-in-your-category-list)    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; c. Edit a Task in your Task List [\u0026#10149;](#c-edit-a-task-in-your-task-list)    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; **5. Mark a Task as Done** [\u0026#10149;](#5-mark-a-task-as-done)  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; **6. Change Directory** [\u0026#10149;](#6-change-directory)  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Miscellaneous Information** [\u0026#10149;](#miscellaneous-information)  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Help** [\u0026#10149;](#help)  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Exiting the Nuke Program** [\u0026#10149;](#exiting-the-nuke-program)  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Loading and Saving** [\u0026#10149;](#loading-and-saving)  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; -- Loading [\u0026#10149;](#loading)    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; -- Saving [\u0026#10149;](#saving)    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Date Time Formats** [\u0026#10149;](#date-time-formats)  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; -- Date Formats [\u0026#10149;](#date-formats)    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; -- Time Formats [\u0026#10149;](#time-formats)    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Command Summary** [\u0026#10149;](#command-summary)  "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **FAQ** [\u0026#10149;](#faq)  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# Introduction  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This **Nuke** application is a simple yet powerful task management system that is dedicated to providing **NUS students** efficient organisation of _modules_ and _tasks_.\u003cbr\u003e  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "You will be interacting with the application via the command line. With the **Nuke** application, you will be able to perform various operations to manage your _modules_ and _tasks_ such as adding, deleting and listing your  _modules_ and _tasks_. You may also add additional properties to your _tasks_ such as _files_, _deadlines_, and _priorities_.\u003cbr\u003e  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "**Nuke** facilitates users by automatically sorting user-added _tasks_ and displaying the most important and urgent ones to the users. In the long term, it strives to enhance the quality of NUS students’ lives by serving as the one-stop platform for efficient management of module tasks.\u003cbr\u003e  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "If you are an **NUS student** and have not tried out **Nuke** yet...  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "What are you waiting for? Give **Nuke** a shot, and you will see how amazing it is!  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# General Usage  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This section will explain the fundamental structure of the **Nuke** application, and important guidelines to follow to ensure smooth usage of the application.  "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Nuke Structure"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "**Nuke** follows the structure of a **Directory Tree** _(i.e. folder sub-folder structure)_. This Directory Tree comprises various levels:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u003cu\u003eDirectory Levels Table\u003c/u\u003e  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| Directory Level | Description                                                                      |"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "|:---------------:|----------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| **Root**        | The **base** of the Directory Tree. Only **one** root exists in the entire Tree.\u003cbr\u003eAdded _modules_ are in this level. |"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| **Module**      | The **second** level of the Directory Tree.\u003cbr\u003eAdded _categories_ are in this level.   |"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| **Category**    | The **third** level of the Directory Tree.\u003cbr\u003eAdded _tasks_ are in this level.    |"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| **Task**        | The **last** level of the Directory Tree.\u003cbr\u003eAdded _files_ are in this level.       |"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// Maybe I will add a sample Directory Tree diagram here"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Root   "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The **Root** Directory is the **base** of the entire Directory Tree. Only **one** root exists in the entire Tree. _Modules_ are added into this level into a **Module List**. A _module_ consists of both a *module code* and a _module title_. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: Only **NUS modules** are allowed to be added in **Nuke**.  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Module"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **Module** Directory is the **second** level of the Directory Tree.  Each _module_ has a **Category List** that has several _categories_ to categorise your _tasks_, such as Lecture, Tutorial and Assignment, so that you can further organise your _tasks_. A _category_ consists of a _name_ and a _priority_ to indicate the importance of the _tasks_ in that _category_."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Category"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **Category** Directory is the **third** level of the Directory Tree. Each _category_ has a **Task List** that can contain any number of _tasks_, which are ideally related to the _category_. A _task_ has several attributes, namely the _description_, _deadline_ of the _task_ if any, _priority_ and the _done status_ of the _task_."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Task"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **Task** Directory is the **last** level of the Directory Tree. Each _task_ can have _files_ attached to the it. _Files_ are stored in the **File List**. The _file_ must have a _file name_ and the _path_ to the _file_."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u003cu\u003eOther Notes\u003c/u\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **Nuke** application adheres to this Directory Tree structure strictly. It is important to note that you can only add a directory into a directory which is **_exactly_ one level lower**. For example, you can only add a _task_ into the **Category** directory, and not directly into the **Module** directory.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Normally, you would need to enter the full _directory path_ in order to add and delete _modules_, _categories_, _tasks_ and _files_. To make the process more efficient, **Nuke** enables you to traverse about the various directories via the [Change Directory](#6-change-directory) command so that you can add and delete the corresponding items directly without having to enter the full _directory path_."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Command Format  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "In this User Guide, the format for each feature _(command)_ will usually be of this form:  "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`CommandWord \u003cattribute0\u003e -Prefix1 \u003cattribute1\u003e ... [ -Prefix2 \u003cattribute2\u003e ... ]`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Command Word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Each command you give to **Nuke** has to begin with its corresponding unique **command word**. This helps **Nuke** to know that you want it to execute a particular command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Attribute"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "**Attributes** are information to be provided in the command. An **attribute** for the command will be wrapped in angular brackets `\u003c \u003e` to help you to recognise it."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "A **prefix** is used to provide additional supplementary information to the command. More information on the various **command prefixes** can be found [here](#command-prefixes)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Optional"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Some **attributes** and **prefixes** are _optional_ and the command can still execute properly even when omitted. However, they may be useful if you want to provide a more specific information to the command. Optional **attributes** and **prefixes** will be wrapped in square brackets `[ ]` to help you to recognise them."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Command Prefixes  "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "On many occasions, you may be required to enter more information to describe the commands you give to **Nuke**. For example, when adding a _task_, you may need to specify the _module_ and _category_ to add the _task_ into. You may also want to include additional attributes such as the _deadline_ and _priority_. All these information can only be recognised by **Nuke** if they are preceded by the correct **prefix**.\u003cbr\u003e  "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "All **command prefixes** in **Nuke** begins with a `-` and followed by a **letter**. Below is the exhaustive list of **command prefixes** and general information that should follow after. "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u003cu\u003eCommand Prefix Table\u003c/u\u003e  "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| Command Prefix | General Definition                                               |"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "|:--------------:|------------------------------------------------------------------|"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-m`           | The _module code_ of the _module_                                |"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-c`           | The _name_ of the _category_                                     |"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-t`           | The _description_ of the _task_                                  |"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-f`           | The _path_ of the _file_                                         |"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-d`           | The _deadline_ of the _task_                                     |"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-p`           | The _priority_ of the _category_ or _task_                       |"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-e`           | To indicate whether filtering is done **exactly**                |"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-a`           | To indicate whether filtering is done across **all directories** |"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e  "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# Features  "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## 1. Add  "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Adds a _module_, _category_ or _task_ into their respective lists.\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "As mentioned previously, **Nuke** follows the structure of a **Directory Tree** _(i.e. folder sub-folder structure)_. Therefore, **Nuke** also supports Linux file-system-related command for creating a directory: `mkdir`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- When you are at the **Root Directory**, `mkdir \u003cmodule code\u003e` will add a *module* into your **Module List**."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- When you are at the **Module Directory**, `mkdir \u003ccategory name\u003e` will add a _category_ into your **Category List**."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- When you are at the Category Directory, `mkdir \u003ctask description\u003e` will add a _task_ into your **Task List**."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The above mentioned commands have to be done in the corresponding directories, and the commands below can be done in any directories, but less generic."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### a. Add a Module into your Module List  "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Adds a _module_ into your **Module List**. The **Module List** contains all your added _modules_ and can be viewed via the List Module command."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`addm \u003cmodule code\u003e`  "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `module code` -- The _module code_ of the   _module_  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: The _module code_ is **case-insensitive**. However, it must correspond to a valid **NUS module**. Only **NUS modules** can be added in this version of **Nuke**."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\taddm cs2113t"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root :"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addm cs2113t"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "SUCCESS!! Module CS2113 Software Engineering \u0026 Object-Oriented Programming has been added."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### before:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200330234001037](images/ug_addm_before.png)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### after:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200330233926681](images/ug_addm_after.png)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### \u003cbr\u003e  "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### b. Add a Category into your Category List  "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Adds a _category_ into your **Category List**. The **Category List** contains all your added _categories_ in the _module_ and can be viewed via the List Category command."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`addc \u003ccategory name\u003e -m \u003cmodule code\u003e [ -p \u003cpriority\u003e ]`  "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `category name` -- The _name_ of the   _category_"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `module code` -- The _module code_ of the _module_   to contain the _category_ to be added"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `priority` -- A number indicating the  _priority_ of the _category_"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: You need **not** include the `module code` information if you are currently in that _module_\u0027s directory. You can move to the  _module_\u0027s directory via the [Change Directory](#6-change-directory) Command.  "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: The `priority` that you give must be a number between 0 and 100 inclusive. The bigger the number, the more important the category. If the `priority` is not given, then it will be set to **0**.  "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\taddc Lecture -m cs2113t -p 3"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root / CS2113T :"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addc Lecture -m cs2113t -p 3"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "SUCCESS!! Category Lecture is created."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### before:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200331000048607](images/ug_addc_before.png)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### after:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200331000110946](images/ug_addc_after.png)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### c. Add a Task into your Task List  "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Adds a _task_ into your **Task List**. The **Task List** contains all your added _tasks_ in the _category_ and can be viewed via the List Task command."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`addt \u003ctask description\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e [ -d \u003cdeadline\u003e -p \u003cpriority\u003e ]`  "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `task description` -- The _description_ of the _task_"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `module code` -- The _module code_ of the _module_   to contain the _category_ to be added"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `category name` -- The _name_ of the   _category_"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `deadline` -- The _deadline_ of the _task_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `priority` -- A number indicating the  _priority_ of the _category_"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: You need **not** include the `module code` if you are currently in that _module_\u0027s directory. Also, you need **not** include both `module code` and `category name`  if you are currently in that _category_\u0027s directory. You can move to the  the respective directories via the [Change Directory](#6-change-directory) Command.  "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: The `priority` that you give must be a number between 0 and 100 inclusive. The bigger the number, the more important the task. If the `priority` is not given, then it will be set to the same _priority_ as it\u0027s _category_.  "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: The `deadline` provided consists of both a _date_ and a _time_. The `deadline` provided must adhere to the set of accepted [Date Time formats](#date-time-formats).   "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\taddt urgent assignment -m cs2113t -c Assignment -d tmr 2359 -p 80"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root / CS2113T / Assignment :"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addt urgent assignment -m cs2113t -c Assignment -d tmr 2359 -p 80"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "SUCCESS!! Task urgent assignment is created."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### before:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200331000255994](images/ug_addt_before.png)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### after:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200331000315462](images/ug_addt_after.png)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## 2. List  "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lists the _modules_, _categories_ or _tasks_ in their respective lists.\u003cbr\u003e  "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### a. List your Modules  "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### b. List your Categories  "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### c. List your Tasks  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e  "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## 3. Delete  "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Deletes _modules_, _categories_ or _tasks_ from their respective lists.\u003cbr\u003e  "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### a. Delete Modules from your Module List"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### b. Delete Categories from your Category List   "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### c. Delete Tasks from your Task List     "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e  "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## 4. Edit"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Edits a _module_, _category_ or _task_ in their respective lists.\u003cbr\u003e  "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### a. Edit a Module in your Module List  "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### b. Edit a Category in your Category List  "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### c. Edit a Task in your Task List  "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e  "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## 5. Mark a Task as Done  "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Marks a **previously undone** task as *done*.\u003cbr\u003e  "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e  "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## 6. Change Directory "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Traverse up and down the Directory Tree from your current directory.\u003cbr\u003e  "
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# Miscellaneous Information  "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Help  "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "In the event that you ever forget the usage of a command, you can look it up within the **Nuke** program itself. All you need to do is to enter the *keyword* `help`, followed by the command you wish to query.     "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Exiting the Nuke Program  "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Exiting the **Nuke** program is simple. Simply enter `bye` to exit.  "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Upon exiting, the program will [save](#saving) your entire Directory List into a file in your device.  "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Loading and Saving  "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **Nuke** program loads and saves your entire Directory List **automatically**, so there is no explicit way to freely load or save your file.    "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Loading "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Loading is done once you start up the **Nuke** program. The data from the saved *directory list file* in your device is read to initialise your Directory List from when it was last saved."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Saving  "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Saving is done upon executing each of your commands in the **Nuke** program. Your Directory List will be saved into a *directory list file* in your device.    "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Date Time Formats  "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Any *date time* data that you provide has to adhere to certain formats pre-defined by the **Nuke** program. Failure to do so will likely result in the program to be unable to recognise your input command, and a warning will be shown.    "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Instances when you may need to enter a *date time* will be when adding a _deadline_ to your _tasks_."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Here are the following *date time* formats:  "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Date Formats  "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "There are **two** types *date* formats allowed.  "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### 1. Words  "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "You may enter **only** the following *date* words.  "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `today` or `tdy` -- represents the \u003cu\u003ecurrent\u003c/u\u003e date  "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `tomorrow` or `tmr` -- represents the \u003cu\u003enext\u003c/u\u003e date  "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `yesterday` or `yst` -- represents the \u003cu\u003eprevious\u003c/u\u003e date  "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  "
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: All dates are taken with reference to the current date on your device.  "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  #### 2. Standard Date Format  "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This refers to the typical dates that are represented with **numbers** and **delimiter symbols**.    "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "In this **Nuke** program, *dates* should be in the order of **day**, **month**, then an \u003cu\u003eoptional\u003c/u\u003e **year**. If the **year** is not provided, the program will automatically assume it to be the **current year**.  Also, the **day**, **month** and **year** should only be entered as **numbers** and not words *(e.g. January is not accepted for the **month** attribute)*.  "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Regarding **delimiters**, the program will **only** consider `/` and `-` as valid delimiters for *dates*.  Delimiters are \u003cu\u003eoptional\u003c/u\u003e and may be omitted provided you include the **year** of the *date* *(e.g. 1/1/20, 1/1 and 010120 are accepted, but not 0101).*  "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "An **exhaustive** list of the standard *date* formats is given below for your reference.  "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " dd/MM/yyyy, d/MM/yyyy, dd/M/yyyy, d/M/yyyy,   "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " dd/MM/yy, d/MM/yy, dd/M/yy, d/M/yy,  "
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " dd/MM, d/MM, dd/M, d/M, dd-MM-yyyy, d-MM-yyyy, dd-M-yyyy, d-M-yyyy,   "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " dd-MM-yy, d-MM-yy, dd-M-yy, d-M-yy,  "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " dd-MM, d-MM, dd-M, d-M, ddMMyyyy, ddMMyy"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Info**: `d` represents the **day** of the date. `M` represents the **month** of the date. `y` represents the **year** of the date.  "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Time Formats  "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **Nuke** program accepts most time formats that are represented with **numbers**, **delimiter symbols** and \u003cu\u003eoptional\u003c/u\u003e **am-pm markers**.    "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The *time* should be in the order of  **hour**, then **minute**. The **seconds** attribute of *time* should **not** be given. The **minute** attribute must be a **double** digit *(i.e. single digits must be padded with a 0 in front)*. The **minute** attribute is also \u003cu\u003eoptional\u003c/u\u003e, and should it be omitted, the **Nuke** program will automatically set the **minute** to be 0. Both the **12-h** format and the **24-h** format are valid *time* formats for this program.    "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Regarding **delimiters**, the program will **only** consider `:` and `.` as valid delimiters for *time*.  Delimiters are \u003cu\u003eoptional\u003c/u\u003e and may be omitted.  "
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lastly, the **am-pm marker** is an \u003cu\u003eoptional\u003c/u\u003e attribute, and should it be omitted, the **Nuke** program will automatically assume the *time* to follow the **24-h** format.  "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "An **exhaustive** list of the *time* formats is given below for your reference.  "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```  "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " h:mma, H:mma, H:mm, h.mma, "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " H.mma, H.mm, hmma, Hmma, Hmm, "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " ha, Ha, H"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " \u003e **Info**: `H` and `h` represents the **hour** for the 24-h and 12-h time format respectively. `m` represents the **minute**. `a` represents the **am-pm markers**.  "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# Command Summary"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# FAQ"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 48,
      "iceclementi": 502,
      "-": 21
    }
  },
  {
    "path": "save.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- MODULE ---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "CS1231 -|||- Discrete Structures -|||- NIL"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- CATEGORY ---"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lecture -|||- 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Tutorial -|||- 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Tutorial 6 -|||- N -|||- 24/03/2020 11:59PM -|||- 6"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lab -|||- 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "work -|||- N -|||- 31/03/2020 08:00PM -|||- 3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Assignment -|||- 5"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "group work -|||- Y -|||- 28/03/2020 06:00PM -|||- 20"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END CATEGORY ---"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "CS2113 -|||- Software Engineering \u0026 Object-Oriented Programming -|||- NIL"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- CATEGORY ---"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lecture -|||- 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "notes -|||- N -|||-  -|||- 1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Tutorial -|||- 2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "tutorial worksheet 10 -|||- N -|||- 25/03/2020 12:00PM -|||- 5"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Assignment -|||- 4"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Bigger Lab -|||- 6"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Big Lab Work -|||- N -|||- 25/03/2020 06:00PM -|||- 7"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Lab -|||- 0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "read -|||- N -|||-  -|||- 0"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END CATEGORY ---"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "CS2100 -|||- Computer Organisation -|||- NIL"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- CATEGORY ---"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lecture -|||- 1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "watch webcast -|||- N -|||-  -|||- 1"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Tutorial -|||- 2"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Assignment -|||- 4"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lab -|||- 3"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END CATEGORY ---"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "CS3230 -|||- Design and Analysis of Algorithms -|||- NIL"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- CATEGORY ---"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Lecture -|||- 1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Tutorial -|||- 2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Assignment -|||- 4"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Lab -|||- 3"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lab1 -|||- N -|||-  -|||- 3"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END CATEGORY ---"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END MODULE ---"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 6,
      "A11riseforme": 18,
      "iceclementi": 68
    }
  },
  {
    "path": "src/main/java/seedu/nuke/Executor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.promptcommand.PromptType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Executor {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Variables to transit between parsing regular commands and prompts */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static PromptType promptType \u003d PromptType.NONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static DirectoryLevel directoryLevel \u003d DirectoryLevel.NONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static ArrayList\u003cDirectory\u003e filteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static ArrayList\u003cInteger\u003e indices;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the system to prepare a prompt for the user to input indices."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void preparePromptIndices() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptType \u003d PromptType.INDICES;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the system to prepare a confirmation prompt for the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void preparePromptConfirmation() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptType \u003d PromptType.CONFIRMATION;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the system to terminate prompt mode and revert to normal parsing of commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void terminatePrompt() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptType \u003d PromptType.NONE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the list of indices inputted by the user during a prompt."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of indices inputted by the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cInteger\u003e getIndices() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return indices;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Overwrite with new list of indices inputted by the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param indices"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of indices inputted by the user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void setIndices(ArrayList\u003cInteger\u003e indices) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.indices \u003d indices;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the level of the directory (module, category, task, file) in the filtered list of directories that is"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * used during prompt mode."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The level of the directories in the list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static DirectoryLevel getDirectoryLevel() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return directoryLevel;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the filtered list of directories used in prompt mode."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of directories"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cDirectory\u003e getFilteredList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Overwrites the current filtered list of directories with a new filtered list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredList"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of directories"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param directoryLevel"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The level of the directories in the list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void setFilteredList(ArrayList\u003cDirectory\u003e filteredList, DirectoryLevel directoryLevel) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.filteredList \u003d filteredList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.directoryLevel \u003d directoryLevel;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param userInput The input from the user to be parsed and executed as a command"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return commandResult that contains the execute output information"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static CommandResult executeCommand(String userInput) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (promptType) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CONFIRMATION:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            command \u003d new Parser().parseConfirmation(userInput.toLowerCase());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case INDICES:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            command \u003d new Parser().parseIndices(userInput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            command \u003d new Parser().parseCommand(userInput);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return execute(command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static CommandResult execute(Command command) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return command.execute();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "iceclementi": 123
    }
  },
  {
    "path": "src/main/java/seedu/nuke/Nuke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ScreenShotManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.ui.TextUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.util.Message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class Nuke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Root root;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private CommandResult commandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private ModuleManager moduleManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private HashMap\u003cString, String\u003e modulesMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * constructor of nuke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @throws FileNotFoundException if file cannot be found when loading jason file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public Nuke() throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        root \u003d new Root();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        modulesMap \u003d ModuleLoader.load(\"moduleList.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //storageManager \u003d new StorageManager(\"data.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        storageManager \u003d new StorageManager(\"save.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        moduleManager \u003d new ModuleManager(root, modulesMap);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //ModuleManager.setModuleList(storageManager.load());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        storageManager.load2();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * ScreenShot entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param args arguments passed to the programme."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws FileNotFoundException exception is thrown if the file is not found."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        new Nuke().run();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * run method for Nuke class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        welcomeUser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Method to print the welcome message to the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void welcomeUser() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.clearScreen();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.displayLogo();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.showWelcomeMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Method to print the exit message to the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ui.showSystemMessage(Message.DIVIDER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        storageManager.save2();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Method to run the command from the user\u0027s input until exit command is received."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String userInput \u003d ui.getInput();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            commandResult \u003d Executor.executeCommand(userInput);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ui.showResult(commandResult);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            //storageManager.save();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            storageManager.save2();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } while (!ExitCommand.isExit());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ModuleManager getModuleManager() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return moduleManager;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult getCommandResult() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 29,
      "wangqinNick": 24,
      "A11riseforme": 31,
      "iceclementi": 14,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/NukeLogger.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddModuleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class NukeLogger {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(AddModuleCommand.class.getName());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Logger getLogger() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void setUpLogger() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        logger.addHandler(new ConsoleHandler());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 18
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ChangeDirectoryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DirectoryTraversalOutOfBoundsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DIRECTORY_NOT_FOUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FAILED_DIRECTORY_TRAVERSAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ChangeDirectoryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cd\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003cnext directory name\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"traverse to another directory (.. represents parent directory)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String nextDirectoryName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to traverse down into the next directory with the given name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param nextDirectoryName"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the next directory"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ChangeDirectoryCommand(String nextDirectoryName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.nextDirectoryName \u003d nextDirectoryName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to traverse up from the current directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ChangeDirectoryCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the Change Directory Command to traverse up or down the current Directory."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Command result of the execution"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if ((nextDirectoryName !\u003d null)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Directory nextDirectory \u003d DirectoryTraverser.findNextDirectory(nextDirectoryName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                DirectoryTraverser.traverseDown(nextDirectory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                DirectoryTraverser.traverseUp();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // No feedback for successful traversal"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DirectoryTraversalOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FAILED_DIRECTORY_TRAVERSAL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DataNotFoundException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DIRECTORY_NOT_FOUND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "wangqinNick": 14,
      "A11riseforme": 2,
      "iceclementi": 42
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // public static String COMMAND_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //protected ModuleManager moduleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //protected static Directory currentDirectory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    return this.COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // * initialize some attributes of the command if needed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // * @param moduleManager current module manager that manages all modules."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public void setData(ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    this.moduleManager \u003d moduleManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public static Directory getCurrentDirectory() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    return currentDirectory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public static void setCurrentDirectory(Directory currentDirectory) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    Command.currentDirectory \u003d currentDirectory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 6,
      "iceclementi": 29
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * construct the feedback to user String."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final DirectoryLevel directoryLevel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final ArrayList\u003cDirectory\u003e shownList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private final ArrayList\u003cString\u003e helpGuides;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor of the CommandResult class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param feedbackToUser The feedback to be printed to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param directoryLevel The directoryLevel the user is at currently."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param listToShow the list of Directory to be printed to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param helpGuides the helping guides to be printed to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult(String feedbackToUser, DirectoryLevel directoryLevel,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                          ArrayList\u003cDirectory\u003e listToShow, ArrayList\u003cString\u003e helpGuides) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.directoryLevel \u003d directoryLevel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.shownList \u003d listToShow;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.helpGuides \u003d helpGuides;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs a command result that contains both feedback message and list to show."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param feedbackToUser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The feedback message to be shown to the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param directoryLevel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The data type of the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param listToShow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list to be shown to the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult(String feedbackToUser, DirectoryLevel directoryLevel, ArrayList\u003cDirectory\u003e listToShow) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this(feedbackToUser, directoryLevel, listToShow, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult(String feedbackToUser, ArrayList\u003cString\u003e listToShow) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this(feedbackToUser, DirectoryLevel.NONE, null, listToShow);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs a command result that contains the feedback message only."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param feedbackToUser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The feedback message to be shown to the user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this(feedbackToUser, DirectoryLevel.NONE, null, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the feedback message to be shown to the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The feedback message to be shown to the user"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the level of the list to be shown to the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The level of the list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DirectoryLevel getDirectoryLevel() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return directoryLevel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the list to be shown to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list to be shown to the user"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cDirectory\u003e getShownList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return shownList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ArrayList\u003cString\u003e getHelpGuides() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return helpGuides;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 28,
      "wangqinNick": 10,
      "A11riseforme": 8,
      "iceclementi": 47
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EXIT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ExitCommand extends TaskCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Exit from Nuke\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static boolean isExit; // To check if user requests to exit the program"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eExit Command\u003c/b\u003e to exit the \u003cb\u003eNuke\u003c/b\u003e program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the user has requested to exit the program (after confirmation if necessary)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if an exit is requested, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isExit; // Returns true if command is exit command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 5,
      "wangqinNick": 17,
      "iceclementi": 16
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.ui.Ui.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_HELP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Show helping guides\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return new CommandResult(MESSAGE_HELP, commands);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 9,
      "wangqinNick": 12
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/IncorrectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eInvalid Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e that is determined to be invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private final String feedbackToUSer; // Message to be shown to the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public IncorrectCommand(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUSer \u003d message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getFeedbackToUSer() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return feedbackToUSer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eInvalid Command\u003c/b\u003e to show the \u003ccode\u003emessage\u003c/code\u003e to the user due to an \u003ci\u003einvalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * command\u003c/i\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(feedbackToUSer);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 9,
      "iceclementi": 21
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * module level command inherits Command class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class ModuleCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 8,
      "A11riseforme": 1
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/OpenFileCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.FilterCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskFileManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_IO_EXCEPTION;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_FILES_FOUND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_OPEN_FILE_SUCCESS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eOpen File Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to open a \u003cb\u003eFile\u003c/b\u003e to the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see TaskFile"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class OpenFileCommand extends FilterCommand {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" [ \u003cfile name\u003e ] -m \u003cmodule code\u003e \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"-c \u003ccategory name\u003e -t \u003ctask description\u003e\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to open a file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to delete the task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to delete the task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public OpenFileCommand(String moduleCode, String categoryName, String taskDescription, String fileName) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filters for the files to be opened."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of files to be opened"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTaskFile\u003e filterFilesToOpen()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleManager.ModuleNotFoundException, CategoryManager.CategoryNotFoundException,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskManager.TaskNotFoundException, TaskFileManager.TaskFileNotFoundException,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Task parentTask \u003d  DirectoryTraverser.getTaskDirectory(moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!fileName.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // If file name is given, open the specified file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ArrayList\u003c\u003e(Collections.singletonList(parentTask.getFiles().getFile(fileName)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Open all files in the task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return parentTask.getFiles().getFileList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Opens the files in the filtered list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filesToOpen"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of files to be opened"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there is an error opening the file(s)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void openFiles(ArrayList\u003cTaskFile\u003e filesToOpen) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Desktop desktop \u003d Desktop.getDesktop();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : filesToOpen) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            File[] filesInDirectory \u003d new File(file.getFilePath()).listFiles();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (filesInDirectory \u003d\u003d null || filesInDirectory.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Get the first file in the list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            File toOpen \u003d filesInDirectory[0];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!toOpen.exists() || !toOpen.isFile()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                desktop.open(toOpen);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eOpen File Command\u003c/b\u003e to open \u003cb\u003eFile\u003c(s)\u003c/b\u003e with the \u003ccode\u003efile name\u003c/code\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see TaskFile"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTaskFile\u003e filesToOpen \u003d filterFilesToOpen();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (filesToOpen.isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_NO_FILES_FOUND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            openFiles(filesToOpen);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_OPEN_FILE_SUCCESS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskFileManager.TaskFileNotFoundException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_IO_EXCEPTION);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 159
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * task level command inherits ModuleCommand class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class TaskCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected TaskManager taskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    //public String commandWord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public TaskCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public TaskCommand(int targetIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Extracts the the target person in the last shown list from the given arguments."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected Task getTargetTask() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return taskManager.getTaskList().get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 35,
      "A11riseforme": 1,
      "iceclementi": 1
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ScreenShotManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.CorruptedFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_UNDO_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_UNDO_UNSUCCESSFUL \u003d \"Something goes wrong here!\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_UNDO_AT_BEGINNING \u003d \"you are already at the initial state!\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            ScreenShotManager.revertToLastScreenShot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IOException | CorruptedFileException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_UNSUCCESSFUL);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (EmptyStackException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_AT_BEGINNING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 26,
      "iceclementi": 1
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddCategoryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.ExceptionMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.PRIORITY_PREFIX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageAddCategorySuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd Category Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to add a \u003cb\u003eCategory\u003c/b\u003e for the user\u0027s \u003ci\u003etasks\u003c/i\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Category"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class AddCategoryCommand extends AddCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addc\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003ccategory name\u003e -m \u003cmodule code\u003e [ -p \u003cpriority\u003e ]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Add a new category under module\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)+)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int categoryPriority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a category."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to add the category"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryPriority"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddCategoryCommand(String moduleCode, String categoryName, int categoryPriority) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryPriority \u003d categoryPriority;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a category without a priority."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to add the category"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddCategoryCommand(String moduleCode, String categoryName) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(moduleCode, categoryName, 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eAdd Category Command\u003c/b\u003e to add a \u003cb\u003eCategory\u003c/b\u003e into the \u003cb\u003eCategory List\u003c/b\u003e."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Category"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module parentModule \u003d DirectoryTraverser.getModuleDirectory(moduleCode);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category toAdd \u003d new Category(parentModule, categoryName, categoryPriority);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            parentModule.getCategories().add(toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageAddCategorySuccess(categoryName));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(ExceptionMessage.MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.DuplicateCategoryException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(ExceptionMessage.MESSAGE_DUPLICATE_CATEGORY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "iceclementi": 90
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A general \u003cb\u003eCommand\u003c/b\u003e to add a Directory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 12
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddFileCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskFileManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.nio.file.FileSystemException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.security.SecureRandom;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.FILE_PREFIX;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_TASK_FILE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_IO_EXCEPTION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_ADD_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_SECURITY_EXCEPTION;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_SYSTEM_EXCEPTION;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INVALID_FILE_PATH;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageAddFileSuccess;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd File Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to add a \u003cb\u003eFile\u003c/b\u003e to the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see TaskFile"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class AddFileCommand extends AddCommand {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addf\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \" \u003cfile name\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e -t \u003ctask description\u003e -f \u003cfile path\u003e\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Add a file to task\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)+)\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cfileInfo\u003e(?:\\\\s+\" + FILE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to add the task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to add the task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The path to the file"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddFileCommand(String moduleCode, String categoryName, String taskDescription,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                          String fileName, String filePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Generates a random hash of alphanumeric characters of fixed length."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The random hash"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String generateRandomHash() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String characters \u003d \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final int hashLength \u003d 16;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder hash \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int i \u003d 0; i \u003c hashLength; ++i) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            hash.append(characters.charAt(new SecureRandom().nextInt(characters.length())));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return hash.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Copies file from user-specified path into a folder in the application."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there is an error copying the file"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void copyFile() throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        File sourceFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!sourceFile.exists() || !sourceFile.isFile()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Path sourcePath \u003d sourceFile.toPath();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String randomHash \u003d generateRandomHash();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        File destinationFile \u003d new File(String.format(\"%s/%s/%s\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                StoragePath.TASK_FILE_DIRECTORY_PATH, randomHash, sourceFile.getName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Path destinationPath \u003d destinationFile.toPath();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Files.createDirectories(destinationPath.getParent());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Files.copy(sourcePath, destinationPath, REPLACE_EXISTING);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        filePath \u003d String.format(\"%s/%s\", StoragePath.TASK_FILE_DIRECTORY_PATH, randomHash);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a file without a path."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to add the task"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to add the task"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddFileCommand(String moduleCode, String categoryName, String taskDescription, String fileName) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(moduleCode, categoryName, taskDescription, fileName, null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eAdd File Command\u003c/b\u003e to add a \u003cb\u003eFile\u003c/b\u003e into the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see TaskFile"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task parentTask \u003d DirectoryTraverser.getTaskDirectory(moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            copyFile();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFile toAdd \u003d new TaskFile(parentTask, fileName, filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            parentTask.getFiles().add(toAdd);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageAddFileSuccess(fileName));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskFileManager.DuplicateTaskFileException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_TASK_FILE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_ADD_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (FileSystemException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_SYSTEM_EXCEPTION);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_IO_EXCEPTION);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (SecurityException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_SECURITY_EXCEPTION);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 3,
      "iceclementi": 183
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.NukeLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.messageAddModuleSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd Module Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to add a \u003cb\u003eModule\u003c/b\u003e into the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Module"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class AddModuleCommand extends AddCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addm\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Add a new module\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)+)\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a module."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eAdd Module Command\u003c/b\u003e to add a \u003cb\u003eModule\u003c/b\u003e into the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Logger logger \u003d NukeLogger.getLogger();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        //logger.log(Level.INFO, \"Add command is being executed.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Module toAdd \u003d new Module(moduleCode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            //logger.log(Level.INFO, String.format(\"Module %s was added into the module list.\", moduleCode));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assert toAdd.getModuleCode().equals(moduleCode) : \"Incorrect last added module!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageAddModuleSuccess(toAdd.getModuleCode(), toAdd.getTitle()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            //logger.log(Level.WARNING, String.format(\"Duplicate module %s attempted to be added.\", moduleCode));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (ModuleNotProvidedException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            //logger.log(Level.WARNING, String.format(\"Unknown module %s attempted to be added.\", moduleCode));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assert !ModuleManager.getModulesMap().containsKey(moduleCode) :"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    \"Incorrect identifying of unprovided module!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_PROVIDED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 3,
      "wangqinNick": 3,
      "A11riseforme": 8,
      "iceclementi": 60
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddTagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TAG_ADDED;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addg\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \" \u003ctag info\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \" -t \u003ctask description\u003e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Add tags to task\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final Pattern REGEX_FORMATS \u003d Pattern.compile("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)+)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \"(?\u003ctaskdescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private final ArrayList\u003cString\u003e infos;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs an Add Tag Command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param infos"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The tag info"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the parent module"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the parent category"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public AddTagCommand(ArrayList\u003cString\u003e infos, String taskDescription, String moduleCode, String categoryName) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.infos \u003d infos;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    protected CommandResult executeAdd() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            Task toAddTag \u003d DirectoryTraverser.getTaskDirectory(moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            toAddTag.setTag(infos);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            for (String info : infos) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                assert toAddTag.getTags().contains(info) \u003d\u003d true : \"tag have been successfully added\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(MESSAGE_TAG_ADDED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return executeAdd();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 55,
      "wangqinNick": 19,
      "A11riseforme": 1,
      "iceclementi": 11
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.DEADLINE_PREFIX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.PRIORITY_PREFIX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_TASK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageAddTaskSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd Task Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to add a \u003cb\u003eTask\u003c/b\u003e to the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class AddTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \" \u003ctask description\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e [ -d \u003cdeadline\u003e -p \u003cpriority\u003e ]\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Add a new task\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)+)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003coptional\u003e(?:\\\\s+-[dp](?:\\\\s+\\\\w\\\\S*)+)*)\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_OPTIONAL_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cdeadline\u003e(?:\\\\s+\" + DEADLINE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DateTime deadline;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to add the task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to add the task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The deadline of the task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddTaskCommand(String moduleCode, String categoryName, String description, DateTime deadline, int priority) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a task without a priority."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to add the task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to add the task"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The deadline of the task"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddTaskCommand(String moduleCode, String categoryName, String description, DateTime deadline) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Dummy value for missing priority"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(moduleCode, categoryName, description, deadline, -1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eAdd Task Command\u003c/b\u003e to add a \u003cb\u003eTask\u003c/b\u003e into the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Task"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category parentCategory \u003d DirectoryTraverser.getCategoryDirectory(moduleCode, categoryName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (priority \u003c 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                priority \u003d parentCategory.getCategoryPriority();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task toAdd \u003d new Task(parentCategory, description, deadline, priority);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            parentCategory.getTasks().add(toAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageAddTaskSuccess(description));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskManager.DuplicateTaskException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 4,
      "wangqinNick": 13,
      "iceclementi": 107
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/EditCategoryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.PRIORITY_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_CATEGORY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_CATEGORY_SUCCESS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eEdit Category Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to edit a \u003cb\u003eCategory\u003c/b\u003e in the \u003cb\u003eCategory List\u003c/b\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Category"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class EditCategoryCommand extends EditCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edc\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \" \u003ccategory name\u003e -m \u003cmodule code\u003e [ -c \u003cnew category name\u003e -p \u003cnew priority\u003e ]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"Edit name and priority of category\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String oldCategoryName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String newCategoryName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int newPriority;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to edit a category."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param oldCategoryName"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be edited"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the category to be edited"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newCategoryName"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new name of the category if any"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newPriority"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new priority of the category if any"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public EditCategoryCommand(String oldCategoryName, String moduleCode, String newCategoryName, int newPriority) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.oldCategoryName \u003d oldCategoryName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newCategoryName \u003d newCategoryName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newPriority \u003d newPriority;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to edit a category without a priority."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param oldCategoryName"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be edited"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the category to be edited"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newCategoryName"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new name of the category if any"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public EditCategoryCommand(String oldCategoryName, String moduleCode, String newCategoryName) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(oldCategoryName, moduleCode, newCategoryName, -1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Fills in all missing attributes needed to edit the category."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category to be edited"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void fillAllAttributes(Category toEdit) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCode \u003d toEdit.getParent().getModuleCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newCategoryName.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            newCategoryName \u003d toEdit.getCategoryName();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newPriority \u003c 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            newPriority \u003d toEdit.getCategoryPriority();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eEdit Category Command\u003c/b\u003e to edit a \u003cb\u003eCategory\u003c/b\u003e with the \u003ccode\u003ecategory name\u003c/code\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eCategory List\u003c/b\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Category"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CategoryManager"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category toEdit \u003d DirectoryTraverser.getCategoryDirectory(moduleCode, oldCategoryName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fillAllAttributes(toEdit);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            toEdit.getParent().getCategories().edit(toEdit, newCategoryName, newPriority);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_CATEGORY_SUCCESS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.DuplicateCategoryException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_CATEGORY);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "A11riseforme": 2,
      "iceclementi": 120
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/EditFileCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskFileManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.FILE_PREFIX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_TASK_FILE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eEdit File Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to edit a \u003cb\u003eFile\u003c/b\u003e in the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see TaskFile"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class EditFileCommand extends EditCommand {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edf\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \" \u003cfile name\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e -t \u003ctask description\u003e -f \u003cnew file name\u003e\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cfileInfo\u003e(?:\\\\s+\" + FILE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String oldFileName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String newFileName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to edit a file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param oldFileName"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file to be edited"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the file to be edited"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category containing the file to be edited"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task containing the file to be edited"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newFileName"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new name of the file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public EditFileCommand(String oldFileName, String moduleCode, String categoryName, String taskDescription,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "               String newFileName) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.oldFileName \u003d oldFileName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newFileName \u003d newFileName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eEdit File Command\u003c/b\u003e to edit a \u003cb\u003eFile\u003c/b\u003e with the \u003ccode\u003etask description\u003c/code\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see TaskFile"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see TaskFileManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFile toEdit \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    DirectoryTraverser.getFileDirectory(moduleCode, categoryName, taskDescription, oldFileName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            toEdit.getParent().getFiles().edit(toEdit, newFileName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_TASK_SUCCESS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskFileManager.TaskFileNotFoundException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskFileManager.DuplicateTaskFileException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_TASK_FILE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 106
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/EditModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eEdit Module Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to edit a \u003cb\u003eModule\u003c/b\u003e in the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Module"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class EditModuleCommand extends EditCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edm\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003cmodule code\u003e -m \u003cnew module code\u003e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Edit module code of module\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String oldModuleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String newModuleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to edit a module."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param oldModuleCode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to be edited"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newModuleCode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new module code for the module if any"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public EditModuleCommand(String oldModuleCode, String newModuleCode) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.oldModuleCode \u003d oldModuleCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newModuleCode \u003d newModuleCode.toUpperCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eEdit Module Command\u003c/b\u003e to edit a \u003cb\u003eModule\u003c/b\u003e with the \u003ccode\u003emodule code\u003c/code\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see ModuleManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module toEdit \u003d DirectoryTraverser.getModuleDirectory(oldModuleCode);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.edit(toEdit, newModuleCode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_MODULE_SUCCESS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }  catch (ModuleNotProvidedException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_PROVIDED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "iceclementi": 77
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/EditTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.DEADLINE_PREFIX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.PRIORITY_PREFIX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_TASK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eEdit Task Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to edit a \u003cb\u003eTask\u003c/b\u003e in the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class EditTaskCommand extends EditCommand {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \" \u003ctask description\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \" [ -t \u003cnew task description\u003e -d \u003cnew deadline\u003e -p \u003cnew priority\u003e ]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"Edit description, deadline and priority of task\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003coptional\u003e(?:\\\\s+-[dp](?:\\\\s+\\\\w\\\\S*)+)*)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_OPTIONAL_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cdeadline\u003e(?:\\\\s+\" + DEADLINE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String oldTaskDescription;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String newTaskDescription;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DateTime newDeadline;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int newPriority;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to edit a task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param oldTaskDescription"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be edited"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the task to be edited"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category containing the task to be edited"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newTaskDescription"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new description of the task if any"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newDeadline"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new deadline of the task if any"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newPriority"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new priority of the task if any"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public EditTaskCommand(String oldTaskDescription, String moduleCode, String categoryName,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           String newTaskDescription, DateTime newDeadline, int newPriority) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.oldTaskDescription \u003d oldTaskDescription;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newTaskDescription \u003d newTaskDescription;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newDeadline \u003d newDeadline;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newPriority \u003d newPriority;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to edit a task without a priority."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param oldTaskDescription"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be edited"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the task to be edited"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category containing the task to be edited"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newTaskDescription"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new description of the task if any"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newDeadline"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new deadline of the task if any"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public EditTaskCommand(String oldTaskDescription, String moduleCode, String categoryName,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           String newTaskDescription, DateTime newDeadline) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(oldTaskDescription, moduleCode, categoryName, newTaskDescription, newDeadline, -1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Fills in all missing attributes needed to edit the task."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be edited"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void fillAllAttributes(Task toEdit) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCode \u003d toEdit.getParent().getParent().getModuleCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryName \u003d toEdit.getParent().getCategoryName();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newTaskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            newTaskDescription \u003d toEdit.getDescription();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            newDeadline \u003d toEdit.getDeadline();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newPriority \u003c 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            newPriority \u003d toEdit.getPriority();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eEdit Task Command\u003c/b\u003e to edit a \u003cb\u003eTask\u003c/b\u003e with the \u003ccode\u003etask description\u003c/code\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Task"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see TaskManager"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task toEdit \u003d DirectoryTraverser.getTaskDirectory(moduleCode, categoryName, oldTaskDescription);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fillAllAttributes(toEdit);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            toEdit.getParent().getTasks().edit(toEdit, newTaskDescription, newDeadline, newPriority);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_TASK_SUCCESS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskManager.DuplicateTaskException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "wangqinNick": 12,
      "A11riseforme": 2,
      "iceclementi": 138
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/MarkAsDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class MarkAsDoneCommand extends EditCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \" -m \u003cmodule code\u003e -c \u003ccategory name\u003e\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \" -t \u003ctask description\u003e\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Mark task as done\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+[^-\\\\s]\\\\S*)+)?)\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+[^-\\\\s]\\\\S*)+)?)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+[^-\\\\s]\\\\S*)+)?)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"(?\u003cinvalid\u003e(?:\\\\s+-.*)*)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructs the command to mark a task as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param taskDescription The description of the task to be marked as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleCode The module code of the module containing the task to be marked as done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param categoryName The name of the category containing the task to be marked as done."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public MarkAsDoneCommand(String taskDescription, String moduleCode, String categoryName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task toMarkAsDone \u003d DirectoryTraverser.getTaskDirectory(moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            toMarkAsDone.setDone(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assert toMarkAsDone.isDone() : \"how can this be?\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_TASK_SUCCESS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 10,
      "A11riseforme": 49,
      "iceclementi": 10
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/FilterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.ALL_FLAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.EXACT_FLAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class FilterCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern MODULE_REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003coptional\u003e(?:\\\\s+-[ea])*)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern CATEGORY_REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003coptional\u003e(?:\\\\s+-[ea])*)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern TASK_REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003coptional\u003e(?:\\\\s+-[ea])*)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern FILE_REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003coptional\u003e(?:\\\\s+-[ea])*)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_OPTIONAL_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cexact\u003e(?:\\\\s+\" + EXACT_FLAG + \")?)\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003call\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected ArrayList\u003cDirectory\u003e createFilteredModuleList(String moduleKeyword, boolean isExact) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filterModules(moduleKeyword, isExact);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected ArrayList\u003cDirectory\u003e createFilteredCategoryList(String moduleKeyword, String categoryKeyword,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                              boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isAll) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterCategories(moduleKeyword, categoryKeyword, isExact);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill up missing keywords first"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (moduleKeyword.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                moduleKeyword \u003d DirectoryTraverser.getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (categoryKeyword.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                categoryKeyword \u003d DirectoryTraverser.getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterCategories(moduleKeyword, categoryKeyword, isExact);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterCategories(moduleKeyword, categoryKeyword, isExact);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected ArrayList\u003cDirectory\u003e createFilteredTaskList(String moduleKeyword, String categoryKeyword,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "          String taskKeyword, boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isAll) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterTasks(moduleKeyword, categoryKeyword, taskKeyword, isExact);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill up missing keywords first"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (moduleKeyword.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                moduleKeyword \u003d DirectoryTraverser.getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (categoryKeyword.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                categoryKeyword \u003d DirectoryTraverser.getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (taskKeyword.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                taskKeyword \u003d DirectoryTraverser.getBaseTask().getDescription();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterTasks(moduleKeyword, categoryKeyword, taskKeyword, isExact);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterTasks(moduleKeyword, categoryKeyword, taskKeyword, isExact);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected ArrayList\u003cDirectory\u003e createFilteredFileList(String moduleKeyword, String categoryKeyword,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String taskKeyword, String fileKeyword, boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isAll) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterFiles(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword, isExact);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill up missing keywords first"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (moduleKeyword.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                moduleKeyword \u003d DirectoryTraverser.getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (categoryKeyword.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                categoryKeyword \u003d DirectoryTraverser.getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (taskKeyword.isEmpty()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                taskKeyword \u003d DirectoryTraverser.getBaseTask().getDescription();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (fileKeyword.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                fileKeyword \u003d DirectoryTraverser.getBaseFile().getFileName();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterFiles(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword, isExact);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterFiles(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword, isExact);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cDirectory\u003e filterModules(String moduleKeyword, boolean isExact) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e filteredModuleList \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                isExact ? ModuleManager.filterExact(moduleKeyword) : ModuleManager.filter(moduleKeyword);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new ArrayList\u003c\u003e(filteredModuleList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cDirectory\u003e filterCategories(String moduleKeyword, String categoryKeyword, boolean isExact) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e filteredCategoryList \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                isExact ? ModuleManager.filterExact(moduleKeyword, categoryKeyword) :"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        ModuleManager.filter(moduleKeyword, categoryKeyword);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new ArrayList\u003c\u003e(filteredCategoryList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cDirectory\u003e filterTasks(String moduleKeyword, String categoryKeyword, String taskKeyword,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             boolean isExact) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                isExact ? ModuleManager.filterExact(moduleKeyword, categoryKeyword, taskKeyword) :"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        ModuleManager.filter(moduleKeyword, categoryKeyword, taskKeyword);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new ArrayList\u003c\u003e(filteredTaskList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cDirectory\u003e filterFiles(String moduleKeyword, String categoryKeyword, String taskKeyword,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "             String fileKeyword, boolean isExact) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredTaskList \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                isExact ? ModuleManager.filterExact(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword) :"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        ModuleManager.filter(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new ArrayList\u003c\u003e(filteredTaskList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 152
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/deletecommand/DeleteCategoryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_CATEGORIES_FOUND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteCategory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messagePromptDeleteCategoryIndices;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDelete Category Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to delete \u003cb\u003eCategory(s)\u003c/b\u003e from the \u003cb\u003eCategory List\u003c/b\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Category"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteCategoryCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delc\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003ccategory name\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Delete a category under module\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to delete a category."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to delete the category"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if categories are to be filtered exactly"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if filtering is to be done across all modules"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteCategoryCommand(String moduleCode, String categoryName, boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Executes the initial phase of the category deletion process depending on the number of categories filtered."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are no categories in the filtered list, then the deletion ends."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Otherwise, if there is one, there will be a prompt to request confirmation."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are multiple categories instead, there will be a prompt to choose which categories to delete."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredCategories"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of categories containing possibly the categories to be deleted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected CommandResult executeInitialDelete(ArrayList\u003cDirectory\u003e filteredCategories) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final int categoriesCount \u003d filteredCategories.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoriesCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_CATEGORIES_FOUND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (categoriesCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptConfirmation();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredCategories, DirectoryLevel.CATEGORY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category toDelete \u003d (Category) filteredCategories.get(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteCategory(toDelete));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptIndices();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredCategories, DirectoryLevel.CATEGORY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messagePromptDeleteCategoryIndices(filteredCategories));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eDelete Category Command\u003c/b\u003e to delete \u003cb\u003eCategory(s)\u003c/b\u003e with the \u003ccode\u003ecategory name\u003c/code\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eCategory List\u003c/b\u003e."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Category"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cDirectory\u003e filteredCategories \u003d createFilteredCategoryList(moduleCode, categoryName, isExact, isAll);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return executeInitialDelete(filteredCategories);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "iceclementi": 90
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/deletecommand/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.FilterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDelete Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A general \u003cb\u003eCommand\u003c/b\u003e to delete Directory/Directories."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class DeleteCommand extends FilterCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected abstract CommandResult executeInitialDelete(ArrayList\u003cDirectory\u003e filteredList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 6,
      "iceclementi": 12
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/deletecommand/DeleteFileCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_FILES_FOUND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteFile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messagePromptDeleteFileIndices;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDelete File Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to delete \u003cb\u003eFiles(s)\u003c/b\u003e from the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see TaskFile"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteFileCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delf\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003cfile name\u003e -m \u003cmodule code\u003e \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"-c \u003ccategory name\u003e -t \u003ctask description\u003e [ -e -a ]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to delete a file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to delete the task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to delete the task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if categories are to be filtered exactly"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if filtering is to be done across all modules and categories"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteFileCommand(String moduleCode, String categoryName, String taskDescription, String fileName,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "             boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Executes the initial phase of the file deletion process depending on the number of files filtered."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are no files in the filtered list, then the deletion ends."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Otherwise, if there is one, there will be a prompt to request confirmation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are multiple files instead, there will be a prompt to choose which files to delete."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredFiles"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of files containing possibly the files to be deleted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected CommandResult executeInitialDelete(ArrayList\u003cDirectory\u003e filteredFiles) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final int fileCount \u003d filteredFiles.size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (fileCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_FILES_FOUND);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (fileCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptConfirmation();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredFiles, DirectoryLevel.FILE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFile toDelete \u003d (TaskFile) filteredFiles.get(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteFile(toDelete));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptIndices();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredFiles, DirectoryLevel.FILE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messagePromptDeleteFileIndices(filteredFiles));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eDelete File Command\u003c/b\u003e to delete \u003cb\u003eFile\u003c(s)\u003c/b\u003e with the \u003ccode\u003efile name\u003c/code\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see TaskFile"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cDirectory\u003e filteredFiles \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createFilteredFileList(moduleCode, categoryName, taskDescription, fileName, isExact, isAll);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return executeInitialDelete(filteredFiles);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 102
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/deletecommand/DeleteModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_MODULES_FOUND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteModule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messagePromptDeleteModuleIndices;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDelete Module Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to delete \u003cb\u003eModule(s)\u003c/b\u003e from the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Module"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteModuleCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delm\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d \"delm \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Delete module\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to delete a module."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if modules are to be filtered exactly"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteModuleCommand(String moduleCode, boolean isExact) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Executes the initial phase of the module deletion process depending on the number of modules filtered."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are no modules in the filtered list, then the deletion ends."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Otherwise, if there is one, there will be a prompt to request confirmation."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are multiple modules instead, there will be a prompt to choose which modules to delete."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredModules"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of modules containing possibly the modules to be deleted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected CommandResult executeInitialDelete(ArrayList\u003cDirectory\u003e filteredModules) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final int modulesCount \u003d filteredModules.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (modulesCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_MODULES_FOUND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (modulesCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptConfirmation();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredModules, DirectoryLevel.MODULE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module toDelete \u003d (Module) filteredModules.get(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteModule(toDelete));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptIndices();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredModules, DirectoryLevel.MODULE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messagePromptDeleteModuleIndices(filteredModules));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eDelete Module Command\u003c/b\u003e to delete \u003cb\u003eModule(s)\u003c/b\u003e with the \u003ccode\u003emodule code\u003c/code\u003e from the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see ModuleManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cDirectory\u003e filteredModules \u003d createFilteredModuleList(moduleCode, isExact);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return executeInitialDelete(filteredModules);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 3,
      "wangqinNick": 2,
      "iceclementi": 82
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/deletecommand/DeleteTagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.filtercommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class DeleteTagCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delg\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \" \u003ctag info\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \" -t \u003ctask description\u003e\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Delete tags of task\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 18
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/deletecommand/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASKS_FOUND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messagePromptDeleteTaskIndices;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDelete Task Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to delete \u003cb\u003eTask(s)\u003c/b\u003e from the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteTaskCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003ccategory name\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Delete a task of module\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to delete a task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to delete the task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to delete the task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if categories are to be filtered exactly"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if filtering is to be done across all modules, categories and tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteTaskCommand(String moduleCode, String categoryName, String taskDescription,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                             boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Executes the initial phase of the task deletion process depending on the number of tasks filtered."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are no tasks in the filtered list, then the deletion ends."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Otherwise, if there is one, there will be a prompt to request confirmation."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are multiple tasks instead, there will be a prompt to choose which tasks to delete."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredTasks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of tasks containing possibly the tasks to be deleted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected CommandResult executeInitialDelete(ArrayList\u003cDirectory\u003e filteredTasks) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final int taskCount \u003d filteredTasks.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_TASKS_FOUND);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (taskCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptConfirmation();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredTasks, DirectoryLevel.TASK);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task toDelete \u003d (Task) filteredTasks.get(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteTask(toDelete));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptIndices();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredTasks, DirectoryLevel.TASK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messagePromptDeleteTaskIndices(filteredTasks));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eDelete Task Command\u003c/b\u003e to delete \u003cb\u003eTask\u003c(s)\u003c/b\u003e with the \u003ccode\u003etask description\u003c/code\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cDirectory\u003e filteredTasks \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createFilteredTaskList(moduleCode, categoryName, taskDescription, isExact, isAll);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return executeInitialDelete(filteredTasks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "wangqinNick": 13,
      "iceclementi": 83
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListAllTasksDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.util.ListCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASK_IN_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageTaskSuccessfullyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * sort all tasks of all modules according to deadline of task and print it out to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ListAllTasksDeadlineCommand extends ListCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String deadlines;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lstd\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"List all tasks in ascending order of deadline\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //get the large task list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d ModuleManager.sortAllTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        if (filteredTaskList.size() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new CommandResult(MESSAGE_NO_TASK_IN_LIST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assert filteredTaskList.size() !\u003d EMPTY : \"make sure there are some tasks in the list\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        deadlines \u003d ListCreator.createTaskListTable(new ArrayList\u003c\u003e(filteredTaskList), true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(messageTaskSuccessfullyList(ModuleManager.countAllTasks()) + deadlines);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 18,
      "wangqinNick": 13,
      "A11riseforme": 3,
      "iceclementi": 5
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListCategoryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListCategoryCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lsc\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"List all categories of module\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleKeyWord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryKeyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to list categories."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyWord"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if categories are to be filtered exactly"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks whether to show \u003cb\u003eall\u003c/b\u003e categories across modules"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ListCategoryCommand(String moduleKeyWord, String categoryKeyword, boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleKeyWord \u003d moduleKeyWord;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryKeyword \u003d categoryKeyword;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eList Category Command\u003c/b\u003e to show a filtered list of modules."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Category"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cDirectory\u003e filteredCategoryList \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createFilteredCategoryList(moduleKeyWord, categoryKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_LIST, DirectoryLevel.CATEGORY, filteredCategoryList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "iceclementi": 53
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.FilterCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class ListCommand extends FilterCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListFileCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListFileCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lsf\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d \"lsf [ \u003cfile keyword\u003e -f \u003ctask keyword\u003e -c \u003ccategory keyword\u003e \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"-m \u003cmodule keyword\u003e -e -a ]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleKeyWord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryKeyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskKeyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String fileKeyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to list tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyWord"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the files"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if tasks are to be filtered exactly"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks whether to show \u003cb\u003eall\u003c/b\u003e tasks across modules and categories"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ListFileCommand(String moduleKeyWord, String categoryKeyword, String taskKeyword, String fileKeyword,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "               boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleKeyWord \u003d moduleKeyWord;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryKeyword \u003d categoryKeyword;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskKeyword \u003d taskKeyword;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileKeyword \u003d fileKeyword;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eList Task Command\u003c/b\u003e to show a filtered list of modules."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cDirectory\u003e filteredFileList \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createFilteredFileList(moduleKeyWord, categoryKeyword, taskKeyword, fileKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_LIST, DirectoryLevel.FILE, filteredFileList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 63
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ListModuleCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lsm\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"List all modules\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleKeyWord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to list modules."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyWord"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if modules are to be filtered exactly"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ListModuleCommand(String moduleKeyWord, boolean isExact) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleKeyWord \u003d moduleKeyWord;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eList Module Command\u003c/b\u003e to show a filtered list of modules."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cDirectory\u003e filteredModuleList \u003d createFilteredModuleList(moduleKeyWord, isExact);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_LIST, DirectoryLevel.MODULE, filteredModuleList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 6,
      "wangqinNick": 4,
      "iceclementi": 36
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListModuleTasksDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.util.ExceptionMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.util.ListCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASK_IN_LIST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageTaskSuccessfullyList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * sort all tasks of one module according to deadline of task and print it out to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ListModuleTasksDeadlineCommand extends ListCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lsmtd\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"List tasks of module in ascending order of deadline\" + System.lineSeparator()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String deadlines;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ListModuleTasksDeadlineCommand(String moduleCode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            Module module \u003d DirectoryTraverser.getModuleDirectory(moduleCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            ArrayList\u003cTask\u003e filteredTaskList \u003d module.sortAllTasks();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            if (filteredTaskList.size() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return new CommandResult(MESSAGE_NO_TASK_IN_LIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            assert filteredTaskList.size() !\u003d EMPTY : \"make sure there are some tasks in the list\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            deadlines \u003d ListCreator.createTaskListTable(new ArrayList\u003c\u003e(filteredTaskList), true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(messageTaskSuccessfullyList(ModuleManager.countAllTasks()) + deadlines);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(ExceptionMessage.MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 25,
      "wangqinNick": 22,
      "A11riseforme": 2,
      "iceclementi": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListTaskCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lst\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"list task\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleKeyWord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryKeyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskKeyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to list tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyWord"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if tasks are to be filtered exactly"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks whether to show \u003cb\u003eall\u003c/b\u003e tasks across modules, categories and tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ListTaskCommand(String moduleKeyWord, String categoryKeyword, String taskKeyword,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "               boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleKeyWord \u003d moduleKeyWord;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryKeyword \u003d categoryKeyword;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskKeyword \u003d taskKeyword;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eList Task Command\u003c/b\u003e to show a filtered list of modules."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cDirectory\u003e filteredTaskList \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createFilteredTaskList(moduleKeyWord, categoryKeyword, taskKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_LIST, DirectoryLevel.TASK, filteredTaskList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "iceclementi": 57
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/promptcommand/ConfirmationStatus.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.promptcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public enum ConfirmationStatus {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    CONFIRM,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    ABORT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    WAIT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/promptcommand/DeleteConfirmationPrompt.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.promptcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.nio.file.FileSystemException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DELETE_FILE_ERROR;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_SECURITY_EXCEPTION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_SYSTEM_EXCEPTION;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_ABORTED;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_CATEGORY_SUCCESS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_FILE_SUCCESS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_ILLEGAL_DELETE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_PROMPT_FORMAT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteConfirmationPrompt extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ConfirmationStatus confirmationStatus;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DirectoryLevel directoryLevel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to process the delete confirmation prompt."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param confirmationStatus"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The confirmation status of the deletion"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteConfirmationPrompt(ConfirmationStatus confirmationStatus) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.confirmationStatus \u003d confirmationStatus;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.directoryLevel \u003d Executor.getDirectoryLevel();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a single module."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module to be deleted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteSingleModule(Module toDelete) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.delete(toDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a single category."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category to be deleted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteSingleCategory(Category toDelete) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Module parentModule \u003d toDelete.getParent();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        parentModule.getCategories().delete(toDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a single task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be deleted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteSingleTask(Task toDelete) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Category parentCategory \u003d toDelete.getParent();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        parentCategory.getTasks().delete(toDelete);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a single file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file to be deleted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteSingleFile(TaskFile toDelete) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        File fileToDelete \u003d new File(toDelete.getFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!fileToDelete.exists()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Path filePathToDelete \u003d fileToDelete.toPath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Files.walk(filePathToDelete)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .sorted(Comparator.reverseOrder())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(Path::toFile)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .forEach(File::delete);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assert !Files.exists(filePathToDelete) : \"Directory still exists\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Task parentTask \u003d toDelete.getParent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        parentTask.getFiles().delete(toDelete);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes multiple modules."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of modules"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of indices of the modules to be deleted"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteMultipleModules(ArrayList\u003cModule\u003e modules, ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module toDelete \u003d modules.get(index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleModule(toDelete);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes multiple categories."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categories"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of categories"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of indices of the categories to be deleted"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteMultipleCategories(ArrayList\u003cCategory\u003e categories, ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category toDelete \u003d categories.get(index);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleCategory(toDelete);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes multiple tasks."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of tasks"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of indices of the tasks to be deleted"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteMultipleTasks(ArrayList\u003cTask\u003e tasks, ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task toDelete \u003d tasks.get(index);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleTask(toDelete);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes multiple files."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param files"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of files"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of indices of the files to be deleted"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteMultipleFiles(ArrayList\u003cTaskFile\u003e files, ArrayList\u003cInteger\u003e toDeleteIndices)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFile toDelete \u003d files.get(index);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleFile(toDelete);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes single deletion for the various levels of the Directory."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Directory to be deleted"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Command result of the execution"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private CommandResult executeSingleDelete(Directory toDelete) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (directoryLevel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE: {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleModule(((Module) toDelete));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_MODULE_SUCCESS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY: {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleCategory(((Category) toDelete));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_CATEGORY_SUCCESS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK: {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleTask(((Task) toDelete));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE: {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                deleteSingleFile(((TaskFile) toDelete));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_DELETE_FILE_SUCCESS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (FileSystemException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_FILE_SYSTEM_EXCEPTION);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_DELETE_FILE_ERROR);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (SecurityException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_FILE_SECURITY_EXCEPTION);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(\"Error in single deletion.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes multiple deletion for the various levels of the Directory."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredList"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of Directories to be deleted"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Command result of the execution"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private CommandResult executeMultipleDelete(ArrayList\u003cDirectory\u003e filteredList) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cInteger\u003e toDeleteIndices \u003d Executor.getIndices();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (directoryLevel) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE: {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of modules"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cModule\u003e filteredModules \u003d filteredList.stream()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Module.class::cast)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteMultipleModules(filteredModules, toDeleteIndices);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_MODULE_SUCCESS);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY: {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of categories"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cCategory\u003e filteredCategories \u003d filteredList.stream()"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Category.class::cast)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteMultipleCategories(filteredCategories, toDeleteIndices);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_CATEGORY_SUCCESS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK: {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of tasks"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTask\u003e filteredTasks \u003d filteredList.stream()"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Task.class::cast)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteMultipleTasks(filteredTasks, toDeleteIndices);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE: {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of files"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTaskFile\u003e filteredFiles \u003d filteredList.stream()"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(TaskFile.class::cast)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                deleteMultipleFiles(filteredFiles, toDeleteIndices);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_DELETE_FILE_SUCCESS);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (FileSystemException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_FILE_SYSTEM_EXCEPTION);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_DELETE_FILE_ERROR);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (SecurityException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_FILE_SECURITY_EXCEPTION);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(\"Error in multiple deletion.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if any of the directories to be deleted is the current directory or its parent."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredList"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of directories to be deleted"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if the current directory or its parent is being deleted, or \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there is illegal access to a directory"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isCurrentDirectoryInList(ArrayList\u003cDirectory\u003e filteredList)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Current directory is of a higher level than the directories to be deleted"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (DirectoryTraverser.getCurrentDirectoryLevel().ordinal() \u003e directoryLevel.ordinal()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Checks if current directory or parent directory is to be deleted"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (directoryLevel) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String baseModuleCode \u003d DirectoryTraverser.getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (Directory module : filteredList) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (((Module) module).isSameModule(baseModuleCode)) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String baseCategoryName \u003d DirectoryTraverser.getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (Directory category : filteredList) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (((Category) category).isSameCategory(baseCategoryName)) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String baseTaskDescription \u003d DirectoryTraverser.getBaseTask().getDescription();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (Directory task : filteredList) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (((Task) task).isSameTask(baseTaskDescription)) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE   :"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String baseFileName \u003d DirectoryTraverser.getBaseFile().getFileName();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (Directory task : filteredList) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (((TaskFile) task).isSameFile(baseFileName)) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the final phase of the \u003cb\u003eDelete Command\u003c/b\u003e to delete Directories from their lists."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Command result of the execution"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (confirmationStatus) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CONFIRM:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.terminatePrompt();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cDirectory\u003e filteredList \u003d Executor.getFilteredList();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (isCurrentDirectoryInList(filteredList)) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return new CommandResult(MESSAGE_ILLEGAL_DELETE);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(\"Error in deletion.\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (filteredList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return executeSingleDelete(filteredList.get(0));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return executeMultipleDelete(filteredList);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ABORT:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.terminatePrompt();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_ABORTED);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_PROMPT_FORMAT);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 370
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/promptcommand/ListNumberPrompt.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.promptcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_LIST_NUMBER_NOT_FOUND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteCategory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteModule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListNumberPrompt extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern INDICES_FORMAT \u003d Pattern.compile(\"(?\u003cindices\u003e(?:\\\\s*\\\\d+)+\\\\s*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cDirectory\u003e filteredList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cInteger\u003e indices;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DirectoryLevel directoryLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to process the indices received as input from the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param indices"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The indices received as input from the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ListNumberPrompt(ArrayList\u003cInteger\u003e indices) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.filteredList \u003d Executor.getFilteredList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.directoryLevel \u003d Executor.getDirectoryLevel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the prompt to confirm the deletion of directories."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Command result of the execution"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private CommandResult executePromptConfirmation() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (directoryLevel) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE: {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of modules"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cModule\u003e filteredModules \u003d filteredList.stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Module.class::cast)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteModule(filteredModules, indices));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY: {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of categories"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cCategory\u003e filteredCategories \u003d filteredList.stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Category.class::cast)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteCategory(filteredCategories, indices));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK: {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of tasks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTask\u003e filteredTasks \u003d filteredList.stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Task.class::cast)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteTask(filteredTasks, indices));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE: {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of tasks"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTaskFile\u003e fileteredFiles \u003d filteredList.stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(TaskFile.class::cast)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteFile(fileteredFiles, indices));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(\"Error in displaying list.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the intermediate step in the deletion of Directories."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Command result of the execution"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.preparePromptConfirmation();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.setIndices(indices);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return executePromptConfirmation();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.terminatePrompt();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_LIST_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 107
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/promptcommand/PromptType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.promptcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public enum PromptType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    CONFIRMATION,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    INDICES,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    NONE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/common/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String YES_ICON \u003d \"[Y]\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String NO_ICON \u003d \"[N]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/CategoryManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class CategoryManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cCategory\u003e categoryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String NO_KEYWORD \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CategoryManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Category Manager with initialised categories."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parentModule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent module of the category in the directory"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CategoryManager(Module parentModule) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryList \u003d initialiseCategories(parentModule);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Initialises the Category List with common default categories."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parentModule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent module of the category in the directory"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Category List with the initialised categories"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cCategory\u003e initialiseCategories(Module parentModule) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e initialTaskCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialTaskCategories.add(new Category(parentModule, \"Lecture\", 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialTaskCategories.add(new Category(parentModule, \"Tutorial\", 2));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialTaskCategories.add(new Category(parentModule, \"Assignment\", 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialTaskCategories.add(new Category(parentModule, \"Lab\", 3));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return initialTaskCategories;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the entire Category List."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Category List"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the entire Category List to a new list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new Category List to be set"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setCategoryList(ArrayList\u003cCategory\u003e categoryList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryList \u003d categoryList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Finds a task with the specified category name in the Category List."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be found"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found category with the specified name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryNotFoundException"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category is not found in the Category List"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Category getCategory(String categoryName) throws CategoryNotFoundException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categoryList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (category.getCategoryName().equals(categoryName)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return category;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new CategoryNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Searches the Category List for the category with the specified category name, then searches the category\u0027s"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Task List for the task with the specified description."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be found"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be found"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found task with the specified description"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryNotFoundException"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task is not found in the Task List"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Task getTask(String categoryName, String taskDescription)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CategoryNotFoundException, TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getCategory(categoryName).getTasks().getTask(taskDescription);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks for duplicates of the same category name in the Category List."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category name to check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there exists a duplicate, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean contains(String categoryName) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categoryList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (category.isSameCategory(categoryName)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Add a category to the Category List."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category to be added"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void add(Category toAdd) throws DuplicateCategoryException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (contains(toAdd.getCategoryName())) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateCategoryException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            categoryList.add(toAdd);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes the specified category from the Category List."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category to be deleted"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean delete(Category toDelete) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryList.remove(toDelete);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a \u003cb\u003eCategory\u003c/b\u003e with the specified \u003ccode\u003ecategory name\u003c/code\u003e from the \u003cb\u003eCategory List\u003c/b\u003e."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category name of the \u003cb\u003eCategory\u003c/b\u003e to be deleted"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryNotFoundException"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the specified category name is not found in the \u003cb\u003eCategory List\u003c/b\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Category"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Category delete(String categoryName) throws CategoryNotFoundException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Category toDelete \u003d getCategory(categoryName);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryList.remove(toDelete);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return toDelete;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits a category in the Category List."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category to be edited"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newCategoryName"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new category name of the category"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newPriority"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * The new priority of the category"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicateCategoryException"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are duplicate categories with the same category name as the new category name in the Category List"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void edit(Category toEdit, String newCategoryName, int newPriority)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws DuplicateCategoryException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!toEdit.isSameCategory(newCategoryName) \u0026\u0026 contains(newCategoryName)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateCategoryException();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setCategoryName(newCategoryName);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setCategoryPriority(newPriority);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Retrieves the Task List of the category with the specified name."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to retrieve the Task List from"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Task List of the found category"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryNotFoundException"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the specified name is not found in the Category List"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskManager retrieveList(String categoryName) throws CategoryNotFoundException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getCategory(categoryName).getTasks();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for categories in the Category List with name that contains the specified keyword."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered categories"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cCategory\u003e filter(String categoryKeyword) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e filteredCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categoryList) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (category.getCategoryName().toLowerCase().contains(categoryKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredCategoryList.add(category);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredCategoryList;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for categories in the Category List that contains the specified category keyword, then for tasks in"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * the Task List of the filtered categories with description that contains the specified task keyword."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * The keyword to filter the tasks"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered tasks"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTask\u003e filter(String categoryKeyword, String taskKeyword) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : filter(categoryKeyword)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTaskList.addAll(category.getTasks().filter(taskKeyword));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for categories in the Category List with name that matches \u003cb\u003eexactly\u003c/b\u003e the specified keyword."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered categories"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cCategory\u003e filterExact(String categoryKeyword) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Returns all categories in the Category List if no keyword is provided."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoryKeyword.equals(NO_KEYWORD)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return this.getCategoryList();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e filteredCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categoryList) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (category.getCategoryName().toLowerCase().equals(categoryKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredCategoryList.add(category);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredCategoryList;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for categories in the Category List  with name that that matches \u003cb\u003eexactly\u003c/b\u003e the specified category"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * keyword, then for tasks in the Task List of the filtered categories with description that that matches"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eexactly\u003c/b\u003e the specified task keyword."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered tasks"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTask\u003e filterExact(String categoryKeyword, String taskKeyword) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : filterExact(categoryKeyword)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTaskList.addAll(category.getTasks().filterExact(taskKeyword));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class CategoryNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class DuplicateCategoryException extends DuplicateDataException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 284
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/DataManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * the manager that manages all tasks of all modules deals with operations in task-level."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DataManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private ArrayList\u003cTask\u003e allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor for DataManager class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param moduleManager the ModuleManager object for the module."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public DataManager(ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        allTasks \u003d ModuleManager.getAllTasks();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setAllTasks(ArrayList\u003cTask\u003e allTasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks \u003d allTasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * sort all tasks of all modules in ascending order of deadlines."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void sortAllTasks() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Collections.sort(allTasks, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String t1Deadline \u003d t1.getDeadline() \u003d\u003d null ? \"\" : t1.getDeadline().toShow();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String t2Deadline \u003d t2.getDeadline() \u003d\u003d null ? \"\" : t2.getDeadline().toShow();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return t1Deadline.compareToIgnoreCase(t2Deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public int countAllTasks() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return allTasks.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * return an orders lists of all tasks of all modules."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of String which represents the ordered list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ArrayList\u003cString\u003e checkDeadline() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cString\u003e deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        sortAllTasks();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (Task task: allTasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            deadlines.add(String.format(\"%-30s\", task.getDescription()) + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    + String.format(\"%-8s\", task.getParent().getParent().getModuleCode()) + \"   deadline: \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    + task.getDeadline());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return deadlines;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void addTask(Task toAdd) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks.add(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void removeTask(Task toRemove) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.allTasks.remove(toRemove);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 36,
      "wangqinNick": 23,
      "A11riseforme": 9,
      "iceclementi": 5
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ModuleLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.util.DummyModule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.UnknownHostException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * This class is to load all the modules that NUS offer, scraping from the nusmods,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * when users are trying to enrol into modules, the module code must"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * appear in the list of the list which load method return, or else fail."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class ModuleLoader {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * load data from a jason file that contains all information about all NUS existing modules."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param dataFileName name of the jason file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return a HashMapof String to String, which is a map that map all modules with its information"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @throws FileNotFoundException when cannot find the jason file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static HashMap\u003cString, String\u003e load(String dataFileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        List\u003cDummyModule\u003e moduleList \u003d JSON.parseArray(jsonStr, DummyModule.class);// extractModules(jsonStr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        if (moduleList \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d convertToHashMap(moduleList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static HashMap\u003cString, String\u003e convertToHashMap(List\u003cDummyModule\u003e moduleList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (DummyModule module : moduleList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            modulesMap.put(module.getModuleCode(), module.getTitle());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String loadJsonStringFromFile(String dataFileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String encoding \u003d \"utf8\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        File file \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        Long fileLength \u003d file.length();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        byte[] fileContent \u003d new byte[fileLength.intValue()];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            FileInputStream in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            in.read(fileContent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            //System.out.println(\"Retrieving the module list from nusmods...\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return openFile(\"https://api.nusmods.com/v2/2019-2020/moduleList.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new String(fileContent, encoding);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            System.err.println(\"The OS does not support \" + encoding);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String openFile(String filePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        int httpResult; // the status from the server response"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            URL url \u003d new URL(filePath); // create URL"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            URLConnection urlConn \u003d url.openConnection(); // try to connect and get the status code"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                urlConn.connect();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            } catch (UnknownHostException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            HttpURLConnection httpConn \u003d (HttpURLConnection) urlConn;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            httpResult \u003d httpConn.getResponseCode();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            if (httpResult !\u003d HttpURLConnection.HTTP_OK) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                System.out.print(\"cannot connect!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                int fileSize \u003d urlConn.getContentLength(); // get the length of the data"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                InputStreamReader isReader \u003d new InputStreamReader(urlConn.getInputStream(), \"UTF-8\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(isReader);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String line; // to save the content of every line"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                line \u003d reader.readLine(); // read the first line"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                while (line !\u003d null) { // if line is empty, means finish reading"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    buffer.append(line); // append to the buffer"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    buffer.append(\" \"); // add new line"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    line \u003d reader.readLine(); // read the next line"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                //System.out.print(buffer.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                content \u003d buffer.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 5,
      "wangqinNick": 1,
      "A11riseforme": 107,
      "iceclementi": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ModuleManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A manager that manages all modules."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * Contains a Module List and performs operations related to modules"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleManager implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static Root root;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static ArrayList\u003cModule\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // private static ArrayList\u003cTask\u003e allTasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static HashMap\u003cString, String\u003e modulesMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String NO_KEYWORD \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ModuleManager() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ModuleManager(Root root, HashMap\u003cString, String\u003e modulesMap) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.modulesMap \u003d modulesMap;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.root \u003d root;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Root getRoot() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return root;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static HashMap\u003cString, String\u003e getModulesMap() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the entire Module List to a new list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new Module List to be set"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void setModuleList(ArrayList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * method to return all the modules."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return all modules"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Finds a module with the specified module code in the Module List."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found module with the specified module code"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module is not found in the Module List"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Module getModule(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (module.getModuleCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Searches the Module List for the module with the specified module code, then searches the module\u0027s"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Category List for the category with the specified name."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be found"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found category with the specified name, with its parent module with the specified module code"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module is not found"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category is not found"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Category getCategory(String moduleCode, String categoryName)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleNotFoundException, CategoryManager.CategoryNotFoundException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getModule(moduleCode).getCategories().getCategory(categoryName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Searches the Module List for the module with the specified module code, then searches the module\u0027s"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Category List for the category with the specified name, then searches the category\u0027s Task List for"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * the task with the specified description."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be found"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be found"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found task with the specified description, with its parent category and module with the specified"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *      module code and category name respectively"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module is not found"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category is not found"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task is not found"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Task getTask(String moduleCode, String categoryName, String taskDescription)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleNotFoundException, CategoryManager.CategoryNotFoundException,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getCategory(moduleCode, categoryName).getTasks().getTask(taskDescription);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Searches the Module List for the module with the specified module code, then searches the module\u0027s"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Category List for the category with the specified name, then searches the category\u0027s Task List for"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * the task with the specified description, then searches the task\u0027s File List for the file with the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * specified name."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be found"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be found"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found task with the specified description, with its parent category and module with the specified"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *      module code and category name respectively"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module is not found"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category is not found"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task is not found"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskFileManager.TaskFileNotFoundException"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the file is not found"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static TaskFile getFile(String moduleCode, String categoryName, String taskDescription, String fileName)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleNotFoundException, CategoryManager.CategoryNotFoundException,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskManager.TaskNotFoundException, TaskFileManager.TaskFileNotFoundException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getTask(moduleCode, categoryName, taskDescription).getFiles().getFile(fileName);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks for duplicates of the same module code in the Module List."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code to check"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there exists a duplicate, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static boolean contains(String moduleCode) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (module.getModuleCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Add a module to the Module List."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module to be added"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void add(Module toAdd) throws DuplicateModuleException, ModuleNotProvidedException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //check duplicate"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (contains(toAdd.getModuleCode())) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } else if (modulesMap.size() \u003e 0 \u0026\u0026 !modulesMap.containsKey(toAdd.getModuleCode())) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            throw new ModuleNotProvidedException();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleTitle \u003d modulesMap.get(toAdd.getModuleCode());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            toAdd.setTitle(moduleTitle);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            moduleList.add(toAdd);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * return an orders lists of all tasks of all modules."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of String which represents the ordered list"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cString\u003e checkDeadline() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ArrayList\u003cString\u003e deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d sortAllTasks();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        for (Task task: allTasks) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            deadlines.add(String.format(\"%-30s\", task.getDescription()) + \" \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    + String.format(\"%-8s\", task.getParent().getParent().getModuleCode())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    + String.format(\"%-10s\", task.getParent().getCategoryName())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                    + \"   deadline: \" + task.getDeadline().toShow());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return deadlines;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * sort all tasks of all modules in ascending order of deadlines."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @return list of sorted tasks"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static ArrayList\u003cTask\u003e sortAllTasks() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d getAllTasks();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Collections.sort(allTasks, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                String t1Deadline \u003d t1.getDeadline() \u003d\u003d null ? \"\" : t1.getDeadline().getDateTimeSortFormat();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                String t2Deadline \u003d t2.getDeadline() \u003d\u003d null ? \"\" : t2.getDeadline().getDateTimeSortFormat();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return t1Deadline.compareToIgnoreCase(t2Deadline);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        });"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Clears all tasks in list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        moduleList.clear();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Delete a module to the Module List."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module to be deleted"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void delete(Module toDelete) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleList.remove(toDelete);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * Deletes a \u003cb\u003eModule\u003c/b\u003e with \u003ccode\u003emodule code\u003c/code\u003e in the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the \u003cb\u003eModule\u003c/b\u003e to be deleted"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     *  If the module with the specified module code is not found in the \u003cb\u003eModule List\u003c/b\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Module delete(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (getModuleWithCode(moduleCode) !\u003d null) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Module toDelete \u003d getModuleWithCode(moduleCode);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            getAllTasks().removeIf(task -\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    task.getParent().getParent().getModuleCode().toUpperCase().equals(moduleCode));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            moduleList.removeIf(module -\u003e module.getModuleCode().equalsIgnoreCase(moduleCode));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return toDelete;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits a module in the Module List."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module to be edited"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newModuleCode"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new module code of the module"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotProvidedException"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there is no module with the new module code offered by NUS"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicateModuleException"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are duplicate modules with the same module code as the new module code in the Module List"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void edit(Module toEdit, String newModuleCode)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleNotProvidedException, DuplicateModuleException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!modulesMap.containsKey(newModuleCode)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ModuleNotProvidedException();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!toEdit.isSameModule(newModuleCode) \u0026\u0026 contains(newModuleCode)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newTitle \u003d modulesMap.get(newModuleCode);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setModuleCode(newModuleCode);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setTitle(newTitle);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Retrieve a specific Data (Category / Task / File) List. Only 1 list is retrieved */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Retrieves the Category List of the module with the specified module code."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to retrieve the Category List from"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Category List of the found module"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the specified module code is not found in the Module List"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static CategoryManager retrieveList(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getModule(moduleCode).getCategories();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Retrieves the Task List of the category with the specified name and has its parent module with the"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * specified module code."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the category to retrieve the Task List from"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to retrieve the Task List from"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Task List of the found category"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the specified module code is not found in the Module List"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the specified name is not found in the Category List"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static TaskManager retrieveList(String moduleCode, String categoryName)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleNotFoundException, CategoryManager.CategoryNotFoundException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return retrieveList(moduleCode).retrieveList(categoryName);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Retrieves the File List of the task with the specified description, and has its parent category with the"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * specified name and parent module with the specified module code."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the category to retrieve the File List from"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to retrieve the File List from"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to retrieve the File List from"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Task List of the found category"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the specified module code is not found in the Module List"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the specified name is not found in the Category List"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task with the specified description is not found in the Task List"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static TaskFileManager retrieveList(String moduleCode, String categoryName, String taskDescription)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleNotFoundException, CategoryManager.CategoryNotFoundException,"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return retrieveList(moduleCode, categoryName).retrieveList(taskDescription);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Filters for data (module / task / category) that *contains* given keywords (i.e. not exact match)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  in a case-insensitive manner. There may be multiple data that matches. */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that contains the specified keyword."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered modules"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cModule\u003e filter(String moduleKeyword) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e filteredModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (module.getModuleCode().toLowerCase().contains(moduleKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredModuleList.add(module);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredModuleList;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that contains the specified module keyword,"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * then for categories in the Category List of the filtered modules with name that contains the specified"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * category keyword."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered categories"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cCategory\u003e filter(String moduleKeyword, String categoryKeyword) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e filteredCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : filter(moduleKeyword)) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredCategoryList.addAll(module.getCategories().filter(categoryKeyword));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredCategoryList;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that contains the specified module keyword,"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * then for categories in the Category List of the filtered modules with name that contains the specified"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * category keyword, then for tasks in the Task List of the filtered categories with description that"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * contains the specified task keyword."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * The keyword to filter the tasks"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered tasks"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cTask\u003e filter(String moduleKeyword, String categoryKeyword, String taskKeyword) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : filter(moduleKeyword, categoryKeyword)) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTaskList.addAll(category.getTasks().filter(taskKeyword));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that contains the specified module keyword,"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * then for categories in the Category List of the filtered modules with name that contains the specified"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * category keyword, then for tasks in the Task List of the filtered categories with description that"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * contains the specified task keyword, then for files in the File List of the filtered tasks with name"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * that contains the specified file keyword."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the files"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered files"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cTaskFile\u003e filter(String moduleKeyword, String categoryKeyword, String taskKeyword,"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String fileKeyword) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : filter(moduleKeyword, categoryKeyword, taskKeyword)) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredFileList.addAll(task.getFiles().filter(fileKeyword));"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredFileList;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Filters for data (module / task / category) that *matches exactly* the given keywords in a case-insensitive"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  manner. Empty keywords, however, will instead collect all instances of the data."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  There may be multiple data that matches. */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that matches \u003cb\u003eexactly\u003c/b\u003e the specified keyword."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered modules"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cModule\u003e filterExact(String moduleKeyword) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Returns all modules in the Module List if no keyword is provided."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleKeyword.equals(NO_KEYWORD)) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return moduleList;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e filteredModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (module.getModuleCode().toLowerCase().equals(moduleKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredModuleList.add(module);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredModuleList;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that matches \u003cb\u003eexactly\u003c/b\u003e the specified module"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * keyword, then for categories in the Category List of the filtered modules with name that that matches"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eexactly\u003c/b\u003e the specified category keyword."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered categories"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cCategory\u003e filterExact(String moduleKeyword, String categoryKeyword) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e filteredCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : filterExact(moduleKeyword)) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredCategoryList.addAll(module.getCategories().filterExact(categoryKeyword));"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredCategoryList;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that matches \u003cb\u003eexactly\u003c/b\u003e the specified module"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * keyword, then for categories in the Category List of the filtered modules with name that that matches"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eexactly\u003c/b\u003e the specified category keyword, then for tasks in the Task List of the filtered categories"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * with description that that matches \u003cb\u003eexactly\u003c/b\u003e the specified task keyword"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered tasks"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cTask\u003e filterExact(String moduleKeyword, String categoryKeyword, String taskKeyword) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : filterExact(moduleKeyword, categoryKeyword)) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTaskList.addAll(category.getTasks().filterExact(taskKeyword));"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that matches \u003cb\u003eexactly\u003c/b\u003e the specified module"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * keyword, then for categories in the Category List of the filtered modules with name that that matches"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eexactly\u003c/b\u003e the specified category keyword, then for tasks in the Task List of the filtered categories"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * with description that that matches \u003cb\u003eexactly\u003c/b\u003e the specified task keyword, then for files in the File List"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * that matches \u003cb\u003eexactly\u003c/b\u003e the specified file keyword."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the files"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered files"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cTaskFile\u003e filterExact(String moduleKeyword, String categoryKeyword, String taskKeyword,"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String fileKeyword) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : filterExact(moduleKeyword, categoryKeyword, taskKeyword)) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredFileList.addAll(task.getFiles().filterExact(fileKeyword));"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredFileList;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns all the tasks across the entire Module List."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  An Array List of all the tasks in the entire Module List"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filter(NO_KEYWORD, NO_KEYWORD, NO_KEYWORD);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleList.iterator();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public void addTaskToModule(TaskManager taskManager, Task taskToAdd) throws TaskManager.DuplicateTaskException {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    taskManager.add(taskToAdd);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    allTasks.add(taskToAdd);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public void removeTask(TaskManager taskManager, Task taskToDelete) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    taskManager.delete(taskToDelete);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    allTasks.remove(taskToDelete);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * get a module object according to moduleCode."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param moduleCode the moduleCode of the module"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @return a module object that has the moduleCode"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static Module getModuleWithCode(String moduleCode) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module: moduleList) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                assert module.getModuleCode().equals(moduleCode);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * return total number of tasks in all modules."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static int countAllTasks() {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filter(NO_KEYWORD, NO_KEYWORD, NO_KEYWORD).size();"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class ModuleNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class DuplicateModuleException extends DuplicateDataException {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 22,
      "wangqinNick": 61,
      "A11riseforme": 45,
      "iceclementi": 473
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ScreenShot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ScreenShot {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleListString;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ScreenShot(String moduleListInJsonStr) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.moduleListString \u003d moduleListInJsonStr;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getModuleListString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleListString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 10,
      "A11riseforme": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ScreenShotManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.Decoder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.Encoder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.CorruptedFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * a screen shot manager that manages all scree shots and deals with operations such as save screen shots and undo."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ScreenShotManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static ArrayList\u003cScreenShot\u003e screenShotList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static Stack\u003cScreenShot\u003e undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static int pointer \u003d -1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static ScreenShot popLastScreenShot() throws EmptyStackException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        undoStack.pop();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return undoStack.pop();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static ScreenShot peekLastScreenShot() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return undoStack.peek();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * revert to the last changed state for moduleList for undo feature."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws IOException exception is thrown when error occurred during IO operation."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws CorruptedFileException exception is thrown when converting a corrupted string to moduleList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws EmptyStackException exception is thrown when user trying to undo at the initial state."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static void revertToLastScreenShot() throws IOException, CorruptedFileException, EmptyStackException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShot lastScreenShot \u003d popLastScreenShot();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String moduleListString \u003d lastScreenShot.getModuleListString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        InputStream is \u003d new ByteArrayInputStream(moduleListString.getBytes());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(new InputStreamReader(is));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ArrayList\u003cModule\u003e moduleList \u003d new Decoder(bufferedReader).decode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.setModuleList(moduleList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Save the moduleList as a string if it was changed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static void saveScreenShot() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String currentModuleListString \u003d new Encoder(ModuleManager.getModuleList()).encode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShot screenShot \u003d new ScreenShot(currentModuleListString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        if (getScreenShotSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            undoStack.push(screenShot);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShot lastScreenShot \u003d peekLastScreenShot();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String lastModuleListString \u003d lastScreenShot.getModuleListString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        if (!lastModuleListString.equals(currentModuleListString)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            undoStack.push(screenShot);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static int getScreenShotSize() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return undoStack.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cScreenShot\u003e getScreenShotList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return ScreenShotManager.screenShotList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void setScreenShotList(ArrayList\u003cScreenShot\u003e screenShotList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ScreenShotManager.screenShotList \u003d screenShotList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static int getCurrentPointer() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return ScreenShotManager.pointer;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static void setCurrentPointer(int pointer) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShotManager.pointer \u003d pointer;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * return a scree shot with certain index."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @return a screen shot"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ScreenShot getCurrentScreenShot() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (getCurrentPointer() \u003c 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return screenShotList.get(0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return screenShotList.get(getCurrentPointer());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void movePointerForward() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ScreenShotManager.pointer++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * change to another screen shot."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void movePointerBackWard() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (ScreenShotManager.pointer \u003e 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            ScreenShotManager.pointer--;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void saveNewScreenShot(ScreenShot toAdd) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        movePointerForward();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        screenShotList.add(toAdd);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void cutTailNodes() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        screenShotList \u003d (ArrayList\u003cScreenShot\u003e) screenShotList.subList(0, pointer);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * save the screen shot."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ScreenShot takeNewScreenShot() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String jsonStrModuleList \u003d StorageManager.saveModuleToString(ModuleManager.getModuleList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new ScreenShot(jsonStrModuleList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * set module manager data according to screen shot manager data."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static ArrayList\u003cModule\u003e readFromScreenShot(String jsonStr) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return (ArrayList\u003cModule\u003e) JSON.parseArray(jsonStr, Module.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 12,
      "wangqinNick": 63,
      "A11riseforme": 60,
      "iceclementi": 3
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/TaskFileManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class TaskFileManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    ArrayList\u003cTaskFile\u003e fileList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskFileManager() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTaskFile\u003e getFileList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return fileList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the entire File List to a new list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new File List to be set"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setFileList(ArrayList\u003cTaskFile\u003e fileList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileList \u003d fileList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Finds a file with the specified file name in the File List."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file name of the task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file with the specified file name if found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskFileNotFoundException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the file is not found in the File List"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskFile getFile(String fileName) throws TaskFileNotFoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (file.getFileName().equals(fileName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return file;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new TaskFileNotFoundException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks for duplicates of the same file name in the File List."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file name to check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there exists a duplicate, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean contains(String fileName) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (file.isSameFile(fileName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Add a file to the File List."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file to be added"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicateTaskFileException"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there exists a duplicate file in the File List with the same file name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void add(TaskFile toAdd) throws DuplicateTaskFileException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (contains(toAdd.getFileName())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateTaskFileException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileList.add(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes the specified file from the File List."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be deleted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void delete(TaskFile toDelete) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileList.remove(toDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits a file in the File List."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file to be edited"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newFileName"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new file name of the file"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicateTaskFileException"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are duplicate files with the same file name as the new file name in the File List"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void edit(TaskFile toEdit, String newFileName) throws DuplicateTaskFileException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!toEdit.isSameFile(newFileName) \u0026\u0026 contains(newFileName)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateTaskFileException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setFileName(newFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for files in the File List with names that contains the specified keyword."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the files"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered files"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTaskFile\u003e filter(String fileKeyword) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (file.getFileName().toLowerCase().contains(fileKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredFileList.add(file);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredFileList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for files in the File List with names that matches \u003cb\u003eexactly\u003c/b\u003e the specified keyword."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the files"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered files"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTaskFile\u003e filterExact(String fileKeyword) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Returns all tasks in the File List if no keyword is provided."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String noKeyword \u003d \"\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (fileKeyword.equals(noKeyword)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return this.getFileList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (file.getFileName().toLowerCase().equals(fileKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredFileList.add(file);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredFileList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns a string representation of the File List."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The string representation of the File List"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder listToString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String arrayString \u003d \"[\\\"\" + file.getFileName() + \"\\\", \\\"\" + file.getFilePath() + \"\\\"]\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listToString.append(arrayString).append(\" \");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return listToString.toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class TaskFileNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class DuplicateTaskFileException extends DuplicateDataException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 175
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * every category manager has a task manager to manage tasks within module."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Initiates an empty Task List."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the entire Task List."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Task List"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the entire Task List to a new list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new Task List to be set"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Finds a task with the specified task description in the Task List."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be found"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found task with the specified description"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task is not found in the Task List"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Task getTask(String description) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks for duplicates of the same task description in the Task List."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task description to check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there exists a duplicate, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean contains(String taskDescription) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (task.isSameTask(taskDescription)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Add a task to the Task List."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicateTaskException"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there exists a duplicate task in the Task List with the same task description"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void add(Task toAdd) throws DuplicateTaskException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (contains(toAdd.getDescription())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            taskList.add(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes the specified task from the Task List."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be deleted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void delete(Task toDelete) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskList.remove(toDelete);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a \u003cb\u003eTask\u003c/b\u003e with the specified \u003ccode\u003edescription\u003c/code\u003e from the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description The description of the \u003cb\u003eTask\u003c/b\u003e to be deleted"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return  The deleted task"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskNotFoundException  If the task with the specified description is not found in the \u003cb\u003eTask List\u003c/b\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Task"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Task delete(String description) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Task toDelete \u003d getTask(description);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskList.remove(toDelete);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return toDelete;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits a task in the Task List."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be edited"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newTaskDescription"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new task description of the task"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newDeadline"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new deadline of the task"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newPriority"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * The new priority of the task"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicateTaskException"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are duplicate tasks with the same task description as the new task description in the Task List"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void edit(Task toEdit, String newTaskDescription, DateTime newDeadline, int newPriority)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws DuplicateTaskException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!toEdit.isSameTask(newTaskDescription) \u0026\u0026 contains(newTaskDescription)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setDescription(newTaskDescription);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setDeadline(newDeadline);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setPriority(newPriority);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Counts the total number of tasks in the Task List."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The total number of tasks in the Task List"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public int countTotalTasks() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Retrieves the File List of the category with the specified description."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to retrieve the File List from"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The File List of the found task"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task with the specified description is not found in the Task List"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskFileManager retrieveList(String description) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getTask(description).getFiles();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for tasks in the Task List with description that contains the specified keyword."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered tasks"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTask\u003e filter(String taskKeyword) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (task.getDescription().toLowerCase().contains(taskKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredTaskList.add(task);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for tasks in the Task List with description that matches \u003cb\u003eexactly\u003c/b\u003e the specified keyword."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered tasks"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTask\u003e filterExact(String taskKeyword) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Returns all tasks in the Task List if no keyword is provided."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String noKeyword \u003d \"\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskKeyword.equals(noKeyword)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return this.getTaskList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (task.getDescription().toLowerCase().equals(taskKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredTaskList.add(task);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * compare this task with other task."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param other target task"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return true if tasks are equal"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                || (other instanceof TaskManager // instanceof handles nulls"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \u0026\u0026 this.taskList.equals(((TaskManager) other).taskList));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class TaskNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class DuplicateTaskException extends DuplicateDataException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 9,
      "wangqinNick": 38,
      "A11riseforme": 3,
      "iceclementi": 179
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/storage/Decoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.CorruptedFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTimeFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Decoder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_MODULE_INDICATOR \u003d \"--- MODULE ---\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_MODULE_INDICATOR \u003d \"--- END MODULE ---\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_CATEGORY_INDICATOR \u003d \"--- CATEGORY ---\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_CATEGORY_INDICATOR \u003d \"--- END CATEGORY ---\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_TASK_INDICATOR \u003d \"--- TASK ---\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_TASK_INDICATOR \u003d \"--- END TASK ---\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_FILE_INDICATOR \u003d \"--- FILE ---\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_FILE_INDICATOR \u003d \"--- END FILE ---\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String DELIMITER \u003d \" -|||- \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String LINE_BREAK \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private BufferedReader reader;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Decoder(BufferedReader reader) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.reader \u003d reader;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cModule\u003e decode() throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodeModuleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cModule\u003e decodeModuleList()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e decodedModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!reader.readLine().equals(BEGIN_MODULE_INDICATOR)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new CorruptedFileException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String currentLine;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        while ((currentLine \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (currentLine.equals(END_MODULE_INDICATOR)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module decodedModule \u003d decodeModule(currentLine.split(Pattern.quote(DELIMITER)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            decodedModuleList.add(decodedModule);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedModuleList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cCategory\u003e decodeCategoryList(Module decodedModule)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e decodedCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!reader.readLine().equals(BEGIN_CATEGORY_INDICATOR)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new CorruptedFileException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String currentLine;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        while ((currentLine \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (currentLine.equals(END_CATEGORY_INDICATOR)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Category decodedCategory \u003d decodeCategory(decodedModule, currentLine.split(Pattern.quote(DELIMITER)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                decodedCategoryList.add(decodedCategory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new CorruptedFileException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedCategoryList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTask\u003e decodeTaskList(Category decodedCategory)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e decodedTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!reader.readLine().equals(BEGIN_TASK_INDICATOR)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new CorruptedFileException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String currentLine;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        while ((currentLine \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (currentLine.equals(END_TASK_INDICATOR)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Task decodedTask \u003d decodeTask(decodedCategory, currentLine.split(Pattern.quote(DELIMITER)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                decodedTaskList.add(decodedTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (NumberFormatException | DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new CorruptedFileException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedTaskList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTaskFile\u003e decodeFileList(Task decodedTask) throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e decodedTaskFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!reader.readLine().equals(BEGIN_FILE_INDICATOR)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new CorruptedFileException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String currentLine;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        while ((currentLine \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (currentLine.equals(END_FILE_INDICATOR)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFile decodedFile \u003d decodeFile(decodedTask, currentLine.split(Pattern.quote(DELIMITER)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            decodedTaskFileList.add(decodedFile);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedTaskFileList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Module decodeModule(String[] moduleInformation)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d moduleInformation[0];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String title \u003d moduleInformation[1];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String description \u003d moduleInformation[2];"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Module decodedModule \u003d new Module(moduleCode, title, description);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        decodedModule.getCategories().setCategoryList(decodeCategoryList(decodedModule));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedModule;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Category decodeCategory(Module decodedModule, String[] categoryInformation)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d categoryInformation[0];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int categoryPriority \u003d Integer.parseInt(categoryInformation[1]);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Category decodedCategory \u003d new Category(decodedModule, categoryName, categoryPriority);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        decodedCategory.getTasks().setTaskList(decodeTaskList(decodedCategory));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedCategory;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Task decodeTask(Category decodedCategory, String[] taskInformation)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CorruptedFileException, DateTimeFormat.InvalidDateTimeException, IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d taskInformation[0];"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean doneStatus;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskInformation[1].equals(\"Y\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            doneStatus \u003d true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (taskInformation[1].equals(\"N\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            doneStatus \u003d false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new CorruptedFileException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime deadline \u003d (taskInformation[2].isEmpty()) ? null : DateTimeFormat.stringToDateTime(taskInformation[2]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int taskPriority \u003d Integer.parseInt(taskInformation[3]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Task decodedTask \u003d new Task(decodedCategory, taskDescription, deadline, taskPriority);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        decodedTask.setDone(doneStatus);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        decodedTask.getFiles().setFileList(decodeFileList(decodedTask));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedTask;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TaskFile decodeFile(Task decodedTask, String[] fileInformation) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileName \u003d fileInformation[0];"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String filePath \u003d fileInformation[1];"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new TaskFile(decodedTask, fileName, filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 162
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/storage/Encoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Encoder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_MODULE_INDICATOR \u003d \"--- MODULE ---\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_MODULE_INDICATOR \u003d \"--- END MODULE ---\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_CATEGORY_INDICATOR \u003d \"--- CATEGORY ---\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_CATEGORY_INDICATOR \u003d \"--- END CATEGORY ---\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_TASK_INDICATOR \u003d \"--- TASK ---\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_TASK_INDICATOR \u003d \"--- END TASK ---\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_FILE_INDICATOR \u003d \"--- FILE ---\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_FILE_INDICATOR \u003d \"--- END FILE ---\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String DELIMITER \u003d \" -|||- \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String LINE_BREAK \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cModule\u003e moduleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Encoder(ArrayList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Encodes the Module List to be saved into a file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The encoded Module List"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder encodedList \u003d new StringBuilder(BEGIN_MODULE_INDICATOR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(getModuleInformation(module)).append(LINE_BREAK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(encodeCategoryList(module.getCategories().getCategoryList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        encodedList.append(END_MODULE_INDICATOR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return encodedList.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String encodeCategoryList(ArrayList\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder encodedList \u003d new StringBuilder(BEGIN_CATEGORY_INDICATOR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categories) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(getCategoryInformation(category)).append(LINE_BREAK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(encodeTaskList(category.getTasks().getTaskList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        encodedList.append(END_CATEGORY_INDICATOR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return encodedList.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String encodeTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder encodedList \u003d new StringBuilder(BEGIN_TASK_INDICATOR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(getTaskInformation(task)).append(LINE_BREAK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(encodeFileList(task.getFiles().getFileList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        encodedList.append(END_TASK_INDICATOR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return encodedList.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String encodeFileList(ArrayList\u003cTaskFile\u003e files) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder encodedList \u003d new StringBuilder(BEGIN_FILE_INDICATOR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : files) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(getFileInformation(file)).append(LINE_BREAK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        encodedList.append(END_FILE_INDICATOR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return encodedList.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String getModuleInformation(Module module) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.join(DELIMITER, module.getModuleCode(), module.getTitle(), module.getDescription());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String getCategoryInformation(Category category) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.join(DELIMITER, category.getCategoryName(), String.valueOf(category.getCategoryPriority()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String getTaskInformation(Task task) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String doneStatus \u003d task.isDone() ? \"Y\" : \"N\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String deadline \u003d (task.getDeadline() !\u003d null) ? task.getDeadline().toString() : \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.join(DELIMITER, task.getDescription(), doneStatus, deadline, String.valueOf(task.getPriority()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String getFileInformation(TaskFile file) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.join(DELIMITER, file.getFileName(), file.getFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 90
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.CorruptedFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String dataFileName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor with name of the data file as argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param dataFileName the name of the file in which the data is stored."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public StorageManager(String dataFileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.dataFileName \u003d dataFileName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * load from json data file and return an ArrayList of Module objects."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of Module objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public ArrayList\u003cModule\u003e load() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (ArrayList\u003cModule\u003e) JSON.parseArray(jsonStr, Module.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            System.out.println(\"Error when reading from \" + dataFileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String loadJsonStringFromFile(String dataFileName) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String encoding \u003d \"utf8\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        File file \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        Long fileLength \u003d file.length();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        byte[] fileContent \u003d new byte[fileLength.intValue()];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        FileInputStream in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        in.read(fileContent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new String(fileContent, encoding);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            System.err.println(\"The OS does not support \" + encoding);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Save the current ArrayList of Module objects into json file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String jsonStr \u003d JSON.toJSONString(ModuleManager.getModuleList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            FileWriter fw \u003d new FileWriter(dataFileName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            fw.write(jsonStr);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            fw.flush();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            System.out.println(\"something wrong when writing to \" + dataFileName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Saves the Module List into a file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void save2() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(dataFileName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileWriter.write(new Encoder(ModuleManager.getModuleList()).encode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileWriter.flush();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Loads the Module List from the saved file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void load2() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            FileReader fileReader \u003d new FileReader(dataFileName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cModule\u003e moduleList \u003d new Decoder(bufferedReader).decode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.setModuleList(moduleList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            //e.printStackTrace();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.setModuleList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CorruptedFileException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            System.out.println(\"file is corrupted!\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.setModuleList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static String saveModuleToString(ArrayList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return JSON.toJSONString(moduleList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 4,
      "A11riseforme": 62,
      "iceclementi": 50
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/storage/StoragePath.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class StoragePath {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String TASK_FILE_DIRECTORY_PATH \u003d \"data/files\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String NUS_MODULE_LIST_PATH \u003d \"moduleList.json\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String SAVE_PATH \u003d \"save.txt\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Category.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Category extends Directory {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int categoryPriority;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TaskManager tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the category."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parentModule"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent module of the category"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryPriority"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Category(Module parentModule, String categoryName, int categoryPriority) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        super(parentModule);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryPriority \u003d categoryPriority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.tasks \u003d new TaskManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public Category(Module parentModule, String categoryName, int categoryPriority, TaskManager tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    super(parentModule);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    this.categoryPriority \u003d categoryPriority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the name of the category."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the priority of the category."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public int getCategoryPriority() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryPriority;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the Task List of the category."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Task List of the category"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskManager getTasks() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Module getParent() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (Module) this.parent;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edit the name of the category."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setCategoryName(String categoryName) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edit the priority of the category."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryPriority"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setCategoryPriority(int categoryPriority) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryPriority \u003d categoryPriority;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edit the Task List of the category."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Task List of the category"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setTasks(TaskManager tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if one category has the same category name as another."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category name to check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if they are the same, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isSameCategory(String categoryName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.categoryName.equals(categoryName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 110
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Directory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected Directory parent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Directory without a parent."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.parent \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Directory that has a parent."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent of the class in the Directory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Directory(Directory parent) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.parent \u003d parent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the parent of the class in the Directory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent of the class in the Directory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public abstract Directory getParent();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 10,
      "iceclementi": 20
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/DirectoryLevel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public enum DirectoryLevel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    FILE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    TASK,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    CATEGORY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    MODULE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    ROOT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 10
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/DirectoryTraverser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskFileManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DirectoryTraversalOutOfBoundsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DirectoryTraverser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static Stack\u003cDirectory\u003e directoryStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final DirectoryLevel[] DIRECTORY_LEVELS \u003d {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryLevel.ROOT, DirectoryLevel.MODULE, DirectoryLevel.CATEGORY,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryLevel.TASK, DirectoryLevel.FILE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static int currentLevel \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int MINIMUM_LEVEL \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int MAXIMUM_LEVEL \u003d 4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the current subdirectory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The current subdirectory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Directory getCurrentDirectory() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return directoryStack.peek();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the current subdirectory level."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The current subdirectory level"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static DirectoryLevel getCurrentDirectoryLevel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return DIRECTORY_LEVELS[currentLevel];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Traverse one level down in the directory."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param nextLevel"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The next level of the directory"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DirectoryTraversalOutOfBoundsException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the traversal will result in traversing out of the directory"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void traverseDown(Directory nextLevel) throws DirectoryTraversalOutOfBoundsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (currentLevel \u003e\u003d MAXIMUM_LEVEL) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DirectoryTraversalOutOfBoundsException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        currentLevel++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        directoryStack.push(nextLevel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Traverse one level up in the directory."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DirectoryTraversalOutOfBoundsException"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the traversal will result in traversing out of the directory"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void traverseUp() throws DirectoryTraversalOutOfBoundsException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (currentLevel \u003c\u003d MINIMUM_LEVEL) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DirectoryTraversalOutOfBoundsException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        currentLevel--;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        directoryStack.pop();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Finds the next directory to traverse down into."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param nextDirectoryName"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the next directory"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The next directory if found"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DataNotFoundException"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the next directory cannot be found"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DirectoryTraversalOutOfBoundsException"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the traversal will result in traversing out of the directory"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Directory findNextDirectory(String nextDirectoryName)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws DataNotFoundException, DirectoryTraversalOutOfBoundsException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ROOT:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ModuleManager.getModule(nextDirectoryName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ((Module) getCurrentDirectory()).getCategories().getCategory(nextDirectoryName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ((Category) getCurrentDirectory()).getTasks().getTask(nextDirectoryName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ((Task) getCurrentDirectory()).getFiles().getFile(nextDirectoryName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DirectoryTraversalOutOfBoundsException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the full path to the current directory from the root."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The full path to the current directory"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String getFullPath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder path \u003d new StringBuilder(\"root\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module currentModuleDirectory \u003d (Module) getCurrentDirectory();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            path.append(String.format(\" / %s\", currentModuleDirectory.getModuleCode()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category currentCategoryDirectory \u003d (Category) getCurrentDirectory();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            path.append(String.format(\" / %s / %s\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentCategoryDirectory.getParent().getModuleCode(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentCategoryDirectory.getCategoryName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task currentTaskDirectory \u003d (Task) getCurrentDirectory();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            path.append(String.format(\" / %s / %s / %s\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentTaskDirectory.getParent().getParent().getModuleCode(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentTaskDirectory.getParent().getCategoryName(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentTaskDirectory.getDescription()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFile currentFileDirectory \u003d (TaskFile) getCurrentDirectory();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            path.append(String.format(\" / %s / %s / %s / %s\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentFileDirectory.getParent().getParent().getParent().getModuleCode(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentFileDirectory.getParent().getParent().getCategoryName(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentFileDirectory.getParent().getDescription(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentFileDirectory.getFileName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the base module level directory of the current directory."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The base module level directory of the current directory"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the base module level directory"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Module getBaseModule() throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Module) DirectoryTraverser.getCurrentDirectory();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Module) DirectoryTraverser.getCurrentDirectory().getParent();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Module) DirectoryTraverser.getCurrentDirectory().getParent().getParent();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Module) DirectoryTraverser.getCurrentDirectory().getParent().getParent().getParent();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the base category level directory of the current directory."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The base category level directory of the current directory"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the base category level directory"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Category getBaseCategory() throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Category) DirectoryTraverser.getCurrentDirectory();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Category) DirectoryTraverser.getCurrentDirectory().getParent();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Category) DirectoryTraverser.getCurrentDirectory().getParent().getParent();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the base task level directory of the current directory."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The base task level directory of the current directory"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the base task level directory"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Task getBaseTask() throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Task) DirectoryTraverser.getCurrentDirectory();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Task) DirectoryTraverser.getCurrentDirectory().getParent();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the base file level directory of the current directory."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The base file level directory of the current directory"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the base file level directory"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static TaskFile getBaseFile() throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (DirectoryTraverser.getCurrentDirectoryLevel() \u003d\u003d DirectoryLevel.FILE) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (TaskFile) DirectoryTraverser.getCurrentDirectory();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the module level directory of the current Directory."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module level directory of the current Directory"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the module level directory"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the module code is not found in the Module List"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Module getModuleDirectory(String moduleCode)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IncorrectDirectoryLevelException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill up missing values first"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getBaseModule();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ModuleManager.getModule(moduleCode);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the category level directory of the current Directory."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category level directory of the current Directory"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the category level directory"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the module code is not found in the Module List"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the category name is not found in the Category List"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Category getCategoryDirectory(String moduleCode, String categoryName)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IncorrectDirectoryLevelException, ModuleManager.ModuleNotFoundException,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            CategoryManager.CategoryNotFoundException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill up missing values first"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            moduleCode \u003d getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoryName.isEmpty()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            categoryName \u003d getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return ModuleManager.getCategory(moduleCode, categoryName);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the task level directory of the current Directory."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task level directory of the current Directory"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the task level directory"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the module code is not found in the Module List"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the category name is not found in the Category List"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task with the task description is not found in the Task List"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Task getTaskDirectory(String moduleCode, String categoryName, String taskDescription)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IncorrectDirectoryLevelException, ModuleManager.ModuleNotFoundException,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            CategoryManager.CategoryNotFoundException, TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill up missing values first"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            moduleCode \u003d getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoryName.isEmpty()) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            categoryName \u003d getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode) || !getBaseCategory().isSameCategory(categoryName)) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            taskDescription \u003d getBaseTask().getDescription();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return ModuleManager.getTask(moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the file level directory of the current Directory."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file level directory of the current Directory"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the file level directory"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the module code is not found in the Module List"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the category name is not found in the Category List"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task with the task description is not found in the Task List"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskFileManager.TaskFileNotFoundException"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the file with the file name is not found in the File List"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static TaskFile getFileDirectory(String moduleCode, String categoryName, String taskDescription,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String fileName)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IncorrectDirectoryLevelException, ModuleManager.ModuleNotFoundException,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            CategoryManager.CategoryNotFoundException, TaskManager.TaskNotFoundException,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFileManager.TaskFileNotFoundException {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill up missing values first"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            moduleCode \u003d getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoryName.isEmpty()) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode)) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            categoryName \u003d getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode) || !getBaseCategory().isSameCategory(categoryName)) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            taskDescription \u003d getBaseTask().getDescription();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (fileName.isEmpty()) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode) || !getBaseCategory().isSameCategory(categoryName)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                || !getBaseTask().isSameTask(taskDescription)) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileName \u003d getBaseFile().getFileName();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return ModuleManager.getFile(moduleCode, categoryName, taskDescription, fileName);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 357
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Module.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Module extends Directory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final Root root \u003d new Root();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private CategoryManager categories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the module."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The title of the module"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the module"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Module(String moduleCode, String title, String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(root);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categories \u003d new CategoryManager(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the module but with limited information."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Module(String moduleCode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(moduleCode, \"\", \"NIL\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Return the module code of the module."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the title of the module."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The title of the module"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the description of the module."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the module"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the Category List of the module."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Category List of the module"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CategoryManager getCategories() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categories;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Root getParent() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (Root) this.parent;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits the module code of the module."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits the title of the module."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The title of the module"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits the description of the module."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the module"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edit the Category List of the module."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categories"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Category List of the module"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setCategories(CategoryManager categories) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categories \u003d categories;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * Get a list of tasks of the module."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @return a list of tasks of the module"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d  new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (Category category: categories.getCategoryList()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            allTasks.addAll(category.getTasks().getTaskList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public int countTasks() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return getAllTasks().size();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * The method to check the deadline of the tasks in a module."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of String representing the deadline of tasks in order."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ArrayList\u003cTask\u003e sortAllTasks() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d getAllTasks();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Collections.sort(filteredTaskList, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                String t1Deadline \u003d t1.getDeadline() \u003d\u003d null ? \"\" : t1.getDeadline().getDateTimeSortFormat();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                String t2Deadline \u003d t2.getDeadline() \u003d\u003d null ? \"\" : t2.getDeadline().getDateTimeSortFormat();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return t1Deadline.compareToIgnoreCase(t2Deadline);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        });"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if one module has the same module code as another."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code to check"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if they are the same, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isSameModule(String moduleCode) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.moduleCode.equalsIgnoreCase(moduleCode);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 30,
      "wangqinNick": 5,
      "A11riseforme": 33,
      "iceclementi": 105
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Root.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * The Root of the Directory, i.e. the starting point of the Directory Tree."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Root extends Directory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Root() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Directory getParent() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 5,
      "iceclementi": 10
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Stuff.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Stuff {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Stuff father;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Stuff son;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Stuff(Stuff father) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.father \u003d father;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Stuff getFather() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return father;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setFather(Stuff father) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.father \u003d father;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Stuff getSon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return son;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void setSon(Stuff son) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.son \u003d son;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 26
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskFileManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.common.Constants.NO_ICON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.common.Constants.YES_ICON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Task extends Directory implements Tag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DateTime deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TaskFileManager files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // private String moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // * constructor for the simplest task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // * @param description the description of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // * @param moduleCode the module code of the module which the task belongs to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public Task(Module module, String description, String moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    super(module);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    this.files \u003d new TaskFileManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    this.deadline \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    this.priority \u003d -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    this.isDone \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    this.tags \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setTags(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param category"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent category of the task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The deadline of the task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Task(Category category, String description, DateTime deadline, int priority) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        super(category);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.files \u003d new TaskFileManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setFiles(TaskFileManager files) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.files \u003d files;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the deadline of the task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The deadline of the task"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime getDeadline() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edit the deadline of the task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The deadline of the task"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setDeadline(DateTime deadline) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the priority of the task."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the task"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns an icon representing the done status of the task."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The icon representing the done status of the task"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (isDone ? YES_ICON : NO_ICON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the File List of the task."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The File List of the task"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskFileManager getFiles() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return files;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Category getParent() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (Category) this.parent;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if one task has the same description as another."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task description to check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if they are the same, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isSameTask(String taskDescription) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.description.equals(taskDescription);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prints the task as a string."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The string that contains all the task information"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"%s %s by %s\\n Files:\\n%s\", getStatusIcon(), getDescription(), getDeadline(), files);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void setTag(ArrayList\u003cString\u003e infos) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.tags.addAll(infos);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void removeTag(String tag) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        tags.remove(tag);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void removeAllTags() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return this.tags \u003d\u003d null ? \"\" : tags.toString();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 11,
      "wangqinNick": 15,
      "A11riseforme": 66,
      "iceclementi": 105
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/TaskFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class TaskFile extends Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the task file."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent task of the task file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The path to the file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskFile(Task task, String fileName, String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the name of the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the path of the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The path of the file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Task getParent() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (Task) this.parent;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edit the file name of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file name of the task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setFileName(String fileName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edit the file path of the task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file path of the task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setFilePath(String filePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if one file has the same name as another."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file name to check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if they are the same, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isSameFile(String fileName) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.fileName.equals(fileName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 80
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/CorruptedFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class CorruptedFileException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/DataNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class DataNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 1,
      "iceclementi": 3
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/DirectoryTraversalOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DirectoryTraversalOutOfBoundsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/DuplicateDataException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class DuplicateDataException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 2,
      "iceclementi": 3
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/FileNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class FileNotFoundException extends NotFoundException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public FileNotFoundException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/IncorrectDirectoryLevelException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class IncorrectDirectoryLevelException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/InvalidFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class InvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 2,
      "iceclementi": 3
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class InvalidIndexException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/ModuleNotProvidedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class ModuleNotProvidedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/NotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class NotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public NotFoundException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/NukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * The parent exception class that handles the general exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * @author A11riseforme"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class NukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public NukeException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor with one argument as the error message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param errorMsg the message to be shown when exception is raised."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public NukeException(String errorMsg) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 26
    }
  },
  {
    "path": "src/main/java/seedu/nuke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.ChangeDirectoryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.OpenFileCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddCategoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddFileCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddModuleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.addcommand.AddTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddTaskCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditCategoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditFileCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditTaskCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.FilterCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteFileCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteModuleCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteTaskCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListAllTasksDeadlineCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListCategoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListFileCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListModuleCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListModuleTasksDeadlineCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListTaskCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.promptcommand.ConfirmationStatus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.promptcommand.DeleteConfirmationPrompt;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.promptcommand.ListNumberPrompt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.InvalidFormatException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTimeFormat;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_PREFIX_FOUND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INVALID_DEADLINE_FORMAT;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INVALID_PREFIX;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INVALID_PRIORITY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_INVALID_DELETE_INDICES;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_EDIT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003cparameters\u003e.*)\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String WHITESPACES \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String NONE \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int COMMAND_PARAMETER_MAXIMUM_LIMIT \u003d 2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int COMMAND_WORD_INDEX \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int PARAMETER_WORD_INDEX \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static final String GENERIC_LIST_COMMAND \u003d \"ls\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static final String GENERIC_ADD_COMMAND \u003d \"mkdir\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static final String GENERIC_DELETE_COMMAND \u003d \"rm\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String CATEGORY_PREFIX \u003d \"-c\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FILE_PREFIX \u003d \"-f\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String PRIORITY_PREFIX \u003d \"-p\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String DEADLINE_PREFIX \u003d \"-d\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String ALL_FLAG \u003d \"-a\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String EXACT_FLAG \u003d \"-e\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String TAG_PREFIX \u003d \"-g\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String COMMAND_WORD_GROUP \u003d \"commandWord\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String PARAMETERS_GROUP \u003d \"parameters\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String IDENTIFIER_GROUP \u003d \"identifier\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String MODULE_GROUP \u003d \"moduleCode\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String CATEGORY_GROUP \u003d \"categoryName\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String TASK_GROUP \u003d \"taskDescription\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String FILE_GROUP \u003d \"fileInfo\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String DEADLINE_GROUP \u003d \"deadline\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String PRIORITY_GROUP \u003d \"priority\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String EXACT_GROUP \u003d \"exact\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String ALL_GROUP \u003d \"all\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String OPTIONAL_GROUP \u003d \"optional\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String INVALID_GROUP \u003d \"invalid\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses the input string read by the \u003cb\u003eUI\u003c/b\u003e and converts the string into a specific \u003cb\u003eCommand\u003c/b\u003e, which is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * to be executed by the \u003cb\u003eNuke\u003c/b\u003e program."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The user input has to start with a certain keyword (i.e. \u003ci\u003ecommand word\u003c/i\u003e), otherwise an"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ci\u003eInvalid Command Exception\u003c/i\u003e will be thrown."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input The user input read by the \u003cb\u003eUI\u003c/b\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003ecorresponding\u003c/b\u003e command to be executed"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see seedu.nuke.ui.Ui"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Command parseCommand(String input) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String commandWord \u003d matcher.group(COMMAND_WORD_GROUP).toLowerCase();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parameters \u003d matcher.group(PARAMETERS_GROUP);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            case GENERIC_LIST_COMMAND:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return prepareGenericListCommand(parameters.trim());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            case GENERIC_ADD_COMMAND:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return prepareGenericAddCommand(parameters);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            case GENERIC_DELETE_COMMAND:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return prepareGenericDeleteCommand(parameters);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareAddModuleCommand(parameters);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case AddCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareAddCategoryCommand(parameters);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareAddTaskCommand(parameters);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case AddFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareAddFileCommand(parameters);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                return prepareAddTagCommand(parameters);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListModuleCommand(parameters, true);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case DeleteCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListCategoryCommand(parameters, true);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListTaskCommand(parameters, true);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case DeleteFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListFileCommand(parameters, true);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ListModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListModuleCommand(parameters, false);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ListCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListCategoryCommand(parameters, false);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ListTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListTaskCommand(parameters, false);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            case ListModuleTasksDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                return new ListModuleTasksDeadlineCommand(parameters.trim());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ListFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListFileCommand(parameters, false);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            case ListAllTasksDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return new ListAllTasksDeadlineCommand();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case EditModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareEditModuleCommand(parameters);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case EditCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareEditCategoryCommand(parameters);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareEditTaskCommand(parameters);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case EditFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareEditFileCommand(parameters);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ChangeDirectoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareChangeDirectoryCommand(parameters);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case OpenFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareOpenFileCommand(parameters);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return new UndoCommand();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (InvalidParameterException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DuplicatePrefixException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_DUPLICATE_PREFIX_FOUND);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (InvalidPrefixException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PREFIX);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to change the current directory."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to change the current directory"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareChangeDirectoryCommand(String parameters) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (parameters.trim().equals(\"..\")) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ChangeDirectoryCommand();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ChangeDirectoryCommand(parameters.trim());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Prepare the command to list the content based on the directory of the user is currently in."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param parameters The parameters given by the user"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return The command to change the current directory"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws InvalidPrefixException exception is thrown when prefix is invalid."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws InvalidParameterException exception is thrown when parameter is invalid."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws DuplicatePrefixException exception is thrown when duplicated prefix is provided."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private Command prepareGenericListCommand(String parameters)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case ROOT:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            if (parameters.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return prepareDeleteAndListModuleCommand(parameters, false);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                parameters \u003d \" \" + MODULE_PREFIX + \" \" + parameters;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return prepareDeleteAndListCategoryCommand(parameters, false);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            if (parameters.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return prepareDeleteAndListCategoryCommand(parameters, false);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                parameters \u003d \" \" + CATEGORY_PREFIX + \" \" + parameters;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return prepareDeleteAndListTaskCommand(parameters, false);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return prepareDeleteAndListTaskCommand(parameters, false);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Prepare the command to add the content based on the directory of the user is currently in."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param parameters The parameters given by the user"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return The command to change the current directory"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws InvalidPrefixException exception is thrown when prefix is invalid."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws InvalidParameterException exception is thrown when parameter is invalid."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws DuplicatePrefixException exception is thrown when duplicated prefix is provided."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private Command prepareGenericAddCommand(String parameters)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case ROOT:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return prepareAddModuleCommand(parameters);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return prepareAddCategoryCommand(parameters);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return prepareAddTaskCommand(parameters);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Prepare the command to delete the content based on the directory of the user is currently in."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param parameters The parameters given by the user"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return The command to change the current directory"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws InvalidPrefixException exception is thrown when prefix is invalid."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws InvalidParameterException exception is thrown when parameter is invalid."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws DuplicatePrefixException exception is thrown when duplicated prefix is provided."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private Command prepareGenericDeleteCommand(String parameters)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case ROOT:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return prepareDeleteAndListModuleCommand(parameters, true);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return prepareDeleteAndListCategoryCommand(parameters, true);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return prepareDeleteAndListTaskCommand(parameters, true);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Prepare Add Commands */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to add a module."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to add a module"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareAddModuleCommand(String parameters)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException, InvalidPrefixException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d AddModuleCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new AddModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to add a category."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to add a category"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareAddCategoryCommand(String parameters)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException, InvalidPrefixException {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d AddCategoryCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, PRIORITY_PREFIX);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String priority \u003d matcher.group(PRIORITY_GROUP).replace(PRIORITY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (priority.isEmpty()) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new AddCategoryCommand(moduleCode, categoryName);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new AddCategoryCommand(moduleCode, categoryName, parsePriority(priority));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (NumberFormatException | InvalidPriorityException e) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to add a task."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to add a task"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareAddTaskCommand(String parameters)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d AddTaskCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX,"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                DEADLINE_PREFIX, PRIORITY_PREFIX);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String optionalParameters \u003d matcher.group(OPTIONAL_GROUP);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher optionalMatcher \u003d AddTaskCommand.REGEX_OPTIONAL_FORMAT.matcher(optionalParameters);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] optionalAttributes \u003d getOptionalAttributes(optionalMatcher, DEADLINE_GROUP, PRIORITY_GROUP);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String deadline \u003d optionalAttributes[0].replace(DEADLINE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String priority \u003d optionalAttributes[1].replace(PRIORITY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime deadlineToSet;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deadlineToSet \u003d DateTimeFormat.stringToDateTime(deadline);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_DEADLINE_FORMAT);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (priority.isEmpty()) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new AddTaskCommand(moduleCode, categoryName, taskDescription, deadlineToSet);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new AddTaskCommand(moduleCode, categoryName, taskDescription, deadlineToSet,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    parsePriority(priority));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (NumberFormatException | InvalidPriorityException e) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private Command prepareAddTagCommand(String parameters)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Matcher matcher \u003d AddTagCommand.REGEX_FORMATS.matcher(parameters);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, TASK_PREFIX, TAG_PREFIX);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        String info \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        String taskDescription \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return new AddTagCommand(new ArrayList\u003c\u003e(Arrays.asList(info)), moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to add a file."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to add a file"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareAddFileCommand(String parameters)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d AddFileCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, TASK_PREFIX, FILE_PREFIX);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileName \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String filePath \u003d matcher.group(FILE_GROUP).replace(FILE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new AddFileCommand(moduleCode, categoryName, taskDescription, fileName, filePath);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Prepare Delete and List Commands */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to delete modules or show filtered modules."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to delete modules or show filtered modules"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareDeleteAndListModuleCommand(String parameters, boolean isDelete)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d FilterCommand.MODULE_REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, EXACT_FLAG, ALL_FLAG);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleKeyword \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String optionalParameters \u003d matcher.group(OPTIONAL_GROUP);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher optionalMatcher \u003d FilterCommand.REGEX_OPTIONAL_FORMAT.matcher(optionalParameters);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] optionalAttributes \u003d getOptionalAttributes(optionalMatcher, EXACT_GROUP);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String exactFlag \u003d optionalAttributes[0].trim();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isExact \u003d !exactFlag.isEmpty();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isDelete) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteModuleCommand(moduleKeyword, isExact);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ListModuleCommand(moduleKeyword, isExact);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to delete categories or show filtered categories."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to delete categories or show filtered categories"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareDeleteAndListCategoryCommand(String parameters, boolean isDelete)"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d FilterCommand.CATEGORY_REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, EXACT_FLAG, ALL_FLAG);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryKeyword \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleKeyword \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String optionalParameters \u003d matcher.group(OPTIONAL_GROUP);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher optionalMatcher \u003d FilterCommand.REGEX_OPTIONAL_FORMAT.matcher(optionalParameters);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] optionalAttributes \u003d getOptionalAttributes(optionalMatcher, EXACT_GROUP, ALL_GROUP);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String exactFlag \u003d optionalAttributes[0].trim();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isExact \u003d !exactFlag.isEmpty();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String allFlag \u003d optionalAttributes[1].trim();"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isAll \u003d !allFlag.isEmpty();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isDelete) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteCategoryCommand(moduleKeyword, categoryKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ListCategoryCommand(moduleKeyword, categoryKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to delete tasks or show filtered tasks."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to delete tasks or show filtered tasks"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareDeleteAndListTaskCommand(String parameters, boolean isDelete)"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d FilterCommand.TASK_REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, EXACT_FLAG, ALL_FLAG);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskKeyword \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleKeyword \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryKeyword \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String optionalParameters \u003d matcher.group(OPTIONAL_GROUP);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher optionalMatcher \u003d FilterCommand.REGEX_OPTIONAL_FORMAT.matcher(optionalParameters);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] optionalAttributes \u003d getOptionalAttributes(optionalMatcher, EXACT_GROUP, ALL_GROUP);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String exactFlag \u003d optionalAttributes[0].trim();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isExact \u003d !exactFlag.isEmpty();"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String allFlag \u003d optionalAttributes[1].trim();"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isAll \u003d !allFlag.isEmpty();"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isDelete) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteTaskCommand(moduleKeyword, categoryKeyword, taskKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ListTaskCommand(moduleKeyword, categoryKeyword, taskKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to delete files or show filtered files."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to delete files or show filtered files"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareDeleteAndListFileCommand(String parameters, boolean isDelete)"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d FilterCommand.FILE_REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, TASK_PREFIX, EXACT_FLAG, ALL_FLAG);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileKeyword \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleKeyword \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryKeyword \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskKeyword \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String optionalParameters \u003d matcher.group(OPTIONAL_GROUP);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher optionalMatcher \u003d FilterCommand.REGEX_OPTIONAL_FORMAT.matcher(optionalParameters);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] optionalAttributes \u003d getOptionalAttributes(optionalMatcher, EXACT_GROUP, ALL_GROUP);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String exactFlag \u003d optionalAttributes[0].trim();"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isExact \u003d !exactFlag.isEmpty();"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String allFlag \u003d optionalAttributes[1].trim();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isAll \u003d !allFlag.isEmpty();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isDelete) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteFileCommand(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ListFileCommand(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Prepare Edit Commands */"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to edit a module."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to edit a module"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareEditModuleCommand(String parameters)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException, InvalidPrefixException {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d EditModuleCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String oldModuleCode \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newModuleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNothingToEdit(newModuleCode)) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new EditModuleCommand(oldModuleCode, newModuleCode);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to edit a category."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to edit a category"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareEditCategoryCommand(String parameters)"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d EditCategoryCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, PRIORITY_PREFIX);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String oldCategoryName \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newCategoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newPriority \u003d matcher.group(PRIORITY_GROUP).replace(PRIORITY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNothingToEdit(newCategoryName, newPriority)) {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newPriority.isEmpty()) {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new EditCategoryCommand(oldCategoryName, moduleCode, newCategoryName);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new EditCategoryCommand(oldCategoryName, moduleCode, newCategoryName, parsePriority(newPriority));"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (NumberFormatException | InvalidPriorityException e) {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to edit a task."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to edit a task"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareEditTaskCommand(String parameters)"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d EditTaskCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, TASK_PREFIX,"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                DEADLINE_PREFIX, PRIORITY_PREFIX);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String oldTaskDescription \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newTaskDescription \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String optionalParameters \u003d matcher.group(OPTIONAL_GROUP);"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher optionalMatcher \u003d EditTaskCommand.REGEX_OPTIONAL_FORMAT.matcher(optionalParameters);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] optionalAttributes \u003d getOptionalAttributes(optionalMatcher, DEADLINE_GROUP, PRIORITY_GROUP);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newDeadline \u003d optionalAttributes[0].replace(DEADLINE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newPriority \u003d optionalAttributes[1].replace(PRIORITY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNothingToEdit(newTaskDescription, newDeadline, newPriority)) {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime newDeadlineToSet;"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            newDeadlineToSet \u003d DateTimeFormat.stringToDateTime(newDeadline);"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_DEADLINE_FORMAT);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newPriority.isEmpty()) {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new EditTaskCommand(oldTaskDescription, moduleCode, categoryName, newTaskDescription,"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    newDeadlineToSet);"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new EditTaskCommand(oldTaskDescription, moduleCode, categoryName, newTaskDescription,"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    newDeadlineToSet, parsePriority(newPriority));"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (NumberFormatException | InvalidPriorityException e) {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to edit a file."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to edit a file"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareEditFileCommand(String parameters)"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d EditFileCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, TASK_PREFIX, FILE_PREFIX);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String oldFileName \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newFileName \u003d matcher.group(FILE_GROUP).replace(FILE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNothingToEdit(newFileName)) {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT);"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new EditFileCommand(oldFileName, moduleCode, categoryName, taskDescription, newFileName);"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Miscellaneous Commands */"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to open file(s)."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to open file(s)"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareOpenFileCommand(String parameters)"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidPrefixException, InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d OpenFileCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, TASK_PREFIX);"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileName \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new OpenFileCommand(moduleCode, categoryName, taskDescription, fileName);"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the priority is between 0 and 100 inclusive."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority given by the user"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if the priority is within range, or \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isPriorityWithinRange(int priority) {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return priority \u003e\u003d 0 \u0026\u0026 priority \u003c\u003d 100;"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses a string as a priority."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param priorityString"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The string representing the priority"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The numeric priority of the string"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidPriorityException"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the priority is invalid as it is not within the expected range"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int parsePriority(String priorityString) throws InvalidPriorityException {"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int priorityToSet \u003d Integer.parseInt(priorityString);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!isPriorityWithinRange(priorityToSet)) {"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidPriorityException();"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return priorityToSet;"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Validate the parameters given by the user for the respective command."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The matcher to match for attributes and check for validity"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameterPrefixes"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The prefixes used for the respective command"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidParameterException"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If an invalid parameter is found in the parameters or the parameters do not match the expected format"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicatePrefixException"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If a duplicate prefix is found in the parameters"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidPrefixException"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If an invalid prefix is found in the parameters"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void validateParameters(String parameters, Matcher matcher, String... parameterPrefixes)"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException, InvalidPrefixException {"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String prefix : parameterPrefixes) {"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (parameters.split(String.format(\" %s\", prefix)).length \u003e 2) {"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new DuplicatePrefixException();"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!matcher.group(INVALID_GROUP).trim().isEmpty()) {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidPrefixException();"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns any matched optional attributes that is to be used to prepare the respective command."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The matcher to find the optional attributes"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param groups"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the groups for the optional attributes"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of found optional attributes"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String[] getOptionalAttributes(Matcher matcher, String... groups) {"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // No need to find duplicate prefixes since already done so in validateParameters method"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] optionalAttributes  \u003d new String[groups.length];"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Arrays.fill(optionalAttributes, NONE);"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String group : groups) {"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            while (matcher.find()) {"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (!matcher.group(group).isEmpty()) {"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    optionalAttributes[i] \u003d matcher.group(group);"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            matcher.reset();"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return optionalAttributes;"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if there is anything to edit from the input given by the user."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param attributes"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The attributes to be edited"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there is nothing to edit, or \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isNothingToEdit(String... attributes) {"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String attribute : attributes) {"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!attribute.isEmpty()) {"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses the input as a confirmation status to a confirmation prompt for the user, and prepares the"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * corresponding command."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The input given by the user"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to be executed"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Command parseConfirmation(String userInput) {"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (userInput) {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"yes\":"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"y\":"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteConfirmationPrompt(ConfirmationStatus.CONFIRM);"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"no\":"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"n\":"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteConfirmationPrompt(ConfirmationStatus.ABORT);"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteConfirmationPrompt(ConfirmationStatus.WAIT);"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses the input as indices to prepare a command to utilise the parsed indices."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The input string given by the user"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to be executed"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Command parseIndices(String input) {"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d ListNumberPrompt.INDICES_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.terminatePrompt();"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_DELETE_INDICES);"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String indicesString \u003d matcher.group(\"indices\");"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] separatedIndicesString \u003d indicesString.split(WHITESPACES);"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Convert String array to Integer ArrayList and removing duplicates"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cInteger\u003e indices \u003d Stream.of(separatedIndicesString)"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(Integer::parseInt).distinct()"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Decrement each index by 1 due to 0-based indexing"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        IntStream.range(0, indices.size())"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .forEach(currentValue -\u003e indices.set(currentValue, indices.get(currentValue) - 1));"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new ListNumberPrompt(indices);"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidParameterException extends InvalidFormatException {"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidPrefixException extends InvalidFormatException {"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class DuplicatePrefixException extends InvalidFormatException {"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidPriorityException extends InvalidFormatException {"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 41,
      "wangqinNick": 30,
      "A11riseforme": 95,
      "iceclementi": 740
    }
  },
  {
    "path": "src/main/java/seedu/nuke/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public interface Tag {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void setTag(ArrayList\u003cString\u003e infos);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void removeTag(String tag);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void removeAllTags();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTag();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 6,
      "wangqinNick": 5,
      "A11riseforme": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Assignment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Assignment {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Lab.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Lab {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Lecture.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Lecture {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Tutorial.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Tutorial {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 2,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/ui/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.Ansi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.BLUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.GREEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.BLACK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.MAGENTA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.RED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.fusesource.jansi.Ansi.ansi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.DIVIDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EXIT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_LOGO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_WELCOME_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_WELCOME_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_MESSAGE \u003d BLUE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_RESPONSE \u003d GREEN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_DIVIDER \u003d BLACK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_LOGO \u003d MAGENTA;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_ALERT \u003d RED;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * display welcome message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void showWelcomeMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_WELCOME_1).reset());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_WELCOME_2).reset());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * display the exit message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static void showExitMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        System.out.println(ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_EXIT).reset());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * clear the screen."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void clearScreen() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.println(ansi().eraseScreen());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * display the logo."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void displayLogo() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ansi().reset();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.print(ansi().bold().fg(SYSTEM_COLOR_LOGO).a(MESSAGE_LOGO).reset());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * print a divider."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.println(ansi().bold().fg(SYSTEM_COLOR_DIVIDER).a(DIVIDER).reset());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 9,
      "wangqinNick": 52,
      "A11riseforme": 21
    }
  },
  {
    "path": "src/main/java/seedu/nuke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.ChangeDirectoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddCategoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddFileCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.editcommand.EditCategoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.editcommand.EditModuleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.editcommand.EditTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.editcommand.MarkAsDoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteTagCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListAllTasksDeadlineCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListCategoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListModuleTasksDeadlineCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.ListCreator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final ArrayList\u003cString\u003e commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructs the \u003ccode\u003eUI\u003c/code\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out \u003d new PrintStream(System.out);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(ChangeDirectoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(AddModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(AddCategoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(AddTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(AddTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(AddFileCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(EditCategoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(EditTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(MarkAsDoneCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(DeleteModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(DeleteCategoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(DeleteTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(DeleteTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(ListCategoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(ListTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(ListModuleTasksDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(ListAllTasksDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        commands.add(ExitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows the directory path to the user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showDirectoryPath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out.println(String.format(\"%s : \", DirectoryTraverser.getFullPath()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Reads the user input from the command line."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The input given by the user"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        showDirectoryPath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows the result message after the command given by the user input is executed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Also, shows a list to the user if requested."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result after executing a command given by the user input"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showResult(CommandResult result) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out.println(result.getFeedbackToUser().replace(\"\\n\", LS));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        if ((result.getDirectoryLevel() \u003d\u003d DirectoryLevel.NONE) \u0026\u0026 result.getHelpGuides() \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        if (result.getHelpGuides() !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            printShownList(result.getHelpGuides());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String listTableToShow;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (result.getDirectoryLevel()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cModule\u003e moduleList \u003d result.getShownList().stream()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Module.class::cast)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listTableToShow \u003d ListCreator.createModuleListTable(moduleList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cCategory\u003e categoryList \u003d result.getShownList().stream()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Category.class::cast)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listTableToShow \u003d ListCreator.createCategoryListTable(categoryList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d result.getShownList().stream()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Task.class::cast)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listTableToShow \u003d ListCreator.createTaskListTable(taskList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTaskFile\u003e fileList \u003d result.getShownList().stream()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(TaskFile.class::cast)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listTableToShow \u003d ListCreator.createFileListTable(fileList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out.println(listTableToShow);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows a message to the user."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param message Message to be shown"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showSystemMessage(String message) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out.println(message.replace(\"\\n\", LS));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * print the Strings in an ArrayList to the user."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param shownList an ArrayList of Strings to be shown to the user"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void printShownList(ArrayList\u003cString\u003e shownList) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        final String divider \u003d String.format(\"%s%s%s\", \"+\", \"-\".repeat(100), \"+\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (String str : shownList) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(str);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        System.out.println(divider + \"\\n\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 58,
      "wangqinNick": 1,
      "A11riseforme": 9,
      "iceclementi": 105
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDate Time\u003c/h3\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eDate Time\u003c/b\u003e contains both \u003ci\u003edate\u003c/i\u003e and \u003ci\u003etime\u003c/i\u003e information. This is used to hold the \u003ci\u003edatetime\u003c/i\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * information of the task\u0027s deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d \"\u003cdate dd/mm/yyyy\u003e \u003ctime hh:mma\u003e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"dd/MM/yyyy\"; // Date format to be displayed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String TIME_FORMAT \u003d \"hh:mma\"; // Time format to be displayed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String DATE_SORT_FORMAT \u003d \"yyyyMMdd\"; // Date format for sorting"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String TIME_SORT_FORMAT \u003d \"HHmm\"; // Time format for sorting"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value DATE_FORMAT}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003etime\u003c/code\u003e as a string with the format {@value TIME_FORMAT}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003etime\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(TIME_FORMAT));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value DATE_SORT_FORMAT}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * This format is primarily used for sorting tasks by date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDateInSortFormat() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return hasDate() ? date.format(DateTimeFormatter.ofPattern(DATE_SORT_FORMAT)) : \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value TIME_SORT_FORMAT}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * This format is primarily used for sorting tasks by time."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getTimeInSortFormat() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return hasTime() ? time.format(DateTimeFormatter.ofPattern(TIME_SORT_FORMAT)) : \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public String getDateTimeSortFormat() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return getDateInSortFormat() + getTimeInSortFormat();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is the same as the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is the same as the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isOn(LocalDate date) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isEqual(date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is before the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is before the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isBefore(LocalDate date) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isBefore(date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is after the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is after the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isAfter(LocalDate date) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isAfter(date);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003etime\u003c/code\u003e attribute is \u003cb\u003enot\u003c/b\u003e \u003ccode\u003eNULL\u003c/code\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003etime\u003c/code\u003e is not \u003ccode\u003eNULL\u003c/code\u003e, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean hasTime() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private boolean hasDate() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return date !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e is the same as the current day\u0027s \u003ci\u003edate\u003c/i\u003e."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003ccode\u003edate\u003c/code\u003e is the same as the current day\u0027s \u003ci\u003edate\u003c/i\u003e, and"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isToday() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e is the same as the next day\u0027s \u003ci\u003edate\u003c/i\u003e."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003ccode\u003edate\u003c/code\u003e is the same as the next day\u0027s \u003ci\u003edate\u003c/i\u003e, and"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isTomorrow() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.minusDays(1).isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the current \u003ci\u003edate\u003c/i\u003e and \u003ci\u003etime\u003c/i\u003e have passed the \u003ccode\u003edate\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e i.e. The \u003cb\u003eDate Time\u003c/b\u003e has expired."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003cb\u003eDate Time\u003c/b\u003e has expired, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isDue() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return LocalDate.now().isAfter(date)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                || (hasTime() \u0026\u0026 isToday() \u0026\u0026 LocalTime.now().isAfter(time));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the \u003ccode\u003edate\u003c/code\u003e into a string format."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String dateToString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isToday()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return \"today\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (isTomorrow()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return \"tomorrow\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getDate();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the \u003ccode\u003etime\u003c/code\u003e into a string format."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * If \u003ccode\u003etime\u003c/code\u003e is \u003ccode\u003eNULL\u003c/code\u003e, an empty string is returned instead."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003etime\u003c/code\u003e in a string format."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String timeToString() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return hasTime() ? getTime() : \"\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts \u003cb\u003eDate Time\u003c/b\u003e into its string representation, containing its \u003ccode\u003edate\u003c/code\u003e and"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003etime\u003c/code\u003e information, and an indicator to show if the datetime has already passed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The string representation of \u003cb\u003eDate Time\u003c/b\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toShow() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String toShow \u003d dateToString() + \" \" + timeToString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return (isDue()) ? toShow + \" [OVER!!]\" : toShow;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts \u003cb\u003eDate Time\u003c/b\u003e into its string representation, containing its \u003ccode\u003edate\u003c/code\u003e and"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003etime\u003c/code\u003e information, and an indicator to show if the datetime has already passed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The string representation of \u003cb\u003eDate Time\u003c/b\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getDate() + \" \" + timeToString();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 11,
      "A11riseforme": 4,
      "iceclementi": 178
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/DateTimeFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDate Time Format\u003c/h3\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * The \u003cb\u003eDate Time Format\u003c/b\u003e formats and converts strings into various \u003ci\u003edatetime\u003c/i\u003e objects, specifically"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ccode\u003eDateTime\u003c/code\u003e, \u003ccode\u003eLocalDate\u003c/code\u003e and \u003ccode\u003eLocalTime\u003c/code\u003e objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DateTimeFormat {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* An exhaustive list of date formats accepted by the Nuke program */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String[] ALL_DATE_FORMATS \u003d {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        \"dd-MM-yyyy\", \"dd/MM[/yyyy]\", \"d/MM[/yyyy]\", \"dd/M[/yyyy]\", \"d/M[/yyyy]\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"dd/MM[/yy]\", \"d/MM[/yy]\", \"dd/M[/yy]\", \"d/M[/yy]\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"dd-MM[-yyyy]\", \"d-MM[-yyyy]\", \"dd-M[-yyyy]\", \"d-M[-yyyy]\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"dd-MM[-yy]\", \"d-MM[-yy]\", \"dd-M[-yy]\", \"d-M[-yy]\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"ddMMyyyy\", \"ddMMyy\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* An exhaustive list of time formats accepted by the Nuke program */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String[] ALL_TIME_FORMATS \u003d {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        \"H:mm\", \"h:mma\", \"H:mma\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"h.mma\", \"H.mma\", \"H.mm\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"hmma\", \"Hmma\", \"Hmm\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"ha\", \"Ha\", \"H\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int CURRENT_YEAR \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003edatetime\u003c/code\u003e string into a \u003ccode\u003eDateTime\u003c/code\u003e object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ci\u003etime\u003c/i\u003e attribute must be present in the string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e The \u003ci\u003edate\u003c/i\u003e attribute is \u003cu\u003eoptional\u003c/u\u003e and is set to the current date if absent."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e The attributes must be in accepted formats for successful conversion."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param datetime The string to be converted into its corresponding \u003ccode\u003eDateTime\u003c/code\u003e object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eDateTime\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateTimeException If more than 2 attributes are present in the string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateException     If the \u003ci\u003edate\u003c/i\u003e attribute in the string is invalid"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidTimeException     If the \u003ci\u003etime\u003c/i\u003e attribute in the string is invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static DateTime stringToDateTime(String datetime)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidDateTimeException, InvalidDateException, InvalidTimeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (datetime.isBlank()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] dateTimeData \u003d datetime.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (dateTimeData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String time \u003d dateTimeData[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DateTime(date, stringToTime(time));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (dateTimeData.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String date \u003d dateTimeData[0].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String time \u003d dateTimeData[1].trim().toUpperCase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DateTime(stringToDate(date), stringToTime(time));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003edate\u003c/code\u003e string into a \u003ccode\u003eLocalDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ccode\u003edate\u003c/code\u003e string must be in either an accepted \u003ci\u003edate\u003c/i\u003e format or an accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ci\u003edate specifier\u003c/i\u003e \u003ci\u003e\u003csmall\u003e(See Below)\u003c/small\u003e\u003c/i\u003e."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eAccepted Date Specifiers\u003c/b\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003etoday\u003c/i\u003e or \u003ci\u003etdy\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003eyesterday\u003c/i\u003e or \u003ci\u003eyst\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003etomorrow\u003c/i\u003e or \u003ci\u003etmr\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The string to be converted into its corresponding \u003ccode\u003eLocalDate\u003c/code\u003e object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eLocalDate\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateException If the \u003ccode\u003edate\u003c/code\u003e string is an invalid \u003ci\u003edate\u003c/i\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static LocalDate stringToDate(String date) throws InvalidDateException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Checks if matches date specifiers first, before checking if matches date formats"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (date.toLowerCase()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"today\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tdy\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"yesterday\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"yst\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now().minusDays(1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tomorrow\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tmr\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (String formatPattern : ALL_DATE_FORMATS) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    DateTimeFormatter format \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            .appendPattern(formatPattern)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            .parseDefaulting(ChronoField.YEAR_OF_ERA, CURRENT_YEAR)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            .toFormatter();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return LocalDate.parse(date, format);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    // Ignore invalid formats"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Throws exception if fails to parse all date formats"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003etime\u003c/code\u003e string into a \u003ccode\u003eLocalTime\u003c/code\u003e object."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ccode\u003etime\u003c/code\u003e string must be in either an accepted \u003ci\u003etime\u003c/i\u003e format or \u003ccode\u003eNULL\u003c/code\u003e."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e In the case of a \u003ccode\u003eNULL\u003c/code\u003e \u003ccode\u003etime\u003c/code\u003e string, \u003ccode\u003eNULL\u003c/code\u003e will be returned instead."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param time The string to be converted into its corresponding \u003ccode\u003eLocalTime\u003c/code\u003e object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eLocalTime\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidTimeException If the \u003ccode\u003edate\u003c/code\u003e string is an invalid \u003ci\u003etime\u003c/i\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static LocalTime stringToTime(String time) throws InvalidTimeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String format : ALL_TIME_FORMATS) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return LocalTime.parse(time, DateTimeFormatter.ofPattern(format));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Ignore invalid formats"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Throws exception if fails to parse all time formats"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new InvalidTimeException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Signals that the \u003ci\u003edatetime\u003c/i\u003e string given is in an invalid format."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static class InvalidDateTimeException extends InvalidFormatException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Signals that the \u003ci\u003edate\u003c/i\u003e string given is in an invalid format."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidDateException extends InvalidDateTimeException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Signals that the \u003ci\u003etime\u003c/i\u003e string given is in an invalid format."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidTimeException extends InvalidDateTimeException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 3,
      "A11riseforme": 13,
      "iceclementi": 155
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/DummyModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * This class is solely for loading bunch of modules from a json file"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * and to be converted into objects of DummyModules, for users to enrol into."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class DummyModule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 28
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/ExceptionMessage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ExceptionMessage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_MODULE_CODE \u003d \"ALERT! Module code is missing.\\n\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EXCESS_PARAMETERS \u003d \"ALERT! Too many parameters.\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INPUT_LENGTH_EXCEEDED \u003d \"ALERT! Enter less than 100 characters.\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUT \u003d \"ALERT! Enter a command.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"ALERT! Unrecognised command.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"ALERT! Module is not found.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_PROVIDED \u003d \"ALERT! The module is not provided by NUS currently.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"ALERT! The module already exists.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_CATEGORY_NOT_FOUND \u003d \"Alert! Category is not found.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY \u003d \"ALERT! The category already exists.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_FOUND \u003d \"ALERT! Task is not found.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"ALERT! The task already exists.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_TASK_FILE_NOT_FOUND \u003d \"ALERT! File is not found.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK_FILE \u003d \"ALERT! The file already exists.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETERS \u003d \"Alert! Some parameters are missing.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_PRIORITY \u003d \"Alert! Priority should be a number between 0 and 100.\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_DEADLINE_FORMAT \u003d \"Alert! Datetime format is invalid.\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DELETE_ERROR \u003d \"ALERT! There was an error in the deletion.\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_LIST_NUMBER_NOT_FOUND \u003d \"List number not found! Deletion is aborted.\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_FAILED_DIRECTORY_TRAVERSAL \u003d \"Unable to traverse further.\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DIRECTORY_NOT_FOUND \u003d \"Alert! The next directory could not be found.\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INCORRECT_DIRECTORY_LEVEL \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Alert! Incorrect directory level to execute command.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Either move to the appropriate directory level, or enter the full directory path.\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETERS \u003d \"Alert! Invalid or missing parameters found!\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX \u003d \"Alert! Invalid prefix(es) found!\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PREFIX_FOUND \u003d \"Alert! There are duplicate prefix(es).\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_FILE_IO_EXCEPTION \u003d \"Alert! There was an error in retrieving your file.\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_FILE_SYSTEM_EXCEPTION \u003d \"Alert! There was an error in retrieving your file. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Please check your file is not currently running.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_PATH \u003d \"Alert! Invalid file path.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_ADD_FILE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Alert! File does not exists. Please check file path again.\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_FILE_SECURITY_EXCEPTION \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Alert! File access was denied by device\u0027s security program.\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DELETE_FILE_ERROR \u003d \"Alert! There was an error in deleting your file.\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"Alert! File does not exists.\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 57
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/ListCreator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A utility class to create a sorted list table from an Array List."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListCreator {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String LIST_DIVIDER \u003d String.format(\"%s%s%s\\n\", \"+\", \"-\".repeat(98), \"+\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sorts modules in a list by their module codes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toSort"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of modules to be sorted"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static void sortModuleList(ArrayList\u003cModule\u003e toSort) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cModule\u003e sortByModule \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(Module::getModuleCode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toSort.sort(sortByModule);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sorts categories in a list by their names."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toSort"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of categories to be sorted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static void sortCategoryList(ArrayList\u003cCategory\u003e toSort) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cCategory\u003e sortByModule \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(category -\u003e category.getParent().getModuleCode());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cCategory\u003e sortByCategory \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(Category::getCategoryName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toSort.sort(sortByModule.thenComparing(sortByCategory));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sorts tasks in a list by their description."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toSort"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of tasks to be sorted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static void sortTaskList(ArrayList\u003cTask\u003e toSort) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTask\u003e sortByModule \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(task -\u003e task.getParent().getParent().getModuleCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTask\u003e sortByCategory \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(task -\u003e task.getParent().getCategoryName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTask\u003e sortByTask \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(Task::getDescription);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toSort.sort(sortByModule.thenComparing(sortByCategory).thenComparing(sortByTask));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sorts files in a list by their name."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toSort"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of files to be sorted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static void sortFileList(ArrayList\u003cTaskFile\u003e toSort) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTaskFile\u003e sortByModule \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(file -\u003e file.getParent().getParent().getParent().getModuleCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTaskFile\u003e sortByCategory \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(file -\u003e file.getParent().getParent().getCategoryName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTaskFile\u003e sortByTask \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(file -\u003e file.getParent().getDescription());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTaskFile\u003e sortByFile \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(TaskFile::getFileName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toSort.sort(sortByModule.thenComparing(sortByCategory).thenComparing(sortByTask).thenComparing(sortByFile));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a sorted module list table from a list of modules."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleList"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of modules to be converted into a table"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The sorted module list table"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String createModuleListTable(ArrayList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        sortModuleList(moduleList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder moduleListTable \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleListTable.append(createModuleListTableHeader());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleTitle \u003d (module.getTitle() !\u003d null) ? module.getTitle() : \"-NIL-\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            moduleListTable.append(String.format(\"%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(Integer.toString(id++), 4), 4), SEPARATOR,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(moduleCode, 16), 16), SEPARATOR,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(moduleTitle, 78), 78)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleListTable.append(String.format(\"Total modules: %d\\n\", moduleList.size()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleListTable.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the header of the module list table."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The header of the module list table"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String createModuleListTableHeader() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder header \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(String.format(\"%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"NO\", 4), SEPARATOR,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"MODULE CODE\", 16), SEPARATOR,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"MODULE TITLE\", 78)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return header.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a sorted category list table from a list of categories."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryList"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of categories to be converted into a table"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The sorted category list table"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String createCategoryListTable(ArrayList\u003cCategory\u003e categoryList) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        sortCategoryList(categoryList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder categoryListTable \u003d new StringBuilder();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryListTable.append(createCategoryListTableHeader());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categoryList) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleCode \u003d category.getParent().getModuleCode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String categoryName \u003d category.getCategoryName();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String priority \u003d String.valueOf(category.getCategoryPriority());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            categoryListTable.append(String.format(\"%s%s%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(Integer.toString(id++), 4), 4), SEPARATOR,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(moduleCode, 16), 16), SEPARATOR,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(categoryName, 72), 72), SEPARATOR,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(priority, 5), 5)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryListTable.append(String.format(\"Total categories: %d\\n\", categoryList.size()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryListTable.toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the header of the category list table."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The header of the category list table"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String createCategoryListTableHeader() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder header \u003d new StringBuilder();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(String.format(\"%s%s%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"NO\", 4), SEPARATOR,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"MODULE\", 16), SEPARATOR,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"CATEGORY\", 72), SEPARATOR,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"PTY\", 5)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return header.toString();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a sorted task list table from a list of tasks."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of tasks to be converted into a table"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The sorted task list table"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static String createTaskListTable(ArrayList\u003cTask\u003e taskList, boolean isSorted) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder taskListTable \u003d new StringBuilder();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskListTable.append(createTaskListTableHeader());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleCode \u003d task.getParent().getParent().getModuleCode();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String categoryName \u003d task.getParent().getCategoryName();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String deadline \u003d (task.getDeadline() !\u003d null) ? task.getDeadline().toShow() : \"-NIL-\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String priority \u003d String.valueOf(task.getPriority());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            String statusIcon \u003d task.getStatusIcon();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            taskListTable.append(String.format(\"%s%s%s%s%s%s%s%s%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(Integer.toString(id++), 4), 4), SEPARATOR,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(moduleCode, 10), 10), SEPARATOR,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    centraliseText(fitText(categoryName, 16), 16), SEPARATOR,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(taskDescription, 24), 24), SEPARATOR,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(deadline, 30), 30), SEPARATOR,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    centraliseText(fitText(priority, 5), 5), SEPARATOR,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    centraliseText(fitText(statusIcon, 6), 5)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskListTable.append(String.format(\"Total tasks: %d\\n\", taskList.size()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return taskListTable.toString();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static String createTaskListTable(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        sortTaskList(taskList);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return createTaskListTable(taskList, true);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the header of the task list table."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The header of the task list table"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String createTaskListTableHeader() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder header \u003d new StringBuilder();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        header.append(String.format(\"%s%s%s%s%s%s%s%s%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"NO\", 4), SEPARATOR,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"MODULE\", 10), SEPARATOR,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                centraliseText(\"CATEGORY\", 16), SEPARATOR,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"TASK\", 24), SEPARATOR,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"DEADLINE\", 30), SEPARATOR,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                centraliseText(\"PTY\", 5), SEPARATOR,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                centraliseText(\"DONE\", 6)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return header.toString();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a sorted file list table from a list of files."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileList"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of files to be converted into a table"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The sorted file list table"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String createFileListTable(ArrayList\u003cTaskFile\u003e fileList) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        sortFileList(fileList);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder fileListTable \u003d new StringBuilder();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileListTable.append(createFileListTableHeader());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleCode \u003d file.getParent().getParent().getParent().getModuleCode();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String categoryName \u003d file.getParent().getParent().getCategoryName();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String taskDescription \u003d file.getParent().getDescription();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String fileName \u003d file.getFileName();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileListTable.append(String.format(\"%s%s%s%s%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(Integer.toString(id++), 4), 4), SEPARATOR,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(moduleCode, 16), 16), SEPARATOR,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(categoryName, 24), 24), SEPARATOR,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(taskDescription, 28), 28), SEPARATOR,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(fileName, 24), 24)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileListTable.append(String.format(\"Total files: %d\\n\", fileList.size()));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return fileListTable.toString();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the header of the task list table."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The header of the task list table"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String createFileListTableHeader() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder header \u003d new StringBuilder();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(String.format(\"%s%s%s%s%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"NO\", 4), SEPARATOR,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"MODULE\", 16), SEPARATOR,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"CATEGORY\", 24), SEPARATOR,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"TASK\", 28), SEPARATOR,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"FILE\", 24)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return header.toString();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Adds the specified number of spaces."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param numberOfSpaces"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The number of spaces to be added"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  A string containing the specified number of spaces"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String addSpaces(int numberOfSpaces) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return \" \".repeat(numberOfSpaces);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Centralises the given text in a segment of given length by padding with spaces before and after the text."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param text"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The text to be centralised"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param segmentLength"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The length of the segment in which the text is centralised"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The centralised text"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String centraliseText(String text, int segmentLength) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int numberOfLeftSpaces \u003d (segmentLength - text.length()) / 2;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int numberOfRightSpaces \u003d (segmentLength - text.length() + 1) / 2;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return addSpaces(numberOfLeftSpaces) + text + addSpaces(numberOfRightSpaces);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Fits the given text into a segment of given length, truncating the text with ellipses if the text exceeds"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * the segment length."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param text"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The text to be fitted"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param segmentLength"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The length of the segment in which the text is fitted"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The fitted text"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String fitText(String text, int segmentLength) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String ellipses \u003d \"...\";"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (text.length() \u003e segmentLength) ? (text.substring(0, segmentLength - 3) + ellipses) : text;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 6,
      "A11riseforme": 9,
      "iceclementi": 348
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.Ansi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color COLOR_ALERT \u003d Ansi.Color.RED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color COLOR_OUTPUT \u003d Ansi.Color.WHITE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color COLOR_ASK_CONFIRMATION \u003d Ansi.Color.BLUE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color COLOR_FRAME \u003d Ansi.Color.GREEN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_LOGO \u003d \"      ___          ___          ___          ___     \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"     /__/\\\\        /__/\\\\        /__/|        /  /\\\\    \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"     \\\\  \\\\:\\\\       \\\\  \\\\:\\\\      |  |:|       /  /:/_   \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"      \\\\  \\\\:\\\\       \\\\  \\\\:\\\\     |  |:|      /  /:/ /\\\\  \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"  _____\\\\__\\\\:\\\\  ___  \\\\  \\\\:\\\\  __|  |:|     /  /:/ /:/_ \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \" /__/::::::::\\\\/__/\\\\  \\\\__\\\\:\\\\/__/\\\\_|:|____/__/:/ /:/ /\\\\\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \" \\\\  \\\\:\\\\~~\\\\~~\\\\/\\\\  \\\\:\\\\ /  /:/\\\\  \\\\:\\\\/:::::/\\\\  \\\\:\\\\/:/ /:/\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"  \\\\  \\\\:\\\\  ~~~  \\\\  \\\\:\\\\  /:/  \\\\  \\\\::/~~~~  \\\\  \\\\::/ /:/ \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"   \\\\  \\\\:\\\\       \\\\  \\\\:\\\\/:/    \\\\  \\\\:\\\\       \\\\  \\\\:\\\\/:/  \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"    \\\\  \\\\:\\\\       \\\\  \\\\::/      \\\\  \\\\:\\\\       \\\\  \\\\::/   \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"     \\\\__\\\\/        \\\\__\\\\/        \\\\__\\\\/        \\\\__\\\\/    \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_WELCOME_1 \u003d \"Welcome to NUKE\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_WELCOME_2 \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_NO_TASK_IN_LIST \u003d \"There is no task in the list!\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageTaskSuccessfullyList(int taskCount) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"There are (is) %d task(s) in the list!\\n\", taskCount);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String DIVIDER \u003d \"-\".repeat(100);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_SHOW_LIST \u003d \"Here are what you are looking for...\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_MODULES_FOUND \u003d \"Sorry. No modules found.\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_CATEGORIES_FOUND \u003d \"Sorry. No categories found.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_TASKS_FOUND \u003d \"Sorry. No tasks found.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_FILES_FOUND \u003d \"Sorry. No files found.\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_GO_INTO_MODULE \u003d \"please go inside a Module!\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_HELP \u003d \"Here are valid commands and corresponding format:\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TAG_ADDED \u003d \"Tag added!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static String messageAddModuleSuccess(String moduleCode, String title) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! Module %s %s has been added.\\n\", moduleCode, title);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageAddCategorySuccess(String categoryName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! Category %s is created.\\n\", categoryName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageAddTaskSuccess(String taskDescription) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! Task %s is created.\\n\", taskDescription);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageAddFileSuccess(String fileName) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! File %s is added.\\n\", fileName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"SUCCESS!! Module(s) have been deleted.\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DELETE_CATEGORY_SUCCESS \u003d \"SUCCESS!! Category/Categories have been deleted.\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"SUCCESS!! Task(s) have been deleted.\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DELETE_FILE_SUCCESS \u003d \"SUCCESS!! Files(s) have been deleted.\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DELETE_ABORTED \u003d \"Deletion is aborted.\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of a module."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module to be deleted"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of the module"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteModule(Module toDelete) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"Confirm delete %s %s?\\n\", toDelete.getModuleCode(), toDelete.getTitle());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of multiple modules."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredModules"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of modules"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The indices of the modules to be deleted from the list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of modules"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteModule(ArrayList\u003cModule\u003e filteredModules,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                    ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder promptMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptMessage.append(\"Confirm delete these modules?\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String toDeleteModuleCode \u003d filteredModules.get(index).getModuleCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String toDeleteTitle \u003d filteredModules.get(index).getTitle();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            promptMessage.append(String.format(\"%s %s\\n\", toDeleteModuleCode, toDeleteTitle));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return promptMessage.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to prompt user to enter the indices of the modules to be deleted from the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredModules"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of modules to be deleted"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to prompt the user to enter the indices"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messagePromptDeleteModuleIndices(ArrayList\u003cDirectory\u003e filteredModules) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d filteredModules.stream()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(Module.class::cast)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return \"Multiple matching modules found.\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + ListCreator.createModuleListTable(modules)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\nEnter the list number(s) of the modules to delete.\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of a category."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category to be deleted"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of the category"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteCategory(Category toDelete) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"Confirm delete %s?\\n\", toDelete.getCategoryName());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of multiple categories."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredCategories"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of categories"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The indices of the categories to be deleted from the list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of categories"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteCategory(ArrayList\u003cCategory\u003e filteredCategories,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                      ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder promptMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptMessage.append(\"Confirm delete these categories?\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String toDeleteCategoryName \u003d filteredCategories.get(index).getCategoryName();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            promptMessage.append(String.format(\"%s\\n\", toDeleteCategoryName));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return promptMessage.toString();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to prompt user to enter the indices of the categories to be deleted from the list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredCategories"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of categories to be deleted"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to prompt the user to enter the indices"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messagePromptDeleteCategoryIndices(ArrayList\u003cDirectory\u003e filteredCategories) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e categories \u003d filteredCategories.stream()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(Category.class::cast)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return \"Multiple matching categories found.\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + ListCreator.createCategoryListTable(categories)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\nEnter the list number(s) of the categories to delete.\\n\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of a task."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be deleted"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of the task"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteTask(Task toDelete) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"Confirm delete %s?\\n\", toDelete.getDescription());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of multiple tasks."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredTasks"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of tasks"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The indices of the tasks to be deleted from the list"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of tasks"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteTask(ArrayList\u003cTask\u003e filteredTasks, ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder promptMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptMessage.append(\"Confirm delete these tasks?\\n\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String toDeleteTaskDescription \u003d filteredTasks.get(index).getDescription();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            promptMessage.append(String.format(\"%s\\n\", toDeleteTaskDescription));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return promptMessage.toString();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to prompt user to enter the indices of the tasks to be deleted from the list."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredTasks"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of tasks to be deleted"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to prompt the user to enter the indices"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messagePromptDeleteTaskIndices(ArrayList\u003cDirectory\u003e filteredTasks) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d filteredTasks.stream()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(Task.class::cast)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return \"Multiple matching tasks found.\\n\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + ListCreator.createTaskListTable(tasks)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\nEnter the list number(s) of the tasks to delete.\\n\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of a file."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file to be deleted"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of the file"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteFile(TaskFile toDelete) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"Confirm delete %s?\\n\", toDelete.getFileName());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of multiple files."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredFiles"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of files"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The indices of the files to be deleted from the list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of files"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteFile(ArrayList\u003cTaskFile\u003e filteredFiles,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "          ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder promptMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptMessage.append(\"Confirm delete these files?\\n\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String toDeleteFileName \u003d filteredFiles.get(index).getFileName();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            promptMessage.append(String.format(\"%s\\n\", toDeleteFileName));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return promptMessage.toString();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to prompt user to enter the indices of the files to be deleted from the list."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredFiles"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of files to be deleted"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to prompt the user to enter the indices"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messagePromptDeleteFileIndices(ArrayList\u003cDirectory\u003e filteredFiles) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e files \u003d filteredFiles.stream()"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(TaskFile.class::cast)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return \"Multiple matching files found.\\n\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + ListCreator.createFileListTable(files)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\nEnter the list number(s) of the tasks to delete.\\n\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_PROMPT_FORMAT \u003d \"Enter \u0027yes\u0027 to confirm or \u0027no\u0027 to abort.\\n\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_DELETE_INDICES \u003d \"Deletion aborted due to invalid index provided.\\n\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_ILLEGAL_DELETE \u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Attempting to delete the current or its parent\u0027s directory.\\nMove out of the directory first.\\n\";"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"SUCCESS!! Module has been updated.\\n\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EDIT_CATEGORY_SUCCESS \u003d \"SUCCESS!! Category has been updated.\\n\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"SUCCESS!! Task has been updated.\\n\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_EDIT \u003d \"There is nothing to edit.\\n\";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"SUCCESS!! Data has been reverted to last state.\\n\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_OPEN_FILE_SUCCESS \u003d \"SUCCESS!! The files are opening now...\\n\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 4,
      "wangqinNick": 15,
      "A11riseforme": 15,
      "iceclementi": 262
    }
  },
  {
    "path": "src/test/java/seedu/nuke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/nuke/commandtest/ListAllDeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.commandtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Nuke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListAllTasksDeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASK_IN_LIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * Junit test class to test ListAllTasksDeadlineCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class ListAllDeadlineTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testTasksCounting() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Nuke nuke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //    nuke \u003d new Nuke();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //    command \u003d new ListAllTasksDeadlineCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //} catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //    return;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Command command \u003d new ListAllTasksDeadlineCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        CommandResult result \u003d Executor.execute(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (result.getDirectoryLevel() \u003d\u003d DirectoryLevel.TASK) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(ModuleManager.countAllTasks(), result.getShownList().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(0, ModuleManager.countAllTasks());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Nuke nuke;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //    nuke \u003d new Nuke();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //} catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //    return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Command command \u003d new Parser().parseCommand(ListAllTasksDeadlineCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        CommandResult result \u003d Executor.execute(command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (ModuleManager.countAllTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(MESSAGE_NO_TASK_IN_LIST, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            //assertEquals(MESSAGE_NO_TASK_IN_LIST, new ListAllTasksDeadlineCommand().execute().getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 29,
      "A11riseforme": 2,
      "iceclementi": 28
    }
  },
  {
    "path": "src/test/java/seedu/nuke/commandtest/ListModuleDeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.commandtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Nuke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListModuleTasksDeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * Junit test class to test ListModuleTasksDeadlineCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class ListModuleDeadlineTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private Nuke nuke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * constructor of this class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ListModuleDeadlineTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //        //    nuke \u003d new Nuke();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //        //    command \u003d new ListModuleTasksDeadlineCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //        //} catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //        //    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //        //    return;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //        //}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testTasksCounting() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(0, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(0, 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 34,
      "iceclementi": 8
    }
  },
  {
    "path": "src/test/java/seedu/nuke/format/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.format;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTimeFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.ansi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.ui.TextUi.SYSTEM_COLOR_ALERT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    DateTime dateTime \u003d new DateTime(DateTimeFormat.stringToDate(\"08082020\"), DateTimeFormat.stringToTime(\"4:38PM\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    DateTimeTest() throws DateTimeFormat.InvalidTimeException, DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"08/08/2020\", dateTime.getDate());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getTime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"04:38PM\", dateTime.getTime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getDateInSortFormat() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"20200808\", dateTime.getDateInSortFormat());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getTimeInSortFormat() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"1638\", dateTime.getTimeInSortFormat());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isOn_onDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"8/8\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isOn(toCompare));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isOn_notOnDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"12-09-20\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isOn(toCompare));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isBefore_beforeDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"09/09\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isBefore(toCompare));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isBefore_notBeforeDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"3/6/1997\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isBefore(toCompare));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isAfter_afterDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"3/6/1997\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isAfter(toCompare));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isAfter_notAfterDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"09/09\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isAfter(toCompare));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime today \u003d new DateTime(LocalDate.now(), LocalTime.now());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(\"today \" + today.getTime()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                + \" [OVER!!]\", today.toShow());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime tomorrow \u003d new DateTime(LocalDate.now().plusDays(1), LocalTime.now());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"tomorrow \" + tomorrow.getTime(), tomorrow.toShow());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime yesterday \u003d new DateTime(LocalDate.now().minusDays(1), LocalTime.now());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(yesterday.getDate() + \" \" + yesterday.getTime()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                + \" [OVER!!]\", yesterday.toShow());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime weekAfter \u003d new DateTime(LocalDate.now().plusWeeks(1), LocalTime.now());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(weekAfter.getDate() + \" \" + weekAfter.getTime(), weekAfter.toShow());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime weekBefore \u003d new DateTime(LocalDate.now().minusWeeks(1), LocalTime.now());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(weekBefore.getDate() + \" \" + weekBefore.getTime()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                + \" [OVER!!]\", weekBefore.toShow());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 21,
      "iceclementi": 79
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lsm"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addm CS3235"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addm CS1111"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lst"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "cd CS3235"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "cd Assignment"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 1,
      "-": 18
    }
  }
]
