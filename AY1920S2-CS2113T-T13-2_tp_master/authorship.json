[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "group \u0027seedu.nuke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    //config the jar to Mavern library"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    implementation \u0027org.fusesource.jansi:jansi:1.18\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    mainClassName \u003d \"seedu.nuke.Nuke\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    archiveBaseName \u003d \"nuke\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 2,
      "A11riseforme": 4,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/50083580?s\u003d400\u0026u\u003d361572b20fcd6750428a1553c5388e5125b8ac13\u0026v\u003d4) | Wang Qin | [Github](https://github.com/wangqinNick) | [Portfolio](docs/team/wangqin.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yang Chenglong | [Github](https://github.com/A11riseforme) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hao Yun | [Github](https://github.com/HAOYUN49) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![](https://winaero.com/blog/wp-content/uploads/2019/09/Chrome-Incognito-Mode-Icon-256.png) | Clement Cheng | [iceclementi](https://github.com/iceclementi) | [Portfolio](docs/team/iceclementi.md)"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 1,
      "A11riseforme": 1,
      "iceclementi": 1,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/Nuke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.Ansi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.module.DummyModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.ui.TextUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.fusesource.jansi.Ansi.ansi;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.ui.TextUi.printDivider;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class Nuke {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private CommandResult commandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ModuleManager moduleManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public ArrayList\u003cDummyModule\u003e modules;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public Nuke() throws FileNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        //modules \u003d ModuleLoader.load(\"moduleList.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TextUi.clearScreen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TextUi.displayLogo();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        new Nuke().run();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        TextUi.showWelcomeMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String userCommandText \u003d ui.getInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Command command \u003d new Parser().parseInput(userCommandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                CommandResult result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                ui.showResult(result);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (Parser.InputLengthExceededException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                System.out.println(MESSAGE_INPUT_LENGTH_EXCEEDED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (Parser.EmptyInputException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                System.out.println(MESSAGE_EMPTY_INPUT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (Parser.InvalidCommandException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                System.out.println(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } while (!ExitCommand.isExit());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * initialize the taskManager system, execute command and save the list to the file"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param command the parsed Command object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return commandResult that contains the execute output information"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private CommandResult executeCommand(Command command) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            // supplies the data the command will operate on."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            // if there is no file to load or the file is empty, setData will initialize a new taskManager system"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            //command.setData(moduleManager);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            // Execute according to the command itself"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            // save the taskManager to a file"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            //moduleManager.getStorager().save(taskManager);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            //StorageFile.saveJson(taskManager);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            // the out layer exception handler"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 4,
      "wangqinNick": 50,
      "A11riseforme": 10,
      "iceclementi": 18,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/AddModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE_ADD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_ADD_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd Module Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to add a \u003cb\u003eModule\u003c/b\u003e into the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Module"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d \"addm \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eAdd Module Command\u003c/b\u003e to add a \u003cb\u003eModule\u003c/b\u003e into the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Module toAdd \u003d new Module(moduleCode, null, null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.add(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_ADD_MODULE_SUCCESS(toAdd.getModuleCode(), toAdd.getTitle()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE_ADD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 42
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/CheckDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.DataManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.ui.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class CheckDeadlineCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult execute(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        DataManager dataManager \u003d new DataManager(modules);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult execute(String moduleCode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 20
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute () ;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 9
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    construct the feedback to user String"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final boolean isShowTasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @parameter: Execute feedback to user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isShowTasks \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isShowTasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isShowTasks \u003d isShowTasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isShowTasks() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isShowTasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 15,
      "iceclementi": 15
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/DeleteModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delm\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d \"delm \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eDelete Module Command\u003c/b\u003e to delete a \u003cb\u003eModule\u003c/b\u003e with the \u003ccode\u003emodule code\u003c/code\u003e from the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module deletedModule \u003d ModuleManager.delete(moduleCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_MODULE_SUCCESS(deletedModule.getModuleCode(), deletedModule.getTitle()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 38
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/EditDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    edit the deadline of the task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class EditDeadlineCommand extends EditTaskCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editDeadline\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE_1 \u003d COMMAND_WORD + \"task description \"+\": Edit the deadline of a task.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE_2 \u003d \"      Example: \" + COMMAND_WORD+ \" read a book\" + \"YYYY-MM-DD hh:mm:ss\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DONE \u003d \"  Nice! I\u0027ve marked this task as done:  %s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * set the deadline"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param toEdit full command args string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditDeadlineCommand(String toEdit) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(toEdit);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // todo find the target task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final Task toEdit \u003d getTargetTask();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        // todo set the description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        toEdit.setDeadline(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE, toEdit.getDescription()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 32
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/EditTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    edit-type command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class EditTaskCommand extends TaskCommand{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected String taskDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * set the deadline of a task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param taskDescription full command args string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public EditTaskCommand(String taskDescription) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 20
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_FAREWELL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ExitCommand extends TaskCommand{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE_1 \u003d COMMAND_WORD + \": Exit the program.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_USAGE_2 \u003d \"    Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static boolean isExit; // To check if user requests to exit the program"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eExit Command\u003c/b\u003e to exit the \u003cb\u003eNuke\u003c/b\u003e program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(MESSAGE_FAREWELL);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the user has requested to exit the program (after confirmation if necessary)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if an exit is requested, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static boolean isExit () {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isExit; // Returns true if command is exit command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 20,
      "iceclementi": 17
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eInvalid Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e that is determined to be invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final String message; // Message to be shown to the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public InvalidCommand(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eInvalid Command\u003c/b\u003e to show the \u003ccode\u003emessage\u003c/code\u003e to the user due to an \u003ci\u003einvalid"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * command\u003c/i\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 26
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_TASKS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d \"list\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_TASKS, true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 13
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * module level command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 11
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * task level command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class TaskCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected TaskManager taskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public TaskCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public TaskCommand(int targetIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Extracts the the target person in the last shown list from the given arguments."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    protected Task getTargetTask() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return taskManager.getTaskList().get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 40
    }
  },
  {
    "path": "src/main/java/seedu/nuke/common/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String YES_ICON \u003d \"[Y]\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String NO_ICON \u003d \"[N]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/DataManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Nuke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * the management system"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class DataManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public DataManager(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for(Module module: modules) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 15,
      "wangqinNick": 8
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ModuleLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.NotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.module.DummyModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * This class is to load all the modules scraping from the nusmods,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class ModuleLoader {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static ArrayList\u003cDummyModule\u003e load(String dataFileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ArrayList\u003cDummyModule\u003e moduleList \u003d extractModules(jsonStr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String loadJsonStringFromFile(String dataFileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            File f \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            jsonStr \u003d s.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            throw new FileNotFoundException(dataFileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return jsonStr;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static ArrayList\u003cDummyModule\u003e extractModules(String jsonStr) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        Type listType \u003d new TypeToken\u003cArrayList\u003cDummyModule\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return gson.fromJson(jsonStr, listType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 45
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ModuleManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.exception.ModuleNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleManager implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return all modules"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static List\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    //public Module getAModule(String moduleCode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Checks if the list contains an equivalent task as the given description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param toCheck the task to-check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return true if the task exists"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        for (Module p : modules) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (p.isSameModule(toCheck)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Add a module to the module List."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toAdd the module to add"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void add(Module toAdd) throws DuplicateModuleException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //check duplicate"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (ModuleManager.contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            modules.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Clears all tasks in list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        modules.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Remove a module to the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete the task to remove"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @throws ModuleNotFoundException if the to-remove module does not exist"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void delete(Module toDelete) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isModuleFoundAndDeleted \u003d modules.remove(toDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!isModuleFoundAndDeleted) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a \u003cb\u003eModule\u003c/b\u003e with the specified \u003ccode\u003emodule code\u003c/code\u003e in the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode    The module code of the \u003cb\u003eModule\u003c/b\u003e to be deleted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException  If the module with the specified module code is not found in the \u003cb\u003eModule List\u003c/b\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Module delete(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (module.getModuleCode().toUpperCase().equals(moduleCode)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                modules.remove(module);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void CheckDeadline(String moduleCode) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return modules.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the next-to-add task index"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public int getNextTaskIndex(){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return modules.size();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class ModuleNotFoundException extends DataNotFoundException {}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class DuplicateModuleException extends DuplicateDataException {}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 8,
      "wangqinNick": 67,
      "iceclementi": 35
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Spliterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * every module has a task manager to manage tasks within module"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    ArrayList\u003cTask\u003e allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Constructs empty task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public TaskManager() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * todo add check same function"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Checks if the list contains an equivalent task as the given description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param toCheck the task to-check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return true if the task exists"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the task list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * clears all tasks from the task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * call by clear function"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        allTasks.clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * return total number of tasks in the task list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public int countTotalTasks() {return allTasks.size();}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * compare this task with other task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param other target task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return true if tasks are equal"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                || (other instanceof TaskManager // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                \u0026\u0026 this.allTasks.equals(((TaskManager) other).allTasks));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 5,
      "wangqinNick": 61
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/DataNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DataNotFoundException extends Exception {}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 3
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/DuplicateDataException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DuplicateDataException extends Exception {}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 3
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/FileNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class FileNotFoundException extends NotFoundException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public FileNotFoundException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/InvalidFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class InvalidFormatException extends Exception {}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 3
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/ModuleNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleNotFoundException extends NotFoundException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ModuleNotFoundException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/NotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class NotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public NotFoundException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/NukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * The parent exception class that handles the general exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * @author A11riseforme"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class NukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public NukeException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor with one argument as the error message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param errorMsg the message to be shown when exception is raised."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public NukeException(String errorMsg) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 26
    }
  },
  {
    "path": "src/main/java/seedu/nuke/format/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.format;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDate Time\u003c/h3\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eDate Time\u003c/b\u003e contains both \u003ci\u003edate\u003c/i\u003e and \u003ci\u003etime\u003c/i\u003e information. This is used to hold the \u003ci\u003edatetime\u003c/i\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * information of the task\u0027s deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d \"\u003cdate dd/mm/yyyy\u003e \u003ctime hh:mma\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"dd/MM/yyyy\"; // Date format to be displayed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String TIME_FORMAT \u003d \"hh:mma\"; // Time format to be displayed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String DATE_SORT_FORMAT \u003d \"yyyyMMdd\"; // Date format for sorting"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String TIME_SORT_FORMAT \u003d \"HHmm\"; // Time format for sorting"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value DATE_FORMAT}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003etime\u003c/code\u003e as a string with the format {@value TIME_FORMAT}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003etime\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(TIME_FORMAT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value DATE_SORT_FORMAT}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * This format is primarily used for sorting tasks by date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDateInSortFormat() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(DATE_SORT_FORMAT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value TIME_SORT_FORMAT}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * This format is primarily used for sorting tasks by time."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getTimeInSortFormat() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(TIME_SORT_FORMAT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is the same as the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is the same as the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isOn(LocalDate date) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isEqual(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is before the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is before the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isBefore(LocalDate date) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isBefore(date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is after the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is after the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isAfter(LocalDate date) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isAfter(date);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003etime\u003c/code\u003e attribute is \u003cb\u003enot\u003c/b\u003e \u003ccode\u003eNULL\u003c/code\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003etime\u003c/code\u003e is not \u003ccode\u003eNULL\u003c/code\u003e, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean hasTime() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e is the same as the current day\u0027s \u003ci\u003edate\u003c/i\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003ccode\u003edate\u003c/code\u003e is the same as the current day\u0027s \u003ci\u003edate\u003c/i\u003e, and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isToday() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e is the same as the next day\u0027s \u003ci\u003edate\u003c/i\u003e."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003ccode\u003edate\u003c/code\u003e is the same as the next day\u0027s \u003ci\u003edate\u003c/i\u003e, and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isTomorrow() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.minusDays(1).isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the current \u003ci\u003edate\u003c/i\u003e and \u003ci\u003etime\u003c/i\u003e have passed the \u003ccode\u003edate\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e i.e. The \u003cb\u003eDate Time\u003c/b\u003e has expired."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003cb\u003eDate Time\u003c/b\u003e has expired, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isDue() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return LocalDate.now().isAfter(date) ||"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                (hasTime() \u0026\u0026 isToday() \u0026\u0026 LocalTime.now().isAfter(time));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the \u003ccode\u003edate\u003c/code\u003e into a string format."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String dateToString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isToday()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return \"today\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (isTomorrow()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return \"tomorrow\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getDate();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the \u003ccode\u003etime\u003c/code\u003e into a string format."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * If \u003ccode\u003etime\u003c/code\u003e is \u003ccode\u003eNULL\u003c/code\u003e, an empty string is returned instead."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003etime\u003c/code\u003e in a string format."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String timeToString() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return hasTime() ? getTime() : \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts \u003cb\u003eDate Time\u003c/b\u003e into its string representation, containing its \u003ccode\u003edate\u003c/code\u003e and"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003etime\u003c/code\u003e information."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The string representation of \u003cb\u003eDate Time\u003c/b\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String toShow \u003d dateToString() + \" \" + timeToString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (isDue()) ? toShow + \" [OVER!!]\" : toShow;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "iceclementi": 173
    }
  },
  {
    "path": "src/main/java/seedu/nuke/format/DateTimeFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.format;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDate Time Format\u003c/h3\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * The \u003cb\u003eDate Time Format\u003c/b\u003e formats and converts strings into various \u003ci\u003edatetime\u003c/i\u003e objects, specifically"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ccode\u003eDateTime\u003c/code\u003e, \u003ccode\u003eLocalDate\u003c/code\u003e and \u003ccode\u003eLocalTime\u003c/code\u003e objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DateTimeFormat {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* An exhaustive list of date formats accepted by the Nuke program */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String[] ALL_DATE_FORMATS \u003d {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            \"dd-MM-yyyy\",\"dd/MM[/yyyy]\", \"d/MM[/yyyy]\", \"dd/M[/yyyy]\", \"d/M[/yyyy]\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"dd/MM[/yy]\", \"d/MM[/yy]\", \"dd/M[/yy]\", \"d/M[/yy]\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"dd-MM[-yyyy]\", \"d-MM[-yyyy]\", \"dd-M[-yyyy]\", \"d-M[-yyyy]\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"dd-MM[-yy]\", \"d-MM[-yy]\", \"dd-M[-yy]\", \"d-M[-yy]\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"ddMMyyyy\", \"ddMMyy\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* An exhaustive list of time formats accepted by the Nuke program */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String[] ALL_TIME_FORMATS \u003d {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            \"H:mm\", \"h:mma\", \"H:mma\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"h.mma\", \"H.mma\", \"H.mm\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"hmma\", \"Hmma\", \"Hmm\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"ha\", \"Ha\", \"H\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int CURRENT_YEAR \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003edatetime\u003c/code\u003e string into a \u003ccode\u003eDateTime\u003c/code\u003e object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ci\u003etime\u003c/i\u003e attribute must be present in the string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e The \u003ci\u003edate\u003c/i\u003e attribute is \u003cu\u003eoptional\u003c/u\u003e and is set to the current date if absent."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e The attributes must be in accepted formats for successful conversion."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param datetime The string to be converted into its corresponding \u003ccode\u003eDateTime\u003c/code\u003e object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eDateTime\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateTimeException If more than 2 attributes are present in the string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateException If the \u003ci\u003edate\u003c/i\u003e attribute in the string is invalid"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidTimeException If the \u003ci\u003etime\u003c/i\u003e attribute in the string is invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static DateTime stringToDateTime(String datetime)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidDateTimeException, InvalidDateException, InvalidTimeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] dateTimeData \u003d datetime.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (dateTimeData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String time \u003d dateTimeData[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DateTime(date, stringToTime(time));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (dateTimeData.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String date \u003d dateTimeData[0].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String time \u003d dateTimeData[1].trim().toUpperCase();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DateTime(stringToDate(date), stringToTime(time));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003edate\u003c/code\u003e string into a \u003ccode\u003eLocalDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ccode\u003edate\u003c/code\u003e string must be in either an accepted \u003ci\u003edate\u003c/i\u003e format or an accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ci\u003edate specifier\u003c/i\u003e \u003ci\u003e\u003csmall\u003e(See Below)\u003c/small\u003e\u003c/i\u003e."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eAccepted Date Specifiers\u003c/b\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003etoday\u003c/i\u003e or \u003ci\u003etdy\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003eyesterday\u003c/i\u003e or \u003ci\u003eyst\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003etomorrow\u003c/i\u003e or \u003ci\u003etmr\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The string to be converted into its corresponding \u003ccode\u003eLocalDate\u003c/code\u003e object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eLocalDate\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateException If the \u003ccode\u003edate\u003c/code\u003e string is an invalid \u003ci\u003edate\u003c/i\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static LocalDate stringToDate(String date) throws InvalidDateException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Checks if matches date specifiers first, before checking if matches date formats"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (date.toLowerCase()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"today\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"tdy\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return LocalDate.now();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"yesterday\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"yst\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return LocalDate.now().minusDays(1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"tomorrow\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"tmr\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                for (String formatPattern : ALL_DATE_FORMATS) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        DateTimeFormatter format \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                .appendPattern(formatPattern)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                .parseDefaulting(ChronoField.YEAR_OF_ERA, CURRENT_YEAR)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                .toFormatter();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        return LocalDate.parse(date, format);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        // Ignore invalid formats"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Throws exception if fails to parse all date formats"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new InvalidDateException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003etime\u003c/code\u003e string into a \u003ccode\u003eLocalTime\u003c/code\u003e object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ccode\u003etime\u003c/code\u003e string must be in either an accepted \u003ci\u003etime\u003c/i\u003e format or \u003ccode\u003eNULL\u003c/code\u003e."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e In the case of a \u003ccode\u003eNULL\u003c/code\u003e \u003ccode\u003etime\u003c/code\u003e string, \u003ccode\u003eNULL\u003c/code\u003e will be returned instead."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param time The string to be converted into its corresponding \u003ccode\u003eLocalTime\u003c/code\u003e object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eLocalTime\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidTimeException If the \u003ccode\u003edate\u003c/code\u003e string is an invalid \u003ci\u003etime\u003c/i\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static LocalTime stringToTime(String time) throws InvalidTimeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String format : ALL_TIME_FORMATS) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return LocalTime.parse(time, DateTimeFormatter.ofPattern(format));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Ignore invalid formats"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Throws exception if fails to parse all time formats"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new InvalidTimeException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /** Signals that the \u003ci\u003edatetime\u003c/i\u003e string given is in an invalid format */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidDateTimeException extends InvalidFormatException {}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /** Signals that the \u003ci\u003edate\u003c/i\u003e string given is in an invalid format */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidDateException extends InvalidFormatException {}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /** Signals that the \u003ci\u003etime\u003c/i\u003e string given is in an invalid format */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidTimeException extends InvalidFormatException {}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 3,
      "iceclementi": 157
    }
  },
  {
    "path": "src/main/java/seedu/nuke/module/DummyModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * This class is solely for loading bunch of modules from a json file"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * and to be converted into objects of DummyModules, for users to enrol into."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class DummyModule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 13
    }
  },
  {
    "path": "src/main/java/seedu/nuke/module/Module.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CheckDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.ui.TextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * initialize a module with module code, title, and description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public Module(String moduleCode, String title, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public TaskManager getTaskManager() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return this.taskManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void checkDeadline() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cString\u003e deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskManager.getTaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Collections.sort(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for(Task task: tasks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            deadlines.add(\"Task: \" + task.getDescription()+\"  Deadline: \" + task.getDeadline().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.listDeadlines(deadlines);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean isSameModule(Module module) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.moduleCode.equals(module.moduleCode.toUpperCase());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 14,
      "wangqinNick": 14,
      "A11riseforme": 31,
      "iceclementi": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.EditDeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.InvalidFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_EXCESS_PARAMETERS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MISSING_MODULE_CODE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_SPLITTER \u003d \" \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final int COMMAND_WORD_INDEX \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int MAX_INPUT_LENGTH \u003d 100; // Maximum length of user input accepted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * split the user input, command word and the description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * commandWord stores the whole user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * commandWordFirstPart [0] stores the Command Word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * description stores additional information"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Command parseCommand(ModuleManager moduleManager, String userInput) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final String commandWord \u003d userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final String[] commandWordFirstPart \u003d commandWord.split(COMMAND_SPLITTER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        /* further split the user input, get the secondary part, the description */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final String commandWordDescription \u003d commandWord.substring(commandWordFirstPart[COMMAND_WORD_INDEX].length());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //operates according to different command word"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return getCommand(commandWordFirstPart);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param commandWordFirstPart, commandWordDescription the input String spited parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return parsed command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private Command getCommand(String[] commandWordFirstPart) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        switch (commandWordFirstPart[COMMAND_WORD_INDEX]){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //exit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case EditDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new EditDeadlineCommand(commandWordFirstPart[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses the input string read by the \u003cb\u003eUI\u003c/b\u003e and converts the string into a specific \u003cb\u003eCommand\u003c/b\u003e, which is"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * to be executed by the \u003cb\u003eNuke\u003c/b\u003e program."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The user input has to start with a certain keyword (i.e. \u003ci\u003ecommand word\u003c/i\u003e), otherwise an"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ci\u003eInvalid Command Exception\u003c/i\u003e will be thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input The user input read by the \u003cb\u003eUI.java\u003c/b\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003ecorresponding\u003c/b\u003e command to be executed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws EmptyInputException If user input is empty"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InputLengthExceededException If the length of the user input \u003e {@value MAX_INPUT_LENGTH}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidCommandException If the user input cannot be recognised as any of the  \u003cb\u003eCommand\u003c/b\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see seedu.nuke.ui.Ui"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Command parseInput(String input)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws EmptyInputException, InputLengthExceededException, InvalidCommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new EmptyInputException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (input.length() \u003e MAX_INPUT_LENGTH) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InputLengthExceededException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Splits user input into command word and rest of parameters (if any)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] separatedInput \u003d input.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String commandWord \u003d separatedInput[0].toLowerCase();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parameters \u003d (separatedInput.length \u003d\u003d 2) ? separatedInput[1].trim() : \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return createAddModuleCommand(parameters);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return createDeleteModuleCommand(parameters);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command createAddModuleCommand(String parameters) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleCode \u003d extractModuleCode(parameters);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new AddModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (MissingParameterException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new InvalidCommand(MESSAGE_MISSING_MODULE_CODE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ExcessParameterException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new InvalidCommand(MESSAGE_EXCESS_PARAMETERS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command createDeleteModuleCommand(String parameters) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleCode \u003d extractModuleCode(parameters);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (MissingParameterException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new InvalidCommand(MESSAGE_MISSING_MODULE_CODE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ExcessParameterException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new InvalidCommand(MESSAGE_EXCESS_PARAMETERS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if there is more than \u003cb\u003eone\u003c/b\u003e parameter in the input"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters The parameter(s) provided in the input"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if there is more than one parameter in the input, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean hasMultipleParameters(String parameters) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return parameters.contains(\" \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String extractModuleCode(String parameters) throws MissingParameterException, ExcessParameterException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new MissingParameterException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (hasMultipleParameters(parameters)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ExcessParameterException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return parameters;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /** Signals that the user has provided an empty input. */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class EmptyInputException extends InvalidFormatException {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /** Signals that the user has provided an input that is longer than {@value MAX_INPUT_LENGTH} characters. */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InputLengthExceededException extends InvalidFormatException {}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /** Signals that the user has provided an unrecognised command */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidCommandException extends InvalidFormatException {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /** Signals that the user has provided surplus parameters. */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class ExcessParameterException extends InvalidFormatException {}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /** Signals that the user has not provided sufficient parameters. */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class MissingParameterException extends InvalidFormatException {}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 39,
      "A11riseforme": 5,
      "iceclementi": 116
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Assignment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Assignment {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Lab.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Lab {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Lecture.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Lecture {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.format.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.common.Constants.NO_ICON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.common.Constants.YES_ICON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class Task implements Comparable{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected DateTime deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected ArrayList\u003cString\u003e files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Task(String description, DateTime dateTime, int priority) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.files \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.deadline \u003d dateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime getDeadline() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return (isDone ? YES_ICON : NO_ICON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public ArrayList\u003cString\u003e getFiles() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return files;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        StringBuilder printOut \u003d new StringBuilder(getStatusIcon() + \" \" + getDescription() + \" by \" + getDeadline());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        for (String file: files) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            printOut.append(\" \").append(file);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return printOut.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setDeadline(DateTime deadline) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void addFile(String filePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        files.add(filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public int compareTo(Object o) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return (deadline.toString().compareToIgnoreCase(task.deadline.toString()) \u003e 0) ? 1 : 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 7,
      "wangqinNick": 3,
      "A11riseforme": 44,
      "iceclementi": 12
    }
  },
  {
    "path": "src/main/java/seedu/nuke/task/Tutorial.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Tutorial {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 2,
      "A11riseforme": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/ui/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.Ansi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.fusesource.jansi.Ansi.ansi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_MESSAGE \u003d BLUE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_RESPONSE \u003d GREEN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_DIVIDER \u003d BLACK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_LOGO \u003d MAGENTA;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_ALERT \u003d RED;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    //display welcome message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void showWelcomeMessage (){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_WELCOME_1).reset());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_WELCOME_2).reset());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * clear the screen"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void clearScreen(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.println(ansi().eraseScreen());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * display the logo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void displayLogo() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ansi().reset();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.print(ansi().bold().fg(SYSTEM_COLOR_LOGO).a(MESSAGE_LOGO).reset());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * print a divider"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void printDivider(){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.println( ansi().bold().fg(SYSTEM_COLOR_DIVIDER).a(DIVIDER).reset() );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String DIVIDER \u003d \"---------------------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static void printCommandResult(CommandResult result) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println( ansi().bold().fg(SYSTEM_COLOR_RESPONSE).a(result.feedbackToUser).reset() );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static void listDeadlines(ArrayList\u003cString\u003e deadlines) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for(String deadline: deadlines) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            System.out.println( ansi().bold().fg(SYSTEM_COLOR_RESPONSE).a(deadline).reset() );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 15,
      "wangqinNick": 62,
      "A11riseforme": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /** Constructs the \u003ccode\u003eUI\u003c/code\u003e. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out \u003d new PrintStream(System.out);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Reads the user input from the command line."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The input given by the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows the result message after the command given by the user input is executed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Also, shows the \u003cb\u003eTask List\u003c/b\u003e or \u003ci\u003eSearch List\u003c/i\u003e if indicated in \u003ccode\u003eresult\u003c/code\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param result The result after executing a command given by the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showResult(CommandResult result) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out.println(result.getFeedbackToUser().replace(\"\\n\", LS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (result.isShowTasks()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            showSystemMessage(createModuleList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows a message to the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param message Message to be shown"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showSystemMessage(String message) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out.println(message.replace(\"\\n\", LS));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the list of all tasks created by the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The formatted list to be shown to the user"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String createModuleList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String DIVIDER \u003d String.format(\"%s%s%s\\n\", \"+\", \"-\".repeat(100), \"+\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder listToShow \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        listToShow.append(DIVIDER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : ModuleManager.getModuleList()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listToShow.append(String.format(\"%s\\n\", module.getModuleCode()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        listToShow.append(DIVIDER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return listToShow.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 73
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/ExceptionMessage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ExceptionMessage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE_ADD \u003d \"ALERT! The module already existed.\\n\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Alert! Module is not found.\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_MODULE_CODE \u003d \"ALERT! Module code is missing.\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EXCESS_PARAMETERS \u003d \"ALERT! Too many parameters.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INPUT_LENGTH_EXCEEDED \u003d \"ALERT! Enter less than 100 characters.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUT \u003d \"ALERT! Enter a command.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"ALERT! Unrecognised command.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 17
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE_ADD \u003d \"ALERT! The module already existed\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Alert! Module is not found\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_LOGO \u003d \"      ___          ___          ___          ___     \\n\" +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            \"     /__/\\\\        /__/\\\\        /__/|        /  /\\\\    \\n\" +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            \"     \\\\  \\\\:\\\\       \\\\  \\\\:\\\\      |  |:|       /  /:/_   \\n\" +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            \"      \\\\  \\\\:\\\\       \\\\  \\\\:\\\\     |  |:|      /  /:/ /\\\\  \\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            \"  _____\\\\__\\\\:\\\\  ___  \\\\  \\\\:\\\\  __|  |:|     /  /:/ /:/_ \\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            \" /__/::::::::\\\\/__/\\\\  \\\\__\\\\:\\\\/__/\\\\_|:|____/__/:/ /:/ /\\\\\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            \" \\\\  \\\\:\\\\~~\\\\~~\\\\/\\\\  \\\\:\\\\ /  /:/\\\\  \\\\:\\\\/:::::/\\\\  \\\\:\\\\/:/ /:/\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            \"  \\\\  \\\\:\\\\  ~~~  \\\\  \\\\:\\\\  /:/  \\\\  \\\\::/~~~~  \\\\  \\\\::/ /:/ \\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            \"   \\\\  \\\\:\\\\       \\\\  \\\\:\\\\/:/    \\\\  \\\\:\\\\       \\\\  \\\\:\\\\/:/  \\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            \"    \\\\  \\\\:\\\\       \\\\  \\\\::/      \\\\  \\\\:\\\\       \\\\  \\\\::/   \\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            \"     \\\\__\\\\/        \\\\__\\\\/        \\\\__\\\\/        \\\\__\\\\/    \\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_WELCOME_1 \u003d \"Welcome to NUKE\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_WELCOME_2 \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_FAREWELL \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String MESSAGE_ADD_MODULE_SUCCESS(String moduleCode, String title) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! Module %s %s has been added.\\n\", moduleCode, title);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String MESSAGE_DELETE_MODULE_SUCCESS(String moduleCode, String title) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! Module %s %s has been deleted.\\n\", moduleCode, title);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_SHOW_TASKS \u003d \"Here are ALL your tasks.\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 10,
      "A11riseforme": 12,
      "iceclementi": 11
    }
  },
  {
    "path": "src/test/java/seedu/nuke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/nuke/format/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.format;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    DateTimeTest() throws DateTimeFormat.InvalidTimeException, DateTimeFormat.InvalidDateException {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    DateTime dateTime \u003d new DateTime(DateTimeFormat.stringToDate(\"08082020\"), DateTimeFormat.stringToTime(\"4:38PM\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"08/08/2020\", dateTime.getDate());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"04:38PM\", dateTime.getTime());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getDateInSortFormat() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"20200808\", dateTime.getDateInSortFormat());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getTimeInSortFormat() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"1638\", dateTime.getTimeInSortFormat());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isOn_onDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"8/8\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isOn(toCompare));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isOn_notOnDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"12-09-20\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isOn(toCompare));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isBefore_beforeDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"09/09\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isBefore(toCompare));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isBefore_notBeforeDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"3/6/1997\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isBefore(toCompare));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isAfter_afterDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"3/6/1997\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isAfter(toCompare));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isAfter_notAfterDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"09/09\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isAfter(toCompare));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime today \u003d new DateTime(LocalDate.now(), LocalTime.now());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime tomorrow \u003d new DateTime(LocalDate.now().plusDays(1), LocalTime.now());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime yesterday \u003d new DateTime(LocalDate.now().minusDays(1), LocalTime.now());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime weekAfter \u003d new DateTime(LocalDate.now().plusWeeks(1), LocalTime.now());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime weekBefore \u003d new DateTime(LocalDate.now().minusWeeks(1), LocalTime.now());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"today \" + today.getTime() + \" [OVER!!]\", today.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"tomorrow \" + tomorrow.getTime(), tomorrow.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(yesterday.getDate() + \" \" + yesterday.getTime() + \" [OVER!!]\", yesterday.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(weekAfter.getDate() + \" \" + weekAfter.getTime(), weekAfter.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(weekBefore.getDate() + \" \" + weekBefore.getTime() + \" [OVER!!]\", weekBefore.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 88
    }
  }
]
